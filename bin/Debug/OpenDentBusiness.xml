<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpenDentBusiness</name>
    </assembly>
    <members>
        <member name="F:OpenDentBusiness.InsFilingCodeSubtypeC.listt">
            <summary>A list of all insurance filing code subtypes.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeC.listt">
            <summary>A list of all insurance filing codes.</summary>
        </member>
        <member name="T:OpenDentBusiness.CrudTableAttribute">
            <summary>Crud table attributes cannot be used by inherited classes because some properties would not work if they were inherited.
            Simply add the desired attributes to the "inheriting" class which will effectively override the attribute.</summary>
        </member>
        <member name="P:OpenDentBusiness.CrudTableAttribute.TableName">
            <summary>If tablename is different than the lowercase class name.</summary>
        </member>
        <member name="P:OpenDentBusiness.CrudTableAttribute.IsDeleteForbidden">
            <summary>Set to true for tables where rows are not deleted.</summary>
        </member>
        <member name="P:OpenDentBusiness.CrudTableAttribute.IsMissingInGeneral">
            <summary>Set to true for tables that are part of internal tools and not found in the general release.  The Crud generator will gracefully skip these tables if missing from the database that it's running against.  It also won't try to generate a dataInterface s class.</summary>
        </member>
        <member name="P:OpenDentBusiness.CrudTableAttribute.IsMobile">
            <summary>Set to true for tables that are used on server for mobile services.  These are 'lite' versions of the main tables, and end with m.  A composite primary key will be expected.  The Crud generator will generate these crud files in a different place than the other crud files.  It will also generate the dataInterface 'ms' class to a different location.  It also won't validate that the table exists in the test database.</summary>
        </member>
        <member name="P:OpenDentBusiness.CrudTableAttribute.IsSynchable">
            <summary>Set to true for tables that are used on server for mobile services.  These are 'lite' versions of the main tables, and end with m.  A composite primary key will be expected.  The Crud generator will generate these crud files in a different place than the other crud files.  It will also generate the dataInterface 'ms' class to a different location.  It also won't validate that the table exists in the test database.</summary>
        </member>
        <member name="P:OpenDentBusiness.CrudTableAttribute.AuditPerms">
            <summary>Enum containing all permissions used as an FKey entry for the Securitylog table.
            The Crud generator uses these to add an additional function call to Delete(), and a new function ClearFkey() to ensure that securitylog FKeys 
              are not orphaned.</summary>
        </member>
        <member name="P:OpenDentBusiness.CrudTableAttribute.IsSecurityStamped">
            <summary>If IsSecurityStamped is true, the table must include the field SecUserNumEntry.
            <para>If IsSynchable and IsSecurityStamped are BOTH true, the Crud generator will create a Sync function that takes userNum and sets the
            SecUserNumEntry field before inserting.  Security.CurUser isn't accessible from the Crud due to remoting role, must be passed in.</para>
            <para>IsSecurityStamped is ignored if IsSynchable is false.</para></summary>
        </member>
        <member name="T:OpenDentBusiness.CrudAuditPerm">
            <summary>Hard coded list of all permission names that are used for securitylog.FKey.  Uses 2^n values for use in bitwise operations.
            This enum can only hold 31 permissions (and none) before we will need to create a new one.  Instead of creating a new enum, we could instead
            create a new table to hold a composite key between the permission type the table name and foreign key.</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudAuditPerm.None">
            <summary>Perm#:0 - Value:0</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudAuditPerm.AppointmentCompleteEdit">
            <summary>Perm#:1 - Value:1</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudAuditPerm.AppointmentCreate">
            <summary>Perm#:2 - Value:2</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudAuditPerm.AppointmentEdit">
            <summary>Perm#:3 - Value:4</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudAuditPerm.AppointmentMove">
            <summary>Perm#:4 - Value:8</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudAuditPerm.ClaimHistoryEdit">
            <summary>Perm#:5 - Value:16</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudAuditPerm.ImageDelete">
            <summary>Perm#:6 - Value:32</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudAuditPerm.ImageEdit">
            <summary>Perm#:7 - Value:64</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudAuditPerm.InsPlanChangeCarrierName">
            <summary>Perm#:8 - Value:128</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudAuditPerm.RxCreate">
            <summary>Perm#:9 - Value:256</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudAuditPerm.RxEdit">
            <summary>Perm#:10 - Value:512</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudAuditPerm.TaskNoteEdit">
            <summary>Perm#:11 - Value:1024</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudAuditPerm.PatientPortal">
            <summary>Perm#:12 - Value:2048</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudAuditPerm.ProcFeeEdit">
            <summary>Perm#:13 - Value:4096</summary>
        </member>
        <member name="P:OpenDentBusiness.CrudColumnAttribute.IsPriKeyMobile1">
            <summary>Always present in a mobile table.  Always CustomerNum, FK to PatNum.</summary>
        </member>
        <member name="P:OpenDentBusiness.CrudColumnAttribute.IsPriKeyMobile2">
            <summary>Always present in a mobile table.  Always the ordinary priKey of the table, used together with CustomerNum.</summary>
        </member>
        <member name="T:OpenDentBusiness.CrudSpecialColType">
            <summary>There are also some patterns we follow that do not require special types.  For enums, crud automatically generates tinyint.  For itemorders, we manually change mysql type to smallint?.  </summary>
        </member>
        <member name="F:OpenDentBusiness.CrudSpecialColType.DateEntry">
            <summary>User not allowed to change.  Insert uses NOW(), Update exludes this column, Select treats this like a date.</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudSpecialColType.DateEntryEditable">
            <summary>Insert uses NOW(), Update and Select treat this like a Date.</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudSpecialColType.TimeStamp">
            <summary>Is set and updated by MySQL.  Leave these columns completely out of Insert and Update statements.  The name of the column must be exactly: DateTStamp for the crud schema logic to work.</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudSpecialColType.DateT">
            <summary>Same C# type as Date, but the MySQL database uses datetime instead of date.</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudSpecialColType.DateTEntry">
            <summary>User not allowed to change.  Insert uses NOW(), Update exludes this column, Select treats this like a DateT.</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudSpecialColType.DateTEntryEditable">
            <summary>Insert uses NOW(), Update and Select treat this like a DateT.</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudSpecialColType.TinyIntSigned">
            <summary>Database type is tinyint signed.  C# type is int.  Range -128 to 127.  The validation does not check to make sure the db is signed.  The programmer must do that.  So far, only used for percent fields because -1 is required to be accepted.  For most other fields, such as enums and itemorders, the solution is to change the field in C# to a byte, indicating a range of 0-255.  It usually doesn't matter whether the database accepts values to 255 or only to 127.  The validation does not check that.</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudSpecialColType.ExcludeFromUpdate">
            <summary>We do not want this column updated except as part of a separate routine.  Warning! The logic fails if this is used on the last column in a table.</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudSpecialColType.EnumAsString">
            <summary>Instead of storing this enum as an int in the db, it is stored as a string.  Very rarely used.</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudSpecialColType.TimeSpanNeg">
            <summary>DEPRECATED. See TimeSpanLong. For most C# TimeSpans, the default db type is TimeOfDay.  But for the few that need to use negative values or values greater than 24 hours, they get marked as this special type.  Handled differently in MySQL vs Oracle.</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudSpecialColType.TextIsClob">
            <summary>Many C# strings are varchar(255).  Most longer ones are mysql text or oracle varchar2.  But if they might go over 4000 char, then in oracle, they must be clob.  Clobs are handled significantly differently in oracle, so we are tracking those.  There is also a consideration for columns in mysql that might go over 65,000 char, but we do not need to track those in C#.</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudSpecialColType.TextIsClobNote">
            <summary>This mimics the behavior of the TextIsClob attribute with the following additional functionality.  If the text contains 50 or more consecutive new line characters, the insert and update crud calls will replace them with a single new line.  If the control tries to display a very large number of new line characters, graphics memory errors may occur when trying to measure the height of the string.  This attribute should only be used for large note fields that the user is allowed to type into manually.  Not for base64 text or other programatically generated text.</summary>
        </member>
        <member name="F:OpenDentBusiness.CrudSpecialColType.TimeSpanLong">
            <summary>MySQL 5.5 limits TimeSpan to 838:59:59 which is 34 days 6 hours. Use this tag to store the timespan as a bigint/long in the DB as a number of ticks. 1 Tick = 1/10 ms.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountCrud.SelectOne(System.Int64)">
            <summary>Gets one Account object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountCrud.SelectOne(System.String)">
            <summary>Gets one Account object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountCrud.SelectMany(System.String)">
            <summary>Gets a list of Account objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Account},System.String)">
            <summary>Converts a list of Account into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountCrud.Insert(OpenDentBusiness.Account)">
            <summary>Inserts one Account into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountCrud.Insert(OpenDentBusiness.Account,System.Boolean)">
            <summary>Inserts one Account into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountCrud.InsertNoCache(OpenDentBusiness.Account)">
            <summary>Inserts one Account into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountCrud.InsertNoCache(OpenDentBusiness.Account,System.Boolean)">
            <summary>Inserts one Account into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountCrud.Update(OpenDentBusiness.Account)">
            <summary>Updates one Account in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountCrud.Update(OpenDentBusiness.Account,OpenDentBusiness.Account)">
            <summary>Updates one Account in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountCrud.UpdateComparison(OpenDentBusiness.Account,OpenDentBusiness.Account)">
            <summary>Returns true if Update(Account,Account) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountCrud.Delete(System.Int64)">
            <summary>Deletes one Account from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountingAutoPayCrud.SelectOne(System.Int64)">
            <summary>Gets one AccountingAutoPay object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountingAutoPayCrud.SelectOne(System.String)">
            <summary>Gets one AccountingAutoPay object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountingAutoPayCrud.SelectMany(System.String)">
            <summary>Gets a list of AccountingAutoPay objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountingAutoPayCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountingAutoPayCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.AccountingAutoPay},System.String)">
            <summary>Converts a list of AccountingAutoPay into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountingAutoPayCrud.Insert(OpenDentBusiness.AccountingAutoPay)">
            <summary>Inserts one AccountingAutoPay into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountingAutoPayCrud.Insert(OpenDentBusiness.AccountingAutoPay,System.Boolean)">
            <summary>Inserts one AccountingAutoPay into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountingAutoPayCrud.InsertNoCache(OpenDentBusiness.AccountingAutoPay)">
            <summary>Inserts one AccountingAutoPay into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountingAutoPayCrud.InsertNoCache(OpenDentBusiness.AccountingAutoPay,System.Boolean)">
            <summary>Inserts one AccountingAutoPay into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountingAutoPayCrud.Update(OpenDentBusiness.AccountingAutoPay)">
            <summary>Updates one AccountingAutoPay in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountingAutoPayCrud.Update(OpenDentBusiness.AccountingAutoPay,OpenDentBusiness.AccountingAutoPay)">
            <summary>Updates one AccountingAutoPay in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountingAutoPayCrud.UpdateComparison(OpenDentBusiness.AccountingAutoPay,OpenDentBusiness.AccountingAutoPay)">
            <summary>Returns true if Update(AccountingAutoPay,AccountingAutoPay) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AccountingAutoPayCrud.Delete(System.Int64)">
            <summary>Deletes one AccountingAutoPay from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AdjustmentCrud.SelectOne(System.Int64)">
            <summary>Gets one Adjustment object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AdjustmentCrud.SelectOne(System.String)">
            <summary>Gets one Adjustment object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AdjustmentCrud.SelectMany(System.String)">
            <summary>Gets a list of Adjustment objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AdjustmentCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AdjustmentCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Adjustment},System.String)">
            <summary>Converts a list of Adjustment into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AdjustmentCrud.Insert(OpenDentBusiness.Adjustment)">
            <summary>Inserts one Adjustment into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AdjustmentCrud.Insert(OpenDentBusiness.Adjustment,System.Boolean)">
            <summary>Inserts one Adjustment into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AdjustmentCrud.InsertNoCache(OpenDentBusiness.Adjustment)">
            <summary>Inserts one Adjustment into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AdjustmentCrud.InsertNoCache(OpenDentBusiness.Adjustment,System.Boolean)">
            <summary>Inserts one Adjustment into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AdjustmentCrud.Update(OpenDentBusiness.Adjustment)">
            <summary>Updates one Adjustment in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AdjustmentCrud.Update(OpenDentBusiness.Adjustment,OpenDentBusiness.Adjustment)">
            <summary>Updates one Adjustment in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AdjustmentCrud.UpdateComparison(OpenDentBusiness.Adjustment,OpenDentBusiness.Adjustment)">
            <summary>Returns true if Update(Adjustment,Adjustment) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AdjustmentCrud.Delete(System.Int64)">
            <summary>Deletes one Adjustment from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertItemCrud.SelectOne(System.Int64)">
            <summary>Gets one AlertItem object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertItemCrud.SelectOne(System.String)">
            <summary>Gets one AlertItem object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertItemCrud.SelectMany(System.String)">
            <summary>Gets a list of AlertItem objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertItemCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertItemCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.AlertItem},System.String)">
            <summary>Converts a list of AlertItem into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertItemCrud.Insert(OpenDentBusiness.AlertItem)">
            <summary>Inserts one AlertItem into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertItemCrud.Insert(OpenDentBusiness.AlertItem,System.Boolean)">
            <summary>Inserts one AlertItem into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertItemCrud.InsertNoCache(OpenDentBusiness.AlertItem)">
            <summary>Inserts one AlertItem into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertItemCrud.InsertNoCache(OpenDentBusiness.AlertItem,System.Boolean)">
            <summary>Inserts one AlertItem into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertItemCrud.Update(OpenDentBusiness.AlertItem)">
            <summary>Updates one AlertItem in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertItemCrud.Update(OpenDentBusiness.AlertItem,OpenDentBusiness.AlertItem)">
            <summary>Updates one AlertItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertItemCrud.UpdateComparison(OpenDentBusiness.AlertItem,OpenDentBusiness.AlertItem)">
            <summary>Returns true if Update(AlertItem,AlertItem) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertItemCrud.Delete(System.Int64)">
            <summary>Deletes one AlertItem from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertItemCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.AlertItem},System.Collections.Generic.List{OpenDentBusiness.AlertItem})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertReadCrud.SelectOne(System.Int64)">
            <summary>Gets one AlertRead object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertReadCrud.SelectOne(System.String)">
            <summary>Gets one AlertRead object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertReadCrud.SelectMany(System.String)">
            <summary>Gets a list of AlertRead objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertReadCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertReadCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.AlertRead},System.String)">
            <summary>Converts a list of AlertRead into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertReadCrud.Insert(OpenDentBusiness.AlertRead)">
            <summary>Inserts one AlertRead into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertReadCrud.Insert(OpenDentBusiness.AlertRead,System.Boolean)">
            <summary>Inserts one AlertRead into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertReadCrud.InsertNoCache(OpenDentBusiness.AlertRead)">
            <summary>Inserts one AlertRead into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertReadCrud.InsertNoCache(OpenDentBusiness.AlertRead,System.Boolean)">
            <summary>Inserts one AlertRead into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertReadCrud.Update(OpenDentBusiness.AlertRead)">
            <summary>Updates one AlertRead in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertReadCrud.Update(OpenDentBusiness.AlertRead,OpenDentBusiness.AlertRead)">
            <summary>Updates one AlertRead in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertReadCrud.UpdateComparison(OpenDentBusiness.AlertRead,OpenDentBusiness.AlertRead)">
            <summary>Returns true if Update(AlertRead,AlertRead) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertReadCrud.Delete(System.Int64)">
            <summary>Deletes one AlertRead from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertReadCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.AlertRead},System.Collections.Generic.List{OpenDentBusiness.AlertRead})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertSubCrud.SelectOne(System.Int64)">
            <summary>Gets one AlertSub object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertSubCrud.SelectOne(System.String)">
            <summary>Gets one AlertSub object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertSubCrud.SelectMany(System.String)">
            <summary>Gets a list of AlertSub objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertSubCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertSubCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.AlertSub},System.String)">
            <summary>Converts a list of AlertSub into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertSubCrud.Insert(OpenDentBusiness.AlertSub)">
            <summary>Inserts one AlertSub into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertSubCrud.Insert(OpenDentBusiness.AlertSub,System.Boolean)">
            <summary>Inserts one AlertSub into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertSubCrud.InsertNoCache(OpenDentBusiness.AlertSub)">
            <summary>Inserts one AlertSub into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertSubCrud.InsertNoCache(OpenDentBusiness.AlertSub,System.Boolean)">
            <summary>Inserts one AlertSub into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertSubCrud.Update(OpenDentBusiness.AlertSub)">
            <summary>Updates one AlertSub in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertSubCrud.Update(OpenDentBusiness.AlertSub,OpenDentBusiness.AlertSub)">
            <summary>Updates one AlertSub in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertSubCrud.UpdateComparison(OpenDentBusiness.AlertSub,OpenDentBusiness.AlertSub)">
            <summary>Returns true if Update(AlertSub,AlertSub) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertSubCrud.Delete(System.Int64)">
            <summary>Deletes one AlertSub from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AlertSubCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.AlertSub},System.Collections.Generic.List{OpenDentBusiness.AlertSub})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyCrud.SelectOne(System.Int64)">
            <summary>Gets one Allergy object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyCrud.SelectOne(System.String)">
            <summary>Gets one Allergy object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyCrud.SelectMany(System.String)">
            <summary>Gets a list of Allergy objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Allergy},System.String)">
            <summary>Converts a list of Allergy into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyCrud.Insert(OpenDentBusiness.Allergy)">
            <summary>Inserts one Allergy into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyCrud.Insert(OpenDentBusiness.Allergy,System.Boolean)">
            <summary>Inserts one Allergy into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyCrud.InsertNoCache(OpenDentBusiness.Allergy)">
            <summary>Inserts one Allergy into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyCrud.InsertNoCache(OpenDentBusiness.Allergy,System.Boolean)">
            <summary>Inserts one Allergy into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyCrud.Update(OpenDentBusiness.Allergy)">
            <summary>Updates one Allergy in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyCrud.Update(OpenDentBusiness.Allergy,OpenDentBusiness.Allergy)">
            <summary>Updates one Allergy in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyCrud.UpdateComparison(OpenDentBusiness.Allergy,OpenDentBusiness.Allergy)">
            <summary>Returns true if Update(Allergy,Allergy) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyCrud.Delete(System.Int64)">
            <summary>Deletes one Allergy from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyDefCrud.SelectOne(System.Int64)">
            <summary>Gets one AllergyDef object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyDefCrud.SelectOne(System.String)">
            <summary>Gets one AllergyDef object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyDefCrud.SelectMany(System.String)">
            <summary>Gets a list of AllergyDef objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyDefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyDefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.AllergyDef},System.String)">
            <summary>Converts a list of AllergyDef into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyDefCrud.Insert(OpenDentBusiness.AllergyDef)">
            <summary>Inserts one AllergyDef into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyDefCrud.Insert(OpenDentBusiness.AllergyDef,System.Boolean)">
            <summary>Inserts one AllergyDef into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyDefCrud.InsertNoCache(OpenDentBusiness.AllergyDef)">
            <summary>Inserts one AllergyDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyDefCrud.InsertNoCache(OpenDentBusiness.AllergyDef,System.Boolean)">
            <summary>Inserts one AllergyDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyDefCrud.Update(OpenDentBusiness.AllergyDef)">
            <summary>Updates one AllergyDef in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyDefCrud.Update(OpenDentBusiness.AllergyDef,OpenDentBusiness.AllergyDef)">
            <summary>Updates one AllergyDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyDefCrud.UpdateComparison(OpenDentBusiness.AllergyDef,OpenDentBusiness.AllergyDef)">
            <summary>Returns true if Update(AllergyDef,AllergyDef) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AllergyDefCrud.Delete(System.Int64)">
            <summary>Deletes one AllergyDef from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentCrud.SelectOne(System.Int64)">
            <summary>Gets one Appointment object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentCrud.SelectOne(System.String)">
            <summary>Gets one Appointment object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentCrud.SelectMany(System.String)">
            <summary>Gets a list of Appointment objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Appointment},System.String)">
            <summary>Converts a list of Appointment into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentCrud.Insert(OpenDentBusiness.Appointment)">
            <summary>Inserts one Appointment into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentCrud.Insert(OpenDentBusiness.Appointment,System.Boolean)">
            <summary>Inserts one Appointment into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentCrud.InsertNoCache(OpenDentBusiness.Appointment)">
            <summary>Inserts one Appointment into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentCrud.InsertNoCache(OpenDentBusiness.Appointment,System.Boolean)">
            <summary>Inserts one Appointment into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentCrud.Update(OpenDentBusiness.Appointment)">
            <summary>Updates one Appointment in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentCrud.Update(OpenDentBusiness.Appointment,OpenDentBusiness.Appointment)">
            <summary>Updates one Appointment in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentCrud.UpdateComparison(OpenDentBusiness.Appointment,OpenDentBusiness.Appointment)">
            <summary>Returns true if Update(Appointment,Appointment) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.Appointment},System.Collections.Generic.List{OpenDentBusiness.Appointment},System.Int64)">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.
            Supply Security.CurUser.UserNum, used to set the SecUserNumEntry field for Inserts.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentCrud.ClearFkey(System.Int64)">
            <summary>Zeros securitylog FKey column for rows that are using the matching aptNum as FKey and are related to Appointment.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Appointment table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentCrud.ClearFkey(System.Collections.Generic.List{System.Int64})">
            <summary>Zeros securitylog FKey column for rows that are using the matching aptNums as FKey and are related to Appointment.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Appointment table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentDeletedCrud.SelectOne(System.Int64)">
            <summary>Gets one AppointmentDeleted object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentDeletedCrud.SelectOne(System.String)">
            <summary>Gets one AppointmentDeleted object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentDeletedCrud.SelectMany(System.String)">
            <summary>Gets a list of AppointmentDeleted objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentDeletedCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentDeletedCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.AppointmentDeleted},System.String)">
            <summary>Converts a list of AppointmentDeleted into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentDeletedCrud.Insert(OpenDentBusiness.AppointmentDeleted)">
            <summary>Inserts one AppointmentDeleted into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentDeletedCrud.Insert(OpenDentBusiness.AppointmentDeleted,System.Boolean)">
            <summary>Inserts one AppointmentDeleted into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentDeletedCrud.InsertNoCache(OpenDentBusiness.AppointmentDeleted)">
            <summary>Inserts one AppointmentDeleted into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentDeletedCrud.InsertNoCache(OpenDentBusiness.AppointmentDeleted,System.Boolean)">
            <summary>Inserts one AppointmentDeleted into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentDeletedCrud.Update(OpenDentBusiness.AppointmentDeleted)">
            <summary>Updates one AppointmentDeleted in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentDeletedCrud.Update(OpenDentBusiness.AppointmentDeleted,OpenDentBusiness.AppointmentDeleted)">
            <summary>Updates one AppointmentDeleted in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentDeletedCrud.UpdateComparison(OpenDentBusiness.AppointmentDeleted,OpenDentBusiness.AppointmentDeleted)">
            <summary>Returns true if Update(AppointmentDeleted,AppointmentDeleted) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentDeletedCrud.Delete(System.Int64)">
            <summary>Deletes one AppointmentDeleted from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentRuleCrud.SelectOne(System.Int64)">
            <summary>Gets one AppointmentRule object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentRuleCrud.SelectOne(System.String)">
            <summary>Gets one AppointmentRule object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentRuleCrud.SelectMany(System.String)">
            <summary>Gets a list of AppointmentRule objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentRuleCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentRuleCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.AppointmentRule},System.String)">
            <summary>Converts a list of AppointmentRule into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentRuleCrud.Insert(OpenDentBusiness.AppointmentRule)">
            <summary>Inserts one AppointmentRule into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentRuleCrud.Insert(OpenDentBusiness.AppointmentRule,System.Boolean)">
            <summary>Inserts one AppointmentRule into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentRuleCrud.InsertNoCache(OpenDentBusiness.AppointmentRule)">
            <summary>Inserts one AppointmentRule into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentRuleCrud.InsertNoCache(OpenDentBusiness.AppointmentRule,System.Boolean)">
            <summary>Inserts one AppointmentRule into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentRuleCrud.Update(OpenDentBusiness.AppointmentRule)">
            <summary>Updates one AppointmentRule in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentRuleCrud.Update(OpenDentBusiness.AppointmentRule,OpenDentBusiness.AppointmentRule)">
            <summary>Updates one AppointmentRule in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentRuleCrud.UpdateComparison(OpenDentBusiness.AppointmentRule,OpenDentBusiness.AppointmentRule)">
            <summary>Returns true if Update(AppointmentRule,AppointmentRule) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentRuleCrud.Delete(System.Int64)">
            <summary>Deletes one AppointmentRule from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentTypeCrud.SelectOne(System.Int64)">
            <summary>Gets one AppointmentType object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentTypeCrud.SelectOne(System.String)">
            <summary>Gets one AppointmentType object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentTypeCrud.SelectMany(System.String)">
            <summary>Gets a list of AppointmentType objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentTypeCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentTypeCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.AppointmentType},System.String)">
            <summary>Converts a list of AppointmentType into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentTypeCrud.Insert(OpenDentBusiness.AppointmentType)">
            <summary>Inserts one AppointmentType into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentTypeCrud.Insert(OpenDentBusiness.AppointmentType,System.Boolean)">
            <summary>Inserts one AppointmentType into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentTypeCrud.InsertNoCache(OpenDentBusiness.AppointmentType)">
            <summary>Inserts one AppointmentType into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentTypeCrud.InsertNoCache(OpenDentBusiness.AppointmentType,System.Boolean)">
            <summary>Inserts one AppointmentType into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentTypeCrud.Update(OpenDentBusiness.AppointmentType)">
            <summary>Updates one AppointmentType in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentTypeCrud.Update(OpenDentBusiness.AppointmentType,OpenDentBusiness.AppointmentType)">
            <summary>Updates one AppointmentType in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentTypeCrud.UpdateComparison(OpenDentBusiness.AppointmentType,OpenDentBusiness.AppointmentType)">
            <summary>Returns true if Update(AppointmentType,AppointmentType) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentTypeCrud.Delete(System.Int64)">
            <summary>Deletes one AppointmentType from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AppointmentTypeCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.AppointmentType},System.Collections.Generic.List{OpenDentBusiness.AppointmentType})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldCrud.SelectOne(System.Int64)">
            <summary>Gets one ApptField object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldCrud.SelectOne(System.String)">
            <summary>Gets one ApptField object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldCrud.SelectMany(System.String)">
            <summary>Gets a list of ApptField objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ApptField},System.String)">
            <summary>Converts a list of ApptField into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldCrud.Insert(OpenDentBusiness.ApptField)">
            <summary>Inserts one ApptField into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldCrud.Insert(OpenDentBusiness.ApptField,System.Boolean)">
            <summary>Inserts one ApptField into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldCrud.InsertNoCache(OpenDentBusiness.ApptField)">
            <summary>Inserts one ApptField into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldCrud.InsertNoCache(OpenDentBusiness.ApptField,System.Boolean)">
            <summary>Inserts one ApptField into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldCrud.Update(OpenDentBusiness.ApptField)">
            <summary>Updates one ApptField in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldCrud.Update(OpenDentBusiness.ApptField,OpenDentBusiness.ApptField)">
            <summary>Updates one ApptField in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldCrud.UpdateComparison(OpenDentBusiness.ApptField,OpenDentBusiness.ApptField)">
            <summary>Returns true if Update(ApptField,ApptField) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldCrud.Delete(System.Int64)">
            <summary>Deletes one ApptField from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldDefCrud.SelectOne(System.Int64)">
            <summary>Gets one ApptFieldDef object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldDefCrud.SelectOne(System.String)">
            <summary>Gets one ApptFieldDef object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldDefCrud.SelectMany(System.String)">
            <summary>Gets a list of ApptFieldDef objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldDefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldDefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ApptFieldDef},System.String)">
            <summary>Converts a list of ApptFieldDef into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldDefCrud.Insert(OpenDentBusiness.ApptFieldDef)">
            <summary>Inserts one ApptFieldDef into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldDefCrud.Insert(OpenDentBusiness.ApptFieldDef,System.Boolean)">
            <summary>Inserts one ApptFieldDef into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldDefCrud.InsertNoCache(OpenDentBusiness.ApptFieldDef)">
            <summary>Inserts one ApptFieldDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldDefCrud.InsertNoCache(OpenDentBusiness.ApptFieldDef,System.Boolean)">
            <summary>Inserts one ApptFieldDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldDefCrud.Update(OpenDentBusiness.ApptFieldDef)">
            <summary>Updates one ApptFieldDef in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldDefCrud.Update(OpenDentBusiness.ApptFieldDef,OpenDentBusiness.ApptFieldDef)">
            <summary>Updates one ApptFieldDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldDefCrud.UpdateComparison(OpenDentBusiness.ApptFieldDef,OpenDentBusiness.ApptFieldDef)">
            <summary>Returns true if Update(ApptFieldDef,ApptFieldDef) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptFieldDefCrud.Delete(System.Int64)">
            <summary>Deletes one ApptFieldDef from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderRuleCrud.SelectOne(System.Int64)">
            <summary>Gets one ApptReminderRule object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderRuleCrud.SelectOne(System.String)">
            <summary>Gets one ApptReminderRule object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderRuleCrud.SelectMany(System.String)">
            <summary>Gets a list of ApptReminderRule objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderRuleCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderRuleCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ApptReminderRule},System.String)">
            <summary>Converts a list of ApptReminderRule into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderRuleCrud.Insert(OpenDentBusiness.ApptReminderRule)">
            <summary>Inserts one ApptReminderRule into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderRuleCrud.Insert(OpenDentBusiness.ApptReminderRule,System.Boolean)">
            <summary>Inserts one ApptReminderRule into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderRuleCrud.InsertNoCache(OpenDentBusiness.ApptReminderRule)">
            <summary>Inserts one ApptReminderRule into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderRuleCrud.InsertNoCache(OpenDentBusiness.ApptReminderRule,System.Boolean)">
            <summary>Inserts one ApptReminderRule into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderRuleCrud.Update(OpenDentBusiness.ApptReminderRule)">
            <summary>Updates one ApptReminderRule in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderRuleCrud.Update(OpenDentBusiness.ApptReminderRule,OpenDentBusiness.ApptReminderRule)">
            <summary>Updates one ApptReminderRule in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderRuleCrud.UpdateComparison(OpenDentBusiness.ApptReminderRule,OpenDentBusiness.ApptReminderRule)">
            <summary>Returns true if Update(ApptReminderRule,ApptReminderRule) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderRuleCrud.Delete(System.Int64)">
            <summary>Deletes one ApptReminderRule from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderRuleCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.ApptReminderRule},System.Collections.Generic.List{OpenDentBusiness.ApptReminderRule})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderSentCrud.SelectOne(System.Int64)">
            <summary>Gets one ApptReminderSent object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderSentCrud.SelectOne(System.String)">
            <summary>Gets one ApptReminderSent object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderSentCrud.SelectMany(System.String)">
            <summary>Gets a list of ApptReminderSent objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderSentCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderSentCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ApptReminderSent},System.String)">
            <summary>Converts a list of ApptReminderSent into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderSentCrud.Insert(OpenDentBusiness.ApptReminderSent)">
            <summary>Inserts one ApptReminderSent into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderSentCrud.Insert(OpenDentBusiness.ApptReminderSent,System.Boolean)">
            <summary>Inserts one ApptReminderSent into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderSentCrud.InsertNoCache(OpenDentBusiness.ApptReminderSent)">
            <summary>Inserts one ApptReminderSent into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderSentCrud.InsertNoCache(OpenDentBusiness.ApptReminderSent,System.Boolean)">
            <summary>Inserts one ApptReminderSent into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderSentCrud.Update(OpenDentBusiness.ApptReminderSent)">
            <summary>Updates one ApptReminderSent in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderSentCrud.Update(OpenDentBusiness.ApptReminderSent,OpenDentBusiness.ApptReminderSent)">
            <summary>Updates one ApptReminderSent in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderSentCrud.UpdateComparison(OpenDentBusiness.ApptReminderSent,OpenDentBusiness.ApptReminderSent)">
            <summary>Returns true if Update(ApptReminderSent,ApptReminderSent) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptReminderSentCrud.Delete(System.Int64)">
            <summary>Deletes one ApptReminderSent from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewCrud.SelectOne(System.Int64)">
            <summary>Gets one ApptView object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewCrud.SelectOne(System.String)">
            <summary>Gets one ApptView object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewCrud.SelectMany(System.String)">
            <summary>Gets a list of ApptView objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ApptView},System.String)">
            <summary>Converts a list of ApptView into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewCrud.Insert(OpenDentBusiness.ApptView)">
            <summary>Inserts one ApptView into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewCrud.Insert(OpenDentBusiness.ApptView,System.Boolean)">
            <summary>Inserts one ApptView into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewCrud.InsertNoCache(OpenDentBusiness.ApptView)">
            <summary>Inserts one ApptView into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewCrud.InsertNoCache(OpenDentBusiness.ApptView,System.Boolean)">
            <summary>Inserts one ApptView into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewCrud.Update(OpenDentBusiness.ApptView)">
            <summary>Updates one ApptView in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewCrud.Update(OpenDentBusiness.ApptView,OpenDentBusiness.ApptView)">
            <summary>Updates one ApptView in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewCrud.UpdateComparison(OpenDentBusiness.ApptView,OpenDentBusiness.ApptView)">
            <summary>Returns true if Update(ApptView,ApptView) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewCrud.Delete(System.Int64)">
            <summary>Deletes one ApptView from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewItemCrud.SelectOne(System.Int64)">
            <summary>Gets one ApptViewItem object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewItemCrud.SelectOne(System.String)">
            <summary>Gets one ApptViewItem object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewItemCrud.SelectMany(System.String)">
            <summary>Gets a list of ApptViewItem objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewItemCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewItemCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ApptViewItem},System.String)">
            <summary>Converts a list of ApptViewItem into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewItemCrud.Insert(OpenDentBusiness.ApptViewItem)">
            <summary>Inserts one ApptViewItem into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewItemCrud.Insert(OpenDentBusiness.ApptViewItem,System.Boolean)">
            <summary>Inserts one ApptViewItem into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewItemCrud.InsertNoCache(OpenDentBusiness.ApptViewItem)">
            <summary>Inserts one ApptViewItem into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewItemCrud.InsertNoCache(OpenDentBusiness.ApptViewItem,System.Boolean)">
            <summary>Inserts one ApptViewItem into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewItemCrud.Update(OpenDentBusiness.ApptViewItem)">
            <summary>Updates one ApptViewItem in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewItemCrud.Update(OpenDentBusiness.ApptViewItem,OpenDentBusiness.ApptViewItem)">
            <summary>Updates one ApptViewItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewItemCrud.UpdateComparison(OpenDentBusiness.ApptViewItem,OpenDentBusiness.ApptViewItem)">
            <summary>Returns true if Update(ApptViewItem,ApptViewItem) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ApptViewItemCrud.Delete(System.Int64)">
            <summary>Deletes one ApptViewItem from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCondCrud.SelectOne(System.Int64)">
            <summary>Gets one AutoCodeCond object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCondCrud.SelectOne(System.String)">
            <summary>Gets one AutoCodeCond object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCondCrud.SelectMany(System.String)">
            <summary>Gets a list of AutoCodeCond objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCondCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCondCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.AutoCodeCond},System.String)">
            <summary>Converts a list of AutoCodeCond into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCondCrud.Insert(OpenDentBusiness.AutoCodeCond)">
            <summary>Inserts one AutoCodeCond into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCondCrud.Insert(OpenDentBusiness.AutoCodeCond,System.Boolean)">
            <summary>Inserts one AutoCodeCond into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCondCrud.InsertNoCache(OpenDentBusiness.AutoCodeCond)">
            <summary>Inserts one AutoCodeCond into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCondCrud.InsertNoCache(OpenDentBusiness.AutoCodeCond,System.Boolean)">
            <summary>Inserts one AutoCodeCond into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCondCrud.Update(OpenDentBusiness.AutoCodeCond)">
            <summary>Updates one AutoCodeCond in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCondCrud.Update(OpenDentBusiness.AutoCodeCond,OpenDentBusiness.AutoCodeCond)">
            <summary>Updates one AutoCodeCond in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCondCrud.UpdateComparison(OpenDentBusiness.AutoCodeCond,OpenDentBusiness.AutoCodeCond)">
            <summary>Returns true if Update(AutoCodeCond,AutoCodeCond) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCondCrud.Delete(System.Int64)">
            <summary>Deletes one AutoCodeCond from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCrud.SelectOne(System.Int64)">
            <summary>Gets one AutoCode object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCrud.SelectOne(System.String)">
            <summary>Gets one AutoCode object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCrud.SelectMany(System.String)">
            <summary>Gets a list of AutoCode objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.AutoCode},System.String)">
            <summary>Converts a list of AutoCode into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCrud.Insert(OpenDentBusiness.AutoCode)">
            <summary>Inserts one AutoCode into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCrud.Insert(OpenDentBusiness.AutoCode,System.Boolean)">
            <summary>Inserts one AutoCode into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCrud.InsertNoCache(OpenDentBusiness.AutoCode)">
            <summary>Inserts one AutoCode into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCrud.InsertNoCache(OpenDentBusiness.AutoCode,System.Boolean)">
            <summary>Inserts one AutoCode into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCrud.Update(OpenDentBusiness.AutoCode)">
            <summary>Updates one AutoCode in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCrud.Update(OpenDentBusiness.AutoCode,OpenDentBusiness.AutoCode)">
            <summary>Updates one AutoCode in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCrud.UpdateComparison(OpenDentBusiness.AutoCode,OpenDentBusiness.AutoCode)">
            <summary>Returns true if Update(AutoCode,AutoCode) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeCrud.Delete(System.Int64)">
            <summary>Deletes one AutoCode from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeItemCrud.SelectOne(System.Int64)">
            <summary>Gets one AutoCodeItem object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeItemCrud.SelectOne(System.String)">
            <summary>Gets one AutoCodeItem object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeItemCrud.SelectMany(System.String)">
            <summary>Gets a list of AutoCodeItem objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeItemCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeItemCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.AutoCodeItem},System.String)">
            <summary>Converts a list of AutoCodeItem into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeItemCrud.Insert(OpenDentBusiness.AutoCodeItem)">
            <summary>Inserts one AutoCodeItem into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeItemCrud.Insert(OpenDentBusiness.AutoCodeItem,System.Boolean)">
            <summary>Inserts one AutoCodeItem into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeItemCrud.InsertNoCache(OpenDentBusiness.AutoCodeItem)">
            <summary>Inserts one AutoCodeItem into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeItemCrud.InsertNoCache(OpenDentBusiness.AutoCodeItem,System.Boolean)">
            <summary>Inserts one AutoCodeItem into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeItemCrud.Update(OpenDentBusiness.AutoCodeItem)">
            <summary>Updates one AutoCodeItem in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeItemCrud.Update(OpenDentBusiness.AutoCodeItem,OpenDentBusiness.AutoCodeItem)">
            <summary>Updates one AutoCodeItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeItemCrud.UpdateComparison(OpenDentBusiness.AutoCodeItem,OpenDentBusiness.AutoCodeItem)">
            <summary>Returns true if Update(AutoCodeItem,AutoCodeItem) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoCodeItemCrud.Delete(System.Int64)">
            <summary>Deletes one AutoCodeItem from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationConditionCrud.SelectOne(System.Int64)">
            <summary>Gets one AutomationCondition object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationConditionCrud.SelectOne(System.String)">
            <summary>Gets one AutomationCondition object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationConditionCrud.SelectMany(System.String)">
            <summary>Gets a list of AutomationCondition objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationConditionCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationConditionCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.AutomationCondition},System.String)">
            <summary>Converts a list of AutomationCondition into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationConditionCrud.Insert(OpenDentBusiness.AutomationCondition)">
            <summary>Inserts one AutomationCondition into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationConditionCrud.Insert(OpenDentBusiness.AutomationCondition,System.Boolean)">
            <summary>Inserts one AutomationCondition into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationConditionCrud.InsertNoCache(OpenDentBusiness.AutomationCondition)">
            <summary>Inserts one AutomationCondition into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationConditionCrud.InsertNoCache(OpenDentBusiness.AutomationCondition,System.Boolean)">
            <summary>Inserts one AutomationCondition into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationConditionCrud.Update(OpenDentBusiness.AutomationCondition)">
            <summary>Updates one AutomationCondition in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationConditionCrud.Update(OpenDentBusiness.AutomationCondition,OpenDentBusiness.AutomationCondition)">
            <summary>Updates one AutomationCondition in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationConditionCrud.UpdateComparison(OpenDentBusiness.AutomationCondition,OpenDentBusiness.AutomationCondition)">
            <summary>Returns true if Update(AutomationCondition,AutomationCondition) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationConditionCrud.Delete(System.Int64)">
            <summary>Deletes one AutomationCondition from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationCrud.SelectOne(System.Int64)">
            <summary>Gets one Automation object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationCrud.SelectOne(System.String)">
            <summary>Gets one Automation object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationCrud.SelectMany(System.String)">
            <summary>Gets a list of Automation objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Automation},System.String)">
            <summary>Converts a list of Automation into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationCrud.Insert(OpenDentBusiness.Automation)">
            <summary>Inserts one Automation into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationCrud.Insert(OpenDentBusiness.Automation,System.Boolean)">
            <summary>Inserts one Automation into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationCrud.InsertNoCache(OpenDentBusiness.Automation)">
            <summary>Inserts one Automation into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationCrud.InsertNoCache(OpenDentBusiness.Automation,System.Boolean)">
            <summary>Inserts one Automation into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationCrud.Update(OpenDentBusiness.Automation)">
            <summary>Updates one Automation in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationCrud.Update(OpenDentBusiness.Automation,OpenDentBusiness.Automation)">
            <summary>Updates one Automation in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationCrud.UpdateComparison(OpenDentBusiness.Automation,OpenDentBusiness.Automation)">
            <summary>Returns true if Update(Automation,Automation) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutomationCrud.Delete(System.Int64)">
            <summary>Deletes one Automation from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteControlCrud.SelectOne(System.Int64)">
            <summary>Gets one AutoNoteControl object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteControlCrud.SelectOne(System.String)">
            <summary>Gets one AutoNoteControl object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteControlCrud.SelectMany(System.String)">
            <summary>Gets a list of AutoNoteControl objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteControlCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteControlCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.AutoNoteControl},System.String)">
            <summary>Converts a list of AutoNoteControl into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteControlCrud.Insert(OpenDentBusiness.AutoNoteControl)">
            <summary>Inserts one AutoNoteControl into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteControlCrud.Insert(OpenDentBusiness.AutoNoteControl,System.Boolean)">
            <summary>Inserts one AutoNoteControl into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteControlCrud.InsertNoCache(OpenDentBusiness.AutoNoteControl)">
            <summary>Inserts one AutoNoteControl into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteControlCrud.InsertNoCache(OpenDentBusiness.AutoNoteControl,System.Boolean)">
            <summary>Inserts one AutoNoteControl into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteControlCrud.Update(OpenDentBusiness.AutoNoteControl)">
            <summary>Updates one AutoNoteControl in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteControlCrud.Update(OpenDentBusiness.AutoNoteControl,OpenDentBusiness.AutoNoteControl)">
            <summary>Updates one AutoNoteControl in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteControlCrud.UpdateComparison(OpenDentBusiness.AutoNoteControl,OpenDentBusiness.AutoNoteControl)">
            <summary>Returns true if Update(AutoNoteControl,AutoNoteControl) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteControlCrud.Delete(System.Int64)">
            <summary>Deletes one AutoNoteControl from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteCrud.SelectOne(System.Int64)">
            <summary>Gets one AutoNote object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteCrud.SelectOne(System.String)">
            <summary>Gets one AutoNote object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteCrud.SelectMany(System.String)">
            <summary>Gets a list of AutoNote objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.AutoNote},System.String)">
            <summary>Converts a list of AutoNote into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteCrud.Insert(OpenDentBusiness.AutoNote)">
            <summary>Inserts one AutoNote into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteCrud.Insert(OpenDentBusiness.AutoNote,System.Boolean)">
            <summary>Inserts one AutoNote into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteCrud.InsertNoCache(OpenDentBusiness.AutoNote)">
            <summary>Inserts one AutoNote into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteCrud.InsertNoCache(OpenDentBusiness.AutoNote,System.Boolean)">
            <summary>Inserts one AutoNote into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteCrud.Update(OpenDentBusiness.AutoNote)">
            <summary>Updates one AutoNote in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteCrud.Update(OpenDentBusiness.AutoNote,OpenDentBusiness.AutoNote)">
            <summary>Updates one AutoNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteCrud.UpdateComparison(OpenDentBusiness.AutoNote,OpenDentBusiness.AutoNote)">
            <summary>Returns true if Update(AutoNote,AutoNote) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.AutoNoteCrud.Delete(System.Int64)">
            <summary>Deletes one AutoNote from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CDSPermissionCrud.SelectOne(System.Int64)">
            <summary>Gets one CDSPermission object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CDSPermissionCrud.SelectOne(System.String)">
            <summary>Gets one CDSPermission object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CDSPermissionCrud.SelectMany(System.String)">
            <summary>Gets a list of CDSPermission objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CDSPermissionCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CDSPermissionCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.CDSPermission},System.String)">
            <summary>Converts a list of CDSPermission into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CDSPermissionCrud.Insert(OpenDentBusiness.CDSPermission)">
            <summary>Inserts one CDSPermission into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CDSPermissionCrud.Insert(OpenDentBusiness.CDSPermission,System.Boolean)">
            <summary>Inserts one CDSPermission into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CDSPermissionCrud.InsertNoCache(OpenDentBusiness.CDSPermission)">
            <summary>Inserts one CDSPermission into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CDSPermissionCrud.InsertNoCache(OpenDentBusiness.CDSPermission,System.Boolean)">
            <summary>Inserts one CDSPermission into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CDSPermissionCrud.Update(OpenDentBusiness.CDSPermission)">
            <summary>Updates one CDSPermission in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CDSPermissionCrud.Update(OpenDentBusiness.CDSPermission,OpenDentBusiness.CDSPermission)">
            <summary>Updates one CDSPermission in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CDSPermissionCrud.UpdateComparison(OpenDentBusiness.CDSPermission,OpenDentBusiness.CDSPermission)">
            <summary>Returns true if Update(CDSPermission,CDSPermission) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CDSPermissionCrud.Delete(System.Int64)">
            <summary>Deletes one CDSPermission from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimSnapshotCrud.SelectOne(System.Int64)">
            <summary>Gets one ClaimSnapshot object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimSnapshotCrud.SelectOne(System.String)">
            <summary>Gets one ClaimSnapshot object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimSnapshotCrud.SelectMany(System.String)">
            <summary>Gets a list of ClaimSnapshot objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimSnapshotCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimSnapshotCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ClaimSnapshot},System.String)">
            <summary>Converts a list of ClaimSnapshot into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimSnapshotCrud.Insert(OpenDentBusiness.ClaimSnapshot)">
            <summary>Inserts one ClaimSnapshot into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimSnapshotCrud.Insert(OpenDentBusiness.ClaimSnapshot,System.Boolean)">
            <summary>Inserts one ClaimSnapshot into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimSnapshotCrud.InsertNoCache(OpenDentBusiness.ClaimSnapshot)">
            <summary>Inserts one ClaimSnapshot into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimSnapshotCrud.InsertNoCache(OpenDentBusiness.ClaimSnapshot,System.Boolean)">
            <summary>Inserts one ClaimSnapshot into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimSnapshotCrud.Update(OpenDentBusiness.ClaimSnapshot)">
            <summary>Updates one ClaimSnapshot in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimSnapshotCrud.Update(OpenDentBusiness.ClaimSnapshot,OpenDentBusiness.ClaimSnapshot)">
            <summary>Updates one ClaimSnapshot in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimSnapshotCrud.UpdateComparison(OpenDentBusiness.ClaimSnapshot,OpenDentBusiness.ClaimSnapshot)">
            <summary>Returns true if Update(ClaimSnapshot,ClaimSnapshot) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimSnapshotCrud.Delete(System.Int64)">
            <summary>Deletes one ClaimSnapshot from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConfirmationRequestCrud.SelectOne(System.Int64)">
            <summary>Gets one ConfirmationRequest object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConfirmationRequestCrud.SelectOne(System.String)">
            <summary>Gets one ConfirmationRequest object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConfirmationRequestCrud.SelectMany(System.String)">
            <summary>Gets a list of ConfirmationRequest objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConfirmationRequestCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConfirmationRequestCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ConfirmationRequest},System.String)">
            <summary>Converts a list of ConfirmationRequest into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConfirmationRequestCrud.Insert(OpenDentBusiness.ConfirmationRequest)">
            <summary>Inserts one ConfirmationRequest into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConfirmationRequestCrud.Insert(OpenDentBusiness.ConfirmationRequest,System.Boolean)">
            <summary>Inserts one ConfirmationRequest into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConfirmationRequestCrud.InsertNoCache(OpenDentBusiness.ConfirmationRequest)">
            <summary>Inserts one ConfirmationRequest into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConfirmationRequestCrud.InsertNoCache(OpenDentBusiness.ConfirmationRequest,System.Boolean)">
            <summary>Inserts one ConfirmationRequest into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConfirmationRequestCrud.Update(OpenDentBusiness.ConfirmationRequest)">
            <summary>Updates one ConfirmationRequest in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConfirmationRequestCrud.Update(OpenDentBusiness.ConfirmationRequest,OpenDentBusiness.ConfirmationRequest)">
            <summary>Updates one ConfirmationRequest in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConfirmationRequestCrud.UpdateComparison(OpenDentBusiness.ConfirmationRequest,OpenDentBusiness.ConfirmationRequest)">
            <summary>Returns true if Update(ConfirmationRequest,ConfirmationRequest) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConfirmationRequestCrud.Delete(System.Int64)">
            <summary>Deletes one ConfirmationRequest from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnectionGroupCrud.SelectOne(System.Int64)">
            <summary>Gets one ConnectionGroup object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnectionGroupCrud.SelectOne(System.String)">
            <summary>Gets one ConnectionGroup object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnectionGroupCrud.SelectMany(System.String)">
            <summary>Gets a list of ConnectionGroup objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnectionGroupCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnectionGroupCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ConnectionGroup},System.String)">
            <summary>Converts a list of ConnectionGroup into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnectionGroupCrud.Insert(OpenDentBusiness.ConnectionGroup)">
            <summary>Inserts one ConnectionGroup into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnectionGroupCrud.Insert(OpenDentBusiness.ConnectionGroup,System.Boolean)">
            <summary>Inserts one ConnectionGroup into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnectionGroupCrud.InsertNoCache(OpenDentBusiness.ConnectionGroup)">
            <summary>Inserts one ConnectionGroup into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnectionGroupCrud.InsertNoCache(OpenDentBusiness.ConnectionGroup,System.Boolean)">
            <summary>Inserts one ConnectionGroup into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnectionGroupCrud.Update(OpenDentBusiness.ConnectionGroup)">
            <summary>Updates one ConnectionGroup in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnectionGroupCrud.Update(OpenDentBusiness.ConnectionGroup,OpenDentBusiness.ConnectionGroup)">
            <summary>Updates one ConnectionGroup in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnectionGroupCrud.UpdateComparison(OpenDentBusiness.ConnectionGroup,OpenDentBusiness.ConnectionGroup)">
            <summary>Returns true if Update(ConnectionGroup,ConnectionGroup) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnectionGroupCrud.Delete(System.Int64)">
            <summary>Deletes one ConnectionGroup from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnectionGroupCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.ConnectionGroup},System.Collections.Generic.List{OpenDentBusiness.ConnectionGroup})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnGroupAttachCrud.SelectOne(System.Int64)">
            <summary>Gets one ConnGroupAttach object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnGroupAttachCrud.SelectOne(System.String)">
            <summary>Gets one ConnGroupAttach object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnGroupAttachCrud.SelectMany(System.String)">
            <summary>Gets a list of ConnGroupAttach objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnGroupAttachCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnGroupAttachCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ConnGroupAttach},System.String)">
            <summary>Converts a list of ConnGroupAttach into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnGroupAttachCrud.Insert(OpenDentBusiness.ConnGroupAttach)">
            <summary>Inserts one ConnGroupAttach into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnGroupAttachCrud.Insert(OpenDentBusiness.ConnGroupAttach,System.Boolean)">
            <summary>Inserts one ConnGroupAttach into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnGroupAttachCrud.InsertNoCache(OpenDentBusiness.ConnGroupAttach)">
            <summary>Inserts one ConnGroupAttach into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnGroupAttachCrud.InsertNoCache(OpenDentBusiness.ConnGroupAttach,System.Boolean)">
            <summary>Inserts one ConnGroupAttach into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnGroupAttachCrud.Update(OpenDentBusiness.ConnGroupAttach)">
            <summary>Updates one ConnGroupAttach in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnGroupAttachCrud.Update(OpenDentBusiness.ConnGroupAttach,OpenDentBusiness.ConnGroupAttach)">
            <summary>Updates one ConnGroupAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnGroupAttachCrud.UpdateComparison(OpenDentBusiness.ConnGroupAttach,OpenDentBusiness.ConnGroupAttach)">
            <summary>Returns true if Update(ConnGroupAttach,ConnGroupAttach) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnGroupAttachCrud.Delete(System.Int64)">
            <summary>Deletes one ConnGroupAttach from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ConnGroupAttachCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.ConnGroupAttach},System.Collections.Generic.List{OpenDentBusiness.ConnGroupAttach})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardCellCrud.SelectOne(System.Int64)">
            <summary>Gets one DashboardCell object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardCellCrud.SelectOne(System.String)">
            <summary>Gets one DashboardCell object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardCellCrud.SelectMany(System.String)">
            <summary>Gets a list of DashboardCell objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardCellCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardCellCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.DashboardCell},System.String)">
            <summary>Converts a list of DashboardCell into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardCellCrud.Insert(OpenDentBusiness.DashboardCell)">
            <summary>Inserts one DashboardCell into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardCellCrud.Insert(OpenDentBusiness.DashboardCell,System.Boolean)">
            <summary>Inserts one DashboardCell into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardCellCrud.InsertNoCache(OpenDentBusiness.DashboardCell)">
            <summary>Inserts one DashboardCell into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardCellCrud.InsertNoCache(OpenDentBusiness.DashboardCell,System.Boolean)">
            <summary>Inserts one DashboardCell into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardCellCrud.Update(OpenDentBusiness.DashboardCell)">
            <summary>Updates one DashboardCell in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardCellCrud.Update(OpenDentBusiness.DashboardCell,OpenDentBusiness.DashboardCell)">
            <summary>Updates one DashboardCell in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardCellCrud.UpdateComparison(OpenDentBusiness.DashboardCell,OpenDentBusiness.DashboardCell)">
            <summary>Returns true if Update(DashboardCell,DashboardCell) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardCellCrud.Delete(System.Int64)">
            <summary>Deletes one DashboardCell from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardLayoutCrud.SelectOne(System.Int64)">
            <summary>Gets one DashboardLayout object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardLayoutCrud.SelectOne(System.String)">
            <summary>Gets one DashboardLayout object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardLayoutCrud.SelectMany(System.String)">
            <summary>Gets a list of DashboardLayout objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardLayoutCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardLayoutCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.DashboardLayout},System.String)">
            <summary>Converts a list of DashboardLayout into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardLayoutCrud.Insert(OpenDentBusiness.DashboardLayout)">
            <summary>Inserts one DashboardLayout into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardLayoutCrud.Insert(OpenDentBusiness.DashboardLayout,System.Boolean)">
            <summary>Inserts one DashboardLayout into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardLayoutCrud.InsertNoCache(OpenDentBusiness.DashboardLayout)">
            <summary>Inserts one DashboardLayout into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardLayoutCrud.InsertNoCache(OpenDentBusiness.DashboardLayout,System.Boolean)">
            <summary>Inserts one DashboardLayout into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardLayoutCrud.Update(OpenDentBusiness.DashboardLayout)">
            <summary>Updates one DashboardLayout in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardLayoutCrud.Update(OpenDentBusiness.DashboardLayout,OpenDentBusiness.DashboardLayout)">
            <summary>Updates one DashboardLayout in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardLayoutCrud.UpdateComparison(OpenDentBusiness.DashboardLayout,OpenDentBusiness.DashboardLayout)">
            <summary>Returns true if Update(DashboardLayout,DashboardLayout) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardLayoutCrud.Delete(System.Int64)">
            <summary>Deletes one DashboardLayout from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayReportCrud.SelectOne(System.Int64)">
            <summary>Gets one DisplayReport object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayReportCrud.SelectOne(System.String)">
            <summary>Gets one DisplayReport object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayReportCrud.SelectMany(System.String)">
            <summary>Gets a list of DisplayReport objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayReportCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayReportCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.DisplayReport},System.String)">
            <summary>Converts a list of DisplayReport into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayReportCrud.Insert(OpenDentBusiness.DisplayReport)">
            <summary>Inserts one DisplayReport into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayReportCrud.Insert(OpenDentBusiness.DisplayReport,System.Boolean)">
            <summary>Inserts one DisplayReport into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayReportCrud.InsertNoCache(OpenDentBusiness.DisplayReport)">
            <summary>Inserts one DisplayReport into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayReportCrud.InsertNoCache(OpenDentBusiness.DisplayReport,System.Boolean)">
            <summary>Inserts one DisplayReport into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayReportCrud.Update(OpenDentBusiness.DisplayReport)">
            <summary>Updates one DisplayReport in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayReportCrud.Update(OpenDentBusiness.DisplayReport,OpenDentBusiness.DisplayReport)">
            <summary>Updates one DisplayReport in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayReportCrud.UpdateComparison(OpenDentBusiness.DisplayReport,OpenDentBusiness.DisplayReport)">
            <summary>Returns true if Update(DisplayReport,DisplayReport) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayReportCrud.Delete(System.Int64)">
            <summary>Deletes one DisplayReport from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayReportCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.DisplayReport},System.Collections.Generic.List{OpenDentBusiness.DisplayReport})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DispSupplyCrud.SelectOne(System.Int64)">
            <summary>Gets one DispSupply object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DispSupplyCrud.SelectOne(System.String)">
            <summary>Gets one DispSupply object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DispSupplyCrud.SelectMany(System.String)">
            <summary>Gets a list of DispSupply objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DispSupplyCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DispSupplyCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.DispSupply},System.String)">
            <summary>Converts a list of DispSupply into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DispSupplyCrud.Insert(OpenDentBusiness.DispSupply)">
            <summary>Inserts one DispSupply into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DispSupplyCrud.Insert(OpenDentBusiness.DispSupply,System.Boolean)">
            <summary>Inserts one DispSupply into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DispSupplyCrud.InsertNoCache(OpenDentBusiness.DispSupply)">
            <summary>Inserts one DispSupply into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DispSupplyCrud.InsertNoCache(OpenDentBusiness.DispSupply,System.Boolean)">
            <summary>Inserts one DispSupply into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DispSupplyCrud.Update(OpenDentBusiness.DispSupply)">
            <summary>Updates one DispSupply in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DispSupplyCrud.Update(OpenDentBusiness.DispSupply,OpenDentBusiness.DispSupply)">
            <summary>Updates one DispSupply in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DispSupplyCrud.UpdateComparison(OpenDentBusiness.DispSupply,OpenDentBusiness.DispSupply)">
            <summary>Returns true if Update(DispSupply,DispSupply) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DispSupplyCrud.Delete(System.Int64)">
            <summary>Deletes one DispSupply from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EbillCrud.SelectOne(System.Int64)">
            <summary>Gets one Ebill object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EbillCrud.SelectOne(System.String)">
            <summary>Gets one Ebill object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EbillCrud.SelectMany(System.String)">
            <summary>Gets a list of Ebill objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EbillCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EbillCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Ebill},System.String)">
            <summary>Converts a list of Ebill into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EbillCrud.Insert(OpenDentBusiness.Ebill)">
            <summary>Inserts one Ebill into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EbillCrud.Insert(OpenDentBusiness.Ebill,System.Boolean)">
            <summary>Inserts one Ebill into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EbillCrud.InsertNoCache(OpenDentBusiness.Ebill)">
            <summary>Inserts one Ebill into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EbillCrud.InsertNoCache(OpenDentBusiness.Ebill,System.Boolean)">
            <summary>Inserts one Ebill into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EbillCrud.Update(OpenDentBusiness.Ebill)">
            <summary>Updates one Ebill in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EbillCrud.Update(OpenDentBusiness.Ebill,OpenDentBusiness.Ebill)">
            <summary>Updates one Ebill in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EbillCrud.UpdateComparison(OpenDentBusiness.Ebill,OpenDentBusiness.Ebill)">
            <summary>Returns true if Update(Ebill,Ebill) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EbillCrud.Delete(System.Int64)">
            <summary>Deletes one Ebill from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EbillCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.Ebill},System.Collections.Generic.List{OpenDentBusiness.Ebill})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAptObsCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrAptObs object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAptObsCrud.SelectOne(System.String)">
            <summary>Gets one EhrAptObs object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAptObsCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrAptObs objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAptObsCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAptObsCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrAptObs},System.String)">
            <summary>Converts a list of EhrAptObs into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAptObsCrud.Insert(OpenDentBusiness.EhrAptObs)">
            <summary>Inserts one EhrAptObs into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAptObsCrud.Insert(OpenDentBusiness.EhrAptObs,System.Boolean)">
            <summary>Inserts one EhrAptObs into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAptObsCrud.InsertNoCache(OpenDentBusiness.EhrAptObs)">
            <summary>Inserts one EhrAptObs into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAptObsCrud.InsertNoCache(OpenDentBusiness.EhrAptObs,System.Boolean)">
            <summary>Inserts one EhrAptObs into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAptObsCrud.Update(OpenDentBusiness.EhrAptObs)">
            <summary>Updates one EhrAptObs in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAptObsCrud.Update(OpenDentBusiness.EhrAptObs,OpenDentBusiness.EhrAptObs)">
            <summary>Updates one EhrAptObs in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAptObsCrud.UpdateComparison(OpenDentBusiness.EhrAptObs,OpenDentBusiness.EhrAptObs)">
            <summary>Returns true if Update(EhrAptObs,EhrAptObs) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAptObsCrud.Delete(System.Int64)">
            <summary>Deletes one EhrAptObs from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCarePlanCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrCarePlan object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCarePlanCrud.SelectOne(System.String)">
            <summary>Gets one EhrCarePlan object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCarePlanCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrCarePlan objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCarePlanCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCarePlanCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrCarePlan},System.String)">
            <summary>Converts a list of EhrCarePlan into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCarePlanCrud.Insert(OpenDentBusiness.EhrCarePlan)">
            <summary>Inserts one EhrCarePlan into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCarePlanCrud.Insert(OpenDentBusiness.EhrCarePlan,System.Boolean)">
            <summary>Inserts one EhrCarePlan into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCarePlanCrud.InsertNoCache(OpenDentBusiness.EhrCarePlan)">
            <summary>Inserts one EhrCarePlan into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCarePlanCrud.InsertNoCache(OpenDentBusiness.EhrCarePlan,System.Boolean)">
            <summary>Inserts one EhrCarePlan into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCarePlanCrud.Update(OpenDentBusiness.EhrCarePlan)">
            <summary>Updates one EhrCarePlan in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCarePlanCrud.Update(OpenDentBusiness.EhrCarePlan,OpenDentBusiness.EhrCarePlan)">
            <summary>Updates one EhrCarePlan in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCarePlanCrud.UpdateComparison(OpenDentBusiness.EhrCarePlan,OpenDentBusiness.EhrCarePlan)">
            <summary>Returns true if Update(EhrCarePlan,EhrCarePlan) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCarePlanCrud.Delete(System.Int64)">
            <summary>Deletes one EhrCarePlan from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabClinicalInfoCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrLabClinicalInfo object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabClinicalInfoCrud.SelectOne(System.String)">
            <summary>Gets one EhrLabClinicalInfo object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabClinicalInfoCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrLabClinicalInfo objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabClinicalInfoCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabClinicalInfoCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrLabClinicalInfo},System.String)">
            <summary>Converts a list of EhrLabClinicalInfo into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabClinicalInfoCrud.Insert(OpenDentBusiness.EhrLabClinicalInfo)">
            <summary>Inserts one EhrLabClinicalInfo into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabClinicalInfoCrud.Insert(OpenDentBusiness.EhrLabClinicalInfo,System.Boolean)">
            <summary>Inserts one EhrLabClinicalInfo into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabClinicalInfoCrud.InsertNoCache(OpenDentBusiness.EhrLabClinicalInfo)">
            <summary>Inserts one EhrLabClinicalInfo into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabClinicalInfoCrud.InsertNoCache(OpenDentBusiness.EhrLabClinicalInfo,System.Boolean)">
            <summary>Inserts one EhrLabClinicalInfo into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabClinicalInfoCrud.Update(OpenDentBusiness.EhrLabClinicalInfo)">
            <summary>Updates one EhrLabClinicalInfo in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabClinicalInfoCrud.Update(OpenDentBusiness.EhrLabClinicalInfo,OpenDentBusiness.EhrLabClinicalInfo)">
            <summary>Updates one EhrLabClinicalInfo in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabClinicalInfoCrud.UpdateComparison(OpenDentBusiness.EhrLabClinicalInfo,OpenDentBusiness.EhrLabClinicalInfo)">
            <summary>Returns true if Update(EhrLabClinicalInfo,EhrLabClinicalInfo) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabClinicalInfoCrud.Delete(System.Int64)">
            <summary>Deletes one EhrLabClinicalInfo from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrLab object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabCrud.SelectOne(System.String)">
            <summary>Gets one EhrLab object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrLab objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrLab},System.String)">
            <summary>Converts a list of EhrLab into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabCrud.Insert(OpenDentBusiness.EhrLab)">
            <summary>Inserts one EhrLab into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabCrud.Insert(OpenDentBusiness.EhrLab,System.Boolean)">
            <summary>Inserts one EhrLab into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabCrud.InsertNoCache(OpenDentBusiness.EhrLab)">
            <summary>Inserts one EhrLab into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabCrud.InsertNoCache(OpenDentBusiness.EhrLab,System.Boolean)">
            <summary>Inserts one EhrLab into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabCrud.Update(OpenDentBusiness.EhrLab)">
            <summary>Updates one EhrLab in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabCrud.Update(OpenDentBusiness.EhrLab,OpenDentBusiness.EhrLab)">
            <summary>Updates one EhrLab in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabCrud.UpdateComparison(OpenDentBusiness.EhrLab,OpenDentBusiness.EhrLab)">
            <summary>Returns true if Update(EhrLab,EhrLab) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabCrud.Delete(System.Int64)">
            <summary>Deletes one EhrLab from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabImageCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrLabImage object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabImageCrud.SelectOne(System.String)">
            <summary>Gets one EhrLabImage object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabImageCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrLabImage objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabImageCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabImageCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrLabImage},System.String)">
            <summary>Converts a list of EhrLabImage into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabImageCrud.Insert(OpenDentBusiness.EhrLabImage)">
            <summary>Inserts one EhrLabImage into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabImageCrud.Insert(OpenDentBusiness.EhrLabImage,System.Boolean)">
            <summary>Inserts one EhrLabImage into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabImageCrud.InsertNoCache(OpenDentBusiness.EhrLabImage)">
            <summary>Inserts one EhrLabImage into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabImageCrud.InsertNoCache(OpenDentBusiness.EhrLabImage,System.Boolean)">
            <summary>Inserts one EhrLabImage into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabImageCrud.Update(OpenDentBusiness.EhrLabImage)">
            <summary>Updates one EhrLabImage in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabImageCrud.Update(OpenDentBusiness.EhrLabImage,OpenDentBusiness.EhrLabImage)">
            <summary>Updates one EhrLabImage in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabImageCrud.UpdateComparison(OpenDentBusiness.EhrLabImage,OpenDentBusiness.EhrLabImage)">
            <summary>Returns true if Update(EhrLabImage,EhrLabImage) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabImageCrud.Delete(System.Int64)">
            <summary>Deletes one EhrLabImage from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabNoteCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrLabNote object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabNoteCrud.SelectOne(System.String)">
            <summary>Gets one EhrLabNote object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabNoteCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrLabNote objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabNoteCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabNoteCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrLabNote},System.String)">
            <summary>Converts a list of EhrLabNote into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabNoteCrud.Insert(OpenDentBusiness.EhrLabNote)">
            <summary>Inserts one EhrLabNote into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabNoteCrud.Insert(OpenDentBusiness.EhrLabNote,System.Boolean)">
            <summary>Inserts one EhrLabNote into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabNoteCrud.InsertNoCache(OpenDentBusiness.EhrLabNote)">
            <summary>Inserts one EhrLabNote into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabNoteCrud.InsertNoCache(OpenDentBusiness.EhrLabNote,System.Boolean)">
            <summary>Inserts one EhrLabNote into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabNoteCrud.Update(OpenDentBusiness.EhrLabNote)">
            <summary>Updates one EhrLabNote in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabNoteCrud.Update(OpenDentBusiness.EhrLabNote,OpenDentBusiness.EhrLabNote)">
            <summary>Updates one EhrLabNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabNoteCrud.UpdateComparison(OpenDentBusiness.EhrLabNote,OpenDentBusiness.EhrLabNote)">
            <summary>Returns true if Update(EhrLabNote,EhrLabNote) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabNoteCrud.Delete(System.Int64)">
            <summary>Deletes one EhrLabNote from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrLabResult object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultCrud.SelectOne(System.String)">
            <summary>Gets one EhrLabResult object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrLabResult objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrLabResult},System.String)">
            <summary>Converts a list of EhrLabResult into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultCrud.Insert(OpenDentBusiness.EhrLabResult)">
            <summary>Inserts one EhrLabResult into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultCrud.Insert(OpenDentBusiness.EhrLabResult,System.Boolean)">
            <summary>Inserts one EhrLabResult into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultCrud.InsertNoCache(OpenDentBusiness.EhrLabResult)">
            <summary>Inserts one EhrLabResult into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultCrud.InsertNoCache(OpenDentBusiness.EhrLabResult,System.Boolean)">
            <summary>Inserts one EhrLabResult into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultCrud.Update(OpenDentBusiness.EhrLabResult)">
            <summary>Updates one EhrLabResult in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultCrud.Update(OpenDentBusiness.EhrLabResult,OpenDentBusiness.EhrLabResult)">
            <summary>Updates one EhrLabResult in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultCrud.UpdateComparison(OpenDentBusiness.EhrLabResult,OpenDentBusiness.EhrLabResult)">
            <summary>Returns true if Update(EhrLabResult,EhrLabResult) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultCrud.Delete(System.Int64)">
            <summary>Deletes one EhrLabResult from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultsCopyToCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrLabResultsCopyTo object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultsCopyToCrud.SelectOne(System.String)">
            <summary>Gets one EhrLabResultsCopyTo object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultsCopyToCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrLabResultsCopyTo objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultsCopyToCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultsCopyToCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrLabResultsCopyTo},System.String)">
            <summary>Converts a list of EhrLabResultsCopyTo into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultsCopyToCrud.Insert(OpenDentBusiness.EhrLabResultsCopyTo)">
            <summary>Inserts one EhrLabResultsCopyTo into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultsCopyToCrud.Insert(OpenDentBusiness.EhrLabResultsCopyTo,System.Boolean)">
            <summary>Inserts one EhrLabResultsCopyTo into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultsCopyToCrud.InsertNoCache(OpenDentBusiness.EhrLabResultsCopyTo)">
            <summary>Inserts one EhrLabResultsCopyTo into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultsCopyToCrud.InsertNoCache(OpenDentBusiness.EhrLabResultsCopyTo,System.Boolean)">
            <summary>Inserts one EhrLabResultsCopyTo into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultsCopyToCrud.Update(OpenDentBusiness.EhrLabResultsCopyTo)">
            <summary>Updates one EhrLabResultsCopyTo in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultsCopyToCrud.Update(OpenDentBusiness.EhrLabResultsCopyTo,OpenDentBusiness.EhrLabResultsCopyTo)">
            <summary>Updates one EhrLabResultsCopyTo in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultsCopyToCrud.UpdateComparison(OpenDentBusiness.EhrLabResultsCopyTo,OpenDentBusiness.EhrLabResultsCopyTo)">
            <summary>Returns true if Update(EhrLabResultsCopyTo,EhrLabResultsCopyTo) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabResultsCopyToCrud.Delete(System.Int64)">
            <summary>Deletes one EhrLabResultsCopyTo from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenConditionCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrLabSpecimenCondition object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenConditionCrud.SelectOne(System.String)">
            <summary>Gets one EhrLabSpecimenCondition object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenConditionCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrLabSpecimenCondition objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenConditionCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenConditionCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrLabSpecimenCondition},System.String)">
            <summary>Converts a list of EhrLabSpecimenCondition into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenConditionCrud.Insert(OpenDentBusiness.EhrLabSpecimenCondition)">
            <summary>Inserts one EhrLabSpecimenCondition into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenConditionCrud.Insert(OpenDentBusiness.EhrLabSpecimenCondition,System.Boolean)">
            <summary>Inserts one EhrLabSpecimenCondition into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenConditionCrud.InsertNoCache(OpenDentBusiness.EhrLabSpecimenCondition)">
            <summary>Inserts one EhrLabSpecimenCondition into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenConditionCrud.InsertNoCache(OpenDentBusiness.EhrLabSpecimenCondition,System.Boolean)">
            <summary>Inserts one EhrLabSpecimenCondition into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenConditionCrud.Update(OpenDentBusiness.EhrLabSpecimenCondition)">
            <summary>Updates one EhrLabSpecimenCondition in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenConditionCrud.Update(OpenDentBusiness.EhrLabSpecimenCondition,OpenDentBusiness.EhrLabSpecimenCondition)">
            <summary>Updates one EhrLabSpecimenCondition in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenConditionCrud.UpdateComparison(OpenDentBusiness.EhrLabSpecimenCondition,OpenDentBusiness.EhrLabSpecimenCondition)">
            <summary>Returns true if Update(EhrLabSpecimenCondition,EhrLabSpecimenCondition) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenConditionCrud.Delete(System.Int64)">
            <summary>Deletes one EhrLabSpecimenCondition from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrLabSpecimen object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenCrud.SelectOne(System.String)">
            <summary>Gets one EhrLabSpecimen object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrLabSpecimen objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrLabSpecimen},System.String)">
            <summary>Converts a list of EhrLabSpecimen into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenCrud.Insert(OpenDentBusiness.EhrLabSpecimen)">
            <summary>Inserts one EhrLabSpecimen into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenCrud.Insert(OpenDentBusiness.EhrLabSpecimen,System.Boolean)">
            <summary>Inserts one EhrLabSpecimen into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenCrud.InsertNoCache(OpenDentBusiness.EhrLabSpecimen)">
            <summary>Inserts one EhrLabSpecimen into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenCrud.InsertNoCache(OpenDentBusiness.EhrLabSpecimen,System.Boolean)">
            <summary>Inserts one EhrLabSpecimen into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenCrud.Update(OpenDentBusiness.EhrLabSpecimen)">
            <summary>Updates one EhrLabSpecimen in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenCrud.Update(OpenDentBusiness.EhrLabSpecimen,OpenDentBusiness.EhrLabSpecimen)">
            <summary>Updates one EhrLabSpecimen in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenCrud.UpdateComparison(OpenDentBusiness.EhrLabSpecimen,OpenDentBusiness.EhrLabSpecimen)">
            <summary>Returns true if Update(EhrLabSpecimen,EhrLabSpecimen) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenCrud.Delete(System.Int64)">
            <summary>Deletes one EhrLabSpecimen from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenRejectReasonCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrLabSpecimenRejectReason object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenRejectReasonCrud.SelectOne(System.String)">
            <summary>Gets one EhrLabSpecimenRejectReason object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenRejectReasonCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrLabSpecimenRejectReason objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenRejectReasonCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenRejectReasonCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrLabSpecimenRejectReason},System.String)">
            <summary>Converts a list of EhrLabSpecimenRejectReason into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenRejectReasonCrud.Insert(OpenDentBusiness.EhrLabSpecimenRejectReason)">
            <summary>Inserts one EhrLabSpecimenRejectReason into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenRejectReasonCrud.Insert(OpenDentBusiness.EhrLabSpecimenRejectReason,System.Boolean)">
            <summary>Inserts one EhrLabSpecimenRejectReason into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenRejectReasonCrud.InsertNoCache(OpenDentBusiness.EhrLabSpecimenRejectReason)">
            <summary>Inserts one EhrLabSpecimenRejectReason into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenRejectReasonCrud.InsertNoCache(OpenDentBusiness.EhrLabSpecimenRejectReason,System.Boolean)">
            <summary>Inserts one EhrLabSpecimenRejectReason into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenRejectReasonCrud.Update(OpenDentBusiness.EhrLabSpecimenRejectReason)">
            <summary>Updates one EhrLabSpecimenRejectReason in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenRejectReasonCrud.Update(OpenDentBusiness.EhrLabSpecimenRejectReason,OpenDentBusiness.EhrLabSpecimenRejectReason)">
            <summary>Updates one EhrLabSpecimenRejectReason in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenRejectReasonCrud.UpdateComparison(OpenDentBusiness.EhrLabSpecimenRejectReason,OpenDentBusiness.EhrLabSpecimenRejectReason)">
            <summary>Returns true if Update(EhrLabSpecimenRejectReason,EhrLabSpecimenRejectReason) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrLabSpecimenRejectReasonCrud.Delete(System.Int64)">
            <summary>Deletes one EhrLabSpecimenRejectReason from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrPatientCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrPatient object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrPatientCrud.SelectOne(System.String)">
            <summary>Gets one EhrPatient object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrPatientCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrPatient objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrPatientCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrPatientCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrPatient},System.String)">
            <summary>Converts a list of EhrPatient into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrPatientCrud.Insert(OpenDentBusiness.EhrPatient)">
            <summary>Inserts one EhrPatient into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrPatientCrud.Insert(OpenDentBusiness.EhrPatient,System.Boolean)">
            <summary>Inserts one EhrPatient into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrPatientCrud.InsertNoCache(OpenDentBusiness.EhrPatient)">
            <summary>Inserts one EhrPatient into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrPatientCrud.InsertNoCache(OpenDentBusiness.EhrPatient,System.Boolean)">
            <summary>Inserts one EhrPatient into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrPatientCrud.Update(OpenDentBusiness.EhrPatient)">
            <summary>Updates one EhrPatient in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrPatientCrud.Update(OpenDentBusiness.EhrPatient,OpenDentBusiness.EhrPatient)">
            <summary>Updates one EhrPatient in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrPatientCrud.UpdateComparison(OpenDentBusiness.EhrPatient,OpenDentBusiness.EhrPatient)">
            <summary>Returns true if Update(EhrPatient,EhrPatient) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrPatientCrud.Delete(System.Int64)">
            <summary>Deletes one EhrPatient from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrTriggerCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrTrigger object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrTriggerCrud.SelectOne(System.String)">
            <summary>Gets one EhrTrigger object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrTriggerCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrTrigger objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrTriggerCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrTriggerCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrTrigger},System.String)">
            <summary>Converts a list of EhrTrigger into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrTriggerCrud.Insert(OpenDentBusiness.EhrTrigger)">
            <summary>Inserts one EhrTrigger into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrTriggerCrud.Insert(OpenDentBusiness.EhrTrigger,System.Boolean)">
            <summary>Inserts one EhrTrigger into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrTriggerCrud.InsertNoCache(OpenDentBusiness.EhrTrigger)">
            <summary>Inserts one EhrTrigger into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrTriggerCrud.InsertNoCache(OpenDentBusiness.EhrTrigger,System.Boolean)">
            <summary>Inserts one EhrTrigger into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrTriggerCrud.Update(OpenDentBusiness.EhrTrigger)">
            <summary>Updates one EhrTrigger in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrTriggerCrud.Update(OpenDentBusiness.EhrTrigger,OpenDentBusiness.EhrTrigger)">
            <summary>Updates one EhrTrigger in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrTriggerCrud.UpdateComparison(OpenDentBusiness.EhrTrigger,OpenDentBusiness.EhrTrigger)">
            <summary>Returns true if Update(EhrTrigger,EhrTrigger) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrTriggerCrud.Delete(System.Int64)">
            <summary>Deletes one EhrTrigger from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BenefitCrud.SelectOne(System.Int64)">
            <summary>Gets one Benefit object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BenefitCrud.SelectOne(System.String)">
            <summary>Gets one Benefit object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BenefitCrud.SelectMany(System.String)">
            <summary>Gets a list of Benefit objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BenefitCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BenefitCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Benefit},System.String)">
            <summary>Converts a list of Benefit into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BenefitCrud.Insert(OpenDentBusiness.Benefit)">
            <summary>Inserts one Benefit into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BenefitCrud.Insert(OpenDentBusiness.Benefit,System.Boolean)">
            <summary>Inserts one Benefit into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BenefitCrud.InsertNoCache(OpenDentBusiness.Benefit)">
            <summary>Inserts one Benefit into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BenefitCrud.InsertNoCache(OpenDentBusiness.Benefit,System.Boolean)">
            <summary>Inserts one Benefit into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BenefitCrud.Update(OpenDentBusiness.Benefit)">
            <summary>Updates one Benefit in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BenefitCrud.Update(OpenDentBusiness.Benefit,OpenDentBusiness.Benefit)">
            <summary>Updates one Benefit in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BenefitCrud.UpdateComparison(OpenDentBusiness.Benefit,OpenDentBusiness.Benefit)">
            <summary>Returns true if Update(Benefit,Benefit) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BenefitCrud.Delete(System.Int64)">
            <summary>Deletes one Benefit from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CanadianNetworkCrud.SelectOne(System.Int64)">
            <summary>Gets one CanadianNetwork object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CanadianNetworkCrud.SelectOne(System.String)">
            <summary>Gets one CanadianNetwork object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CanadianNetworkCrud.SelectMany(System.String)">
            <summary>Gets a list of CanadianNetwork objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CanadianNetworkCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CanadianNetworkCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.CanadianNetwork},System.String)">
            <summary>Converts a list of CanadianNetwork into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CanadianNetworkCrud.Insert(OpenDentBusiness.CanadianNetwork)">
            <summary>Inserts one CanadianNetwork into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CanadianNetworkCrud.Insert(OpenDentBusiness.CanadianNetwork,System.Boolean)">
            <summary>Inserts one CanadianNetwork into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CanadianNetworkCrud.InsertNoCache(OpenDentBusiness.CanadianNetwork)">
            <summary>Inserts one CanadianNetwork into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CanadianNetworkCrud.InsertNoCache(OpenDentBusiness.CanadianNetwork,System.Boolean)">
            <summary>Inserts one CanadianNetwork into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CanadianNetworkCrud.Update(OpenDentBusiness.CanadianNetwork)">
            <summary>Updates one CanadianNetwork in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CanadianNetworkCrud.Update(OpenDentBusiness.CanadianNetwork,OpenDentBusiness.CanadianNetwork)">
            <summary>Updates one CanadianNetwork in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CanadianNetworkCrud.UpdateComparison(OpenDentBusiness.CanadianNetwork,OpenDentBusiness.CanadianNetwork)">
            <summary>Returns true if Update(CanadianNetwork,CanadianNetwork) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CanadianNetworkCrud.Delete(System.Int64)">
            <summary>Deletes one CanadianNetwork from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CarrierCrud.SelectOne(System.Int64)">
            <summary>Gets one Carrier object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CarrierCrud.SelectOne(System.String)">
            <summary>Gets one Carrier object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CarrierCrud.SelectMany(System.String)">
            <summary>Gets a list of Carrier objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CarrierCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CarrierCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Carrier},System.String)">
            <summary>Converts a list of Carrier into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CarrierCrud.Insert(OpenDentBusiness.Carrier)">
            <summary>Inserts one Carrier into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CarrierCrud.Insert(OpenDentBusiness.Carrier,System.Boolean)">
            <summary>Inserts one Carrier into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CarrierCrud.InsertNoCache(OpenDentBusiness.Carrier)">
            <summary>Inserts one Carrier into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CarrierCrud.InsertNoCache(OpenDentBusiness.Carrier,System.Boolean)">
            <summary>Inserts one Carrier into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CarrierCrud.Update(OpenDentBusiness.Carrier)">
            <summary>Updates one Carrier in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CarrierCrud.Update(OpenDentBusiness.Carrier,OpenDentBusiness.Carrier)">
            <summary>Updates one Carrier in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CarrierCrud.UpdateComparison(OpenDentBusiness.Carrier,OpenDentBusiness.Carrier)">
            <summary>Returns true if Update(Carrier,Carrier) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CarrierCrud.Delete(System.Int64)">
            <summary>Deletes one Carrier from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CdcrecCrud.SelectOne(System.Int64)">
            <summary>Gets one Cdcrec object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CdcrecCrud.SelectOne(System.String)">
            <summary>Gets one Cdcrec object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CdcrecCrud.SelectMany(System.String)">
            <summary>Gets a list of Cdcrec objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CdcrecCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CdcrecCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Cdcrec},System.String)">
            <summary>Converts a list of Cdcrec into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CdcrecCrud.Insert(OpenDentBusiness.Cdcrec)">
            <summary>Inserts one Cdcrec into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CdcrecCrud.Insert(OpenDentBusiness.Cdcrec,System.Boolean)">
            <summary>Inserts one Cdcrec into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CdcrecCrud.InsertNoCache(OpenDentBusiness.Cdcrec)">
            <summary>Inserts one Cdcrec into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CdcrecCrud.InsertNoCache(OpenDentBusiness.Cdcrec,System.Boolean)">
            <summary>Inserts one Cdcrec into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CdcrecCrud.Update(OpenDentBusiness.Cdcrec)">
            <summary>Updates one Cdcrec in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CdcrecCrud.Update(OpenDentBusiness.Cdcrec,OpenDentBusiness.Cdcrec)">
            <summary>Updates one Cdcrec in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CdcrecCrud.UpdateComparison(OpenDentBusiness.Cdcrec,OpenDentBusiness.Cdcrec)">
            <summary>Returns true if Update(Cdcrec,Cdcrec) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CdcrecCrud.Delete(System.Int64)">
            <summary>Deletes one Cdcrec from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CentralConnectionCrud.SelectOne(System.Int64)">
            <summary>Gets one CentralConnection object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CentralConnectionCrud.SelectOne(System.String)">
            <summary>Gets one CentralConnection object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CentralConnectionCrud.SelectMany(System.String)">
            <summary>Gets a list of CentralConnection objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CentralConnectionCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CentralConnectionCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.CentralConnection},System.String)">
            <summary>Converts a list of CentralConnection into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CentralConnectionCrud.Insert(OpenDentBusiness.CentralConnection)">
            <summary>Inserts one CentralConnection into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CentralConnectionCrud.Insert(OpenDentBusiness.CentralConnection,System.Boolean)">
            <summary>Inserts one CentralConnection into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CentralConnectionCrud.InsertNoCache(OpenDentBusiness.CentralConnection)">
            <summary>Inserts one CentralConnection into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CentralConnectionCrud.InsertNoCache(OpenDentBusiness.CentralConnection,System.Boolean)">
            <summary>Inserts one CentralConnection into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CentralConnectionCrud.Update(OpenDentBusiness.CentralConnection)">
            <summary>Updates one CentralConnection in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CentralConnectionCrud.Update(OpenDentBusiness.CentralConnection,OpenDentBusiness.CentralConnection)">
            <summary>Updates one CentralConnection in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CentralConnectionCrud.UpdateComparison(OpenDentBusiness.CentralConnection,OpenDentBusiness.CentralConnection)">
            <summary>Returns true if Update(CentralConnection,CentralConnection) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CentralConnectionCrud.Delete(System.Int64)">
            <summary>Deletes one CentralConnection from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CentralConnectionCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.CentralConnection},System.Collections.Generic.List{OpenDentBusiness.CentralConnection})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ChartViewCrud.SelectOne(System.Int64)">
            <summary>Gets one ChartView object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ChartViewCrud.SelectOne(System.String)">
            <summary>Gets one ChartView object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ChartViewCrud.SelectMany(System.String)">
            <summary>Gets a list of ChartView objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ChartViewCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ChartViewCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ChartView},System.String)">
            <summary>Converts a list of ChartView into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ChartViewCrud.Insert(OpenDentBusiness.ChartView)">
            <summary>Inserts one ChartView into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ChartViewCrud.Insert(OpenDentBusiness.ChartView,System.Boolean)">
            <summary>Inserts one ChartView into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ChartViewCrud.InsertNoCache(OpenDentBusiness.ChartView)">
            <summary>Inserts one ChartView into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ChartViewCrud.InsertNoCache(OpenDentBusiness.ChartView,System.Boolean)">
            <summary>Inserts one ChartView into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ChartViewCrud.Update(OpenDentBusiness.ChartView)">
            <summary>Updates one ChartView in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ChartViewCrud.Update(OpenDentBusiness.ChartView,OpenDentBusiness.ChartView)">
            <summary>Updates one ChartView in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ChartViewCrud.UpdateComparison(OpenDentBusiness.ChartView,OpenDentBusiness.ChartView)">
            <summary>Returns true if Update(ChartView,ChartView) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ChartViewCrud.Delete(System.Int64)">
            <summary>Deletes one ChartView from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimAttachCrud.SelectOne(System.Int64)">
            <summary>Gets one ClaimAttach object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimAttachCrud.SelectOne(System.String)">
            <summary>Gets one ClaimAttach object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimAttachCrud.SelectMany(System.String)">
            <summary>Gets a list of ClaimAttach objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimAttachCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimAttachCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ClaimAttach},System.String)">
            <summary>Converts a list of ClaimAttach into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimAttachCrud.Insert(OpenDentBusiness.ClaimAttach)">
            <summary>Inserts one ClaimAttach into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimAttachCrud.Insert(OpenDentBusiness.ClaimAttach,System.Boolean)">
            <summary>Inserts one ClaimAttach into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimAttachCrud.InsertNoCache(OpenDentBusiness.ClaimAttach)">
            <summary>Inserts one ClaimAttach into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimAttachCrud.InsertNoCache(OpenDentBusiness.ClaimAttach,System.Boolean)">
            <summary>Inserts one ClaimAttach into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimAttachCrud.Update(OpenDentBusiness.ClaimAttach)">
            <summary>Updates one ClaimAttach in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimAttachCrud.Update(OpenDentBusiness.ClaimAttach,OpenDentBusiness.ClaimAttach)">
            <summary>Updates one ClaimAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimAttachCrud.UpdateComparison(OpenDentBusiness.ClaimAttach,OpenDentBusiness.ClaimAttach)">
            <summary>Returns true if Update(ClaimAttach,ClaimAttach) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimAttachCrud.Delete(System.Int64)">
            <summary>Deletes one ClaimAttach from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCondCodeLogCrud.SelectOne(System.Int64)">
            <summary>Gets one ClaimCondCodeLog object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCondCodeLogCrud.SelectOne(System.String)">
            <summary>Gets one ClaimCondCodeLog object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCondCodeLogCrud.SelectMany(System.String)">
            <summary>Gets a list of ClaimCondCodeLog objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCondCodeLogCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCondCodeLogCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ClaimCondCodeLog},System.String)">
            <summary>Converts a list of ClaimCondCodeLog into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCondCodeLogCrud.Insert(OpenDentBusiness.ClaimCondCodeLog)">
            <summary>Inserts one ClaimCondCodeLog into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCondCodeLogCrud.Insert(OpenDentBusiness.ClaimCondCodeLog,System.Boolean)">
            <summary>Inserts one ClaimCondCodeLog into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCondCodeLogCrud.InsertNoCache(OpenDentBusiness.ClaimCondCodeLog)">
            <summary>Inserts one ClaimCondCodeLog into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCondCodeLogCrud.InsertNoCache(OpenDentBusiness.ClaimCondCodeLog,System.Boolean)">
            <summary>Inserts one ClaimCondCodeLog into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCondCodeLogCrud.Update(OpenDentBusiness.ClaimCondCodeLog)">
            <summary>Updates one ClaimCondCodeLog in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCondCodeLogCrud.Update(OpenDentBusiness.ClaimCondCodeLog,OpenDentBusiness.ClaimCondCodeLog)">
            <summary>Updates one ClaimCondCodeLog in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCondCodeLogCrud.UpdateComparison(OpenDentBusiness.ClaimCondCodeLog,OpenDentBusiness.ClaimCondCodeLog)">
            <summary>Returns true if Update(ClaimCondCodeLog,ClaimCondCodeLog) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCondCodeLogCrud.Delete(System.Int64)">
            <summary>Deletes one ClaimCondCodeLog from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCrud.SelectOne(System.Int64)">
            <summary>Gets one Claim object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCrud.SelectOne(System.String)">
            <summary>Gets one Claim object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCrud.SelectMany(System.String)">
            <summary>Gets a list of Claim objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Claim},System.String)">
            <summary>Converts a list of Claim into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCrud.Insert(OpenDentBusiness.Claim)">
            <summary>Inserts one Claim into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCrud.Insert(OpenDentBusiness.Claim,System.Boolean)">
            <summary>Inserts one Claim into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCrud.InsertNoCache(OpenDentBusiness.Claim)">
            <summary>Inserts one Claim into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCrud.InsertNoCache(OpenDentBusiness.Claim,System.Boolean)">
            <summary>Inserts one Claim into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCrud.Update(OpenDentBusiness.Claim)">
            <summary>Updates one Claim in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCrud.Update(OpenDentBusiness.Claim,OpenDentBusiness.Claim)">
            <summary>Updates one Claim in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCrud.UpdateComparison(OpenDentBusiness.Claim,OpenDentBusiness.Claim)">
            <summary>Returns true if Update(Claim,Claim) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCrud.Delete(System.Int64)">
            <summary>Deletes one Claim from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCrud.ClearFkey(System.Int64)">
            <summary>Zeros securitylog FKey column for rows that are using the matching claimNum as FKey and are related to Claim.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Claim table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimCrud.ClearFkey(System.Collections.Generic.List{System.Int64})">
            <summary>Zeros securitylog FKey column for rows that are using the matching claimNums as FKey and are related to Claim.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Claim table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormCrud.SelectOne(System.Int64)">
            <summary>Gets one ClaimForm object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormCrud.SelectOne(System.String)">
            <summary>Gets one ClaimForm object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormCrud.SelectMany(System.String)">
            <summary>Gets a list of ClaimForm objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ClaimForm},System.String)">
            <summary>Converts a list of ClaimForm into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormCrud.Insert(OpenDentBusiness.ClaimForm)">
            <summary>Inserts one ClaimForm into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormCrud.Insert(OpenDentBusiness.ClaimForm,System.Boolean)">
            <summary>Inserts one ClaimForm into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormCrud.InsertNoCache(OpenDentBusiness.ClaimForm)">
            <summary>Inserts one ClaimForm into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormCrud.InsertNoCache(OpenDentBusiness.ClaimForm,System.Boolean)">
            <summary>Inserts one ClaimForm into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormCrud.Update(OpenDentBusiness.ClaimForm)">
            <summary>Updates one ClaimForm in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormCrud.Update(OpenDentBusiness.ClaimForm,OpenDentBusiness.ClaimForm)">
            <summary>Updates one ClaimForm in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormCrud.UpdateComparison(OpenDentBusiness.ClaimForm,OpenDentBusiness.ClaimForm)">
            <summary>Returns true if Update(ClaimForm,ClaimForm) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormCrud.Delete(System.Int64)">
            <summary>Deletes one ClaimForm from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormItemCrud.SelectOne(System.Int64)">
            <summary>Gets one ClaimFormItem object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormItemCrud.SelectOne(System.String)">
            <summary>Gets one ClaimFormItem object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormItemCrud.SelectMany(System.String)">
            <summary>Gets a list of ClaimFormItem objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormItemCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormItemCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ClaimFormItem},System.String)">
            <summary>Converts a list of ClaimFormItem into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormItemCrud.Insert(OpenDentBusiness.ClaimFormItem)">
            <summary>Inserts one ClaimFormItem into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormItemCrud.Insert(OpenDentBusiness.ClaimFormItem,System.Boolean)">
            <summary>Inserts one ClaimFormItem into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormItemCrud.InsertNoCache(OpenDentBusiness.ClaimFormItem)">
            <summary>Inserts one ClaimFormItem into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormItemCrud.InsertNoCache(OpenDentBusiness.ClaimFormItem,System.Boolean)">
            <summary>Inserts one ClaimFormItem into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormItemCrud.Update(OpenDentBusiness.ClaimFormItem)">
            <summary>Updates one ClaimFormItem in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormItemCrud.Update(OpenDentBusiness.ClaimFormItem,OpenDentBusiness.ClaimFormItem)">
            <summary>Updates one ClaimFormItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormItemCrud.UpdateComparison(OpenDentBusiness.ClaimFormItem,OpenDentBusiness.ClaimFormItem)">
            <summary>Returns true if Update(ClaimFormItem,ClaimFormItem) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimFormItemCrud.Delete(System.Int64)">
            <summary>Deletes one ClaimFormItem from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimPaymentCrud.SelectOne(System.Int64)">
            <summary>Gets one ClaimPayment object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimPaymentCrud.SelectOne(System.String)">
            <summary>Gets one ClaimPayment object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimPaymentCrud.SelectMany(System.String)">
            <summary>Gets a list of ClaimPayment objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimPaymentCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimPaymentCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ClaimPayment},System.String)">
            <summary>Converts a list of ClaimPayment into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimPaymentCrud.Insert(OpenDentBusiness.ClaimPayment)">
            <summary>Inserts one ClaimPayment into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimPaymentCrud.Insert(OpenDentBusiness.ClaimPayment,System.Boolean)">
            <summary>Inserts one ClaimPayment into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimPaymentCrud.InsertNoCache(OpenDentBusiness.ClaimPayment)">
            <summary>Inserts one ClaimPayment into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimPaymentCrud.InsertNoCache(OpenDentBusiness.ClaimPayment,System.Boolean)">
            <summary>Inserts one ClaimPayment into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimPaymentCrud.Update(OpenDentBusiness.ClaimPayment)">
            <summary>Updates one ClaimPayment in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimPaymentCrud.Update(OpenDentBusiness.ClaimPayment,OpenDentBusiness.ClaimPayment)">
            <summary>Updates one ClaimPayment in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimPaymentCrud.UpdateComparison(OpenDentBusiness.ClaimPayment,OpenDentBusiness.ClaimPayment)">
            <summary>Returns true if Update(ClaimPayment,ClaimPayment) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimPaymentCrud.Delete(System.Int64)">
            <summary>Deletes one ClaimPayment from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimProcCrud.SelectOne(System.Int64)">
            <summary>Gets one ClaimProc object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimProcCrud.SelectOne(System.String)">
            <summary>Gets one ClaimProc object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimProcCrud.SelectMany(System.String)">
            <summary>Gets a list of ClaimProc objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimProcCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimProcCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ClaimProc},System.String)">
            <summary>Converts a list of ClaimProc into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimProcCrud.Insert(OpenDentBusiness.ClaimProc)">
            <summary>Inserts one ClaimProc into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimProcCrud.Insert(OpenDentBusiness.ClaimProc,System.Boolean)">
            <summary>Inserts one ClaimProc into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimProcCrud.InsertNoCache(OpenDentBusiness.ClaimProc)">
            <summary>Inserts one ClaimProc into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimProcCrud.InsertNoCache(OpenDentBusiness.ClaimProc,System.Boolean)">
            <summary>Inserts one ClaimProc into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimProcCrud.Update(OpenDentBusiness.ClaimProc)">
            <summary>Updates one ClaimProc in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimProcCrud.Update(OpenDentBusiness.ClaimProc,OpenDentBusiness.ClaimProc)">
            <summary>Updates one ClaimProc in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimProcCrud.UpdateComparison(OpenDentBusiness.ClaimProc,OpenDentBusiness.ClaimProc)">
            <summary>Returns true if Update(ClaimProc,ClaimProc) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimProcCrud.Delete(System.Int64)">
            <summary>Deletes one ClaimProc from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimValCodeLogCrud.SelectOne(System.Int64)">
            <summary>Gets one ClaimValCodeLog object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimValCodeLogCrud.SelectOne(System.String)">
            <summary>Gets one ClaimValCodeLog object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimValCodeLogCrud.SelectMany(System.String)">
            <summary>Gets a list of ClaimValCodeLog objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimValCodeLogCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimValCodeLogCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ClaimValCodeLog},System.String)">
            <summary>Converts a list of ClaimValCodeLog into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimValCodeLogCrud.Insert(OpenDentBusiness.ClaimValCodeLog)">
            <summary>Inserts one ClaimValCodeLog into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimValCodeLogCrud.Insert(OpenDentBusiness.ClaimValCodeLog,System.Boolean)">
            <summary>Inserts one ClaimValCodeLog into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimValCodeLogCrud.InsertNoCache(OpenDentBusiness.ClaimValCodeLog)">
            <summary>Inserts one ClaimValCodeLog into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimValCodeLogCrud.InsertNoCache(OpenDentBusiness.ClaimValCodeLog,System.Boolean)">
            <summary>Inserts one ClaimValCodeLog into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimValCodeLogCrud.Update(OpenDentBusiness.ClaimValCodeLog)">
            <summary>Updates one ClaimValCodeLog in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimValCodeLogCrud.Update(OpenDentBusiness.ClaimValCodeLog,OpenDentBusiness.ClaimValCodeLog)">
            <summary>Updates one ClaimValCodeLog in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimValCodeLogCrud.UpdateComparison(OpenDentBusiness.ClaimValCodeLog,OpenDentBusiness.ClaimValCodeLog)">
            <summary>Returns true if Update(ClaimValCodeLog,ClaimValCodeLog) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClaimValCodeLogCrud.Delete(System.Int64)">
            <summary>Deletes one ClaimValCodeLog from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClearinghouseCrud.SelectOne(System.Int64)">
            <summary>Gets one Clearinghouse object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClearinghouseCrud.SelectOne(System.String)">
            <summary>Gets one Clearinghouse object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClearinghouseCrud.SelectMany(System.String)">
            <summary>Gets a list of Clearinghouse objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClearinghouseCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClearinghouseCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Clearinghouse},System.String)">
            <summary>Converts a list of Clearinghouse into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClearinghouseCrud.Insert(OpenDentBusiness.Clearinghouse)">
            <summary>Inserts one Clearinghouse into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClearinghouseCrud.Insert(OpenDentBusiness.Clearinghouse,System.Boolean)">
            <summary>Inserts one Clearinghouse into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClearinghouseCrud.InsertNoCache(OpenDentBusiness.Clearinghouse)">
            <summary>Inserts one Clearinghouse into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClearinghouseCrud.InsertNoCache(OpenDentBusiness.Clearinghouse,System.Boolean)">
            <summary>Inserts one Clearinghouse into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClearinghouseCrud.Update(OpenDentBusiness.Clearinghouse)">
            <summary>Updates one Clearinghouse in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClearinghouseCrud.Update(OpenDentBusiness.Clearinghouse,OpenDentBusiness.Clearinghouse)">
            <summary>Updates one Clearinghouse in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClearinghouseCrud.UpdateComparison(OpenDentBusiness.Clearinghouse,OpenDentBusiness.Clearinghouse)">
            <summary>Returns true if Update(Clearinghouse,Clearinghouse) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClearinghouseCrud.Delete(System.Int64)">
            <summary>Deletes one Clearinghouse from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClearinghouseCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.Clearinghouse},System.Collections.Generic.List{OpenDentBusiness.Clearinghouse})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClinicCrud.SelectOne(System.Int64)">
            <summary>Gets one Clinic object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClinicCrud.SelectOne(System.String)">
            <summary>Gets one Clinic object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClinicCrud.SelectMany(System.String)">
            <summary>Gets a list of Clinic objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClinicCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClinicCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Clinic},System.String)">
            <summary>Converts a list of Clinic into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClinicCrud.Insert(OpenDentBusiness.Clinic)">
            <summary>Inserts one Clinic into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClinicCrud.Insert(OpenDentBusiness.Clinic,System.Boolean)">
            <summary>Inserts one Clinic into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClinicCrud.InsertNoCache(OpenDentBusiness.Clinic)">
            <summary>Inserts one Clinic into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClinicCrud.InsertNoCache(OpenDentBusiness.Clinic,System.Boolean)">
            <summary>Inserts one Clinic into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClinicCrud.Update(OpenDentBusiness.Clinic)">
            <summary>Updates one Clinic in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClinicCrud.Update(OpenDentBusiness.Clinic,OpenDentBusiness.Clinic)">
            <summary>Updates one Clinic in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClinicCrud.UpdateComparison(OpenDentBusiness.Clinic,OpenDentBusiness.Clinic)">
            <summary>Returns true if Update(Clinic,Clinic) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClinicCrud.Delete(System.Int64)">
            <summary>Deletes one Clinic from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClinicCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.Clinic},System.Collections.Generic.List{OpenDentBusiness.Clinic})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClockEventCrud.SelectOne(System.Int64)">
            <summary>Gets one ClockEvent object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClockEventCrud.SelectOne(System.String)">
            <summary>Gets one ClockEvent object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClockEventCrud.SelectMany(System.String)">
            <summary>Gets a list of ClockEvent objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClockEventCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClockEventCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ClockEvent},System.String)">
            <summary>Converts a list of ClockEvent into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClockEventCrud.Insert(OpenDentBusiness.ClockEvent)">
            <summary>Inserts one ClockEvent into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClockEventCrud.Insert(OpenDentBusiness.ClockEvent,System.Boolean)">
            <summary>Inserts one ClockEvent into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClockEventCrud.InsertNoCache(OpenDentBusiness.ClockEvent)">
            <summary>Inserts one ClockEvent into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClockEventCrud.InsertNoCache(OpenDentBusiness.ClockEvent,System.Boolean)">
            <summary>Inserts one ClockEvent into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClockEventCrud.Update(OpenDentBusiness.ClockEvent)">
            <summary>Updates one ClockEvent in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClockEventCrud.Update(OpenDentBusiness.ClockEvent,OpenDentBusiness.ClockEvent)">
            <summary>Updates one ClockEvent in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClockEventCrud.UpdateComparison(OpenDentBusiness.ClockEvent,OpenDentBusiness.ClockEvent)">
            <summary>Returns true if Update(ClockEvent,ClockEvent) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ClockEventCrud.Delete(System.Int64)">
            <summary>Deletes one ClockEvent from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CodeSystemCrud.SelectOne(System.Int64)">
            <summary>Gets one CodeSystem object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CodeSystemCrud.SelectOne(System.String)">
            <summary>Gets one CodeSystem object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CodeSystemCrud.SelectMany(System.String)">
            <summary>Gets a list of CodeSystem objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CodeSystemCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CodeSystemCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.CodeSystem},System.String)">
            <summary>Converts a list of CodeSystem into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CodeSystemCrud.Insert(OpenDentBusiness.CodeSystem)">
            <summary>Inserts one CodeSystem into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CodeSystemCrud.Insert(OpenDentBusiness.CodeSystem,System.Boolean)">
            <summary>Inserts one CodeSystem into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CodeSystemCrud.InsertNoCache(OpenDentBusiness.CodeSystem)">
            <summary>Inserts one CodeSystem into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CodeSystemCrud.InsertNoCache(OpenDentBusiness.CodeSystem,System.Boolean)">
            <summary>Inserts one CodeSystem into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CodeSystemCrud.Update(OpenDentBusiness.CodeSystem)">
            <summary>Updates one CodeSystem in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CodeSystemCrud.Update(OpenDentBusiness.CodeSystem,OpenDentBusiness.CodeSystem)">
            <summary>Updates one CodeSystem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CodeSystemCrud.UpdateComparison(OpenDentBusiness.CodeSystem,OpenDentBusiness.CodeSystem)">
            <summary>Returns true if Update(CodeSystem,CodeSystem) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CodeSystemCrud.Delete(System.Int64)">
            <summary>Deletes one CodeSystem from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CommlogCrud.SelectOne(System.Int64)">
            <summary>Gets one Commlog object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CommlogCrud.SelectOne(System.String)">
            <summary>Gets one Commlog object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CommlogCrud.SelectMany(System.String)">
            <summary>Gets a list of Commlog objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CommlogCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CommlogCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Commlog},System.String)">
            <summary>Converts a list of Commlog into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CommlogCrud.Insert(OpenDentBusiness.Commlog)">
            <summary>Inserts one Commlog into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CommlogCrud.Insert(OpenDentBusiness.Commlog,System.Boolean)">
            <summary>Inserts one Commlog into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CommlogCrud.InsertNoCache(OpenDentBusiness.Commlog)">
            <summary>Inserts one Commlog into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CommlogCrud.InsertNoCache(OpenDentBusiness.Commlog,System.Boolean)">
            <summary>Inserts one Commlog into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CommlogCrud.Update(OpenDentBusiness.Commlog)">
            <summary>Updates one Commlog in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CommlogCrud.Update(OpenDentBusiness.Commlog,OpenDentBusiness.Commlog)">
            <summary>Updates one Commlog in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CommlogCrud.UpdateComparison(OpenDentBusiness.Commlog,OpenDentBusiness.Commlog)">
            <summary>Returns true if Update(Commlog,Commlog) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CommlogCrud.Delete(System.Int64)">
            <summary>Deletes one Commlog from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerCrud.SelectOne(System.Int64)">
            <summary>Gets one Computer object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerCrud.SelectOne(System.String)">
            <summary>Gets one Computer object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerCrud.SelectMany(System.String)">
            <summary>Gets a list of Computer objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Computer},System.String)">
            <summary>Converts a list of Computer into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerCrud.Insert(OpenDentBusiness.Computer)">
            <summary>Inserts one Computer into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerCrud.Insert(OpenDentBusiness.Computer,System.Boolean)">
            <summary>Inserts one Computer into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerCrud.InsertNoCache(OpenDentBusiness.Computer)">
            <summary>Inserts one Computer into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerCrud.InsertNoCache(OpenDentBusiness.Computer,System.Boolean)">
            <summary>Inserts one Computer into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerCrud.Update(OpenDentBusiness.Computer)">
            <summary>Updates one Computer in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerCrud.Update(OpenDentBusiness.Computer,OpenDentBusiness.Computer)">
            <summary>Updates one Computer in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerCrud.UpdateComparison(OpenDentBusiness.Computer,OpenDentBusiness.Computer)">
            <summary>Returns true if Update(Computer,Computer) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerCrud.Delete(System.Int64)">
            <summary>Deletes one Computer from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerPrefCrud.SelectOne(System.Int64)">
            <summary>Gets one ComputerPref object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerPrefCrud.SelectOne(System.String)">
            <summary>Gets one ComputerPref object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerPrefCrud.SelectMany(System.String)">
            <summary>Gets a list of ComputerPref objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerPrefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerPrefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ComputerPref},System.String)">
            <summary>Converts a list of ComputerPref into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerPrefCrud.Insert(OpenDentBusiness.ComputerPref)">
            <summary>Inserts one ComputerPref into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerPrefCrud.Insert(OpenDentBusiness.ComputerPref,System.Boolean)">
            <summary>Inserts one ComputerPref into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerPrefCrud.InsertNoCache(OpenDentBusiness.ComputerPref)">
            <summary>Inserts one ComputerPref into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerPrefCrud.InsertNoCache(OpenDentBusiness.ComputerPref,System.Boolean)">
            <summary>Inserts one ComputerPref into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerPrefCrud.Update(OpenDentBusiness.ComputerPref)">
            <summary>Updates one ComputerPref in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerPrefCrud.Update(OpenDentBusiness.ComputerPref,OpenDentBusiness.ComputerPref)">
            <summary>Updates one ComputerPref in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerPrefCrud.UpdateComparison(OpenDentBusiness.ComputerPref,OpenDentBusiness.ComputerPref)">
            <summary>Returns true if Update(ComputerPref,ComputerPref) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ComputerPrefCrud.Delete(System.Int64)">
            <summary>Deletes one ComputerPref from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ContactCrud.SelectOne(System.Int64)">
            <summary>Gets one Contact object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ContactCrud.SelectOne(System.String)">
            <summary>Gets one Contact object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ContactCrud.SelectMany(System.String)">
            <summary>Gets a list of Contact objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ContactCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ContactCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Contact},System.String)">
            <summary>Converts a list of Contact into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ContactCrud.Insert(OpenDentBusiness.Contact)">
            <summary>Inserts one Contact into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ContactCrud.Insert(OpenDentBusiness.Contact,System.Boolean)">
            <summary>Inserts one Contact into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ContactCrud.InsertNoCache(OpenDentBusiness.Contact)">
            <summary>Inserts one Contact into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ContactCrud.InsertNoCache(OpenDentBusiness.Contact,System.Boolean)">
            <summary>Inserts one Contact into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ContactCrud.Update(OpenDentBusiness.Contact)">
            <summary>Updates one Contact in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ContactCrud.Update(OpenDentBusiness.Contact,OpenDentBusiness.Contact)">
            <summary>Updates one Contact in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ContactCrud.UpdateComparison(OpenDentBusiness.Contact,OpenDentBusiness.Contact)">
            <summary>Returns true if Update(Contact,Contact) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ContactCrud.Delete(System.Int64)">
            <summary>Deletes one Contact from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CountyCrud.SelectOne(System.Int64)">
            <summary>Gets one County object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CountyCrud.SelectOne(System.String)">
            <summary>Gets one County object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CountyCrud.SelectMany(System.String)">
            <summary>Gets a list of County objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CountyCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CountyCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.County},System.String)">
            <summary>Converts a list of County into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CountyCrud.Insert(OpenDentBusiness.County)">
            <summary>Inserts one County into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CountyCrud.Insert(OpenDentBusiness.County,System.Boolean)">
            <summary>Inserts one County into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CountyCrud.InsertNoCache(OpenDentBusiness.County)">
            <summary>Inserts one County into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CountyCrud.InsertNoCache(OpenDentBusiness.County,System.Boolean)">
            <summary>Inserts one County into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CountyCrud.Update(OpenDentBusiness.County)">
            <summary>Updates one County in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CountyCrud.Update(OpenDentBusiness.County,OpenDentBusiness.County)">
            <summary>Updates one County in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CountyCrud.UpdateComparison(OpenDentBusiness.County,OpenDentBusiness.County)">
            <summary>Returns true if Update(County,County) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CountyCrud.Delete(System.Int64)">
            <summary>Deletes one County from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovCatCrud.SelectOne(System.Int64)">
            <summary>Gets one CovCat object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovCatCrud.SelectOne(System.String)">
            <summary>Gets one CovCat object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovCatCrud.SelectMany(System.String)">
            <summary>Gets a list of CovCat objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovCatCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovCatCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.CovCat},System.String)">
            <summary>Converts a list of CovCat into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovCatCrud.Insert(OpenDentBusiness.CovCat)">
            <summary>Inserts one CovCat into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovCatCrud.Insert(OpenDentBusiness.CovCat,System.Boolean)">
            <summary>Inserts one CovCat into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovCatCrud.InsertNoCache(OpenDentBusiness.CovCat)">
            <summary>Inserts one CovCat into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovCatCrud.InsertNoCache(OpenDentBusiness.CovCat,System.Boolean)">
            <summary>Inserts one CovCat into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovCatCrud.Update(OpenDentBusiness.CovCat)">
            <summary>Updates one CovCat in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovCatCrud.Update(OpenDentBusiness.CovCat,OpenDentBusiness.CovCat)">
            <summary>Updates one CovCat in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovCatCrud.UpdateComparison(OpenDentBusiness.CovCat,OpenDentBusiness.CovCat)">
            <summary>Returns true if Update(CovCat,CovCat) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovCatCrud.Delete(System.Int64)">
            <summary>Deletes one CovCat from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovSpanCrud.SelectOne(System.Int64)">
            <summary>Gets one CovSpan object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovSpanCrud.SelectOne(System.String)">
            <summary>Gets one CovSpan object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovSpanCrud.SelectMany(System.String)">
            <summary>Gets a list of CovSpan objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovSpanCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovSpanCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.CovSpan},System.String)">
            <summary>Converts a list of CovSpan into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovSpanCrud.Insert(OpenDentBusiness.CovSpan)">
            <summary>Inserts one CovSpan into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovSpanCrud.Insert(OpenDentBusiness.CovSpan,System.Boolean)">
            <summary>Inserts one CovSpan into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovSpanCrud.InsertNoCache(OpenDentBusiness.CovSpan)">
            <summary>Inserts one CovSpan into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovSpanCrud.InsertNoCache(OpenDentBusiness.CovSpan,System.Boolean)">
            <summary>Inserts one CovSpan into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovSpanCrud.Update(OpenDentBusiness.CovSpan)">
            <summary>Updates one CovSpan in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovSpanCrud.Update(OpenDentBusiness.CovSpan,OpenDentBusiness.CovSpan)">
            <summary>Updates one CovSpan in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovSpanCrud.UpdateComparison(OpenDentBusiness.CovSpan,OpenDentBusiness.CovSpan)">
            <summary>Returns true if Update(CovSpan,CovSpan) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CovSpanCrud.Delete(System.Int64)">
            <summary>Deletes one CovSpan from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CptCrud.SelectOne(System.Int64)">
            <summary>Gets one Cpt object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CptCrud.SelectOne(System.String)">
            <summary>Gets one Cpt object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CptCrud.SelectMany(System.String)">
            <summary>Gets a list of Cpt objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CptCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CptCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Cpt},System.String)">
            <summary>Converts a list of Cpt into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CptCrud.Insert(OpenDentBusiness.Cpt)">
            <summary>Inserts one Cpt into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CptCrud.Insert(OpenDentBusiness.Cpt,System.Boolean)">
            <summary>Inserts one Cpt into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CptCrud.InsertNoCache(OpenDentBusiness.Cpt)">
            <summary>Inserts one Cpt into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CptCrud.InsertNoCache(OpenDentBusiness.Cpt,System.Boolean)">
            <summary>Inserts one Cpt into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CptCrud.Update(OpenDentBusiness.Cpt)">
            <summary>Updates one Cpt in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CptCrud.Update(OpenDentBusiness.Cpt,OpenDentBusiness.Cpt)">
            <summary>Updates one Cpt in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CptCrud.UpdateComparison(OpenDentBusiness.Cpt,OpenDentBusiness.Cpt)">
            <summary>Returns true if Update(Cpt,Cpt) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CptCrud.Delete(System.Int64)">
            <summary>Deletes one Cpt from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CreditCardCrud.SelectOne(System.Int64)">
            <summary>Gets one CreditCard object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CreditCardCrud.SelectOne(System.String)">
            <summary>Gets one CreditCard object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CreditCardCrud.SelectMany(System.String)">
            <summary>Gets a list of CreditCard objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CreditCardCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CreditCardCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.CreditCard},System.String)">
            <summary>Converts a list of CreditCard into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CreditCardCrud.Insert(OpenDentBusiness.CreditCard)">
            <summary>Inserts one CreditCard into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CreditCardCrud.Insert(OpenDentBusiness.CreditCard,System.Boolean)">
            <summary>Inserts one CreditCard into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CreditCardCrud.InsertNoCache(OpenDentBusiness.CreditCard)">
            <summary>Inserts one CreditCard into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CreditCardCrud.InsertNoCache(OpenDentBusiness.CreditCard,System.Boolean)">
            <summary>Inserts one CreditCard into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CreditCardCrud.Update(OpenDentBusiness.CreditCard)">
            <summary>Updates one CreditCard in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CreditCardCrud.Update(OpenDentBusiness.CreditCard,OpenDentBusiness.CreditCard)">
            <summary>Updates one CreditCard in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CreditCardCrud.UpdateComparison(OpenDentBusiness.CreditCard,OpenDentBusiness.CreditCard)">
            <summary>Returns true if Update(CreditCard,CreditCard) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CreditCardCrud.Delete(System.Int64)">
            <summary>Deletes one CreditCard from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustRefEntryCrud.SelectOne(System.Int64)">
            <summary>Gets one CustRefEntry object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustRefEntryCrud.SelectOne(System.String)">
            <summary>Gets one CustRefEntry object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustRefEntryCrud.SelectMany(System.String)">
            <summary>Gets a list of CustRefEntry objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustRefEntryCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustRefEntryCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.CustRefEntry},System.String)">
            <summary>Converts a list of CustRefEntry into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustRefEntryCrud.Insert(OpenDentBusiness.CustRefEntry)">
            <summary>Inserts one CustRefEntry into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustRefEntryCrud.Insert(OpenDentBusiness.CustRefEntry,System.Boolean)">
            <summary>Inserts one CustRefEntry into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustRefEntryCrud.InsertNoCache(OpenDentBusiness.CustRefEntry)">
            <summary>Inserts one CustRefEntry into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustRefEntryCrud.InsertNoCache(OpenDentBusiness.CustRefEntry,System.Boolean)">
            <summary>Inserts one CustRefEntry into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustRefEntryCrud.Update(OpenDentBusiness.CustRefEntry)">
            <summary>Updates one CustRefEntry in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustRefEntryCrud.Update(OpenDentBusiness.CustRefEntry,OpenDentBusiness.CustRefEntry)">
            <summary>Updates one CustRefEntry in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustRefEntryCrud.UpdateComparison(OpenDentBusiness.CustRefEntry,OpenDentBusiness.CustRefEntry)">
            <summary>Returns true if Update(CustRefEntry,CustRefEntry) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustRefEntryCrud.Delete(System.Int64)">
            <summary>Deletes one CustRefEntry from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustReferenceCrud.SelectOne(System.Int64)">
            <summary>Gets one CustReference object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustReferenceCrud.SelectOne(System.String)">
            <summary>Gets one CustReference object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustReferenceCrud.SelectMany(System.String)">
            <summary>Gets a list of CustReference objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustReferenceCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustReferenceCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.CustReference},System.String)">
            <summary>Converts a list of CustReference into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustReferenceCrud.Insert(OpenDentBusiness.CustReference)">
            <summary>Inserts one CustReference into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustReferenceCrud.Insert(OpenDentBusiness.CustReference,System.Boolean)">
            <summary>Inserts one CustReference into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustReferenceCrud.InsertNoCache(OpenDentBusiness.CustReference)">
            <summary>Inserts one CustReference into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustReferenceCrud.InsertNoCache(OpenDentBusiness.CustReference,System.Boolean)">
            <summary>Inserts one CustReference into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustReferenceCrud.Update(OpenDentBusiness.CustReference)">
            <summary>Updates one CustReference in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustReferenceCrud.Update(OpenDentBusiness.CustReference,OpenDentBusiness.CustReference)">
            <summary>Updates one CustReference in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustReferenceCrud.UpdateComparison(OpenDentBusiness.CustReference,OpenDentBusiness.CustReference)">
            <summary>Returns true if Update(CustReference,CustReference) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CustReferenceCrud.Delete(System.Int64)">
            <summary>Deletes one CustReference from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CvxCrud.SelectOne(System.Int64)">
            <summary>Gets one Cvx object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CvxCrud.SelectOne(System.String)">
            <summary>Gets one Cvx object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CvxCrud.SelectMany(System.String)">
            <summary>Gets a list of Cvx objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CvxCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CvxCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Cvx},System.String)">
            <summary>Converts a list of Cvx into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CvxCrud.Insert(OpenDentBusiness.Cvx)">
            <summary>Inserts one Cvx into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CvxCrud.Insert(OpenDentBusiness.Cvx,System.Boolean)">
            <summary>Inserts one Cvx into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CvxCrud.InsertNoCache(OpenDentBusiness.Cvx)">
            <summary>Inserts one Cvx into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CvxCrud.InsertNoCache(OpenDentBusiness.Cvx,System.Boolean)">
            <summary>Inserts one Cvx into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CvxCrud.Update(OpenDentBusiness.Cvx)">
            <summary>Updates one Cvx in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CvxCrud.Update(OpenDentBusiness.Cvx,OpenDentBusiness.Cvx)">
            <summary>Updates one Cvx in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CvxCrud.UpdateComparison(OpenDentBusiness.Cvx,OpenDentBusiness.Cvx)">
            <summary>Returns true if Update(Cvx,Cvx) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.CvxCrud.Delete(System.Int64)">
            <summary>Deletes one Cvx from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardARCrud.SelectOne(System.Int64)">
            <summary>Gets one DashboardAR object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardARCrud.SelectOne(System.String)">
            <summary>Gets one DashboardAR object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardARCrud.SelectMany(System.String)">
            <summary>Gets a list of DashboardAR objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardARCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardARCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.DashboardAR},System.String)">
            <summary>Converts a list of DashboardAR into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardARCrud.Insert(OpenDentBusiness.DashboardAR)">
            <summary>Inserts one DashboardAR into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardARCrud.Insert(OpenDentBusiness.DashboardAR,System.Boolean)">
            <summary>Inserts one DashboardAR into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardARCrud.InsertNoCache(OpenDentBusiness.DashboardAR)">
            <summary>Inserts one DashboardAR into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardARCrud.InsertNoCache(OpenDentBusiness.DashboardAR,System.Boolean)">
            <summary>Inserts one DashboardAR into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardARCrud.Update(OpenDentBusiness.DashboardAR)">
            <summary>Updates one DashboardAR in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardARCrud.Update(OpenDentBusiness.DashboardAR,OpenDentBusiness.DashboardAR)">
            <summary>Updates one DashboardAR in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardARCrud.UpdateComparison(OpenDentBusiness.DashboardAR,OpenDentBusiness.DashboardAR)">
            <summary>Returns true if Update(DashboardAR,DashboardAR) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DashboardARCrud.Delete(System.Int64)">
            <summary>Deletes one DashboardAR from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DefCrud.SelectOne(System.Int64)">
            <summary>Gets one Def object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DefCrud.SelectOne(System.String)">
            <summary>Gets one Def object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DefCrud.SelectMany(System.String)">
            <summary>Gets a list of Def objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Def},System.String)">
            <summary>Converts a list of Def into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DefCrud.Insert(OpenDentBusiness.Def)">
            <summary>Inserts one Def into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DefCrud.Insert(OpenDentBusiness.Def,System.Boolean)">
            <summary>Inserts one Def into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DefCrud.InsertNoCache(OpenDentBusiness.Def)">
            <summary>Inserts one Def into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DefCrud.InsertNoCache(OpenDentBusiness.Def,System.Boolean)">
            <summary>Inserts one Def into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DefCrud.Update(OpenDentBusiness.Def)">
            <summary>Updates one Def in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DefCrud.Update(OpenDentBusiness.Def,OpenDentBusiness.Def)">
            <summary>Updates one Def in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DefCrud.UpdateComparison(OpenDentBusiness.Def,OpenDentBusiness.Def)">
            <summary>Returns true if Update(Def,Def) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DefCrud.Delete(System.Int64)">
            <summary>Deletes one Def from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DeletedObjectCrud.SelectOne(System.Int64)">
            <summary>Gets one DeletedObject object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DeletedObjectCrud.SelectOne(System.String)">
            <summary>Gets one DeletedObject object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DeletedObjectCrud.SelectMany(System.String)">
            <summary>Gets a list of DeletedObject objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DeletedObjectCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DeletedObjectCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.DeletedObject},System.String)">
            <summary>Converts a list of DeletedObject into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DeletedObjectCrud.Insert(OpenDentBusiness.DeletedObject)">
            <summary>Inserts one DeletedObject into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DeletedObjectCrud.Insert(OpenDentBusiness.DeletedObject,System.Boolean)">
            <summary>Inserts one DeletedObject into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DeletedObjectCrud.InsertNoCache(OpenDentBusiness.DeletedObject)">
            <summary>Inserts one DeletedObject into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DeletedObjectCrud.InsertNoCache(OpenDentBusiness.DeletedObject,System.Boolean)">
            <summary>Inserts one DeletedObject into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DeletedObjectCrud.Update(OpenDentBusiness.DeletedObject)">
            <summary>Updates one DeletedObject in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DeletedObjectCrud.Update(OpenDentBusiness.DeletedObject,OpenDentBusiness.DeletedObject)">
            <summary>Updates one DeletedObject in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DeletedObjectCrud.UpdateComparison(OpenDentBusiness.DeletedObject,OpenDentBusiness.DeletedObject)">
            <summary>Returns true if Update(DeletedObject,DeletedObject) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DeletedObjectCrud.Delete(System.Int64)">
            <summary>Deletes one DeletedObject from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DepositCrud.SelectOne(System.Int64)">
            <summary>Gets one Deposit object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DepositCrud.SelectOne(System.String)">
            <summary>Gets one Deposit object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DepositCrud.SelectMany(System.String)">
            <summary>Gets a list of Deposit objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DepositCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DepositCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Deposit},System.String)">
            <summary>Converts a list of Deposit into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DepositCrud.Insert(OpenDentBusiness.Deposit)">
            <summary>Inserts one Deposit into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DepositCrud.Insert(OpenDentBusiness.Deposit,System.Boolean)">
            <summary>Inserts one Deposit into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DepositCrud.InsertNoCache(OpenDentBusiness.Deposit)">
            <summary>Inserts one Deposit into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DepositCrud.InsertNoCache(OpenDentBusiness.Deposit,System.Boolean)">
            <summary>Inserts one Deposit into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DepositCrud.Update(OpenDentBusiness.Deposit)">
            <summary>Updates one Deposit in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DepositCrud.Update(OpenDentBusiness.Deposit,OpenDentBusiness.Deposit)">
            <summary>Updates one Deposit in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DepositCrud.UpdateComparison(OpenDentBusiness.Deposit,OpenDentBusiness.Deposit)">
            <summary>Returns true if Update(Deposit,Deposit) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DepositCrud.Delete(System.Int64)">
            <summary>Deletes one Deposit from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DictCustomCrud.SelectOne(System.Int64)">
            <summary>Gets one DictCustom object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DictCustomCrud.SelectOne(System.String)">
            <summary>Gets one DictCustom object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DictCustomCrud.SelectMany(System.String)">
            <summary>Gets a list of DictCustom objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DictCustomCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DictCustomCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.DictCustom},System.String)">
            <summary>Converts a list of DictCustom into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DictCustomCrud.Insert(OpenDentBusiness.DictCustom)">
            <summary>Inserts one DictCustom into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DictCustomCrud.Insert(OpenDentBusiness.DictCustom,System.Boolean)">
            <summary>Inserts one DictCustom into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DictCustomCrud.InsertNoCache(OpenDentBusiness.DictCustom)">
            <summary>Inserts one DictCustom into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DictCustomCrud.InsertNoCache(OpenDentBusiness.DictCustom,System.Boolean)">
            <summary>Inserts one DictCustom into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DictCustomCrud.Update(OpenDentBusiness.DictCustom)">
            <summary>Updates one DictCustom in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DictCustomCrud.Update(OpenDentBusiness.DictCustom,OpenDentBusiness.DictCustom)">
            <summary>Updates one DictCustom in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DictCustomCrud.UpdateComparison(OpenDentBusiness.DictCustom,OpenDentBusiness.DictCustom)">
            <summary>Returns true if Update(DictCustom,DictCustom) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DictCustomCrud.Delete(System.Int64)">
            <summary>Deletes one DictCustom from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseCrud.SelectOne(System.Int64)">
            <summary>Gets one Disease object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseCrud.SelectOne(System.String)">
            <summary>Gets one Disease object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseCrud.SelectMany(System.String)">
            <summary>Gets a list of Disease objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Disease},System.String)">
            <summary>Converts a list of Disease into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseCrud.Insert(OpenDentBusiness.Disease)">
            <summary>Inserts one Disease into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseCrud.Insert(OpenDentBusiness.Disease,System.Boolean)">
            <summary>Inserts one Disease into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseCrud.InsertNoCache(OpenDentBusiness.Disease)">
            <summary>Inserts one Disease into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseCrud.InsertNoCache(OpenDentBusiness.Disease,System.Boolean)">
            <summary>Inserts one Disease into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseCrud.Update(OpenDentBusiness.Disease)">
            <summary>Updates one Disease in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseCrud.Update(OpenDentBusiness.Disease,OpenDentBusiness.Disease)">
            <summary>Updates one Disease in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseCrud.UpdateComparison(OpenDentBusiness.Disease,OpenDentBusiness.Disease)">
            <summary>Returns true if Update(Disease,Disease) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseCrud.Delete(System.Int64)">
            <summary>Deletes one Disease from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseDefCrud.SelectOne(System.Int64)">
            <summary>Gets one DiseaseDef object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseDefCrud.SelectOne(System.String)">
            <summary>Gets one DiseaseDef object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseDefCrud.SelectMany(System.String)">
            <summary>Gets a list of DiseaseDef objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseDefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseDefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.DiseaseDef},System.String)">
            <summary>Converts a list of DiseaseDef into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseDefCrud.Insert(OpenDentBusiness.DiseaseDef)">
            <summary>Inserts one DiseaseDef into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseDefCrud.Insert(OpenDentBusiness.DiseaseDef,System.Boolean)">
            <summary>Inserts one DiseaseDef into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseDefCrud.InsertNoCache(OpenDentBusiness.DiseaseDef)">
            <summary>Inserts one DiseaseDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseDefCrud.InsertNoCache(OpenDentBusiness.DiseaseDef,System.Boolean)">
            <summary>Inserts one DiseaseDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseDefCrud.Update(OpenDentBusiness.DiseaseDef)">
            <summary>Updates one DiseaseDef in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseDefCrud.Update(OpenDentBusiness.DiseaseDef,OpenDentBusiness.DiseaseDef)">
            <summary>Updates one DiseaseDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseDefCrud.UpdateComparison(OpenDentBusiness.DiseaseDef,OpenDentBusiness.DiseaseDef)">
            <summary>Returns true if Update(DiseaseDef,DiseaseDef) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseDefCrud.Delete(System.Int64)">
            <summary>Deletes one DiseaseDef from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DiseaseDefCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.DiseaseDef},System.Collections.Generic.List{OpenDentBusiness.DiseaseDef})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayFieldCrud.SelectOne(System.Int64)">
            <summary>Gets one DisplayField object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayFieldCrud.SelectOne(System.String)">
            <summary>Gets one DisplayField object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayFieldCrud.SelectMany(System.String)">
            <summary>Gets a list of DisplayField objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayFieldCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayFieldCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.DisplayField},System.String)">
            <summary>Converts a list of DisplayField into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayFieldCrud.Insert(OpenDentBusiness.DisplayField)">
            <summary>Inserts one DisplayField into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayFieldCrud.Insert(OpenDentBusiness.DisplayField,System.Boolean)">
            <summary>Inserts one DisplayField into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayFieldCrud.InsertNoCache(OpenDentBusiness.DisplayField)">
            <summary>Inserts one DisplayField into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayFieldCrud.InsertNoCache(OpenDentBusiness.DisplayField,System.Boolean)">
            <summary>Inserts one DisplayField into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayFieldCrud.Update(OpenDentBusiness.DisplayField)">
            <summary>Updates one DisplayField in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayFieldCrud.Update(OpenDentBusiness.DisplayField,OpenDentBusiness.DisplayField)">
            <summary>Updates one DisplayField in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayFieldCrud.UpdateComparison(OpenDentBusiness.DisplayField,OpenDentBusiness.DisplayField)">
            <summary>Returns true if Update(DisplayField,DisplayField) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DisplayFieldCrud.Delete(System.Int64)">
            <summary>Deletes one DisplayField from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentCrud.SelectOne(System.Int64)">
            <summary>Gets one Document object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentCrud.SelectOne(System.String)">
            <summary>Gets one Document object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentCrud.SelectMany(System.String)">
            <summary>Gets a list of Document objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Document},System.String)">
            <summary>Converts a list of Document into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentCrud.Insert(OpenDentBusiness.Document)">
            <summary>Inserts one Document into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentCrud.Insert(OpenDentBusiness.Document,System.Boolean)">
            <summary>Inserts one Document into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentCrud.InsertNoCache(OpenDentBusiness.Document)">
            <summary>Inserts one Document into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentCrud.InsertNoCache(OpenDentBusiness.Document,System.Boolean)">
            <summary>Inserts one Document into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentCrud.Update(OpenDentBusiness.Document)">
            <summary>Updates one Document in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentCrud.Update(OpenDentBusiness.Document,OpenDentBusiness.Document)">
            <summary>Updates one Document in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentCrud.UpdateComparison(OpenDentBusiness.Document,OpenDentBusiness.Document)">
            <summary>Returns true if Update(Document,Document) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentCrud.Delete(System.Int64)">
            <summary>Deletes one Document from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentCrud.ClearFkey(System.Int64)">
            <summary>Zeros securitylog FKey column for rows that are using the matching docNum as FKey and are related to Document.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Document table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentCrud.ClearFkey(System.Collections.Generic.List{System.Int64})">
            <summary>Zeros securitylog FKey column for rows that are using the matching docNums as FKey and are related to Document.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Document table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentMiscCrud.SelectOne(System.Int64)">
            <summary>Gets one DocumentMisc object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentMiscCrud.SelectOne(System.String)">
            <summary>Gets one DocumentMisc object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentMiscCrud.SelectMany(System.String)">
            <summary>Gets a list of DocumentMisc objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentMiscCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentMiscCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.DocumentMisc},System.String)">
            <summary>Converts a list of DocumentMisc into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentMiscCrud.Insert(OpenDentBusiness.DocumentMisc)">
            <summary>Inserts one DocumentMisc into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentMiscCrud.Insert(OpenDentBusiness.DocumentMisc,System.Boolean)">
            <summary>Inserts one DocumentMisc into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentMiscCrud.InsertNoCache(OpenDentBusiness.DocumentMisc)">
            <summary>Inserts one DocumentMisc into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentMiscCrud.InsertNoCache(OpenDentBusiness.DocumentMisc,System.Boolean)">
            <summary>Inserts one DocumentMisc into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentMiscCrud.Update(OpenDentBusiness.DocumentMisc)">
            <summary>Updates one DocumentMisc in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentMiscCrud.Update(OpenDentBusiness.DocumentMisc,OpenDentBusiness.DocumentMisc)">
            <summary>Updates one DocumentMisc in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentMiscCrud.UpdateComparison(OpenDentBusiness.DocumentMisc,OpenDentBusiness.DocumentMisc)">
            <summary>Returns true if Update(DocumentMisc,DocumentMisc) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DocumentMiscCrud.Delete(System.Int64)">
            <summary>Deletes one DocumentMisc from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugManufacturerCrud.SelectOne(System.Int64)">
            <summary>Gets one DrugManufacturer object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugManufacturerCrud.SelectOne(System.String)">
            <summary>Gets one DrugManufacturer object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugManufacturerCrud.SelectMany(System.String)">
            <summary>Gets a list of DrugManufacturer objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugManufacturerCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugManufacturerCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.DrugManufacturer},System.String)">
            <summary>Converts a list of DrugManufacturer into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugManufacturerCrud.Insert(OpenDentBusiness.DrugManufacturer)">
            <summary>Inserts one DrugManufacturer into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugManufacturerCrud.Insert(OpenDentBusiness.DrugManufacturer,System.Boolean)">
            <summary>Inserts one DrugManufacturer into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugManufacturerCrud.InsertNoCache(OpenDentBusiness.DrugManufacturer)">
            <summary>Inserts one DrugManufacturer into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugManufacturerCrud.InsertNoCache(OpenDentBusiness.DrugManufacturer,System.Boolean)">
            <summary>Inserts one DrugManufacturer into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugManufacturerCrud.Update(OpenDentBusiness.DrugManufacturer)">
            <summary>Updates one DrugManufacturer in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugManufacturerCrud.Update(OpenDentBusiness.DrugManufacturer,OpenDentBusiness.DrugManufacturer)">
            <summary>Updates one DrugManufacturer in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugManufacturerCrud.UpdateComparison(OpenDentBusiness.DrugManufacturer,OpenDentBusiness.DrugManufacturer)">
            <summary>Returns true if Update(DrugManufacturer,DrugManufacturer) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugManufacturerCrud.Delete(System.Int64)">
            <summary>Deletes one DrugManufacturer from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugUnitCrud.SelectOne(System.Int64)">
            <summary>Gets one DrugUnit object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugUnitCrud.SelectOne(System.String)">
            <summary>Gets one DrugUnit object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugUnitCrud.SelectMany(System.String)">
            <summary>Gets a list of DrugUnit objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugUnitCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugUnitCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.DrugUnit},System.String)">
            <summary>Converts a list of DrugUnit into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugUnitCrud.Insert(OpenDentBusiness.DrugUnit)">
            <summary>Inserts one DrugUnit into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugUnitCrud.Insert(OpenDentBusiness.DrugUnit,System.Boolean)">
            <summary>Inserts one DrugUnit into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugUnitCrud.InsertNoCache(OpenDentBusiness.DrugUnit)">
            <summary>Inserts one DrugUnit into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugUnitCrud.InsertNoCache(OpenDentBusiness.DrugUnit,System.Boolean)">
            <summary>Inserts one DrugUnit into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugUnitCrud.Update(OpenDentBusiness.DrugUnit)">
            <summary>Updates one DrugUnit in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugUnitCrud.Update(OpenDentBusiness.DrugUnit,OpenDentBusiness.DrugUnit)">
            <summary>Updates one DrugUnit in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugUnitCrud.UpdateComparison(OpenDentBusiness.DrugUnit,OpenDentBusiness.DrugUnit)">
            <summary>Returns true if Update(DrugUnit,DrugUnit) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DrugUnitCrud.Delete(System.Int64)">
            <summary>Deletes one DrugUnit from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DunningCrud.SelectOne(System.Int64)">
            <summary>Gets one Dunning object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DunningCrud.SelectOne(System.String)">
            <summary>Gets one Dunning object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DunningCrud.SelectMany(System.String)">
            <summary>Gets a list of Dunning objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DunningCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DunningCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Dunning},System.String)">
            <summary>Converts a list of Dunning into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DunningCrud.Insert(OpenDentBusiness.Dunning)">
            <summary>Inserts one Dunning into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DunningCrud.Insert(OpenDentBusiness.Dunning,System.Boolean)">
            <summary>Inserts one Dunning into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DunningCrud.InsertNoCache(OpenDentBusiness.Dunning)">
            <summary>Inserts one Dunning into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DunningCrud.InsertNoCache(OpenDentBusiness.Dunning,System.Boolean)">
            <summary>Inserts one Dunning into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DunningCrud.Update(OpenDentBusiness.Dunning)">
            <summary>Updates one Dunning in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DunningCrud.Update(OpenDentBusiness.Dunning,OpenDentBusiness.Dunning)">
            <summary>Updates one Dunning in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DunningCrud.UpdateComparison(OpenDentBusiness.Dunning,OpenDentBusiness.Dunning)">
            <summary>Returns true if Update(Dunning,Dunning) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.DunningCrud.Delete(System.Int64)">
            <summary>Deletes one Dunning from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EduResourceCrud.SelectOne(System.Int64)">
            <summary>Gets one EduResource object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EduResourceCrud.SelectOne(System.String)">
            <summary>Gets one EduResource object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EduResourceCrud.SelectMany(System.String)">
            <summary>Gets a list of EduResource objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EduResourceCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EduResourceCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EduResource},System.String)">
            <summary>Converts a list of EduResource into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EduResourceCrud.Insert(OpenDentBusiness.EduResource)">
            <summary>Inserts one EduResource into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EduResourceCrud.Insert(OpenDentBusiness.EduResource,System.Boolean)">
            <summary>Inserts one EduResource into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EduResourceCrud.InsertNoCache(OpenDentBusiness.EduResource)">
            <summary>Inserts one EduResource into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EduResourceCrud.InsertNoCache(OpenDentBusiness.EduResource,System.Boolean)">
            <summary>Inserts one EduResource into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EduResourceCrud.Update(OpenDentBusiness.EduResource)">
            <summary>Updates one EduResource in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EduResourceCrud.Update(OpenDentBusiness.EduResource,OpenDentBusiness.EduResource)">
            <summary>Updates one EduResource in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EduResourceCrud.UpdateComparison(OpenDentBusiness.EduResource,OpenDentBusiness.EduResource)">
            <summary>Returns true if Update(EduResource,EduResource) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EduResourceCrud.Delete(System.Int64)">
            <summary>Deletes one EduResource from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAmendmentCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrAmendment object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAmendmentCrud.SelectOne(System.String)">
            <summary>Gets one EhrAmendment object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAmendmentCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrAmendment objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAmendmentCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAmendmentCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrAmendment},System.String)">
            <summary>Converts a list of EhrAmendment into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAmendmentCrud.Insert(OpenDentBusiness.EhrAmendment)">
            <summary>Inserts one EhrAmendment into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAmendmentCrud.Insert(OpenDentBusiness.EhrAmendment,System.Boolean)">
            <summary>Inserts one EhrAmendment into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAmendmentCrud.InsertNoCache(OpenDentBusiness.EhrAmendment)">
            <summary>Inserts one EhrAmendment into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAmendmentCrud.InsertNoCache(OpenDentBusiness.EhrAmendment,System.Boolean)">
            <summary>Inserts one EhrAmendment into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAmendmentCrud.Update(OpenDentBusiness.EhrAmendment)">
            <summary>Updates one EhrAmendment in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAmendmentCrud.Update(OpenDentBusiness.EhrAmendment,OpenDentBusiness.EhrAmendment)">
            <summary>Updates one EhrAmendment in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAmendmentCrud.UpdateComparison(OpenDentBusiness.EhrAmendment,OpenDentBusiness.EhrAmendment)">
            <summary>Returns true if Update(EhrAmendment,EhrAmendment) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrAmendmentCrud.Delete(System.Int64)">
            <summary>Deletes one EhrAmendment from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCodeCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrCode object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCodeCrud.SelectOne(System.String)">
            <summary>Gets one EhrCode object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCodeCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrCode objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCodeCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCodeCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrCode},System.String)">
            <summary>Converts a list of EhrCode into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCodeCrud.Insert(OpenDentBusiness.EhrCode)">
            <summary>Inserts one EhrCode into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCodeCrud.Insert(OpenDentBusiness.EhrCode,System.Boolean)">
            <summary>Inserts one EhrCode into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCodeCrud.InsertNoCache(OpenDentBusiness.EhrCode)">
            <summary>Inserts one EhrCode into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCodeCrud.InsertNoCache(OpenDentBusiness.EhrCode,System.Boolean)">
            <summary>Inserts one EhrCode into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCodeCrud.Update(OpenDentBusiness.EhrCode)">
            <summary>Updates one EhrCode in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCodeCrud.Update(OpenDentBusiness.EhrCode,OpenDentBusiness.EhrCode)">
            <summary>Updates one EhrCode in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCodeCrud.UpdateComparison(OpenDentBusiness.EhrCode,OpenDentBusiness.EhrCode)">
            <summary>Returns true if Update(EhrCode,EhrCode) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrCodeCrud.Delete(System.Int64)">
            <summary>Deletes one EhrCode from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrMeasure object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureCrud.SelectOne(System.String)">
            <summary>Gets one EhrMeasure object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrMeasure objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrMeasure},System.String)">
            <summary>Converts a list of EhrMeasure into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureCrud.Insert(OpenDentBusiness.EhrMeasure)">
            <summary>Inserts one EhrMeasure into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureCrud.Insert(OpenDentBusiness.EhrMeasure,System.Boolean)">
            <summary>Inserts one EhrMeasure into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureCrud.InsertNoCache(OpenDentBusiness.EhrMeasure)">
            <summary>Inserts one EhrMeasure into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureCrud.InsertNoCache(OpenDentBusiness.EhrMeasure,System.Boolean)">
            <summary>Inserts one EhrMeasure into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureCrud.Update(OpenDentBusiness.EhrMeasure)">
            <summary>Updates one EhrMeasure in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureCrud.Update(OpenDentBusiness.EhrMeasure,OpenDentBusiness.EhrMeasure)">
            <summary>Updates one EhrMeasure in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureCrud.UpdateComparison(OpenDentBusiness.EhrMeasure,OpenDentBusiness.EhrMeasure)">
            <summary>Returns true if Update(EhrMeasure,EhrMeasure) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureCrud.Delete(System.Int64)">
            <summary>Deletes one EhrMeasure from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureEventCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrMeasureEvent object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureEventCrud.SelectOne(System.String)">
            <summary>Gets one EhrMeasureEvent object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureEventCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrMeasureEvent objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureEventCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureEventCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrMeasureEvent},System.String)">
            <summary>Converts a list of EhrMeasureEvent into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureEventCrud.Insert(OpenDentBusiness.EhrMeasureEvent)">
            <summary>Inserts one EhrMeasureEvent into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureEventCrud.Insert(OpenDentBusiness.EhrMeasureEvent,System.Boolean)">
            <summary>Inserts one EhrMeasureEvent into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureEventCrud.InsertNoCache(OpenDentBusiness.EhrMeasureEvent)">
            <summary>Inserts one EhrMeasureEvent into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureEventCrud.InsertNoCache(OpenDentBusiness.EhrMeasureEvent,System.Boolean)">
            <summary>Inserts one EhrMeasureEvent into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureEventCrud.Update(OpenDentBusiness.EhrMeasureEvent)">
            <summary>Updates one EhrMeasureEvent in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureEventCrud.Update(OpenDentBusiness.EhrMeasureEvent,OpenDentBusiness.EhrMeasureEvent)">
            <summary>Updates one EhrMeasureEvent in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureEventCrud.UpdateComparison(OpenDentBusiness.EhrMeasureEvent,OpenDentBusiness.EhrMeasureEvent)">
            <summary>Returns true if Update(EhrMeasureEvent,EhrMeasureEvent) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrMeasureEventCrud.Delete(System.Int64)">
            <summary>Deletes one EhrMeasureEvent from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrNotPerformedCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrNotPerformed object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrNotPerformedCrud.SelectOne(System.String)">
            <summary>Gets one EhrNotPerformed object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrNotPerformedCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrNotPerformed objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrNotPerformedCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrNotPerformedCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrNotPerformed},System.String)">
            <summary>Converts a list of EhrNotPerformed into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrNotPerformedCrud.Insert(OpenDentBusiness.EhrNotPerformed)">
            <summary>Inserts one EhrNotPerformed into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrNotPerformedCrud.Insert(OpenDentBusiness.EhrNotPerformed,System.Boolean)">
            <summary>Inserts one EhrNotPerformed into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrNotPerformedCrud.InsertNoCache(OpenDentBusiness.EhrNotPerformed)">
            <summary>Inserts one EhrNotPerformed into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrNotPerformedCrud.InsertNoCache(OpenDentBusiness.EhrNotPerformed,System.Boolean)">
            <summary>Inserts one EhrNotPerformed into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrNotPerformedCrud.Update(OpenDentBusiness.EhrNotPerformed)">
            <summary>Updates one EhrNotPerformed in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrNotPerformedCrud.Update(OpenDentBusiness.EhrNotPerformed,OpenDentBusiness.EhrNotPerformed)">
            <summary>Updates one EhrNotPerformed in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrNotPerformedCrud.UpdateComparison(OpenDentBusiness.EhrNotPerformed,OpenDentBusiness.EhrNotPerformed)">
            <summary>Returns true if Update(EhrNotPerformed,EhrNotPerformed) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrNotPerformedCrud.Delete(System.Int64)">
            <summary>Deletes one EhrNotPerformed from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrProvKeyCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrProvKey object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrProvKeyCrud.SelectOne(System.String)">
            <summary>Gets one EhrProvKey object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrProvKeyCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrProvKey objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrProvKeyCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrProvKeyCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrProvKey},System.String)">
            <summary>Converts a list of EhrProvKey into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrProvKeyCrud.Insert(OpenDentBusiness.EhrProvKey)">
            <summary>Inserts one EhrProvKey into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrProvKeyCrud.Insert(OpenDentBusiness.EhrProvKey,System.Boolean)">
            <summary>Inserts one EhrProvKey into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrProvKeyCrud.InsertNoCache(OpenDentBusiness.EhrProvKey)">
            <summary>Inserts one EhrProvKey into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrProvKeyCrud.InsertNoCache(OpenDentBusiness.EhrProvKey,System.Boolean)">
            <summary>Inserts one EhrProvKey into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrProvKeyCrud.Update(OpenDentBusiness.EhrProvKey)">
            <summary>Updates one EhrProvKey in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrProvKeyCrud.Update(OpenDentBusiness.EhrProvKey,OpenDentBusiness.EhrProvKey)">
            <summary>Updates one EhrProvKey in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrProvKeyCrud.UpdateComparison(OpenDentBusiness.EhrProvKey,OpenDentBusiness.EhrProvKey)">
            <summary>Returns true if Update(EhrProvKey,EhrProvKey) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrProvKeyCrud.Delete(System.Int64)">
            <summary>Deletes one EhrProvKey from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrQuarterlyKeyCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrQuarterlyKey object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrQuarterlyKeyCrud.SelectOne(System.String)">
            <summary>Gets one EhrQuarterlyKey object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrQuarterlyKeyCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrQuarterlyKey objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrQuarterlyKeyCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrQuarterlyKeyCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrQuarterlyKey},System.String)">
            <summary>Converts a list of EhrQuarterlyKey into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrQuarterlyKeyCrud.Insert(OpenDentBusiness.EhrQuarterlyKey)">
            <summary>Inserts one EhrQuarterlyKey into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrQuarterlyKeyCrud.Insert(OpenDentBusiness.EhrQuarterlyKey,System.Boolean)">
            <summary>Inserts one EhrQuarterlyKey into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrQuarterlyKeyCrud.InsertNoCache(OpenDentBusiness.EhrQuarterlyKey)">
            <summary>Inserts one EhrQuarterlyKey into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrQuarterlyKeyCrud.InsertNoCache(OpenDentBusiness.EhrQuarterlyKey,System.Boolean)">
            <summary>Inserts one EhrQuarterlyKey into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrQuarterlyKeyCrud.Update(OpenDentBusiness.EhrQuarterlyKey)">
            <summary>Updates one EhrQuarterlyKey in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrQuarterlyKeyCrud.Update(OpenDentBusiness.EhrQuarterlyKey,OpenDentBusiness.EhrQuarterlyKey)">
            <summary>Updates one EhrQuarterlyKey in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrQuarterlyKeyCrud.UpdateComparison(OpenDentBusiness.EhrQuarterlyKey,OpenDentBusiness.EhrQuarterlyKey)">
            <summary>Returns true if Update(EhrQuarterlyKey,EhrQuarterlyKey) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrQuarterlyKeyCrud.Delete(System.Int64)">
            <summary>Deletes one EhrQuarterlyKey from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrSummaryCcdCrud.SelectOne(System.Int64)">
            <summary>Gets one EhrSummaryCcd object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrSummaryCcdCrud.SelectOne(System.String)">
            <summary>Gets one EhrSummaryCcd object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrSummaryCcdCrud.SelectMany(System.String)">
            <summary>Gets a list of EhrSummaryCcd objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrSummaryCcdCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrSummaryCcdCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EhrSummaryCcd},System.String)">
            <summary>Converts a list of EhrSummaryCcd into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrSummaryCcdCrud.Insert(OpenDentBusiness.EhrSummaryCcd)">
            <summary>Inserts one EhrSummaryCcd into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrSummaryCcdCrud.Insert(OpenDentBusiness.EhrSummaryCcd,System.Boolean)">
            <summary>Inserts one EhrSummaryCcd into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrSummaryCcdCrud.InsertNoCache(OpenDentBusiness.EhrSummaryCcd)">
            <summary>Inserts one EhrSummaryCcd into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrSummaryCcdCrud.InsertNoCache(OpenDentBusiness.EhrSummaryCcd,System.Boolean)">
            <summary>Inserts one EhrSummaryCcd into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrSummaryCcdCrud.Update(OpenDentBusiness.EhrSummaryCcd)">
            <summary>Updates one EhrSummaryCcd in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrSummaryCcdCrud.Update(OpenDentBusiness.EhrSummaryCcd,OpenDentBusiness.EhrSummaryCcd)">
            <summary>Updates one EhrSummaryCcd in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrSummaryCcdCrud.UpdateComparison(OpenDentBusiness.EhrSummaryCcd,OpenDentBusiness.EhrSummaryCcd)">
            <summary>Returns true if Update(EhrSummaryCcd,EhrSummaryCcd) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EhrSummaryCcdCrud.Delete(System.Int64)">
            <summary>Deletes one EhrSummaryCcd from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ElectIDCrud.SelectOne(System.Int64)">
            <summary>Gets one ElectID object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ElectIDCrud.SelectOne(System.String)">
            <summary>Gets one ElectID object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ElectIDCrud.SelectMany(System.String)">
            <summary>Gets a list of ElectID objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ElectIDCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ElectIDCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ElectID},System.String)">
            <summary>Converts a list of ElectID into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ElectIDCrud.Insert(OpenDentBusiness.ElectID)">
            <summary>Inserts one ElectID into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ElectIDCrud.Insert(OpenDentBusiness.ElectID,System.Boolean)">
            <summary>Inserts one ElectID into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ElectIDCrud.InsertNoCache(OpenDentBusiness.ElectID)">
            <summary>Inserts one ElectID into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ElectIDCrud.InsertNoCache(OpenDentBusiness.ElectID,System.Boolean)">
            <summary>Inserts one ElectID into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ElectIDCrud.Update(OpenDentBusiness.ElectID)">
            <summary>Updates one ElectID in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ElectIDCrud.Update(OpenDentBusiness.ElectID,OpenDentBusiness.ElectID)">
            <summary>Updates one ElectID in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ElectIDCrud.UpdateComparison(OpenDentBusiness.ElectID,OpenDentBusiness.ElectID)">
            <summary>Returns true if Update(ElectID,ElectID) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ElectIDCrud.Delete(System.Int64)">
            <summary>Deletes one ElectID from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAddressCrud.SelectOne(System.Int64)">
            <summary>Gets one EmailAddress object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAddressCrud.SelectOne(System.String)">
            <summary>Gets one EmailAddress object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAddressCrud.SelectMany(System.String)">
            <summary>Gets a list of EmailAddress objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAddressCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAddressCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EmailAddress},System.String)">
            <summary>Converts a list of EmailAddress into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAddressCrud.Insert(OpenDentBusiness.EmailAddress)">
            <summary>Inserts one EmailAddress into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAddressCrud.Insert(OpenDentBusiness.EmailAddress,System.Boolean)">
            <summary>Inserts one EmailAddress into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAddressCrud.InsertNoCache(OpenDentBusiness.EmailAddress)">
            <summary>Inserts one EmailAddress into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAddressCrud.InsertNoCache(OpenDentBusiness.EmailAddress,System.Boolean)">
            <summary>Inserts one EmailAddress into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAddressCrud.Update(OpenDentBusiness.EmailAddress)">
            <summary>Updates one EmailAddress in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAddressCrud.Update(OpenDentBusiness.EmailAddress,OpenDentBusiness.EmailAddress)">
            <summary>Updates one EmailAddress in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAddressCrud.UpdateComparison(OpenDentBusiness.EmailAddress,OpenDentBusiness.EmailAddress)">
            <summary>Returns true if Update(EmailAddress,EmailAddress) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAddressCrud.Delete(System.Int64)">
            <summary>Deletes one EmailAddress from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAttachCrud.SelectOne(System.Int64)">
            <summary>Gets one EmailAttach object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAttachCrud.SelectOne(System.String)">
            <summary>Gets one EmailAttach object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAttachCrud.SelectMany(System.String)">
            <summary>Gets a list of EmailAttach objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAttachCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAttachCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EmailAttach},System.String)">
            <summary>Converts a list of EmailAttach into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAttachCrud.Insert(OpenDentBusiness.EmailAttach)">
            <summary>Inserts one EmailAttach into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAttachCrud.Insert(OpenDentBusiness.EmailAttach,System.Boolean)">
            <summary>Inserts one EmailAttach into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAttachCrud.InsertNoCache(OpenDentBusiness.EmailAttach)">
            <summary>Inserts one EmailAttach into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAttachCrud.InsertNoCache(OpenDentBusiness.EmailAttach,System.Boolean)">
            <summary>Inserts one EmailAttach into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAttachCrud.Update(OpenDentBusiness.EmailAttach)">
            <summary>Updates one EmailAttach in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAttachCrud.Update(OpenDentBusiness.EmailAttach,OpenDentBusiness.EmailAttach)">
            <summary>Updates one EmailAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAttachCrud.UpdateComparison(OpenDentBusiness.EmailAttach,OpenDentBusiness.EmailAttach)">
            <summary>Returns true if Update(EmailAttach,EmailAttach) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAttachCrud.Delete(System.Int64)">
            <summary>Deletes one EmailAttach from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAttachCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.EmailAttach},System.Collections.Generic.List{OpenDentBusiness.EmailAttach})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAutographCrud.SelectOne(System.Int64)">
            <summary>Gets one EmailAutograph object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAutographCrud.SelectOne(System.String)">
            <summary>Gets one EmailAutograph object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAutographCrud.SelectMany(System.String)">
            <summary>Gets a list of EmailAutograph objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAutographCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAutographCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EmailAutograph},System.String)">
            <summary>Converts a list of EmailAutograph into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAutographCrud.Insert(OpenDentBusiness.EmailAutograph)">
            <summary>Inserts one EmailAutograph into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAutographCrud.Insert(OpenDentBusiness.EmailAutograph,System.Boolean)">
            <summary>Inserts one EmailAutograph into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAutographCrud.InsertNoCache(OpenDentBusiness.EmailAutograph)">
            <summary>Inserts one EmailAutograph into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAutographCrud.InsertNoCache(OpenDentBusiness.EmailAutograph,System.Boolean)">
            <summary>Inserts one EmailAutograph into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAutographCrud.Update(OpenDentBusiness.EmailAutograph)">
            <summary>Updates one EmailAutograph in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAutographCrud.Update(OpenDentBusiness.EmailAutograph,OpenDentBusiness.EmailAutograph)">
            <summary>Updates one EmailAutograph in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAutographCrud.UpdateComparison(OpenDentBusiness.EmailAutograph,OpenDentBusiness.EmailAutograph)">
            <summary>Returns true if Update(EmailAutograph,EmailAutograph) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailAutographCrud.Delete(System.Int64)">
            <summary>Deletes one EmailAutograph from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageCrud.SelectOne(System.Int64)">
            <summary>Gets one EmailMessage object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageCrud.SelectOne(System.String)">
            <summary>Gets one EmailMessage object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageCrud.SelectMany(System.String)">
            <summary>Gets a list of EmailMessage objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EmailMessage},System.String)">
            <summary>Converts a list of EmailMessage into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageCrud.Insert(OpenDentBusiness.EmailMessage)">
            <summary>Inserts one EmailMessage into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageCrud.Insert(OpenDentBusiness.EmailMessage,System.Boolean)">
            <summary>Inserts one EmailMessage into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageCrud.InsertNoCache(OpenDentBusiness.EmailMessage)">
            <summary>Inserts one EmailMessage into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageCrud.InsertNoCache(OpenDentBusiness.EmailMessage,System.Boolean)">
            <summary>Inserts one EmailMessage into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageCrud.Update(OpenDentBusiness.EmailMessage)">
            <summary>Updates one EmailMessage in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageCrud.Update(OpenDentBusiness.EmailMessage,OpenDentBusiness.EmailMessage)">
            <summary>Updates one EmailMessage in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageCrud.UpdateComparison(OpenDentBusiness.EmailMessage,OpenDentBusiness.EmailMessage)">
            <summary>Returns true if Update(EmailMessage,EmailMessage) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageCrud.Delete(System.Int64)">
            <summary>Deletes one EmailMessage from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageUidCrud.SelectOne(System.Int64)">
            <summary>Gets one EmailMessageUid object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageUidCrud.SelectOne(System.String)">
            <summary>Gets one EmailMessageUid object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageUidCrud.SelectMany(System.String)">
            <summary>Gets a list of EmailMessageUid objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageUidCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageUidCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EmailMessageUid},System.String)">
            <summary>Converts a list of EmailMessageUid into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageUidCrud.Insert(OpenDentBusiness.EmailMessageUid)">
            <summary>Inserts one EmailMessageUid into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageUidCrud.Insert(OpenDentBusiness.EmailMessageUid,System.Boolean)">
            <summary>Inserts one EmailMessageUid into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageUidCrud.InsertNoCache(OpenDentBusiness.EmailMessageUid)">
            <summary>Inserts one EmailMessageUid into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageUidCrud.InsertNoCache(OpenDentBusiness.EmailMessageUid,System.Boolean)">
            <summary>Inserts one EmailMessageUid into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageUidCrud.Update(OpenDentBusiness.EmailMessageUid)">
            <summary>Updates one EmailMessageUid in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageUidCrud.Update(OpenDentBusiness.EmailMessageUid,OpenDentBusiness.EmailMessageUid)">
            <summary>Updates one EmailMessageUid in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageUidCrud.UpdateComparison(OpenDentBusiness.EmailMessageUid,OpenDentBusiness.EmailMessageUid)">
            <summary>Returns true if Update(EmailMessageUid,EmailMessageUid) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailMessageUidCrud.Delete(System.Int64)">
            <summary>Deletes one EmailMessageUid from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailTemplateCrud.SelectOne(System.Int64)">
            <summary>Gets one EmailTemplate object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailTemplateCrud.SelectOne(System.String)">
            <summary>Gets one EmailTemplate object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailTemplateCrud.SelectMany(System.String)">
            <summary>Gets a list of EmailTemplate objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailTemplateCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailTemplateCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EmailTemplate},System.String)">
            <summary>Converts a list of EmailTemplate into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailTemplateCrud.Insert(OpenDentBusiness.EmailTemplate)">
            <summary>Inserts one EmailTemplate into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailTemplateCrud.Insert(OpenDentBusiness.EmailTemplate,System.Boolean)">
            <summary>Inserts one EmailTemplate into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailTemplateCrud.InsertNoCache(OpenDentBusiness.EmailTemplate)">
            <summary>Inserts one EmailTemplate into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailTemplateCrud.InsertNoCache(OpenDentBusiness.EmailTemplate,System.Boolean)">
            <summary>Inserts one EmailTemplate into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailTemplateCrud.Update(OpenDentBusiness.EmailTemplate)">
            <summary>Updates one EmailTemplate in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailTemplateCrud.Update(OpenDentBusiness.EmailTemplate,OpenDentBusiness.EmailTemplate)">
            <summary>Updates one EmailTemplate in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailTemplateCrud.UpdateComparison(OpenDentBusiness.EmailTemplate,OpenDentBusiness.EmailTemplate)">
            <summary>Returns true if Update(EmailTemplate,EmailTemplate) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmailTemplateCrud.Delete(System.Int64)">
            <summary>Deletes one EmailTemplate from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployeeCrud.SelectOne(System.Int64)">
            <summary>Gets one Employee object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployeeCrud.SelectOne(System.String)">
            <summary>Gets one Employee object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployeeCrud.SelectMany(System.String)">
            <summary>Gets a list of Employee objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployeeCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployeeCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Employee},System.String)">
            <summary>Converts a list of Employee into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployeeCrud.Insert(OpenDentBusiness.Employee)">
            <summary>Inserts one Employee into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployeeCrud.Insert(OpenDentBusiness.Employee,System.Boolean)">
            <summary>Inserts one Employee into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployeeCrud.InsertNoCache(OpenDentBusiness.Employee)">
            <summary>Inserts one Employee into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployeeCrud.InsertNoCache(OpenDentBusiness.Employee,System.Boolean)">
            <summary>Inserts one Employee into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployeeCrud.Update(OpenDentBusiness.Employee)">
            <summary>Updates one Employee in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployeeCrud.Update(OpenDentBusiness.Employee,OpenDentBusiness.Employee)">
            <summary>Updates one Employee in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployeeCrud.UpdateComparison(OpenDentBusiness.Employee,OpenDentBusiness.Employee)">
            <summary>Returns true if Update(Employee,Employee) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployeeCrud.Delete(System.Int64)">
            <summary>Deletes one Employee from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployerCrud.SelectOne(System.Int64)">
            <summary>Gets one Employer object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployerCrud.SelectOne(System.String)">
            <summary>Gets one Employer object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployerCrud.SelectMany(System.String)">
            <summary>Gets a list of Employer objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployerCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployerCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Employer},System.String)">
            <summary>Converts a list of Employer into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployerCrud.Insert(OpenDentBusiness.Employer)">
            <summary>Inserts one Employer into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployerCrud.Insert(OpenDentBusiness.Employer,System.Boolean)">
            <summary>Inserts one Employer into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployerCrud.InsertNoCache(OpenDentBusiness.Employer)">
            <summary>Inserts one Employer into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployerCrud.InsertNoCache(OpenDentBusiness.Employer,System.Boolean)">
            <summary>Inserts one Employer into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployerCrud.Update(OpenDentBusiness.Employer)">
            <summary>Updates one Employer in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployerCrud.Update(OpenDentBusiness.Employer,OpenDentBusiness.Employer)">
            <summary>Updates one Employer in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployerCrud.UpdateComparison(OpenDentBusiness.Employer,OpenDentBusiness.Employer)">
            <summary>Returns true if Update(Employer,Employer) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EmployerCrud.Delete(System.Int64)">
            <summary>Deletes one Employer from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EncounterCrud.SelectOne(System.Int64)">
            <summary>Gets one Encounter object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EncounterCrud.SelectOne(System.String)">
            <summary>Gets one Encounter object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EncounterCrud.SelectMany(System.String)">
            <summary>Gets a list of Encounter objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EncounterCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EncounterCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Encounter},System.String)">
            <summary>Converts a list of Encounter into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EncounterCrud.Insert(OpenDentBusiness.Encounter)">
            <summary>Inserts one Encounter into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EncounterCrud.Insert(OpenDentBusiness.Encounter,System.Boolean)">
            <summary>Inserts one Encounter into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EncounterCrud.InsertNoCache(OpenDentBusiness.Encounter)">
            <summary>Inserts one Encounter into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EncounterCrud.InsertNoCache(OpenDentBusiness.Encounter,System.Boolean)">
            <summary>Inserts one Encounter into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EncounterCrud.Update(OpenDentBusiness.Encounter)">
            <summary>Updates one Encounter in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EncounterCrud.Update(OpenDentBusiness.Encounter,OpenDentBusiness.Encounter)">
            <summary>Updates one Encounter in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EncounterCrud.UpdateComparison(OpenDentBusiness.Encounter,OpenDentBusiness.Encounter)">
            <summary>Returns true if Update(Encounter,Encounter) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EncounterCrud.Delete(System.Int64)">
            <summary>Deletes one Encounter from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EobAttachCrud.SelectOne(System.Int64)">
            <summary>Gets one EobAttach object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EobAttachCrud.SelectOne(System.String)">
            <summary>Gets one EobAttach object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EobAttachCrud.SelectMany(System.String)">
            <summary>Gets a list of EobAttach objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EobAttachCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EobAttachCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EobAttach},System.String)">
            <summary>Converts a list of EobAttach into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EobAttachCrud.Insert(OpenDentBusiness.EobAttach)">
            <summary>Inserts one EobAttach into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EobAttachCrud.Insert(OpenDentBusiness.EobAttach,System.Boolean)">
            <summary>Inserts one EobAttach into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EobAttachCrud.InsertNoCache(OpenDentBusiness.EobAttach)">
            <summary>Inserts one EobAttach into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EobAttachCrud.InsertNoCache(OpenDentBusiness.EobAttach,System.Boolean)">
            <summary>Inserts one EobAttach into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EobAttachCrud.Update(OpenDentBusiness.EobAttach)">
            <summary>Updates one EobAttach in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EobAttachCrud.Update(OpenDentBusiness.EobAttach,OpenDentBusiness.EobAttach)">
            <summary>Updates one EobAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EobAttachCrud.UpdateComparison(OpenDentBusiness.EobAttach,OpenDentBusiness.EobAttach)">
            <summary>Returns true if Update(EobAttach,EobAttach) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EobAttachCrud.Delete(System.Int64)">
            <summary>Deletes one EobAttach from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EquipmentCrud.SelectOne(System.Int64)">
            <summary>Gets one Equipment object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EquipmentCrud.SelectOne(System.String)">
            <summary>Gets one Equipment object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EquipmentCrud.SelectMany(System.String)">
            <summary>Gets a list of Equipment objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EquipmentCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EquipmentCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Equipment},System.String)">
            <summary>Converts a list of Equipment into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EquipmentCrud.Insert(OpenDentBusiness.Equipment)">
            <summary>Inserts one Equipment into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EquipmentCrud.Insert(OpenDentBusiness.Equipment,System.Boolean)">
            <summary>Inserts one Equipment into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EquipmentCrud.InsertNoCache(OpenDentBusiness.Equipment)">
            <summary>Inserts one Equipment into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EquipmentCrud.InsertNoCache(OpenDentBusiness.Equipment,System.Boolean)">
            <summary>Inserts one Equipment into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EquipmentCrud.Update(OpenDentBusiness.Equipment)">
            <summary>Updates one Equipment in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EquipmentCrud.Update(OpenDentBusiness.Equipment,OpenDentBusiness.Equipment)">
            <summary>Updates one Equipment in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EquipmentCrud.UpdateComparison(OpenDentBusiness.Equipment,OpenDentBusiness.Equipment)">
            <summary>Returns true if Update(Equipment,Equipment) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EquipmentCrud.Delete(System.Int64)">
            <summary>Deletes one Equipment from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ErxLogCrud.SelectOne(System.Int64)">
            <summary>Gets one ErxLog object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ErxLogCrud.SelectOne(System.String)">
            <summary>Gets one ErxLog object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ErxLogCrud.SelectMany(System.String)">
            <summary>Gets a list of ErxLog objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ErxLogCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ErxLogCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ErxLog},System.String)">
            <summary>Converts a list of ErxLog into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ErxLogCrud.Insert(OpenDentBusiness.ErxLog)">
            <summary>Inserts one ErxLog into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ErxLogCrud.Insert(OpenDentBusiness.ErxLog,System.Boolean)">
            <summary>Inserts one ErxLog into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ErxLogCrud.InsertNoCache(OpenDentBusiness.ErxLog)">
            <summary>Inserts one ErxLog into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ErxLogCrud.InsertNoCache(OpenDentBusiness.ErxLog,System.Boolean)">
            <summary>Inserts one ErxLog into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ErxLogCrud.Update(OpenDentBusiness.ErxLog)">
            <summary>Updates one ErxLog in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ErxLogCrud.Update(OpenDentBusiness.ErxLog,OpenDentBusiness.ErxLog)">
            <summary>Updates one ErxLog in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ErxLogCrud.UpdateComparison(OpenDentBusiness.ErxLog,OpenDentBusiness.ErxLog)">
            <summary>Returns true if Update(ErxLog,ErxLog) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ErxLogCrud.Delete(System.Int64)">
            <summary>Deletes one ErxLog from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EServiceSignalCrud.SelectOne(System.Int64)">
            <summary>Gets one EServiceSignal object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EServiceSignalCrud.SelectOne(System.String)">
            <summary>Gets one EServiceSignal object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EServiceSignalCrud.SelectMany(System.String)">
            <summary>Gets a list of EServiceSignal objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EServiceSignalCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EServiceSignalCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EServiceSignal},System.String)">
            <summary>Converts a list of EServiceSignal into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EServiceSignalCrud.Insert(OpenDentBusiness.EServiceSignal)">
            <summary>Inserts one EServiceSignal into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EServiceSignalCrud.Insert(OpenDentBusiness.EServiceSignal,System.Boolean)">
            <summary>Inserts one EServiceSignal into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EServiceSignalCrud.InsertNoCache(OpenDentBusiness.EServiceSignal)">
            <summary>Inserts one EServiceSignal into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EServiceSignalCrud.InsertNoCache(OpenDentBusiness.EServiceSignal,System.Boolean)">
            <summary>Inserts one EServiceSignal into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EServiceSignalCrud.Update(OpenDentBusiness.EServiceSignal)">
            <summary>Updates one EServiceSignal in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EServiceSignalCrud.Update(OpenDentBusiness.EServiceSignal,OpenDentBusiness.EServiceSignal)">
            <summary>Updates one EServiceSignal in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EServiceSignalCrud.UpdateComparison(OpenDentBusiness.EServiceSignal,OpenDentBusiness.EServiceSignal)">
            <summary>Returns true if Update(EServiceSignal,EServiceSignal) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EServiceSignalCrud.Delete(System.Int64)">
            <summary>Deletes one EServiceSignal from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransCrud.SelectOne(System.Int64)">
            <summary>Gets one Etrans object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransCrud.SelectOne(System.String)">
            <summary>Gets one Etrans object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransCrud.SelectMany(System.String)">
            <summary>Gets a list of Etrans objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Etrans},System.String)">
            <summary>Converts a list of Etrans into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransCrud.Insert(OpenDentBusiness.Etrans)">
            <summary>Inserts one Etrans into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransCrud.Insert(OpenDentBusiness.Etrans,System.Boolean)">
            <summary>Inserts one Etrans into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransCrud.InsertNoCache(OpenDentBusiness.Etrans)">
            <summary>Inserts one Etrans into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransCrud.InsertNoCache(OpenDentBusiness.Etrans,System.Boolean)">
            <summary>Inserts one Etrans into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransCrud.Update(OpenDentBusiness.Etrans)">
            <summary>Updates one Etrans in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransCrud.Update(OpenDentBusiness.Etrans,OpenDentBusiness.Etrans)">
            <summary>Updates one Etrans in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransCrud.UpdateComparison(OpenDentBusiness.Etrans,OpenDentBusiness.Etrans)">
            <summary>Returns true if Update(Etrans,Etrans) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransCrud.Delete(System.Int64)">
            <summary>Deletes one Etrans from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransMessageTextCrud.SelectOne(System.Int64)">
            <summary>Gets one EtransMessageText object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransMessageTextCrud.SelectOne(System.String)">
            <summary>Gets one EtransMessageText object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransMessageTextCrud.SelectMany(System.String)">
            <summary>Gets a list of EtransMessageText objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransMessageTextCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransMessageTextCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EtransMessageText},System.String)">
            <summary>Converts a list of EtransMessageText into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransMessageTextCrud.Insert(OpenDentBusiness.EtransMessageText)">
            <summary>Inserts one EtransMessageText into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransMessageTextCrud.Insert(OpenDentBusiness.EtransMessageText,System.Boolean)">
            <summary>Inserts one EtransMessageText into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransMessageTextCrud.InsertNoCache(OpenDentBusiness.EtransMessageText)">
            <summary>Inserts one EtransMessageText into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransMessageTextCrud.InsertNoCache(OpenDentBusiness.EtransMessageText,System.Boolean)">
            <summary>Inserts one EtransMessageText into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransMessageTextCrud.Update(OpenDentBusiness.EtransMessageText)">
            <summary>Updates one EtransMessageText in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransMessageTextCrud.Update(OpenDentBusiness.EtransMessageText,OpenDentBusiness.EtransMessageText)">
            <summary>Updates one EtransMessageText in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransMessageTextCrud.UpdateComparison(OpenDentBusiness.EtransMessageText,OpenDentBusiness.EtransMessageText)">
            <summary>Returns true if Update(EtransMessageText,EtransMessageText) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EtransMessageTextCrud.Delete(System.Int64)">
            <summary>Deletes one EtransMessageText from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionCrud.SelectOne(System.Int64)">
            <summary>Gets one EvaluationCriterion object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionCrud.SelectOne(System.String)">
            <summary>Gets one EvaluationCriterion object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionCrud.SelectMany(System.String)">
            <summary>Gets a list of EvaluationCriterion objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EvaluationCriterion},System.String)">
            <summary>Converts a list of EvaluationCriterion into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionCrud.Insert(OpenDentBusiness.EvaluationCriterion)">
            <summary>Inserts one EvaluationCriterion into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionCrud.Insert(OpenDentBusiness.EvaluationCriterion,System.Boolean)">
            <summary>Inserts one EvaluationCriterion into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionCrud.InsertNoCache(OpenDentBusiness.EvaluationCriterion)">
            <summary>Inserts one EvaluationCriterion into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionCrud.InsertNoCache(OpenDentBusiness.EvaluationCriterion,System.Boolean)">
            <summary>Inserts one EvaluationCriterion into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionCrud.Update(OpenDentBusiness.EvaluationCriterion)">
            <summary>Updates one EvaluationCriterion in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionCrud.Update(OpenDentBusiness.EvaluationCriterion,OpenDentBusiness.EvaluationCriterion)">
            <summary>Updates one EvaluationCriterion in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionCrud.UpdateComparison(OpenDentBusiness.EvaluationCriterion,OpenDentBusiness.EvaluationCriterion)">
            <summary>Returns true if Update(EvaluationCriterion,EvaluationCriterion) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionCrud.Delete(System.Int64)">
            <summary>Deletes one EvaluationCriterion from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionDefCrud.SelectOne(System.Int64)">
            <summary>Gets one EvaluationCriterionDef object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionDefCrud.SelectOne(System.String)">
            <summary>Gets one EvaluationCriterionDef object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionDefCrud.SelectMany(System.String)">
            <summary>Gets a list of EvaluationCriterionDef objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionDefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionDefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EvaluationCriterionDef},System.String)">
            <summary>Converts a list of EvaluationCriterionDef into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionDefCrud.Insert(OpenDentBusiness.EvaluationCriterionDef)">
            <summary>Inserts one EvaluationCriterionDef into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionDefCrud.Insert(OpenDentBusiness.EvaluationCriterionDef,System.Boolean)">
            <summary>Inserts one EvaluationCriterionDef into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionDefCrud.InsertNoCache(OpenDentBusiness.EvaluationCriterionDef)">
            <summary>Inserts one EvaluationCriterionDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionDefCrud.InsertNoCache(OpenDentBusiness.EvaluationCriterionDef,System.Boolean)">
            <summary>Inserts one EvaluationCriterionDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionDefCrud.Update(OpenDentBusiness.EvaluationCriterionDef)">
            <summary>Updates one EvaluationCriterionDef in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionDefCrud.Update(OpenDentBusiness.EvaluationCriterionDef,OpenDentBusiness.EvaluationCriterionDef)">
            <summary>Updates one EvaluationCriterionDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionDefCrud.UpdateComparison(OpenDentBusiness.EvaluationCriterionDef,OpenDentBusiness.EvaluationCriterionDef)">
            <summary>Returns true if Update(EvaluationCriterionDef,EvaluationCriterionDef) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCriterionDefCrud.Delete(System.Int64)">
            <summary>Deletes one EvaluationCriterionDef from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCrud.SelectOne(System.Int64)">
            <summary>Gets one Evaluation object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCrud.SelectOne(System.String)">
            <summary>Gets one Evaluation object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCrud.SelectMany(System.String)">
            <summary>Gets a list of Evaluation objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Evaluation},System.String)">
            <summary>Converts a list of Evaluation into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCrud.Insert(OpenDentBusiness.Evaluation)">
            <summary>Inserts one Evaluation into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCrud.Insert(OpenDentBusiness.Evaluation,System.Boolean)">
            <summary>Inserts one Evaluation into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCrud.InsertNoCache(OpenDentBusiness.Evaluation)">
            <summary>Inserts one Evaluation into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCrud.InsertNoCache(OpenDentBusiness.Evaluation,System.Boolean)">
            <summary>Inserts one Evaluation into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCrud.Update(OpenDentBusiness.Evaluation)">
            <summary>Updates one Evaluation in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCrud.Update(OpenDentBusiness.Evaluation,OpenDentBusiness.Evaluation)">
            <summary>Updates one Evaluation in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCrud.UpdateComparison(OpenDentBusiness.Evaluation,OpenDentBusiness.Evaluation)">
            <summary>Returns true if Update(Evaluation,Evaluation) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationCrud.Delete(System.Int64)">
            <summary>Deletes one Evaluation from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationDefCrud.SelectOne(System.Int64)">
            <summary>Gets one EvaluationDef object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationDefCrud.SelectOne(System.String)">
            <summary>Gets one EvaluationDef object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationDefCrud.SelectMany(System.String)">
            <summary>Gets a list of EvaluationDef objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationDefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationDefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.EvaluationDef},System.String)">
            <summary>Converts a list of EvaluationDef into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationDefCrud.Insert(OpenDentBusiness.EvaluationDef)">
            <summary>Inserts one EvaluationDef into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationDefCrud.Insert(OpenDentBusiness.EvaluationDef,System.Boolean)">
            <summary>Inserts one EvaluationDef into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationDefCrud.InsertNoCache(OpenDentBusiness.EvaluationDef)">
            <summary>Inserts one EvaluationDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationDefCrud.InsertNoCache(OpenDentBusiness.EvaluationDef,System.Boolean)">
            <summary>Inserts one EvaluationDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationDefCrud.Update(OpenDentBusiness.EvaluationDef)">
            <summary>Updates one EvaluationDef in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationDefCrud.Update(OpenDentBusiness.EvaluationDef,OpenDentBusiness.EvaluationDef)">
            <summary>Updates one EvaluationDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationDefCrud.UpdateComparison(OpenDentBusiness.EvaluationDef,OpenDentBusiness.EvaluationDef)">
            <summary>Returns true if Update(EvaluationDef,EvaluationDef) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.EvaluationDefCrud.Delete(System.Int64)">
            <summary>Deletes one EvaluationDef from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamAgingCrud.SelectOne(System.Int64)">
            <summary>Gets one FamAging object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamAgingCrud.SelectOne(System.String)">
            <summary>Gets one FamAging object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamAgingCrud.SelectMany(System.String)">
            <summary>Gets a list of FamAging objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamAgingCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamAgingCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.FamAging},System.String)">
            <summary>Converts a list of FamAging into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamAgingCrud.Insert(OpenDentBusiness.FamAging)">
            <summary>Inserts one FamAging into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamAgingCrud.Insert(OpenDentBusiness.FamAging,System.Boolean)">
            <summary>Inserts one FamAging into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamAgingCrud.InsertNoCache(OpenDentBusiness.FamAging)">
            <summary>Inserts one FamAging into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamAgingCrud.InsertNoCache(OpenDentBusiness.FamAging,System.Boolean)">
            <summary>Inserts one FamAging into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamAgingCrud.Update(OpenDentBusiness.FamAging)">
            <summary>Updates one FamAging in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamAgingCrud.Update(OpenDentBusiness.FamAging,OpenDentBusiness.FamAging)">
            <summary>Updates one FamAging in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamAgingCrud.UpdateComparison(OpenDentBusiness.FamAging,OpenDentBusiness.FamAging)">
            <summary>Returns true if Update(FamAging,FamAging) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamAgingCrud.Delete(System.Int64)">
            <summary>Deletes one FamAging from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamilyHealthCrud.SelectOne(System.Int64)">
            <summary>Gets one FamilyHealth object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamilyHealthCrud.SelectOne(System.String)">
            <summary>Gets one FamilyHealth object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamilyHealthCrud.SelectMany(System.String)">
            <summary>Gets a list of FamilyHealth objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamilyHealthCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamilyHealthCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.FamilyHealth},System.String)">
            <summary>Converts a list of FamilyHealth into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamilyHealthCrud.Insert(OpenDentBusiness.FamilyHealth)">
            <summary>Inserts one FamilyHealth into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamilyHealthCrud.Insert(OpenDentBusiness.FamilyHealth,System.Boolean)">
            <summary>Inserts one FamilyHealth into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamilyHealthCrud.InsertNoCache(OpenDentBusiness.FamilyHealth)">
            <summary>Inserts one FamilyHealth into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamilyHealthCrud.InsertNoCache(OpenDentBusiness.FamilyHealth,System.Boolean)">
            <summary>Inserts one FamilyHealth into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamilyHealthCrud.Update(OpenDentBusiness.FamilyHealth)">
            <summary>Updates one FamilyHealth in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamilyHealthCrud.Update(OpenDentBusiness.FamilyHealth,OpenDentBusiness.FamilyHealth)">
            <summary>Updates one FamilyHealth in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamilyHealthCrud.UpdateComparison(OpenDentBusiness.FamilyHealth,OpenDentBusiness.FamilyHealth)">
            <summary>Returns true if Update(FamilyHealth,FamilyHealth) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FamilyHealthCrud.Delete(System.Int64)">
            <summary>Deletes one FamilyHealth from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeCrud.SelectOne(System.Int64)">
            <summary>Gets one Fee object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeCrud.SelectOne(System.String)">
            <summary>Gets one Fee object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeCrud.SelectMany(System.String)">
            <summary>Gets a list of Fee objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Fee},System.String)">
            <summary>Converts a list of Fee into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeCrud.Insert(OpenDentBusiness.Fee)">
            <summary>Inserts one Fee into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeCrud.Insert(OpenDentBusiness.Fee,System.Boolean)">
            <summary>Inserts one Fee into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeCrud.InsertNoCache(OpenDentBusiness.Fee)">
            <summary>Inserts one Fee into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeCrud.InsertNoCache(OpenDentBusiness.Fee,System.Boolean)">
            <summary>Inserts one Fee into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeCrud.Update(OpenDentBusiness.Fee)">
            <summary>Updates one Fee in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeCrud.Update(OpenDentBusiness.Fee,OpenDentBusiness.Fee)">
            <summary>Updates one Fee in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeCrud.UpdateComparison(OpenDentBusiness.Fee,OpenDentBusiness.Fee)">
            <summary>Returns true if Update(Fee,Fee) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeCrud.Delete(System.Int64)">
            <summary>Deletes one Fee from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.Fee},System.Collections.Generic.List{OpenDentBusiness.Fee},System.Int64)">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.
            Supply Security.CurUser.UserNum, used to set the SecUserNumEntry field for Inserts.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeSchedCrud.SelectOne(System.Int64)">
            <summary>Gets one FeeSched object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeSchedCrud.SelectOne(System.String)">
            <summary>Gets one FeeSched object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeSchedCrud.SelectMany(System.String)">
            <summary>Gets a list of FeeSched objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeSchedCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeSchedCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.FeeSched},System.String)">
            <summary>Converts a list of FeeSched into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeSchedCrud.Insert(OpenDentBusiness.FeeSched)">
            <summary>Inserts one FeeSched into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeSchedCrud.Insert(OpenDentBusiness.FeeSched,System.Boolean)">
            <summary>Inserts one FeeSched into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeSchedCrud.InsertNoCache(OpenDentBusiness.FeeSched)">
            <summary>Inserts one FeeSched into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeSchedCrud.InsertNoCache(OpenDentBusiness.FeeSched,System.Boolean)">
            <summary>Inserts one FeeSched into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeSchedCrud.Update(OpenDentBusiness.FeeSched)">
            <summary>Updates one FeeSched in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeSchedCrud.Update(OpenDentBusiness.FeeSched,OpenDentBusiness.FeeSched)">
            <summary>Updates one FeeSched in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeSchedCrud.UpdateComparison(OpenDentBusiness.FeeSched,OpenDentBusiness.FeeSched)">
            <summary>Returns true if Update(FeeSched,FeeSched) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeSchedCrud.Delete(System.Int64)">
            <summary>Deletes one FeeSched from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FeeSchedCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.FeeSched},System.Collections.Generic.List{OpenDentBusiness.FeeSched},System.Int64)">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.
            Supply Security.CurUser.UserNum, used to set the SecUserNumEntry field for Inserts.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRContactPointCrud.SelectOne(System.Int64)">
            <summary>Gets one FHIRContactPoint object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRContactPointCrud.SelectOne(System.String)">
            <summary>Gets one FHIRContactPoint object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRContactPointCrud.SelectMany(System.String)">
            <summary>Gets a list of FHIRContactPoint objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRContactPointCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRContactPointCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.FHIRContactPoint},System.String)">
            <summary>Converts a list of FHIRContactPoint into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRContactPointCrud.Insert(OpenDentBusiness.FHIRContactPoint)">
            <summary>Inserts one FHIRContactPoint into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRContactPointCrud.Insert(OpenDentBusiness.FHIRContactPoint,System.Boolean)">
            <summary>Inserts one FHIRContactPoint into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRContactPointCrud.InsertNoCache(OpenDentBusiness.FHIRContactPoint)">
            <summary>Inserts one FHIRContactPoint into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRContactPointCrud.InsertNoCache(OpenDentBusiness.FHIRContactPoint,System.Boolean)">
            <summary>Inserts one FHIRContactPoint into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRContactPointCrud.Update(OpenDentBusiness.FHIRContactPoint)">
            <summary>Updates one FHIRContactPoint in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRContactPointCrud.Update(OpenDentBusiness.FHIRContactPoint,OpenDentBusiness.FHIRContactPoint)">
            <summary>Updates one FHIRContactPoint in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRContactPointCrud.UpdateComparison(OpenDentBusiness.FHIRContactPoint,OpenDentBusiness.FHIRContactPoint)">
            <summary>Returns true if Update(FHIRContactPoint,FHIRContactPoint) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRContactPointCrud.Delete(System.Int64)">
            <summary>Deletes one FHIRContactPoint from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRSubscriptionCrud.SelectOne(System.Int64)">
            <summary>Gets one FHIRSubscription object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRSubscriptionCrud.SelectOne(System.String)">
            <summary>Gets one FHIRSubscription object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRSubscriptionCrud.SelectMany(System.String)">
            <summary>Gets a list of FHIRSubscription objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRSubscriptionCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRSubscriptionCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.FHIRSubscription},System.String)">
            <summary>Converts a list of FHIRSubscription into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRSubscriptionCrud.Insert(OpenDentBusiness.FHIRSubscription)">
            <summary>Inserts one FHIRSubscription into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRSubscriptionCrud.Insert(OpenDentBusiness.FHIRSubscription,System.Boolean)">
            <summary>Inserts one FHIRSubscription into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRSubscriptionCrud.InsertNoCache(OpenDentBusiness.FHIRSubscription)">
            <summary>Inserts one FHIRSubscription into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRSubscriptionCrud.InsertNoCache(OpenDentBusiness.FHIRSubscription,System.Boolean)">
            <summary>Inserts one FHIRSubscription into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRSubscriptionCrud.Update(OpenDentBusiness.FHIRSubscription)">
            <summary>Updates one FHIRSubscription in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRSubscriptionCrud.Update(OpenDentBusiness.FHIRSubscription,OpenDentBusiness.FHIRSubscription)">
            <summary>Updates one FHIRSubscription in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRSubscriptionCrud.UpdateComparison(OpenDentBusiness.FHIRSubscription,OpenDentBusiness.FHIRSubscription)">
            <summary>Returns true if Update(FHIRSubscription,FHIRSubscription) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FHIRSubscriptionCrud.Delete(System.Int64)">
            <summary>Deletes one FHIRSubscription from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FormPatCrud.SelectOne(System.Int64)">
            <summary>Gets one FormPat object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FormPatCrud.SelectOne(System.String)">
            <summary>Gets one FormPat object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FormPatCrud.SelectMany(System.String)">
            <summary>Gets a list of FormPat objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FormPatCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FormPatCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.FormPat},System.String)">
            <summary>Converts a list of FormPat into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FormPatCrud.Insert(OpenDentBusiness.FormPat)">
            <summary>Inserts one FormPat into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FormPatCrud.Insert(OpenDentBusiness.FormPat,System.Boolean)">
            <summary>Inserts one FormPat into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FormPatCrud.InsertNoCache(OpenDentBusiness.FormPat)">
            <summary>Inserts one FormPat into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FormPatCrud.InsertNoCache(OpenDentBusiness.FormPat,System.Boolean)">
            <summary>Inserts one FormPat into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FormPatCrud.Update(OpenDentBusiness.FormPat)">
            <summary>Updates one FormPat in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FormPatCrud.Update(OpenDentBusiness.FormPat,OpenDentBusiness.FormPat)">
            <summary>Updates one FormPat in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FormPatCrud.UpdateComparison(OpenDentBusiness.FormPat,OpenDentBusiness.FormPat)">
            <summary>Returns true if Update(FormPat,FormPat) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.FormPatCrud.Delete(System.Int64)">
            <summary>Deletes one FormPat from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleCrud.SelectOne(System.Int64)">
            <summary>Gets one GradingScale object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleCrud.SelectOne(System.String)">
            <summary>Gets one GradingScale object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleCrud.SelectMany(System.String)">
            <summary>Gets a list of GradingScale objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.GradingScale},System.String)">
            <summary>Converts a list of GradingScale into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleCrud.Insert(OpenDentBusiness.GradingScale)">
            <summary>Inserts one GradingScale into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleCrud.Insert(OpenDentBusiness.GradingScale,System.Boolean)">
            <summary>Inserts one GradingScale into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleCrud.InsertNoCache(OpenDentBusiness.GradingScale)">
            <summary>Inserts one GradingScale into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleCrud.InsertNoCache(OpenDentBusiness.GradingScale,System.Boolean)">
            <summary>Inserts one GradingScale into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleCrud.Update(OpenDentBusiness.GradingScale)">
            <summary>Updates one GradingScale in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleCrud.Update(OpenDentBusiness.GradingScale,OpenDentBusiness.GradingScale)">
            <summary>Updates one GradingScale in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleCrud.UpdateComparison(OpenDentBusiness.GradingScale,OpenDentBusiness.GradingScale)">
            <summary>Returns true if Update(GradingScale,GradingScale) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleCrud.Delete(System.Int64)">
            <summary>Deletes one GradingScale from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleItemCrud.SelectOne(System.Int64)">
            <summary>Gets one GradingScaleItem object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleItemCrud.SelectOne(System.String)">
            <summary>Gets one GradingScaleItem object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleItemCrud.SelectMany(System.String)">
            <summary>Gets a list of GradingScaleItem objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleItemCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleItemCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.GradingScaleItem},System.String)">
            <summary>Converts a list of GradingScaleItem into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleItemCrud.Insert(OpenDentBusiness.GradingScaleItem)">
            <summary>Inserts one GradingScaleItem into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleItemCrud.Insert(OpenDentBusiness.GradingScaleItem,System.Boolean)">
            <summary>Inserts one GradingScaleItem into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleItemCrud.InsertNoCache(OpenDentBusiness.GradingScaleItem)">
            <summary>Inserts one GradingScaleItem into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleItemCrud.InsertNoCache(OpenDentBusiness.GradingScaleItem,System.Boolean)">
            <summary>Inserts one GradingScaleItem into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleItemCrud.Update(OpenDentBusiness.GradingScaleItem)">
            <summary>Updates one GradingScaleItem in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleItemCrud.Update(OpenDentBusiness.GradingScaleItem,OpenDentBusiness.GradingScaleItem)">
            <summary>Updates one GradingScaleItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleItemCrud.UpdateComparison(OpenDentBusiness.GradingScaleItem,OpenDentBusiness.GradingScaleItem)">
            <summary>Returns true if Update(GradingScaleItem,GradingScaleItem) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GradingScaleItemCrud.Delete(System.Int64)">
            <summary>Deletes one GradingScaleItem from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GroupPermissionCrud.SelectOne(System.Int64)">
            <summary>Gets one GroupPermission object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GroupPermissionCrud.SelectOne(System.String)">
            <summary>Gets one GroupPermission object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GroupPermissionCrud.SelectMany(System.String)">
            <summary>Gets a list of GroupPermission objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GroupPermissionCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GroupPermissionCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.GroupPermission},System.String)">
            <summary>Converts a list of GroupPermission into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GroupPermissionCrud.Insert(OpenDentBusiness.GroupPermission)">
            <summary>Inserts one GroupPermission into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GroupPermissionCrud.Insert(OpenDentBusiness.GroupPermission,System.Boolean)">
            <summary>Inserts one GroupPermission into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GroupPermissionCrud.InsertNoCache(OpenDentBusiness.GroupPermission)">
            <summary>Inserts one GroupPermission into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GroupPermissionCrud.InsertNoCache(OpenDentBusiness.GroupPermission,System.Boolean)">
            <summary>Inserts one GroupPermission into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GroupPermissionCrud.Update(OpenDentBusiness.GroupPermission)">
            <summary>Updates one GroupPermission in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GroupPermissionCrud.Update(OpenDentBusiness.GroupPermission,OpenDentBusiness.GroupPermission)">
            <summary>Updates one GroupPermission in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GroupPermissionCrud.UpdateComparison(OpenDentBusiness.GroupPermission,OpenDentBusiness.GroupPermission)">
            <summary>Returns true if Update(GroupPermission,GroupPermission) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GroupPermissionCrud.Delete(System.Int64)">
            <summary>Deletes one GroupPermission from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GuardianCrud.SelectOne(System.Int64)">
            <summary>Gets one Guardian object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GuardianCrud.SelectOne(System.String)">
            <summary>Gets one Guardian object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GuardianCrud.SelectMany(System.String)">
            <summary>Gets a list of Guardian objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GuardianCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GuardianCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Guardian},System.String)">
            <summary>Converts a list of Guardian into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GuardianCrud.Insert(OpenDentBusiness.Guardian)">
            <summary>Inserts one Guardian into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GuardianCrud.Insert(OpenDentBusiness.Guardian,System.Boolean)">
            <summary>Inserts one Guardian into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GuardianCrud.InsertNoCache(OpenDentBusiness.Guardian)">
            <summary>Inserts one Guardian into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GuardianCrud.InsertNoCache(OpenDentBusiness.Guardian,System.Boolean)">
            <summary>Inserts one Guardian into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GuardianCrud.Update(OpenDentBusiness.Guardian)">
            <summary>Updates one Guardian in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GuardianCrud.Update(OpenDentBusiness.Guardian,OpenDentBusiness.Guardian)">
            <summary>Updates one Guardian in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GuardianCrud.UpdateComparison(OpenDentBusiness.Guardian,OpenDentBusiness.Guardian)">
            <summary>Returns true if Update(Guardian,Guardian) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GuardianCrud.Delete(System.Int64)">
            <summary>Deletes one Guardian from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.GuardianCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.Guardian},System.Collections.Generic.List{OpenDentBusiness.Guardian})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HcpcsCrud.SelectOne(System.Int64)">
            <summary>Gets one Hcpcs object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HcpcsCrud.SelectOne(System.String)">
            <summary>Gets one Hcpcs object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HcpcsCrud.SelectMany(System.String)">
            <summary>Gets a list of Hcpcs objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HcpcsCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HcpcsCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Hcpcs},System.String)">
            <summary>Converts a list of Hcpcs into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HcpcsCrud.Insert(OpenDentBusiness.Hcpcs)">
            <summary>Inserts one Hcpcs into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HcpcsCrud.Insert(OpenDentBusiness.Hcpcs,System.Boolean)">
            <summary>Inserts one Hcpcs into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HcpcsCrud.InsertNoCache(OpenDentBusiness.Hcpcs)">
            <summary>Inserts one Hcpcs into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HcpcsCrud.InsertNoCache(OpenDentBusiness.Hcpcs,System.Boolean)">
            <summary>Inserts one Hcpcs into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HcpcsCrud.Update(OpenDentBusiness.Hcpcs)">
            <summary>Updates one Hcpcs in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HcpcsCrud.Update(OpenDentBusiness.Hcpcs,OpenDentBusiness.Hcpcs)">
            <summary>Updates one Hcpcs in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HcpcsCrud.UpdateComparison(OpenDentBusiness.Hcpcs,OpenDentBusiness.Hcpcs)">
            <summary>Returns true if Update(Hcpcs,Hcpcs) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HcpcsCrud.Delete(System.Int64)">
            <summary>Deletes one Hcpcs from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefCrud.SelectOne(System.Int64)">
            <summary>Gets one HL7Def object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefCrud.SelectOne(System.String)">
            <summary>Gets one HL7Def object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefCrud.SelectMany(System.String)">
            <summary>Gets a list of HL7Def objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.HL7Def},System.String)">
            <summary>Converts a list of HL7Def into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefCrud.Insert(OpenDentBusiness.HL7Def)">
            <summary>Inserts one HL7Def into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefCrud.Insert(OpenDentBusiness.HL7Def,System.Boolean)">
            <summary>Inserts one HL7Def into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefCrud.InsertNoCache(OpenDentBusiness.HL7Def)">
            <summary>Inserts one HL7Def into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefCrud.InsertNoCache(OpenDentBusiness.HL7Def,System.Boolean)">
            <summary>Inserts one HL7Def into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefCrud.Update(OpenDentBusiness.HL7Def)">
            <summary>Updates one HL7Def in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefCrud.Update(OpenDentBusiness.HL7Def,OpenDentBusiness.HL7Def)">
            <summary>Updates one HL7Def in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefCrud.UpdateComparison(OpenDentBusiness.HL7Def,OpenDentBusiness.HL7Def)">
            <summary>Returns true if Update(HL7Def,HL7Def) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefCrud.Delete(System.Int64)">
            <summary>Deletes one HL7Def from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefFieldCrud.SelectOne(System.Int64)">
            <summary>Gets one HL7DefField object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefFieldCrud.SelectOne(System.String)">
            <summary>Gets one HL7DefField object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefFieldCrud.SelectMany(System.String)">
            <summary>Gets a list of HL7DefField objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefFieldCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefFieldCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.HL7DefField},System.String)">
            <summary>Converts a list of HL7DefField into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefFieldCrud.Insert(OpenDentBusiness.HL7DefField)">
            <summary>Inserts one HL7DefField into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefFieldCrud.Insert(OpenDentBusiness.HL7DefField,System.Boolean)">
            <summary>Inserts one HL7DefField into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefFieldCrud.InsertNoCache(OpenDentBusiness.HL7DefField)">
            <summary>Inserts one HL7DefField into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefFieldCrud.InsertNoCache(OpenDentBusiness.HL7DefField,System.Boolean)">
            <summary>Inserts one HL7DefField into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefFieldCrud.Update(OpenDentBusiness.HL7DefField)">
            <summary>Updates one HL7DefField in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefFieldCrud.Update(OpenDentBusiness.HL7DefField,OpenDentBusiness.HL7DefField)">
            <summary>Updates one HL7DefField in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefFieldCrud.UpdateComparison(OpenDentBusiness.HL7DefField,OpenDentBusiness.HL7DefField)">
            <summary>Returns true if Update(HL7DefField,HL7DefField) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefFieldCrud.Delete(System.Int64)">
            <summary>Deletes one HL7DefField from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefMessageCrud.SelectOne(System.Int64)">
            <summary>Gets one HL7DefMessage object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefMessageCrud.SelectOne(System.String)">
            <summary>Gets one HL7DefMessage object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefMessageCrud.SelectMany(System.String)">
            <summary>Gets a list of HL7DefMessage objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefMessageCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefMessageCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.HL7DefMessage},System.String)">
            <summary>Converts a list of HL7DefMessage into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefMessageCrud.Insert(OpenDentBusiness.HL7DefMessage)">
            <summary>Inserts one HL7DefMessage into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefMessageCrud.Insert(OpenDentBusiness.HL7DefMessage,System.Boolean)">
            <summary>Inserts one HL7DefMessage into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefMessageCrud.InsertNoCache(OpenDentBusiness.HL7DefMessage)">
            <summary>Inserts one HL7DefMessage into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefMessageCrud.InsertNoCache(OpenDentBusiness.HL7DefMessage,System.Boolean)">
            <summary>Inserts one HL7DefMessage into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefMessageCrud.Update(OpenDentBusiness.HL7DefMessage)">
            <summary>Updates one HL7DefMessage in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefMessageCrud.Update(OpenDentBusiness.HL7DefMessage,OpenDentBusiness.HL7DefMessage)">
            <summary>Updates one HL7DefMessage in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefMessageCrud.UpdateComparison(OpenDentBusiness.HL7DefMessage,OpenDentBusiness.HL7DefMessage)">
            <summary>Returns true if Update(HL7DefMessage,HL7DefMessage) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefMessageCrud.Delete(System.Int64)">
            <summary>Deletes one HL7DefMessage from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefSegmentCrud.SelectOne(System.Int64)">
            <summary>Gets one HL7DefSegment object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefSegmentCrud.SelectOne(System.String)">
            <summary>Gets one HL7DefSegment object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefSegmentCrud.SelectMany(System.String)">
            <summary>Gets a list of HL7DefSegment objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefSegmentCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefSegmentCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.HL7DefSegment},System.String)">
            <summary>Converts a list of HL7DefSegment into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefSegmentCrud.Insert(OpenDentBusiness.HL7DefSegment)">
            <summary>Inserts one HL7DefSegment into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefSegmentCrud.Insert(OpenDentBusiness.HL7DefSegment,System.Boolean)">
            <summary>Inserts one HL7DefSegment into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefSegmentCrud.InsertNoCache(OpenDentBusiness.HL7DefSegment)">
            <summary>Inserts one HL7DefSegment into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefSegmentCrud.InsertNoCache(OpenDentBusiness.HL7DefSegment,System.Boolean)">
            <summary>Inserts one HL7DefSegment into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefSegmentCrud.Update(OpenDentBusiness.HL7DefSegment)">
            <summary>Updates one HL7DefSegment in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefSegmentCrud.Update(OpenDentBusiness.HL7DefSegment,OpenDentBusiness.HL7DefSegment)">
            <summary>Updates one HL7DefSegment in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefSegmentCrud.UpdateComparison(OpenDentBusiness.HL7DefSegment,OpenDentBusiness.HL7DefSegment)">
            <summary>Returns true if Update(HL7DefSegment,HL7DefSegment) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7DefSegmentCrud.Delete(System.Int64)">
            <summary>Deletes one HL7DefSegment from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7MsgCrud.SelectOne(System.Int64)">
            <summary>Gets one HL7Msg object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7MsgCrud.SelectOne(System.String)">
            <summary>Gets one HL7Msg object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7MsgCrud.SelectMany(System.String)">
            <summary>Gets a list of HL7Msg objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7MsgCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7MsgCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.HL7Msg},System.String)">
            <summary>Converts a list of HL7Msg into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7MsgCrud.Insert(OpenDentBusiness.HL7Msg)">
            <summary>Inserts one HL7Msg into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7MsgCrud.Insert(OpenDentBusiness.HL7Msg,System.Boolean)">
            <summary>Inserts one HL7Msg into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7MsgCrud.InsertNoCache(OpenDentBusiness.HL7Msg)">
            <summary>Inserts one HL7Msg into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7MsgCrud.InsertNoCache(OpenDentBusiness.HL7Msg,System.Boolean)">
            <summary>Inserts one HL7Msg into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7MsgCrud.Update(OpenDentBusiness.HL7Msg)">
            <summary>Updates one HL7Msg in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7MsgCrud.Update(OpenDentBusiness.HL7Msg,OpenDentBusiness.HL7Msg)">
            <summary>Updates one HL7Msg in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7MsgCrud.UpdateComparison(OpenDentBusiness.HL7Msg,OpenDentBusiness.HL7Msg)">
            <summary>Returns true if Update(HL7Msg,HL7Msg) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7MsgCrud.Delete(System.Int64)">
            <summary>Deletes one HL7Msg from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7ProcAttachCrud.SelectOne(System.Int64)">
            <summary>Gets one HL7ProcAttach object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7ProcAttachCrud.SelectOne(System.String)">
            <summary>Gets one HL7ProcAttach object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7ProcAttachCrud.SelectMany(System.String)">
            <summary>Gets a list of HL7ProcAttach objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7ProcAttachCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7ProcAttachCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.HL7ProcAttach},System.String)">
            <summary>Converts a list of HL7ProcAttach into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7ProcAttachCrud.Insert(OpenDentBusiness.HL7ProcAttach)">
            <summary>Inserts one HL7ProcAttach into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7ProcAttachCrud.Insert(OpenDentBusiness.HL7ProcAttach,System.Boolean)">
            <summary>Inserts one HL7ProcAttach into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7ProcAttachCrud.InsertNoCache(OpenDentBusiness.HL7ProcAttach)">
            <summary>Inserts one HL7ProcAttach into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7ProcAttachCrud.InsertNoCache(OpenDentBusiness.HL7ProcAttach,System.Boolean)">
            <summary>Inserts one HL7ProcAttach into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7ProcAttachCrud.Update(OpenDentBusiness.HL7ProcAttach)">
            <summary>Updates one HL7ProcAttach in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7ProcAttachCrud.Update(OpenDentBusiness.HL7ProcAttach,OpenDentBusiness.HL7ProcAttach)">
            <summary>Updates one HL7ProcAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7ProcAttachCrud.UpdateComparison(OpenDentBusiness.HL7ProcAttach,OpenDentBusiness.HL7ProcAttach)">
            <summary>Returns true if Update(HL7ProcAttach,HL7ProcAttach) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.HL7ProcAttachCrud.Delete(System.Int64)">
            <summary>Deletes one HL7ProcAttach from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.Icd10Crud.SelectOne(System.Int64)">
            <summary>Gets one Icd10 object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.Icd10Crud.SelectOne(System.String)">
            <summary>Gets one Icd10 object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.Icd10Crud.SelectMany(System.String)">
            <summary>Gets a list of Icd10 objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.Icd10Crud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.Icd10Crud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Icd10},System.String)">
            <summary>Converts a list of Icd10 into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.Icd10Crud.Insert(OpenDentBusiness.Icd10)">
            <summary>Inserts one Icd10 into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.Icd10Crud.Insert(OpenDentBusiness.Icd10,System.Boolean)">
            <summary>Inserts one Icd10 into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.Icd10Crud.InsertNoCache(OpenDentBusiness.Icd10)">
            <summary>Inserts one Icd10 into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.Icd10Crud.InsertNoCache(OpenDentBusiness.Icd10,System.Boolean)">
            <summary>Inserts one Icd10 into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.Icd10Crud.Update(OpenDentBusiness.Icd10)">
            <summary>Updates one Icd10 in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.Icd10Crud.Update(OpenDentBusiness.Icd10,OpenDentBusiness.Icd10)">
            <summary>Updates one Icd10 in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.Icd10Crud.UpdateComparison(OpenDentBusiness.Icd10,OpenDentBusiness.Icd10)">
            <summary>Returns true if Update(Icd10,Icd10) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.Icd10Crud.Delete(System.Int64)">
            <summary>Deletes one Icd10 from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ICD9Crud.SelectOne(System.Int64)">
            <summary>Gets one ICD9 object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ICD9Crud.SelectOne(System.String)">
            <summary>Gets one ICD9 object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ICD9Crud.SelectMany(System.String)">
            <summary>Gets a list of ICD9 objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ICD9Crud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ICD9Crud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ICD9},System.String)">
            <summary>Converts a list of ICD9 into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ICD9Crud.Insert(OpenDentBusiness.ICD9)">
            <summary>Inserts one ICD9 into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ICD9Crud.Insert(OpenDentBusiness.ICD9,System.Boolean)">
            <summary>Inserts one ICD9 into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ICD9Crud.InsertNoCache(OpenDentBusiness.ICD9)">
            <summary>Inserts one ICD9 into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ICD9Crud.InsertNoCache(OpenDentBusiness.ICD9,System.Boolean)">
            <summary>Inserts one ICD9 into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ICD9Crud.Update(OpenDentBusiness.ICD9)">
            <summary>Updates one ICD9 in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ICD9Crud.Update(OpenDentBusiness.ICD9,OpenDentBusiness.ICD9)">
            <summary>Updates one ICD9 in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ICD9Crud.UpdateComparison(OpenDentBusiness.ICD9,OpenDentBusiness.ICD9)">
            <summary>Returns true if Update(ICD9,ICD9) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ICD9Crud.Delete(System.Int64)">
            <summary>Deletes one ICD9 from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeCrud.SelectOne(System.Int64)">
            <summary>Gets one InsFilingCode object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeCrud.SelectOne(System.String)">
            <summary>Gets one InsFilingCode object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeCrud.SelectMany(System.String)">
            <summary>Gets a list of InsFilingCode objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.InsFilingCode},System.String)">
            <summary>Converts a list of InsFilingCode into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeCrud.Insert(OpenDentBusiness.InsFilingCode)">
            <summary>Inserts one InsFilingCode into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeCrud.Insert(OpenDentBusiness.InsFilingCode,System.Boolean)">
            <summary>Inserts one InsFilingCode into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeCrud.InsertNoCache(OpenDentBusiness.InsFilingCode)">
            <summary>Inserts one InsFilingCode into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeCrud.InsertNoCache(OpenDentBusiness.InsFilingCode,System.Boolean)">
            <summary>Inserts one InsFilingCode into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeCrud.Update(OpenDentBusiness.InsFilingCode)">
            <summary>Updates one InsFilingCode in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeCrud.Update(OpenDentBusiness.InsFilingCode,OpenDentBusiness.InsFilingCode)">
            <summary>Updates one InsFilingCode in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeCrud.UpdateComparison(OpenDentBusiness.InsFilingCode,OpenDentBusiness.InsFilingCode)">
            <summary>Returns true if Update(InsFilingCode,InsFilingCode) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeCrud.Delete(System.Int64)">
            <summary>Deletes one InsFilingCode from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeSubtypeCrud.SelectOne(System.Int64)">
            <summary>Gets one InsFilingCodeSubtype object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeSubtypeCrud.SelectOne(System.String)">
            <summary>Gets one InsFilingCodeSubtype object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeSubtypeCrud.SelectMany(System.String)">
            <summary>Gets a list of InsFilingCodeSubtype objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeSubtypeCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeSubtypeCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.InsFilingCodeSubtype},System.String)">
            <summary>Converts a list of InsFilingCodeSubtype into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeSubtypeCrud.Insert(OpenDentBusiness.InsFilingCodeSubtype)">
            <summary>Inserts one InsFilingCodeSubtype into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeSubtypeCrud.Insert(OpenDentBusiness.InsFilingCodeSubtype,System.Boolean)">
            <summary>Inserts one InsFilingCodeSubtype into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeSubtypeCrud.InsertNoCache(OpenDentBusiness.InsFilingCodeSubtype)">
            <summary>Inserts one InsFilingCodeSubtype into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeSubtypeCrud.InsertNoCache(OpenDentBusiness.InsFilingCodeSubtype,System.Boolean)">
            <summary>Inserts one InsFilingCodeSubtype into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeSubtypeCrud.Update(OpenDentBusiness.InsFilingCodeSubtype)">
            <summary>Updates one InsFilingCodeSubtype in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeSubtypeCrud.Update(OpenDentBusiness.InsFilingCodeSubtype,OpenDentBusiness.InsFilingCodeSubtype)">
            <summary>Updates one InsFilingCodeSubtype in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeSubtypeCrud.UpdateComparison(OpenDentBusiness.InsFilingCodeSubtype,OpenDentBusiness.InsFilingCodeSubtype)">
            <summary>Returns true if Update(InsFilingCodeSubtype,InsFilingCodeSubtype) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsFilingCodeSubtypeCrud.Delete(System.Int64)">
            <summary>Deletes one InsFilingCodeSubtype from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsPlanCrud.SelectOne(System.Int64)">
            <summary>Gets one InsPlan object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsPlanCrud.SelectOne(System.String)">
            <summary>Gets one InsPlan object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsPlanCrud.SelectMany(System.String)">
            <summary>Gets a list of InsPlan objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsPlanCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsPlanCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.InsPlan},System.String)">
            <summary>Converts a list of InsPlan into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsPlanCrud.Insert(OpenDentBusiness.InsPlan)">
            <summary>Inserts one InsPlan into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsPlanCrud.Insert(OpenDentBusiness.InsPlan,System.Boolean)">
            <summary>Inserts one InsPlan into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsPlanCrud.InsertNoCache(OpenDentBusiness.InsPlan)">
            <summary>Inserts one InsPlan into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsPlanCrud.InsertNoCache(OpenDentBusiness.InsPlan,System.Boolean)">
            <summary>Inserts one InsPlan into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsPlanCrud.Update(OpenDentBusiness.InsPlan)">
            <summary>Updates one InsPlan in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsPlanCrud.Update(OpenDentBusiness.InsPlan,OpenDentBusiness.InsPlan)">
            <summary>Updates one InsPlan in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsPlanCrud.UpdateComparison(OpenDentBusiness.InsPlan,OpenDentBusiness.InsPlan)">
            <summary>Returns true if Update(InsPlan,InsPlan) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsPlanCrud.Delete(System.Int64)">
            <summary>Deletes one InsPlan from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsPlanCrud.ClearFkey(System.Int64)">
            <summary>Zeros securitylog FKey column for rows that are using the matching planNum as FKey and are related to InsPlan.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the InsPlan table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsPlanCrud.ClearFkey(System.Collections.Generic.List{System.Int64})">
            <summary>Zeros securitylog FKey column for rows that are using the matching planNums as FKey and are related to InsPlan.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the InsPlan table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsSubCrud.SelectOne(System.Int64)">
            <summary>Gets one InsSub object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsSubCrud.SelectOne(System.String)">
            <summary>Gets one InsSub object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsSubCrud.SelectMany(System.String)">
            <summary>Gets a list of InsSub objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsSubCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsSubCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.InsSub},System.String)">
            <summary>Converts a list of InsSub into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsSubCrud.Insert(OpenDentBusiness.InsSub)">
            <summary>Inserts one InsSub into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsSubCrud.Insert(OpenDentBusiness.InsSub,System.Boolean)">
            <summary>Inserts one InsSub into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsSubCrud.InsertNoCache(OpenDentBusiness.InsSub)">
            <summary>Inserts one InsSub into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsSubCrud.InsertNoCache(OpenDentBusiness.InsSub,System.Boolean)">
            <summary>Inserts one InsSub into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsSubCrud.Update(OpenDentBusiness.InsSub)">
            <summary>Updates one InsSub in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsSubCrud.Update(OpenDentBusiness.InsSub,OpenDentBusiness.InsSub)">
            <summary>Updates one InsSub in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsSubCrud.UpdateComparison(OpenDentBusiness.InsSub,OpenDentBusiness.InsSub)">
            <summary>Returns true if Update(InsSub,InsSub) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsSubCrud.Delete(System.Int64)">
            <summary>Deletes one InsSub from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InstallmentPlanCrud.SelectOne(System.Int64)">
            <summary>Gets one InstallmentPlan object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InstallmentPlanCrud.SelectOne(System.String)">
            <summary>Gets one InstallmentPlan object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InstallmentPlanCrud.SelectMany(System.String)">
            <summary>Gets a list of InstallmentPlan objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InstallmentPlanCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InstallmentPlanCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.InstallmentPlan},System.String)">
            <summary>Converts a list of InstallmentPlan into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InstallmentPlanCrud.Insert(OpenDentBusiness.InstallmentPlan)">
            <summary>Inserts one InstallmentPlan into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InstallmentPlanCrud.Insert(OpenDentBusiness.InstallmentPlan,System.Boolean)">
            <summary>Inserts one InstallmentPlan into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InstallmentPlanCrud.InsertNoCache(OpenDentBusiness.InstallmentPlan)">
            <summary>Inserts one InstallmentPlan into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InstallmentPlanCrud.InsertNoCache(OpenDentBusiness.InstallmentPlan,System.Boolean)">
            <summary>Inserts one InstallmentPlan into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InstallmentPlanCrud.Update(OpenDentBusiness.InstallmentPlan)">
            <summary>Updates one InstallmentPlan in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InstallmentPlanCrud.Update(OpenDentBusiness.InstallmentPlan,OpenDentBusiness.InstallmentPlan)">
            <summary>Updates one InstallmentPlan in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InstallmentPlanCrud.UpdateComparison(OpenDentBusiness.InstallmentPlan,OpenDentBusiness.InstallmentPlan)">
            <summary>Returns true if Update(InstallmentPlan,InstallmentPlan) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InstallmentPlanCrud.Delete(System.Int64)">
            <summary>Deletes one InstallmentPlan from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyCrud.SelectOne(System.Int64)">
            <summary>Gets one InsVerify object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyCrud.SelectOne(System.String)">
            <summary>Gets one InsVerify object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyCrud.SelectMany(System.String)">
            <summary>Gets a list of InsVerify objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.InsVerify},System.String)">
            <summary>Converts a list of InsVerify into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyCrud.Insert(OpenDentBusiness.InsVerify)">
            <summary>Inserts one InsVerify into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyCrud.Insert(OpenDentBusiness.InsVerify,System.Boolean)">
            <summary>Inserts one InsVerify into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyCrud.InsertNoCache(OpenDentBusiness.InsVerify)">
            <summary>Inserts one InsVerify into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyCrud.InsertNoCache(OpenDentBusiness.InsVerify,System.Boolean)">
            <summary>Inserts one InsVerify into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyCrud.Update(OpenDentBusiness.InsVerify)">
            <summary>Updates one InsVerify in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyCrud.Update(OpenDentBusiness.InsVerify,OpenDentBusiness.InsVerify)">
            <summary>Updates one InsVerify in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyCrud.UpdateComparison(OpenDentBusiness.InsVerify,OpenDentBusiness.InsVerify)">
            <summary>Returns true if Update(InsVerify,InsVerify) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyCrud.Delete(System.Int64)">
            <summary>Deletes one InsVerify from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyHistCrud.SelectOne(System.Int64)">
            <summary>Gets one InsVerifyHist object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyHistCrud.SelectOne(System.String)">
            <summary>Gets one InsVerifyHist object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyHistCrud.SelectMany(System.String)">
            <summary>Gets a list of InsVerifyHist objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyHistCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyHistCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.InsVerifyHist},System.String)">
            <summary>Converts a list of InsVerifyHist into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyHistCrud.Insert(OpenDentBusiness.InsVerifyHist)">
            <summary>Inserts one InsVerifyHist into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyHistCrud.Insert(OpenDentBusiness.InsVerifyHist,System.Boolean)">
            <summary>Inserts one InsVerifyHist into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyHistCrud.InsertNoCache(OpenDentBusiness.InsVerifyHist)">
            <summary>Inserts one InsVerifyHist into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyHistCrud.InsertNoCache(OpenDentBusiness.InsVerifyHist,System.Boolean)">
            <summary>Inserts one InsVerifyHist into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyHistCrud.Update(OpenDentBusiness.InsVerifyHist)">
            <summary>Updates one InsVerifyHist in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyHistCrud.Update(OpenDentBusiness.InsVerifyHist,OpenDentBusiness.InsVerifyHist)">
            <summary>Updates one InsVerifyHist in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyHistCrud.UpdateComparison(OpenDentBusiness.InsVerifyHist,OpenDentBusiness.InsVerifyHist)">
            <summary>Returns true if Update(InsVerifyHist,InsVerifyHist) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InsVerifyHistCrud.Delete(System.Int64)">
            <summary>Deletes one InsVerifyHist from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InterventionCrud.SelectOne(System.Int64)">
            <summary>Gets one Intervention object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InterventionCrud.SelectOne(System.String)">
            <summary>Gets one Intervention object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InterventionCrud.SelectMany(System.String)">
            <summary>Gets a list of Intervention objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InterventionCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InterventionCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Intervention},System.String)">
            <summary>Converts a list of Intervention into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InterventionCrud.Insert(OpenDentBusiness.Intervention)">
            <summary>Inserts one Intervention into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InterventionCrud.Insert(OpenDentBusiness.Intervention,System.Boolean)">
            <summary>Inserts one Intervention into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InterventionCrud.InsertNoCache(OpenDentBusiness.Intervention)">
            <summary>Inserts one Intervention into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InterventionCrud.InsertNoCache(OpenDentBusiness.Intervention,System.Boolean)">
            <summary>Inserts one Intervention into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InterventionCrud.Update(OpenDentBusiness.Intervention)">
            <summary>Updates one Intervention in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InterventionCrud.Update(OpenDentBusiness.Intervention,OpenDentBusiness.Intervention)">
            <summary>Updates one Intervention in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InterventionCrud.UpdateComparison(OpenDentBusiness.Intervention,OpenDentBusiness.Intervention)">
            <summary>Returns true if Update(Intervention,Intervention) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.InterventionCrud.Delete(System.Int64)">
            <summary>Deletes one Intervention from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobControlCrud.SelectOne(System.Int64)">
            <summary>Gets one JobControl object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobControlCrud.SelectOne(System.String)">
            <summary>Gets one JobControl object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobControlCrud.SelectMany(System.String)">
            <summary>Gets a list of JobControl objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobControlCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobControlCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.JobControl},System.String)">
            <summary>Converts a list of JobControl into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobControlCrud.Insert(OpenDentBusiness.JobControl)">
            <summary>Inserts one JobControl into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobControlCrud.Insert(OpenDentBusiness.JobControl,System.Boolean)">
            <summary>Inserts one JobControl into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobControlCrud.InsertNoCache(OpenDentBusiness.JobControl)">
            <summary>Inserts one JobControl into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobControlCrud.InsertNoCache(OpenDentBusiness.JobControl,System.Boolean)">
            <summary>Inserts one JobControl into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobControlCrud.Update(OpenDentBusiness.JobControl)">
            <summary>Updates one JobControl in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobControlCrud.Update(OpenDentBusiness.JobControl,OpenDentBusiness.JobControl)">
            <summary>Updates one JobControl in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobControlCrud.UpdateComparison(OpenDentBusiness.JobControl,OpenDentBusiness.JobControl)">
            <summary>Returns true if Update(JobControl,JobControl) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobControlCrud.Delete(System.Int64)">
            <summary>Deletes one JobControl from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobCrud.SelectOne(System.Int64)">
            <summary>Gets one Job object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobCrud.SelectOne(System.String)">
            <summary>Gets one Job object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobCrud.SelectMany(System.String)">
            <summary>Gets a list of Job objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Job},System.String)">
            <summary>Converts a list of Job into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobCrud.Insert(OpenDentBusiness.Job)">
            <summary>Inserts one Job into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobCrud.Insert(OpenDentBusiness.Job,System.Boolean)">
            <summary>Inserts one Job into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobCrud.InsertNoCache(OpenDentBusiness.Job)">
            <summary>Inserts one Job into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobCrud.InsertNoCache(OpenDentBusiness.Job,System.Boolean)">
            <summary>Inserts one Job into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobCrud.Update(OpenDentBusiness.Job)">
            <summary>Updates one Job in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobCrud.Update(OpenDentBusiness.Job,OpenDentBusiness.Job)">
            <summary>Updates one Job in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobCrud.UpdateComparison(OpenDentBusiness.Job,OpenDentBusiness.Job)">
            <summary>Returns true if Update(Job,Job) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobCrud.Delete(System.Int64)">
            <summary>Deletes one Job from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLinkCrud.SelectOne(System.Int64)">
            <summary>Gets one JobLink object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLinkCrud.SelectOne(System.String)">
            <summary>Gets one JobLink object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLinkCrud.SelectMany(System.String)">
            <summary>Gets a list of JobLink objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLinkCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLinkCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.JobLink},System.String)">
            <summary>Converts a list of JobLink into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLinkCrud.Insert(OpenDentBusiness.JobLink)">
            <summary>Inserts one JobLink into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLinkCrud.Insert(OpenDentBusiness.JobLink,System.Boolean)">
            <summary>Inserts one JobLink into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLinkCrud.InsertNoCache(OpenDentBusiness.JobLink)">
            <summary>Inserts one JobLink into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLinkCrud.InsertNoCache(OpenDentBusiness.JobLink,System.Boolean)">
            <summary>Inserts one JobLink into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLinkCrud.Update(OpenDentBusiness.JobLink)">
            <summary>Updates one JobLink in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLinkCrud.Update(OpenDentBusiness.JobLink,OpenDentBusiness.JobLink)">
            <summary>Updates one JobLink in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLinkCrud.UpdateComparison(OpenDentBusiness.JobLink,OpenDentBusiness.JobLink)">
            <summary>Returns true if Update(JobLink,JobLink) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLinkCrud.Delete(System.Int64)">
            <summary>Deletes one JobLink from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLinkCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.JobLink},System.Collections.Generic.List{OpenDentBusiness.JobLink})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLogCrud.SelectOne(System.Int64)">
            <summary>Gets one JobLog object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLogCrud.SelectOne(System.String)">
            <summary>Gets one JobLog object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLogCrud.SelectMany(System.String)">
            <summary>Gets a list of JobLog objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLogCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLogCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.JobLog},System.String)">
            <summary>Converts a list of JobLog into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLogCrud.Insert(OpenDentBusiness.JobLog)">
            <summary>Inserts one JobLog into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLogCrud.Insert(OpenDentBusiness.JobLog,System.Boolean)">
            <summary>Inserts one JobLog into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLogCrud.InsertNoCache(OpenDentBusiness.JobLog)">
            <summary>Inserts one JobLog into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLogCrud.InsertNoCache(OpenDentBusiness.JobLog,System.Boolean)">
            <summary>Inserts one JobLog into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLogCrud.Update(OpenDentBusiness.JobLog)">
            <summary>Updates one JobLog in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLogCrud.Update(OpenDentBusiness.JobLog,OpenDentBusiness.JobLog)">
            <summary>Updates one JobLog in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLogCrud.UpdateComparison(OpenDentBusiness.JobLog,OpenDentBusiness.JobLog)">
            <summary>Returns true if Update(JobLog,JobLog) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLogCrud.Delete(System.Int64)">
            <summary>Deletes one JobLog from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobLogCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.JobLog},System.Collections.Generic.List{OpenDentBusiness.JobLog})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobNoteCrud.SelectOne(System.Int64)">
            <summary>Gets one JobNote object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobNoteCrud.SelectOne(System.String)">
            <summary>Gets one JobNote object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobNoteCrud.SelectMany(System.String)">
            <summary>Gets a list of JobNote objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobNoteCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobNoteCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.JobNote},System.String)">
            <summary>Converts a list of JobNote into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobNoteCrud.Insert(OpenDentBusiness.JobNote)">
            <summary>Inserts one JobNote into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobNoteCrud.Insert(OpenDentBusiness.JobNote,System.Boolean)">
            <summary>Inserts one JobNote into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobNoteCrud.InsertNoCache(OpenDentBusiness.JobNote)">
            <summary>Inserts one JobNote into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobNoteCrud.InsertNoCache(OpenDentBusiness.JobNote,System.Boolean)">
            <summary>Inserts one JobNote into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobNoteCrud.Update(OpenDentBusiness.JobNote)">
            <summary>Updates one JobNote in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobNoteCrud.Update(OpenDentBusiness.JobNote,OpenDentBusiness.JobNote)">
            <summary>Updates one JobNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobNoteCrud.UpdateComparison(OpenDentBusiness.JobNote,OpenDentBusiness.JobNote)">
            <summary>Returns true if Update(JobNote,JobNote) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobNoteCrud.Delete(System.Int64)">
            <summary>Deletes one JobNote from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobNoteCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.JobNote},System.Collections.Generic.List{OpenDentBusiness.JobNote})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobPermissionCrud.SelectOne(System.Int64)">
            <summary>Gets one JobPermission object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobPermissionCrud.SelectOne(System.String)">
            <summary>Gets one JobPermission object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobPermissionCrud.SelectMany(System.String)">
            <summary>Gets a list of JobPermission objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobPermissionCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobPermissionCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.JobPermission},System.String)">
            <summary>Converts a list of JobPermission into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobPermissionCrud.Insert(OpenDentBusiness.JobPermission)">
            <summary>Inserts one JobPermission into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobPermissionCrud.Insert(OpenDentBusiness.JobPermission,System.Boolean)">
            <summary>Inserts one JobPermission into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobPermissionCrud.InsertNoCache(OpenDentBusiness.JobPermission)">
            <summary>Inserts one JobPermission into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobPermissionCrud.InsertNoCache(OpenDentBusiness.JobPermission,System.Boolean)">
            <summary>Inserts one JobPermission into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobPermissionCrud.Update(OpenDentBusiness.JobPermission)">
            <summary>Updates one JobPermission in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobPermissionCrud.Update(OpenDentBusiness.JobPermission,OpenDentBusiness.JobPermission)">
            <summary>Updates one JobPermission in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobPermissionCrud.UpdateComparison(OpenDentBusiness.JobPermission,OpenDentBusiness.JobPermission)">
            <summary>Returns true if Update(JobPermission,JobPermission) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobPermissionCrud.Delete(System.Int64)">
            <summary>Deletes one JobPermission from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobPermissionCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.JobPermission},System.Collections.Generic.List{OpenDentBusiness.JobPermission})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobProjectCrud.SelectOne(System.Int64)">
            <summary>Gets one JobProject object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobProjectCrud.SelectOne(System.String)">
            <summary>Gets one JobProject object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobProjectCrud.SelectMany(System.String)">
            <summary>Gets a list of JobProject objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobProjectCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobProjectCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.JobProject},System.String)">
            <summary>Converts a list of JobProject into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobProjectCrud.Insert(OpenDentBusiness.JobProject)">
            <summary>Inserts one JobProject into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobProjectCrud.Insert(OpenDentBusiness.JobProject,System.Boolean)">
            <summary>Inserts one JobProject into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobProjectCrud.InsertNoCache(OpenDentBusiness.JobProject)">
            <summary>Inserts one JobProject into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobProjectCrud.InsertNoCache(OpenDentBusiness.JobProject,System.Boolean)">
            <summary>Inserts one JobProject into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobProjectCrud.Update(OpenDentBusiness.JobProject)">
            <summary>Updates one JobProject in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobProjectCrud.Update(OpenDentBusiness.JobProject,OpenDentBusiness.JobProject)">
            <summary>Updates one JobProject in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobProjectCrud.UpdateComparison(OpenDentBusiness.JobProject,OpenDentBusiness.JobProject)">
            <summary>Returns true if Update(JobProject,JobProject) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobProjectCrud.Delete(System.Int64)">
            <summary>Deletes one JobProject from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobQuoteCrud.SelectOne(System.Int64)">
            <summary>Gets one JobQuote object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobQuoteCrud.SelectOne(System.String)">
            <summary>Gets one JobQuote object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobQuoteCrud.SelectMany(System.String)">
            <summary>Gets a list of JobQuote objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobQuoteCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobQuoteCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.JobQuote},System.String)">
            <summary>Converts a list of JobQuote into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobQuoteCrud.Insert(OpenDentBusiness.JobQuote)">
            <summary>Inserts one JobQuote into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobQuoteCrud.Insert(OpenDentBusiness.JobQuote,System.Boolean)">
            <summary>Inserts one JobQuote into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobQuoteCrud.InsertNoCache(OpenDentBusiness.JobQuote)">
            <summary>Inserts one JobQuote into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobQuoteCrud.InsertNoCache(OpenDentBusiness.JobQuote,System.Boolean)">
            <summary>Inserts one JobQuote into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobQuoteCrud.Update(OpenDentBusiness.JobQuote)">
            <summary>Updates one JobQuote in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobQuoteCrud.Update(OpenDentBusiness.JobQuote,OpenDentBusiness.JobQuote)">
            <summary>Updates one JobQuote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobQuoteCrud.UpdateComparison(OpenDentBusiness.JobQuote,OpenDentBusiness.JobQuote)">
            <summary>Returns true if Update(JobQuote,JobQuote) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobQuoteCrud.Delete(System.Int64)">
            <summary>Deletes one JobQuote from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobQuoteCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.JobQuote},System.Collections.Generic.List{OpenDentBusiness.JobQuote})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobReviewCrud.SelectOne(System.Int64)">
            <summary>Gets one JobReview object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobReviewCrud.SelectOne(System.String)">
            <summary>Gets one JobReview object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobReviewCrud.SelectMany(System.String)">
            <summary>Gets a list of JobReview objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobReviewCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobReviewCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.JobReview},System.String)">
            <summary>Converts a list of JobReview into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobReviewCrud.Insert(OpenDentBusiness.JobReview)">
            <summary>Inserts one JobReview into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobReviewCrud.Insert(OpenDentBusiness.JobReview,System.Boolean)">
            <summary>Inserts one JobReview into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobReviewCrud.InsertNoCache(OpenDentBusiness.JobReview)">
            <summary>Inserts one JobReview into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobReviewCrud.InsertNoCache(OpenDentBusiness.JobReview,System.Boolean)">
            <summary>Inserts one JobReview into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobReviewCrud.Update(OpenDentBusiness.JobReview)">
            <summary>Updates one JobReview in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobReviewCrud.Update(OpenDentBusiness.JobReview,OpenDentBusiness.JobReview)">
            <summary>Updates one JobReview in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobReviewCrud.UpdateComparison(OpenDentBusiness.JobReview,OpenDentBusiness.JobReview)">
            <summary>Returns true if Update(JobReview,JobReview) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobReviewCrud.Delete(System.Int64)">
            <summary>Deletes one JobReview from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JobReviewCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.JobReview},System.Collections.Generic.List{OpenDentBusiness.JobReview})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JournalEntryCrud.SelectOne(System.Int64)">
            <summary>Gets one JournalEntry object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JournalEntryCrud.SelectOne(System.String)">
            <summary>Gets one JournalEntry object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JournalEntryCrud.SelectMany(System.String)">
            <summary>Gets a list of JournalEntry objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JournalEntryCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JournalEntryCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.JournalEntry},System.String)">
            <summary>Converts a list of JournalEntry into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JournalEntryCrud.Insert(OpenDentBusiness.JournalEntry)">
            <summary>Inserts one JournalEntry into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JournalEntryCrud.Insert(OpenDentBusiness.JournalEntry,System.Boolean)">
            <summary>Inserts one JournalEntry into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JournalEntryCrud.InsertNoCache(OpenDentBusiness.JournalEntry)">
            <summary>Inserts one JournalEntry into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JournalEntryCrud.InsertNoCache(OpenDentBusiness.JournalEntry,System.Boolean)">
            <summary>Inserts one JournalEntry into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JournalEntryCrud.Update(OpenDentBusiness.JournalEntry)">
            <summary>Updates one JournalEntry in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JournalEntryCrud.Update(OpenDentBusiness.JournalEntry,OpenDentBusiness.JournalEntry)">
            <summary>Updates one JournalEntry in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JournalEntryCrud.UpdateComparison(OpenDentBusiness.JournalEntry,OpenDentBusiness.JournalEntry)">
            <summary>Returns true if Update(JournalEntry,JournalEntry) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.JournalEntryCrud.Delete(System.Int64)">
            <summary>Deletes one JournalEntry from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabCaseCrud.SelectOne(System.Int64)">
            <summary>Gets one LabCase object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabCaseCrud.SelectOne(System.String)">
            <summary>Gets one LabCase object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabCaseCrud.SelectMany(System.String)">
            <summary>Gets a list of LabCase objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabCaseCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabCaseCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.LabCase},System.String)">
            <summary>Converts a list of LabCase into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabCaseCrud.Insert(OpenDentBusiness.LabCase)">
            <summary>Inserts one LabCase into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabCaseCrud.Insert(OpenDentBusiness.LabCase,System.Boolean)">
            <summary>Inserts one LabCase into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabCaseCrud.InsertNoCache(OpenDentBusiness.LabCase)">
            <summary>Inserts one LabCase into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabCaseCrud.InsertNoCache(OpenDentBusiness.LabCase,System.Boolean)">
            <summary>Inserts one LabCase into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabCaseCrud.Update(OpenDentBusiness.LabCase)">
            <summary>Updates one LabCase in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabCaseCrud.Update(OpenDentBusiness.LabCase,OpenDentBusiness.LabCase)">
            <summary>Updates one LabCase in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabCaseCrud.UpdateComparison(OpenDentBusiness.LabCase,OpenDentBusiness.LabCase)">
            <summary>Returns true if Update(LabCase,LabCase) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabCaseCrud.Delete(System.Int64)">
            <summary>Deletes one LabCase from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LaboratoryCrud.SelectOne(System.Int64)">
            <summary>Gets one Laboratory object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LaboratoryCrud.SelectOne(System.String)">
            <summary>Gets one Laboratory object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LaboratoryCrud.SelectMany(System.String)">
            <summary>Gets a list of Laboratory objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LaboratoryCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LaboratoryCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Laboratory},System.String)">
            <summary>Converts a list of Laboratory into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LaboratoryCrud.Insert(OpenDentBusiness.Laboratory)">
            <summary>Inserts one Laboratory into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LaboratoryCrud.Insert(OpenDentBusiness.Laboratory,System.Boolean)">
            <summary>Inserts one Laboratory into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LaboratoryCrud.InsertNoCache(OpenDentBusiness.Laboratory)">
            <summary>Inserts one Laboratory into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LaboratoryCrud.InsertNoCache(OpenDentBusiness.Laboratory,System.Boolean)">
            <summary>Inserts one Laboratory into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LaboratoryCrud.Update(OpenDentBusiness.Laboratory)">
            <summary>Updates one Laboratory in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LaboratoryCrud.Update(OpenDentBusiness.Laboratory,OpenDentBusiness.Laboratory)">
            <summary>Updates one Laboratory in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LaboratoryCrud.UpdateComparison(OpenDentBusiness.Laboratory,OpenDentBusiness.Laboratory)">
            <summary>Returns true if Update(Laboratory,Laboratory) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LaboratoryCrud.Delete(System.Int64)">
            <summary>Deletes one Laboratory from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabPanelCrud.SelectOne(System.Int64)">
            <summary>Gets one LabPanel object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabPanelCrud.SelectOne(System.String)">
            <summary>Gets one LabPanel object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabPanelCrud.SelectMany(System.String)">
            <summary>Gets a list of LabPanel objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabPanelCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabPanelCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.LabPanel},System.String)">
            <summary>Converts a list of LabPanel into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabPanelCrud.Insert(OpenDentBusiness.LabPanel)">
            <summary>Inserts one LabPanel into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabPanelCrud.Insert(OpenDentBusiness.LabPanel,System.Boolean)">
            <summary>Inserts one LabPanel into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabPanelCrud.InsertNoCache(OpenDentBusiness.LabPanel)">
            <summary>Inserts one LabPanel into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabPanelCrud.InsertNoCache(OpenDentBusiness.LabPanel,System.Boolean)">
            <summary>Inserts one LabPanel into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabPanelCrud.Update(OpenDentBusiness.LabPanel)">
            <summary>Updates one LabPanel in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabPanelCrud.Update(OpenDentBusiness.LabPanel,OpenDentBusiness.LabPanel)">
            <summary>Updates one LabPanel in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabPanelCrud.UpdateComparison(OpenDentBusiness.LabPanel,OpenDentBusiness.LabPanel)">
            <summary>Returns true if Update(LabPanel,LabPanel) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabPanelCrud.Delete(System.Int64)">
            <summary>Deletes one LabPanel from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabResultCrud.SelectOne(System.Int64)">
            <summary>Gets one LabResult object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabResultCrud.SelectOne(System.String)">
            <summary>Gets one LabResult object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabResultCrud.SelectMany(System.String)">
            <summary>Gets a list of LabResult objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabResultCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabResultCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.LabResult},System.String)">
            <summary>Converts a list of LabResult into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabResultCrud.Insert(OpenDentBusiness.LabResult)">
            <summary>Inserts one LabResult into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabResultCrud.Insert(OpenDentBusiness.LabResult,System.Boolean)">
            <summary>Inserts one LabResult into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabResultCrud.InsertNoCache(OpenDentBusiness.LabResult)">
            <summary>Inserts one LabResult into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabResultCrud.InsertNoCache(OpenDentBusiness.LabResult,System.Boolean)">
            <summary>Inserts one LabResult into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabResultCrud.Update(OpenDentBusiness.LabResult)">
            <summary>Updates one LabResult in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabResultCrud.Update(OpenDentBusiness.LabResult,OpenDentBusiness.LabResult)">
            <summary>Updates one LabResult in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabResultCrud.UpdateComparison(OpenDentBusiness.LabResult,OpenDentBusiness.LabResult)">
            <summary>Returns true if Update(LabResult,LabResult) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabResultCrud.Delete(System.Int64)">
            <summary>Deletes one LabResult from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabTurnaroundCrud.SelectOne(System.Int64)">
            <summary>Gets one LabTurnaround object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabTurnaroundCrud.SelectOne(System.String)">
            <summary>Gets one LabTurnaround object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabTurnaroundCrud.SelectMany(System.String)">
            <summary>Gets a list of LabTurnaround objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabTurnaroundCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabTurnaroundCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.LabTurnaround},System.String)">
            <summary>Converts a list of LabTurnaround into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabTurnaroundCrud.Insert(OpenDentBusiness.LabTurnaround)">
            <summary>Inserts one LabTurnaround into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabTurnaroundCrud.Insert(OpenDentBusiness.LabTurnaround,System.Boolean)">
            <summary>Inserts one LabTurnaround into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabTurnaroundCrud.InsertNoCache(OpenDentBusiness.LabTurnaround)">
            <summary>Inserts one LabTurnaround into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabTurnaroundCrud.InsertNoCache(OpenDentBusiness.LabTurnaround,System.Boolean)">
            <summary>Inserts one LabTurnaround into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabTurnaroundCrud.Update(OpenDentBusiness.LabTurnaround)">
            <summary>Updates one LabTurnaround in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabTurnaroundCrud.Update(OpenDentBusiness.LabTurnaround,OpenDentBusiness.LabTurnaround)">
            <summary>Updates one LabTurnaround in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabTurnaroundCrud.UpdateComparison(OpenDentBusiness.LabTurnaround,OpenDentBusiness.LabTurnaround)">
            <summary>Returns true if Update(LabTurnaround,LabTurnaround) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LabTurnaroundCrud.Delete(System.Int64)">
            <summary>Deletes one LabTurnaround from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageCrud.SelectOne(System.Int64)">
            <summary>Gets one Language object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageCrud.SelectOne(System.String)">
            <summary>Gets one Language object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageCrud.SelectMany(System.String)">
            <summary>Gets a list of Language objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Language},System.String)">
            <summary>Converts a list of Language into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageCrud.Insert(OpenDentBusiness.Language)">
            <summary>Inserts one Language into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageCrud.Insert(OpenDentBusiness.Language,System.Boolean)">
            <summary>Inserts one Language into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageCrud.InsertNoCache(OpenDentBusiness.Language)">
            <summary>Inserts one Language into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageCrud.InsertNoCache(OpenDentBusiness.Language,System.Boolean)">
            <summary>Inserts one Language into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageCrud.Update(OpenDentBusiness.Language)">
            <summary>Updates one Language in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageCrud.Update(OpenDentBusiness.Language,OpenDentBusiness.Language)">
            <summary>Updates one Language in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageCrud.UpdateComparison(OpenDentBusiness.Language,OpenDentBusiness.Language)">
            <summary>Returns true if Update(Language,Language) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageCrud.Delete(System.Int64)">
            <summary>Deletes one Language from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageForeignCrud.SelectOne(System.Int64)">
            <summary>Gets one LanguageForeign object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageForeignCrud.SelectOne(System.String)">
            <summary>Gets one LanguageForeign object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageForeignCrud.SelectMany(System.String)">
            <summary>Gets a list of LanguageForeign objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageForeignCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageForeignCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.LanguageForeign},System.String)">
            <summary>Converts a list of LanguageForeign into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageForeignCrud.Insert(OpenDentBusiness.LanguageForeign)">
            <summary>Inserts one LanguageForeign into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageForeignCrud.Insert(OpenDentBusiness.LanguageForeign,System.Boolean)">
            <summary>Inserts one LanguageForeign into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageForeignCrud.InsertNoCache(OpenDentBusiness.LanguageForeign)">
            <summary>Inserts one LanguageForeign into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageForeignCrud.InsertNoCache(OpenDentBusiness.LanguageForeign,System.Boolean)">
            <summary>Inserts one LanguageForeign into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageForeignCrud.Update(OpenDentBusiness.LanguageForeign)">
            <summary>Updates one LanguageForeign in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageForeignCrud.Update(OpenDentBusiness.LanguageForeign,OpenDentBusiness.LanguageForeign)">
            <summary>Updates one LanguageForeign in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageForeignCrud.UpdateComparison(OpenDentBusiness.LanguageForeign,OpenDentBusiness.LanguageForeign)">
            <summary>Returns true if Update(LanguageForeign,LanguageForeign) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LanguageForeignCrud.Delete(System.Int64)">
            <summary>Deletes one LanguageForeign from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterCrud.SelectOne(System.Int64)">
            <summary>Gets one Letter object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterCrud.SelectOne(System.String)">
            <summary>Gets one Letter object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterCrud.SelectMany(System.String)">
            <summary>Gets a list of Letter objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Letter},System.String)">
            <summary>Converts a list of Letter into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterCrud.Insert(OpenDentBusiness.Letter)">
            <summary>Inserts one Letter into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterCrud.Insert(OpenDentBusiness.Letter,System.Boolean)">
            <summary>Inserts one Letter into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterCrud.InsertNoCache(OpenDentBusiness.Letter)">
            <summary>Inserts one Letter into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterCrud.InsertNoCache(OpenDentBusiness.Letter,System.Boolean)">
            <summary>Inserts one Letter into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterCrud.Update(OpenDentBusiness.Letter)">
            <summary>Updates one Letter in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterCrud.Update(OpenDentBusiness.Letter,OpenDentBusiness.Letter)">
            <summary>Updates one Letter in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterCrud.UpdateComparison(OpenDentBusiness.Letter,OpenDentBusiness.Letter)">
            <summary>Returns true if Update(Letter,Letter) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterCrud.Delete(System.Int64)">
            <summary>Deletes one Letter from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeCrud.SelectOne(System.Int64)">
            <summary>Gets one LetterMerge object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeCrud.SelectOne(System.String)">
            <summary>Gets one LetterMerge object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeCrud.SelectMany(System.String)">
            <summary>Gets a list of LetterMerge objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.LetterMerge},System.String)">
            <summary>Converts a list of LetterMerge into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeCrud.Insert(OpenDentBusiness.LetterMerge)">
            <summary>Inserts one LetterMerge into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeCrud.Insert(OpenDentBusiness.LetterMerge,System.Boolean)">
            <summary>Inserts one LetterMerge into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeCrud.InsertNoCache(OpenDentBusiness.LetterMerge)">
            <summary>Inserts one LetterMerge into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeCrud.InsertNoCache(OpenDentBusiness.LetterMerge,System.Boolean)">
            <summary>Inserts one LetterMerge into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeCrud.Update(OpenDentBusiness.LetterMerge)">
            <summary>Updates one LetterMerge in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeCrud.Update(OpenDentBusiness.LetterMerge,OpenDentBusiness.LetterMerge)">
            <summary>Updates one LetterMerge in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeCrud.UpdateComparison(OpenDentBusiness.LetterMerge,OpenDentBusiness.LetterMerge)">
            <summary>Returns true if Update(LetterMerge,LetterMerge) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeCrud.Delete(System.Int64)">
            <summary>Deletes one LetterMerge from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeFieldCrud.SelectOne(System.Int64)">
            <summary>Gets one LetterMergeField object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeFieldCrud.SelectOne(System.String)">
            <summary>Gets one LetterMergeField object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeFieldCrud.SelectMany(System.String)">
            <summary>Gets a list of LetterMergeField objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeFieldCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeFieldCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.LetterMergeField},System.String)">
            <summary>Converts a list of LetterMergeField into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeFieldCrud.Insert(OpenDentBusiness.LetterMergeField)">
            <summary>Inserts one LetterMergeField into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeFieldCrud.Insert(OpenDentBusiness.LetterMergeField,System.Boolean)">
            <summary>Inserts one LetterMergeField into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeFieldCrud.InsertNoCache(OpenDentBusiness.LetterMergeField)">
            <summary>Inserts one LetterMergeField into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeFieldCrud.InsertNoCache(OpenDentBusiness.LetterMergeField,System.Boolean)">
            <summary>Inserts one LetterMergeField into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeFieldCrud.Update(OpenDentBusiness.LetterMergeField)">
            <summary>Updates one LetterMergeField in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeFieldCrud.Update(OpenDentBusiness.LetterMergeField,OpenDentBusiness.LetterMergeField)">
            <summary>Updates one LetterMergeField in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeFieldCrud.UpdateComparison(OpenDentBusiness.LetterMergeField,OpenDentBusiness.LetterMergeField)">
            <summary>Returns true if Update(LetterMergeField,LetterMergeField) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LetterMergeFieldCrud.Delete(System.Int64)">
            <summary>Deletes one LetterMergeField from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LoincCrud.SelectOne(System.Int64)">
            <summary>Gets one Loinc object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LoincCrud.SelectOne(System.String)">
            <summary>Gets one Loinc object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LoincCrud.SelectMany(System.String)">
            <summary>Gets a list of Loinc objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LoincCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LoincCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Loinc},System.String)">
            <summary>Converts a list of Loinc into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LoincCrud.Insert(OpenDentBusiness.Loinc)">
            <summary>Inserts one Loinc into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LoincCrud.Insert(OpenDentBusiness.Loinc,System.Boolean)">
            <summary>Inserts one Loinc into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LoincCrud.InsertNoCache(OpenDentBusiness.Loinc)">
            <summary>Inserts one Loinc into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LoincCrud.InsertNoCache(OpenDentBusiness.Loinc,System.Boolean)">
            <summary>Inserts one Loinc into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LoincCrud.Update(OpenDentBusiness.Loinc)">
            <summary>Updates one Loinc in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LoincCrud.Update(OpenDentBusiness.Loinc,OpenDentBusiness.Loinc)">
            <summary>Updates one Loinc in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LoincCrud.UpdateComparison(OpenDentBusiness.Loinc,OpenDentBusiness.Loinc)">
            <summary>Returns true if Update(Loinc,Loinc) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.LoincCrud.Delete(System.Int64)">
            <summary>Deletes one Loinc from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MapAreaCrud.SelectOne(System.Int64)">
            <summary>Gets one MapArea object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MapAreaCrud.SelectOne(System.String)">
            <summary>Gets one MapArea object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MapAreaCrud.SelectMany(System.String)">
            <summary>Gets a list of MapArea objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MapAreaCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MapAreaCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.MapArea},System.String)">
            <summary>Converts a list of MapArea into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MapAreaCrud.Insert(OpenDentBusiness.MapArea)">
            <summary>Inserts one MapArea into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MapAreaCrud.Insert(OpenDentBusiness.MapArea,System.Boolean)">
            <summary>Inserts one MapArea into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MapAreaCrud.InsertNoCache(OpenDentBusiness.MapArea)">
            <summary>Inserts one MapArea into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MapAreaCrud.InsertNoCache(OpenDentBusiness.MapArea,System.Boolean)">
            <summary>Inserts one MapArea into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MapAreaCrud.Update(OpenDentBusiness.MapArea)">
            <summary>Updates one MapArea in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MapAreaCrud.Update(OpenDentBusiness.MapArea,OpenDentBusiness.MapArea)">
            <summary>Updates one MapArea in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MapAreaCrud.UpdateComparison(OpenDentBusiness.MapArea,OpenDentBusiness.MapArea)">
            <summary>Returns true if Update(MapArea,MapArea) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MapAreaCrud.Delete(System.Int64)">
            <summary>Deletes one MapArea from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicalOrderCrud.SelectOne(System.Int64)">
            <summary>Gets one MedicalOrder object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicalOrderCrud.SelectOne(System.String)">
            <summary>Gets one MedicalOrder object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicalOrderCrud.SelectMany(System.String)">
            <summary>Gets a list of MedicalOrder objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicalOrderCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicalOrderCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.MedicalOrder},System.String)">
            <summary>Converts a list of MedicalOrder into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicalOrderCrud.Insert(OpenDentBusiness.MedicalOrder)">
            <summary>Inserts one MedicalOrder into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicalOrderCrud.Insert(OpenDentBusiness.MedicalOrder,System.Boolean)">
            <summary>Inserts one MedicalOrder into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicalOrderCrud.InsertNoCache(OpenDentBusiness.MedicalOrder)">
            <summary>Inserts one MedicalOrder into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicalOrderCrud.InsertNoCache(OpenDentBusiness.MedicalOrder,System.Boolean)">
            <summary>Inserts one MedicalOrder into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicalOrderCrud.Update(OpenDentBusiness.MedicalOrder)">
            <summary>Updates one MedicalOrder in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicalOrderCrud.Update(OpenDentBusiness.MedicalOrder,OpenDentBusiness.MedicalOrder)">
            <summary>Updates one MedicalOrder in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicalOrderCrud.UpdateComparison(OpenDentBusiness.MedicalOrder,OpenDentBusiness.MedicalOrder)">
            <summary>Returns true if Update(MedicalOrder,MedicalOrder) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicalOrderCrud.Delete(System.Int64)">
            <summary>Deletes one MedicalOrder from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationCrud.SelectOne(System.Int64)">
            <summary>Gets one Medication object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationCrud.SelectOne(System.String)">
            <summary>Gets one Medication object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationCrud.SelectMany(System.String)">
            <summary>Gets a list of Medication objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Medication},System.String)">
            <summary>Converts a list of Medication into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationCrud.Insert(OpenDentBusiness.Medication)">
            <summary>Inserts one Medication into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationCrud.Insert(OpenDentBusiness.Medication,System.Boolean)">
            <summary>Inserts one Medication into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationCrud.InsertNoCache(OpenDentBusiness.Medication)">
            <summary>Inserts one Medication into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationCrud.InsertNoCache(OpenDentBusiness.Medication,System.Boolean)">
            <summary>Inserts one Medication into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationCrud.Update(OpenDentBusiness.Medication)">
            <summary>Updates one Medication in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationCrud.Update(OpenDentBusiness.Medication,OpenDentBusiness.Medication)">
            <summary>Updates one Medication in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationCrud.UpdateComparison(OpenDentBusiness.Medication,OpenDentBusiness.Medication)">
            <summary>Returns true if Update(Medication,Medication) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationCrud.Delete(System.Int64)">
            <summary>Deletes one Medication from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationPatCrud.SelectOne(System.Int64)">
            <summary>Gets one MedicationPat object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationPatCrud.SelectOne(System.String)">
            <summary>Gets one MedicationPat object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationPatCrud.SelectMany(System.String)">
            <summary>Gets a list of MedicationPat objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationPatCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationPatCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.MedicationPat},System.String)">
            <summary>Converts a list of MedicationPat into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationPatCrud.Insert(OpenDentBusiness.MedicationPat)">
            <summary>Inserts one MedicationPat into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationPatCrud.Insert(OpenDentBusiness.MedicationPat,System.Boolean)">
            <summary>Inserts one MedicationPat into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationPatCrud.InsertNoCache(OpenDentBusiness.MedicationPat)">
            <summary>Inserts one MedicationPat into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationPatCrud.InsertNoCache(OpenDentBusiness.MedicationPat,System.Boolean)">
            <summary>Inserts one MedicationPat into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationPatCrud.Update(OpenDentBusiness.MedicationPat)">
            <summary>Updates one MedicationPat in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationPatCrud.Update(OpenDentBusiness.MedicationPat,OpenDentBusiness.MedicationPat)">
            <summary>Updates one MedicationPat in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationPatCrud.UpdateComparison(OpenDentBusiness.MedicationPat,OpenDentBusiness.MedicationPat)">
            <summary>Returns true if Update(MedicationPat,MedicationPat) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedicationPatCrud.Delete(System.Int64)">
            <summary>Deletes one MedicationPat from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacAttachCrud.SelectOne(System.Int64)">
            <summary>Gets one MedLabFacAttach object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacAttachCrud.SelectOne(System.String)">
            <summary>Gets one MedLabFacAttach object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacAttachCrud.SelectMany(System.String)">
            <summary>Gets a list of MedLabFacAttach objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacAttachCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacAttachCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.MedLabFacAttach},System.String)">
            <summary>Converts a list of MedLabFacAttach into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacAttachCrud.Insert(OpenDentBusiness.MedLabFacAttach)">
            <summary>Inserts one MedLabFacAttach into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacAttachCrud.Insert(OpenDentBusiness.MedLabFacAttach,System.Boolean)">
            <summary>Inserts one MedLabFacAttach into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacAttachCrud.InsertNoCache(OpenDentBusiness.MedLabFacAttach)">
            <summary>Inserts one MedLabFacAttach into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacAttachCrud.InsertNoCache(OpenDentBusiness.MedLabFacAttach,System.Boolean)">
            <summary>Inserts one MedLabFacAttach into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacAttachCrud.Update(OpenDentBusiness.MedLabFacAttach)">
            <summary>Updates one MedLabFacAttach in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacAttachCrud.Update(OpenDentBusiness.MedLabFacAttach,OpenDentBusiness.MedLabFacAttach)">
            <summary>Updates one MedLabFacAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacAttachCrud.UpdateComparison(OpenDentBusiness.MedLabFacAttach,OpenDentBusiness.MedLabFacAttach)">
            <summary>Returns true if Update(MedLabFacAttach,MedLabFacAttach) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacAttachCrud.Delete(System.Int64)">
            <summary>Deletes one MedLabFacAttach from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabCrud.SelectOne(System.Int64)">
            <summary>Gets one MedLab object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabCrud.SelectOne(System.String)">
            <summary>Gets one MedLab object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabCrud.SelectMany(System.String)">
            <summary>Gets a list of MedLab objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.MedLab},System.String)">
            <summary>Converts a list of MedLab into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabCrud.Insert(OpenDentBusiness.MedLab)">
            <summary>Inserts one MedLab into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabCrud.Insert(OpenDentBusiness.MedLab,System.Boolean)">
            <summary>Inserts one MedLab into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabCrud.InsertNoCache(OpenDentBusiness.MedLab)">
            <summary>Inserts one MedLab into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabCrud.InsertNoCache(OpenDentBusiness.MedLab,System.Boolean)">
            <summary>Inserts one MedLab into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabCrud.Update(OpenDentBusiness.MedLab)">
            <summary>Updates one MedLab in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabCrud.Update(OpenDentBusiness.MedLab,OpenDentBusiness.MedLab)">
            <summary>Updates one MedLab in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabCrud.UpdateComparison(OpenDentBusiness.MedLab,OpenDentBusiness.MedLab)">
            <summary>Returns true if Update(MedLab,MedLab) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabCrud.Delete(System.Int64)">
            <summary>Deletes one MedLab from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacilityCrud.SelectOne(System.Int64)">
            <summary>Gets one MedLabFacility object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacilityCrud.SelectOne(System.String)">
            <summary>Gets one MedLabFacility object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacilityCrud.SelectMany(System.String)">
            <summary>Gets a list of MedLabFacility objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacilityCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacilityCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.MedLabFacility},System.String)">
            <summary>Converts a list of MedLabFacility into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacilityCrud.Insert(OpenDentBusiness.MedLabFacility)">
            <summary>Inserts one MedLabFacility into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacilityCrud.Insert(OpenDentBusiness.MedLabFacility,System.Boolean)">
            <summary>Inserts one MedLabFacility into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacilityCrud.InsertNoCache(OpenDentBusiness.MedLabFacility)">
            <summary>Inserts one MedLabFacility into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacilityCrud.InsertNoCache(OpenDentBusiness.MedLabFacility,System.Boolean)">
            <summary>Inserts one MedLabFacility into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacilityCrud.Update(OpenDentBusiness.MedLabFacility)">
            <summary>Updates one MedLabFacility in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacilityCrud.Update(OpenDentBusiness.MedLabFacility,OpenDentBusiness.MedLabFacility)">
            <summary>Updates one MedLabFacility in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacilityCrud.UpdateComparison(OpenDentBusiness.MedLabFacility,OpenDentBusiness.MedLabFacility)">
            <summary>Returns true if Update(MedLabFacility,MedLabFacility) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabFacilityCrud.Delete(System.Int64)">
            <summary>Deletes one MedLabFacility from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabResultCrud.SelectOne(System.Int64)">
            <summary>Gets one MedLabResult object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabResultCrud.SelectOne(System.String)">
            <summary>Gets one MedLabResult object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabResultCrud.SelectMany(System.String)">
            <summary>Gets a list of MedLabResult objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabResultCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabResultCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.MedLabResult},System.String)">
            <summary>Converts a list of MedLabResult into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabResultCrud.Insert(OpenDentBusiness.MedLabResult)">
            <summary>Inserts one MedLabResult into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabResultCrud.Insert(OpenDentBusiness.MedLabResult,System.Boolean)">
            <summary>Inserts one MedLabResult into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabResultCrud.InsertNoCache(OpenDentBusiness.MedLabResult)">
            <summary>Inserts one MedLabResult into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabResultCrud.InsertNoCache(OpenDentBusiness.MedLabResult,System.Boolean)">
            <summary>Inserts one MedLabResult into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabResultCrud.Update(OpenDentBusiness.MedLabResult)">
            <summary>Updates one MedLabResult in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabResultCrud.Update(OpenDentBusiness.MedLabResult,OpenDentBusiness.MedLabResult)">
            <summary>Updates one MedLabResult in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabResultCrud.UpdateComparison(OpenDentBusiness.MedLabResult,OpenDentBusiness.MedLabResult)">
            <summary>Returns true if Update(MedLabResult,MedLabResult) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabResultCrud.Delete(System.Int64)">
            <summary>Deletes one MedLabResult from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabSpecimenCrud.SelectOne(System.Int64)">
            <summary>Gets one MedLabSpecimen object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabSpecimenCrud.SelectOne(System.String)">
            <summary>Gets one MedLabSpecimen object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabSpecimenCrud.SelectMany(System.String)">
            <summary>Gets a list of MedLabSpecimen objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabSpecimenCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabSpecimenCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.MedLabSpecimen},System.String)">
            <summary>Converts a list of MedLabSpecimen into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabSpecimenCrud.Insert(OpenDentBusiness.MedLabSpecimen)">
            <summary>Inserts one MedLabSpecimen into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabSpecimenCrud.Insert(OpenDentBusiness.MedLabSpecimen,System.Boolean)">
            <summary>Inserts one MedLabSpecimen into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabSpecimenCrud.InsertNoCache(OpenDentBusiness.MedLabSpecimen)">
            <summary>Inserts one MedLabSpecimen into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabSpecimenCrud.InsertNoCache(OpenDentBusiness.MedLabSpecimen,System.Boolean)">
            <summary>Inserts one MedLabSpecimen into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabSpecimenCrud.Update(OpenDentBusiness.MedLabSpecimen)">
            <summary>Updates one MedLabSpecimen in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabSpecimenCrud.Update(OpenDentBusiness.MedLabSpecimen,OpenDentBusiness.MedLabSpecimen)">
            <summary>Updates one MedLabSpecimen in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabSpecimenCrud.UpdateComparison(OpenDentBusiness.MedLabSpecimen,OpenDentBusiness.MedLabSpecimen)">
            <summary>Returns true if Update(MedLabSpecimen,MedLabSpecimen) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MedLabSpecimenCrud.Delete(System.Int64)">
            <summary>Deletes one MedLabSpecimen from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountCrud.SelectOne(System.Int64)">
            <summary>Gets one Mount object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountCrud.SelectOne(System.String)">
            <summary>Gets one Mount object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountCrud.SelectMany(System.String)">
            <summary>Gets a list of Mount objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Mount},System.String)">
            <summary>Converts a list of Mount into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountCrud.Insert(OpenDentBusiness.Mount)">
            <summary>Inserts one Mount into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountCrud.Insert(OpenDentBusiness.Mount,System.Boolean)">
            <summary>Inserts one Mount into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountCrud.InsertNoCache(OpenDentBusiness.Mount)">
            <summary>Inserts one Mount into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountCrud.InsertNoCache(OpenDentBusiness.Mount,System.Boolean)">
            <summary>Inserts one Mount into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountCrud.Update(OpenDentBusiness.Mount)">
            <summary>Updates one Mount in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountCrud.Update(OpenDentBusiness.Mount,OpenDentBusiness.Mount)">
            <summary>Updates one Mount in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountCrud.UpdateComparison(OpenDentBusiness.Mount,OpenDentBusiness.Mount)">
            <summary>Returns true if Update(Mount,Mount) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountCrud.Delete(System.Int64)">
            <summary>Deletes one Mount from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountDefCrud.SelectOne(System.Int64)">
            <summary>Gets one MountDef object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountDefCrud.SelectOne(System.String)">
            <summary>Gets one MountDef object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountDefCrud.SelectMany(System.String)">
            <summary>Gets a list of MountDef objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountDefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountDefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.MountDef},System.String)">
            <summary>Converts a list of MountDef into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountDefCrud.Insert(OpenDentBusiness.MountDef)">
            <summary>Inserts one MountDef into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountDefCrud.Insert(OpenDentBusiness.MountDef,System.Boolean)">
            <summary>Inserts one MountDef into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountDefCrud.InsertNoCache(OpenDentBusiness.MountDef)">
            <summary>Inserts one MountDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountDefCrud.InsertNoCache(OpenDentBusiness.MountDef,System.Boolean)">
            <summary>Inserts one MountDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountDefCrud.Update(OpenDentBusiness.MountDef)">
            <summary>Updates one MountDef in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountDefCrud.Update(OpenDentBusiness.MountDef,OpenDentBusiness.MountDef)">
            <summary>Updates one MountDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountDefCrud.UpdateComparison(OpenDentBusiness.MountDef,OpenDentBusiness.MountDef)">
            <summary>Returns true if Update(MountDef,MountDef) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountDefCrud.Delete(System.Int64)">
            <summary>Deletes one MountDef from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemCrud.SelectOne(System.Int64)">
            <summary>Gets one MountItem object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemCrud.SelectOne(System.String)">
            <summary>Gets one MountItem object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemCrud.SelectMany(System.String)">
            <summary>Gets a list of MountItem objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.MountItem},System.String)">
            <summary>Converts a list of MountItem into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemCrud.Insert(OpenDentBusiness.MountItem)">
            <summary>Inserts one MountItem into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemCrud.Insert(OpenDentBusiness.MountItem,System.Boolean)">
            <summary>Inserts one MountItem into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemCrud.InsertNoCache(OpenDentBusiness.MountItem)">
            <summary>Inserts one MountItem into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemCrud.InsertNoCache(OpenDentBusiness.MountItem,System.Boolean)">
            <summary>Inserts one MountItem into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemCrud.Update(OpenDentBusiness.MountItem)">
            <summary>Updates one MountItem in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemCrud.Update(OpenDentBusiness.MountItem,OpenDentBusiness.MountItem)">
            <summary>Updates one MountItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemCrud.UpdateComparison(OpenDentBusiness.MountItem,OpenDentBusiness.MountItem)">
            <summary>Returns true if Update(MountItem,MountItem) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemCrud.Delete(System.Int64)">
            <summary>Deletes one MountItem from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemDefCrud.SelectOne(System.Int64)">
            <summary>Gets one MountItemDef object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemDefCrud.SelectOne(System.String)">
            <summary>Gets one MountItemDef object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemDefCrud.SelectMany(System.String)">
            <summary>Gets a list of MountItemDef objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemDefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemDefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.MountItemDef},System.String)">
            <summary>Converts a list of MountItemDef into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemDefCrud.Insert(OpenDentBusiness.MountItemDef)">
            <summary>Inserts one MountItemDef into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemDefCrud.Insert(OpenDentBusiness.MountItemDef,System.Boolean)">
            <summary>Inserts one MountItemDef into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemDefCrud.InsertNoCache(OpenDentBusiness.MountItemDef)">
            <summary>Inserts one MountItemDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemDefCrud.InsertNoCache(OpenDentBusiness.MountItemDef,System.Boolean)">
            <summary>Inserts one MountItemDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemDefCrud.Update(OpenDentBusiness.MountItemDef)">
            <summary>Updates one MountItemDef in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemDefCrud.Update(OpenDentBusiness.MountItemDef,OpenDentBusiness.MountItemDef)">
            <summary>Updates one MountItemDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemDefCrud.UpdateComparison(OpenDentBusiness.MountItemDef,OpenDentBusiness.MountItemDef)">
            <summary>Returns true if Update(MountItemDef,MountItemDef) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.MountItemDefCrud.Delete(System.Int64)">
            <summary>Deletes one MountItemDef from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDExternalCrud.SelectOne(System.Int64)">
            <summary>Gets one OIDExternal object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDExternalCrud.SelectOne(System.String)">
            <summary>Gets one OIDExternal object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDExternalCrud.SelectMany(System.String)">
            <summary>Gets a list of OIDExternal objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDExternalCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDExternalCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.OIDExternal},System.String)">
            <summary>Converts a list of OIDExternal into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDExternalCrud.Insert(OpenDentBusiness.OIDExternal)">
            <summary>Inserts one OIDExternal into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDExternalCrud.Insert(OpenDentBusiness.OIDExternal,System.Boolean)">
            <summary>Inserts one OIDExternal into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDExternalCrud.InsertNoCache(OpenDentBusiness.OIDExternal)">
            <summary>Inserts one OIDExternal into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDExternalCrud.InsertNoCache(OpenDentBusiness.OIDExternal,System.Boolean)">
            <summary>Inserts one OIDExternal into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDExternalCrud.Update(OpenDentBusiness.OIDExternal)">
            <summary>Updates one OIDExternal in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDExternalCrud.Update(OpenDentBusiness.OIDExternal,OpenDentBusiness.OIDExternal)">
            <summary>Updates one OIDExternal in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDExternalCrud.UpdateComparison(OpenDentBusiness.OIDExternal,OpenDentBusiness.OIDExternal)">
            <summary>Returns true if Update(OIDExternal,OIDExternal) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDExternalCrud.Delete(System.Int64)">
            <summary>Deletes one OIDExternal from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDInternalCrud.SelectOne(System.Int64)">
            <summary>Gets one OIDInternal object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDInternalCrud.SelectOne(System.String)">
            <summary>Gets one OIDInternal object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDInternalCrud.SelectMany(System.String)">
            <summary>Gets a list of OIDInternal objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDInternalCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDInternalCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.OIDInternal},System.String)">
            <summary>Converts a list of OIDInternal into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDInternalCrud.Insert(OpenDentBusiness.OIDInternal)">
            <summary>Inserts one OIDInternal into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDInternalCrud.Insert(OpenDentBusiness.OIDInternal,System.Boolean)">
            <summary>Inserts one OIDInternal into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDInternalCrud.InsertNoCache(OpenDentBusiness.OIDInternal)">
            <summary>Inserts one OIDInternal into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDInternalCrud.InsertNoCache(OpenDentBusiness.OIDInternal,System.Boolean)">
            <summary>Inserts one OIDInternal into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDInternalCrud.Update(OpenDentBusiness.OIDInternal)">
            <summary>Updates one OIDInternal in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDInternalCrud.Update(OpenDentBusiness.OIDInternal,OpenDentBusiness.OIDInternal)">
            <summary>Updates one OIDInternal in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDInternalCrud.UpdateComparison(OpenDentBusiness.OIDInternal,OpenDentBusiness.OIDInternal)">
            <summary>Returns true if Update(OIDInternal,OIDInternal) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OIDInternalCrud.Delete(System.Int64)">
            <summary>Deletes one OIDInternal from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OperatoryCrud.SelectOne(System.Int64)">
            <summary>Gets one Operatory object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OperatoryCrud.SelectOne(System.String)">
            <summary>Gets one Operatory object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OperatoryCrud.SelectMany(System.String)">
            <summary>Gets a list of Operatory objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OperatoryCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OperatoryCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Operatory},System.String)">
            <summary>Converts a list of Operatory into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OperatoryCrud.Insert(OpenDentBusiness.Operatory)">
            <summary>Inserts one Operatory into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OperatoryCrud.Insert(OpenDentBusiness.Operatory,System.Boolean)">
            <summary>Inserts one Operatory into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OperatoryCrud.InsertNoCache(OpenDentBusiness.Operatory)">
            <summary>Inserts one Operatory into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OperatoryCrud.InsertNoCache(OpenDentBusiness.Operatory,System.Boolean)">
            <summary>Inserts one Operatory into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OperatoryCrud.Update(OpenDentBusiness.Operatory)">
            <summary>Updates one Operatory in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OperatoryCrud.Update(OpenDentBusiness.Operatory,OpenDentBusiness.Operatory)">
            <summary>Updates one Operatory in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OperatoryCrud.UpdateComparison(OpenDentBusiness.Operatory,OpenDentBusiness.Operatory)">
            <summary>Returns true if Update(Operatory,Operatory) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OperatoryCrud.Delete(System.Int64)">
            <summary>Deletes one Operatory from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OperatoryCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.Operatory},System.Collections.Generic.List{OpenDentBusiness.Operatory})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrionProcCrud.SelectOne(System.Int64)">
            <summary>Gets one OrionProc object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrionProcCrud.SelectOne(System.String)">
            <summary>Gets one OrionProc object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrionProcCrud.SelectMany(System.String)">
            <summary>Gets a list of OrionProc objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrionProcCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrionProcCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.OrionProc},System.String)">
            <summary>Converts a list of OrionProc into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrionProcCrud.Insert(OpenDentBusiness.OrionProc)">
            <summary>Inserts one OrionProc into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrionProcCrud.Insert(OpenDentBusiness.OrionProc,System.Boolean)">
            <summary>Inserts one OrionProc into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrionProcCrud.InsertNoCache(OpenDentBusiness.OrionProc)">
            <summary>Inserts one OrionProc into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrionProcCrud.InsertNoCache(OpenDentBusiness.OrionProc,System.Boolean)">
            <summary>Inserts one OrionProc into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrionProcCrud.Update(OpenDentBusiness.OrionProc)">
            <summary>Updates one OrionProc in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrionProcCrud.Update(OpenDentBusiness.OrionProc,OpenDentBusiness.OrionProc)">
            <summary>Updates one OrionProc in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrionProcCrud.UpdateComparison(OpenDentBusiness.OrionProc,OpenDentBusiness.OrionProc)">
            <summary>Returns true if Update(OrionProc,OrionProc) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrionProcCrud.Delete(System.Int64)">
            <summary>Deletes one OrionProc from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartCrud.SelectOne(System.Int64)">
            <summary>Gets one OrthoChart object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartCrud.SelectOne(System.String)">
            <summary>Gets one OrthoChart object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartCrud.SelectMany(System.String)">
            <summary>Gets a list of OrthoChart objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.OrthoChart},System.String)">
            <summary>Converts a list of OrthoChart into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartCrud.Insert(OpenDentBusiness.OrthoChart)">
            <summary>Inserts one OrthoChart into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartCrud.Insert(OpenDentBusiness.OrthoChart,System.Boolean)">
            <summary>Inserts one OrthoChart into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartCrud.InsertNoCache(OpenDentBusiness.OrthoChart)">
            <summary>Inserts one OrthoChart into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartCrud.InsertNoCache(OpenDentBusiness.OrthoChart,System.Boolean)">
            <summary>Inserts one OrthoChart into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartCrud.Update(OpenDentBusiness.OrthoChart)">
            <summary>Updates one OrthoChart in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartCrud.Update(OpenDentBusiness.OrthoChart,OpenDentBusiness.OrthoChart)">
            <summary>Updates one OrthoChart in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartCrud.UpdateComparison(OpenDentBusiness.OrthoChart,OpenDentBusiness.OrthoChart)">
            <summary>Returns true if Update(OrthoChart,OrthoChart) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartCrud.Delete(System.Int64)">
            <summary>Deletes one OrthoChart from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabCrud.SelectOne(System.Int64)">
            <summary>Gets one OrthoChartTab object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabCrud.SelectOne(System.String)">
            <summary>Gets one OrthoChartTab object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabCrud.SelectMany(System.String)">
            <summary>Gets a list of OrthoChartTab objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.OrthoChartTab},System.String)">
            <summary>Converts a list of OrthoChartTab into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabCrud.Insert(OpenDentBusiness.OrthoChartTab)">
            <summary>Inserts one OrthoChartTab into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabCrud.Insert(OpenDentBusiness.OrthoChartTab,System.Boolean)">
            <summary>Inserts one OrthoChartTab into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabCrud.InsertNoCache(OpenDentBusiness.OrthoChartTab)">
            <summary>Inserts one OrthoChartTab into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabCrud.InsertNoCache(OpenDentBusiness.OrthoChartTab,System.Boolean)">
            <summary>Inserts one OrthoChartTab into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabCrud.Update(OpenDentBusiness.OrthoChartTab)">
            <summary>Updates one OrthoChartTab in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabCrud.Update(OpenDentBusiness.OrthoChartTab,OpenDentBusiness.OrthoChartTab)">
            <summary>Updates one OrthoChartTab in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabCrud.UpdateComparison(OpenDentBusiness.OrthoChartTab,OpenDentBusiness.OrthoChartTab)">
            <summary>Returns true if Update(OrthoChartTab,OrthoChartTab) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabCrud.Delete(System.Int64)">
            <summary>Deletes one OrthoChartTab from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.OrthoChartTab},System.Collections.Generic.List{OpenDentBusiness.OrthoChartTab})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabLinkCrud.SelectOne(System.Int64)">
            <summary>Gets one OrthoChartTabLink object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabLinkCrud.SelectOne(System.String)">
            <summary>Gets one OrthoChartTabLink object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabLinkCrud.SelectMany(System.String)">
            <summary>Gets a list of OrthoChartTabLink objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabLinkCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabLinkCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.OrthoChartTabLink},System.String)">
            <summary>Converts a list of OrthoChartTabLink into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabLinkCrud.Insert(OpenDentBusiness.OrthoChartTabLink)">
            <summary>Inserts one OrthoChartTabLink into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabLinkCrud.Insert(OpenDentBusiness.OrthoChartTabLink,System.Boolean)">
            <summary>Inserts one OrthoChartTabLink into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabLinkCrud.InsertNoCache(OpenDentBusiness.OrthoChartTabLink)">
            <summary>Inserts one OrthoChartTabLink into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabLinkCrud.InsertNoCache(OpenDentBusiness.OrthoChartTabLink,System.Boolean)">
            <summary>Inserts one OrthoChartTabLink into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabLinkCrud.Update(OpenDentBusiness.OrthoChartTabLink)">
            <summary>Updates one OrthoChartTabLink in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabLinkCrud.Update(OpenDentBusiness.OrthoChartTabLink,OpenDentBusiness.OrthoChartTabLink)">
            <summary>Updates one OrthoChartTabLink in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabLinkCrud.UpdateComparison(OpenDentBusiness.OrthoChartTabLink,OpenDentBusiness.OrthoChartTabLink)">
            <summary>Returns true if Update(OrthoChartTabLink,OrthoChartTabLink) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabLinkCrud.Delete(System.Int64)">
            <summary>Deletes one OrthoChartTabLink from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.OrthoChartTabLinkCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.OrthoChartTabLink},System.Collections.Generic.List{OpenDentBusiness.OrthoChartTabLink})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldCrud.SelectOne(System.Int64)">
            <summary>Gets one PatField object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldCrud.SelectOne(System.String)">
            <summary>Gets one PatField object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldCrud.SelectMany(System.String)">
            <summary>Gets a list of PatField objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PatField},System.String)">
            <summary>Converts a list of PatField into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldCrud.Insert(OpenDentBusiness.PatField)">
            <summary>Inserts one PatField into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldCrud.Insert(OpenDentBusiness.PatField,System.Boolean)">
            <summary>Inserts one PatField into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldCrud.InsertNoCache(OpenDentBusiness.PatField)">
            <summary>Inserts one PatField into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldCrud.InsertNoCache(OpenDentBusiness.PatField,System.Boolean)">
            <summary>Inserts one PatField into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldCrud.Update(OpenDentBusiness.PatField)">
            <summary>Updates one PatField in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldCrud.Update(OpenDentBusiness.PatField,OpenDentBusiness.PatField)">
            <summary>Updates one PatField in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldCrud.UpdateComparison(OpenDentBusiness.PatField,OpenDentBusiness.PatField)">
            <summary>Returns true if Update(PatField,PatField) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldCrud.Delete(System.Int64)">
            <summary>Deletes one PatField from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldDefCrud.SelectOne(System.Int64)">
            <summary>Gets one PatFieldDef object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldDefCrud.SelectOne(System.String)">
            <summary>Gets one PatFieldDef object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldDefCrud.SelectMany(System.String)">
            <summary>Gets a list of PatFieldDef objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldDefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldDefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PatFieldDef},System.String)">
            <summary>Converts a list of PatFieldDef into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldDefCrud.Insert(OpenDentBusiness.PatFieldDef)">
            <summary>Inserts one PatFieldDef into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldDefCrud.Insert(OpenDentBusiness.PatFieldDef,System.Boolean)">
            <summary>Inserts one PatFieldDef into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldDefCrud.InsertNoCache(OpenDentBusiness.PatFieldDef)">
            <summary>Inserts one PatFieldDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldDefCrud.InsertNoCache(OpenDentBusiness.PatFieldDef,System.Boolean)">
            <summary>Inserts one PatFieldDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldDefCrud.Update(OpenDentBusiness.PatFieldDef)">
            <summary>Updates one PatFieldDef in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldDefCrud.Update(OpenDentBusiness.PatFieldDef,OpenDentBusiness.PatFieldDef)">
            <summary>Updates one PatFieldDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldDefCrud.UpdateComparison(OpenDentBusiness.PatFieldDef,OpenDentBusiness.PatFieldDef)">
            <summary>Returns true if Update(PatFieldDef,PatFieldDef) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldDefCrud.Delete(System.Int64)">
            <summary>Deletes one PatFieldDef from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatFieldDefCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.PatFieldDef},System.Collections.Generic.List{OpenDentBusiness.PatFieldDef})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientCrud.SelectOne(System.Int64)">
            <summary>Gets one Patient object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientCrud.SelectOne(System.String)">
            <summary>Gets one Patient object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientCrud.SelectMany(System.String)">
            <summary>Gets a list of Patient objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Patient},System.String)">
            <summary>Converts a list of Patient into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientCrud.Insert(OpenDentBusiness.Patient)">
            <summary>Inserts one Patient into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientCrud.Insert(OpenDentBusiness.Patient,System.Boolean)">
            <summary>Inserts one Patient into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientCrud.InsertNoCache(OpenDentBusiness.Patient)">
            <summary>Inserts one Patient into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientCrud.InsertNoCache(OpenDentBusiness.Patient,System.Boolean)">
            <summary>Inserts one Patient into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientCrud.Update(OpenDentBusiness.Patient)">
            <summary>Updates one Patient in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientCrud.Update(OpenDentBusiness.Patient,OpenDentBusiness.Patient)">
            <summary>Updates one Patient in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientCrud.UpdateComparison(OpenDentBusiness.Patient,OpenDentBusiness.Patient)">
            <summary>Returns true if Update(Patient,Patient) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientCrud.Delete(System.Int64)">
            <summary>Deletes one Patient from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientCrud.ClearFkey(System.Int64)">
            <summary>Zeros securitylog FKey column for rows that are using the matching patNum as FKey and are related to Patient.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Patient table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientCrud.ClearFkey(System.Collections.Generic.List{System.Int64})">
            <summary>Zeros securitylog FKey column for rows that are using the matching patNums as FKey and are related to Patient.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Patient table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientNoteCrud.SelectOne(System.Int64)">
            <summary>Gets one PatientNote object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientNoteCrud.SelectOne(System.String)">
            <summary>Gets one PatientNote object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientNoteCrud.SelectMany(System.String)">
            <summary>Gets a list of PatientNote objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientNoteCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientNoteCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PatientNote},System.String)">
            <summary>Converts a list of PatientNote into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientNoteCrud.Insert(OpenDentBusiness.PatientNote)">
            <summary>Inserts one PatientNote into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientNoteCrud.Insert(OpenDentBusiness.PatientNote,System.Boolean)">
            <summary>Inserts one PatientNote into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientNoteCrud.InsertNoCache(OpenDentBusiness.PatientNote)">
            <summary>Inserts one PatientNote into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientNoteCrud.InsertNoCache(OpenDentBusiness.PatientNote,System.Boolean)">
            <summary>Inserts one PatientNote into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientNoteCrud.Update(OpenDentBusiness.PatientNote)">
            <summary>Updates one PatientNote in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientNoteCrud.Update(OpenDentBusiness.PatientNote,OpenDentBusiness.PatientNote)">
            <summary>Updates one PatientNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientNoteCrud.UpdateComparison(OpenDentBusiness.PatientNote,OpenDentBusiness.PatientNote)">
            <summary>Returns true if Update(PatientNote,PatientNote) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientNoteCrud.Delete(System.Int64)">
            <summary>Deletes one PatientNote from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientRaceCrud.SelectOne(System.Int64)">
            <summary>Gets one PatientRace object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientRaceCrud.SelectOne(System.String)">
            <summary>Gets one PatientRace object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientRaceCrud.SelectMany(System.String)">
            <summary>Gets a list of PatientRace objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientRaceCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientRaceCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PatientRace},System.String)">
            <summary>Converts a list of PatientRace into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientRaceCrud.Insert(OpenDentBusiness.PatientRace)">
            <summary>Inserts one PatientRace into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientRaceCrud.Insert(OpenDentBusiness.PatientRace,System.Boolean)">
            <summary>Inserts one PatientRace into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientRaceCrud.InsertNoCache(OpenDentBusiness.PatientRace)">
            <summary>Inserts one PatientRace into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientRaceCrud.InsertNoCache(OpenDentBusiness.PatientRace,System.Boolean)">
            <summary>Inserts one PatientRace into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientRaceCrud.Update(OpenDentBusiness.PatientRace)">
            <summary>Updates one PatientRace in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientRaceCrud.Update(OpenDentBusiness.PatientRace,OpenDentBusiness.PatientRace)">
            <summary>Updates one PatientRace in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientRaceCrud.UpdateComparison(OpenDentBusiness.PatientRace,OpenDentBusiness.PatientRace)">
            <summary>Returns true if Update(PatientRace,PatientRace) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatientRaceCrud.Delete(System.Int64)">
            <summary>Deletes one PatientRace from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatPlanCrud.SelectOne(System.Int64)">
            <summary>Gets one PatPlan object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatPlanCrud.SelectOne(System.String)">
            <summary>Gets one PatPlan object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatPlanCrud.SelectMany(System.String)">
            <summary>Gets a list of PatPlan objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatPlanCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatPlanCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.String)">
            <summary>Converts a list of PatPlan into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatPlanCrud.Insert(OpenDentBusiness.PatPlan)">
            <summary>Inserts one PatPlan into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatPlanCrud.Insert(OpenDentBusiness.PatPlan,System.Boolean)">
            <summary>Inserts one PatPlan into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatPlanCrud.InsertNoCache(OpenDentBusiness.PatPlan)">
            <summary>Inserts one PatPlan into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatPlanCrud.InsertNoCache(OpenDentBusiness.PatPlan,System.Boolean)">
            <summary>Inserts one PatPlan into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatPlanCrud.Update(OpenDentBusiness.PatPlan)">
            <summary>Updates one PatPlan in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatPlanCrud.Update(OpenDentBusiness.PatPlan,OpenDentBusiness.PatPlan)">
            <summary>Updates one PatPlan in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatPlanCrud.UpdateComparison(OpenDentBusiness.PatPlan,OpenDentBusiness.PatPlan)">
            <summary>Returns true if Update(PatPlan,PatPlan) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatPlanCrud.Delete(System.Int64)">
            <summary>Deletes one PatPlan from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatRestrictionCrud.SelectOne(System.Int64)">
            <summary>Gets one PatRestriction object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatRestrictionCrud.SelectOne(System.String)">
            <summary>Gets one PatRestriction object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatRestrictionCrud.SelectMany(System.String)">
            <summary>Gets a list of PatRestriction objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatRestrictionCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatRestrictionCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PatRestriction},System.String)">
            <summary>Converts a list of PatRestriction into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatRestrictionCrud.Insert(OpenDentBusiness.PatRestriction)">
            <summary>Inserts one PatRestriction into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatRestrictionCrud.Insert(OpenDentBusiness.PatRestriction,System.Boolean)">
            <summary>Inserts one PatRestriction into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatRestrictionCrud.InsertNoCache(OpenDentBusiness.PatRestriction)">
            <summary>Inserts one PatRestriction into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatRestrictionCrud.InsertNoCache(OpenDentBusiness.PatRestriction,System.Boolean)">
            <summary>Inserts one PatRestriction into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatRestrictionCrud.Update(OpenDentBusiness.PatRestriction)">
            <summary>Updates one PatRestriction in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatRestrictionCrud.Update(OpenDentBusiness.PatRestriction,OpenDentBusiness.PatRestriction)">
            <summary>Updates one PatRestriction in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatRestrictionCrud.UpdateComparison(OpenDentBusiness.PatRestriction,OpenDentBusiness.PatRestriction)">
            <summary>Returns true if Update(PatRestriction,PatRestriction) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PatRestrictionCrud.Delete(System.Int64)">
            <summary>Deletes one PatRestriction from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaymentCrud.SelectOne(System.Int64)">
            <summary>Gets one Payment object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaymentCrud.SelectOne(System.String)">
            <summary>Gets one Payment object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaymentCrud.SelectMany(System.String)">
            <summary>Gets a list of Payment objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaymentCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaymentCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Payment},System.String)">
            <summary>Converts a list of Payment into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaymentCrud.Insert(OpenDentBusiness.Payment)">
            <summary>Inserts one Payment into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaymentCrud.Insert(OpenDentBusiness.Payment,System.Boolean)">
            <summary>Inserts one Payment into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaymentCrud.InsertNoCache(OpenDentBusiness.Payment)">
            <summary>Inserts one Payment into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaymentCrud.InsertNoCache(OpenDentBusiness.Payment,System.Boolean)">
            <summary>Inserts one Payment into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaymentCrud.Update(OpenDentBusiness.Payment)">
            <summary>Updates one Payment in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaymentCrud.Update(OpenDentBusiness.Payment,OpenDentBusiness.Payment)">
            <summary>Updates one Payment in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaymentCrud.UpdateComparison(OpenDentBusiness.Payment,OpenDentBusiness.Payment)">
            <summary>Returns true if Update(Payment,Payment) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaymentCrud.Delete(System.Int64)">
            <summary>Deletes one Payment from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayorTypeCrud.SelectOne(System.Int64)">
            <summary>Gets one PayorType object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayorTypeCrud.SelectOne(System.String)">
            <summary>Gets one PayorType object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayorTypeCrud.SelectMany(System.String)">
            <summary>Gets a list of PayorType objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayorTypeCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayorTypeCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PayorType},System.String)">
            <summary>Converts a list of PayorType into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayorTypeCrud.Insert(OpenDentBusiness.PayorType)">
            <summary>Inserts one PayorType into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayorTypeCrud.Insert(OpenDentBusiness.PayorType,System.Boolean)">
            <summary>Inserts one PayorType into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayorTypeCrud.InsertNoCache(OpenDentBusiness.PayorType)">
            <summary>Inserts one PayorType into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayorTypeCrud.InsertNoCache(OpenDentBusiness.PayorType,System.Boolean)">
            <summary>Inserts one PayorType into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayorTypeCrud.Update(OpenDentBusiness.PayorType)">
            <summary>Updates one PayorType in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayorTypeCrud.Update(OpenDentBusiness.PayorType,OpenDentBusiness.PayorType)">
            <summary>Updates one PayorType in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayorTypeCrud.UpdateComparison(OpenDentBusiness.PayorType,OpenDentBusiness.PayorType)">
            <summary>Returns true if Update(PayorType,PayorType) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayorTypeCrud.Delete(System.Int64)">
            <summary>Deletes one PayorType from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPeriodCrud.SelectOne(System.Int64)">
            <summary>Gets one PayPeriod object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPeriodCrud.SelectOne(System.String)">
            <summary>Gets one PayPeriod object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPeriodCrud.SelectMany(System.String)">
            <summary>Gets a list of PayPeriod objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPeriodCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPeriodCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PayPeriod},System.String)">
            <summary>Converts a list of PayPeriod into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPeriodCrud.Insert(OpenDentBusiness.PayPeriod)">
            <summary>Inserts one PayPeriod into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPeriodCrud.Insert(OpenDentBusiness.PayPeriod,System.Boolean)">
            <summary>Inserts one PayPeriod into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPeriodCrud.InsertNoCache(OpenDentBusiness.PayPeriod)">
            <summary>Inserts one PayPeriod into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPeriodCrud.InsertNoCache(OpenDentBusiness.PayPeriod,System.Boolean)">
            <summary>Inserts one PayPeriod into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPeriodCrud.Update(OpenDentBusiness.PayPeriod)">
            <summary>Updates one PayPeriod in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPeriodCrud.Update(OpenDentBusiness.PayPeriod,OpenDentBusiness.PayPeriod)">
            <summary>Updates one PayPeriod in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPeriodCrud.UpdateComparison(OpenDentBusiness.PayPeriod,OpenDentBusiness.PayPeriod)">
            <summary>Returns true if Update(PayPeriod,PayPeriod) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPeriodCrud.Delete(System.Int64)">
            <summary>Deletes one PayPeriod from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanChargeCrud.SelectOne(System.Int64)">
            <summary>Gets one PayPlanCharge object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanChargeCrud.SelectOne(System.String)">
            <summary>Gets one PayPlanCharge object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanChargeCrud.SelectMany(System.String)">
            <summary>Gets a list of PayPlanCharge objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanChargeCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanChargeCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PayPlanCharge},System.String)">
            <summary>Converts a list of PayPlanCharge into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanChargeCrud.Insert(OpenDentBusiness.PayPlanCharge)">
            <summary>Inserts one PayPlanCharge into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanChargeCrud.Insert(OpenDentBusiness.PayPlanCharge,System.Boolean)">
            <summary>Inserts one PayPlanCharge into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanChargeCrud.InsertNoCache(OpenDentBusiness.PayPlanCharge)">
            <summary>Inserts one PayPlanCharge into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanChargeCrud.InsertNoCache(OpenDentBusiness.PayPlanCharge,System.Boolean)">
            <summary>Inserts one PayPlanCharge into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanChargeCrud.Update(OpenDentBusiness.PayPlanCharge)">
            <summary>Updates one PayPlanCharge in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanChargeCrud.Update(OpenDentBusiness.PayPlanCharge,OpenDentBusiness.PayPlanCharge)">
            <summary>Updates one PayPlanCharge in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanChargeCrud.UpdateComparison(OpenDentBusiness.PayPlanCharge,OpenDentBusiness.PayPlanCharge)">
            <summary>Returns true if Update(PayPlanCharge,PayPlanCharge) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanChargeCrud.Delete(System.Int64)">
            <summary>Deletes one PayPlanCharge from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanChargeCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.PayPlanCharge},System.Collections.Generic.List{OpenDentBusiness.PayPlanCharge})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanCrud.SelectOne(System.Int64)">
            <summary>Gets one PayPlan object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanCrud.SelectOne(System.String)">
            <summary>Gets one PayPlan object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanCrud.SelectMany(System.String)">
            <summary>Gets a list of PayPlan objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PayPlan},System.String)">
            <summary>Converts a list of PayPlan into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanCrud.Insert(OpenDentBusiness.PayPlan)">
            <summary>Inserts one PayPlan into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanCrud.Insert(OpenDentBusiness.PayPlan,System.Boolean)">
            <summary>Inserts one PayPlan into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanCrud.InsertNoCache(OpenDentBusiness.PayPlan)">
            <summary>Inserts one PayPlan into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanCrud.InsertNoCache(OpenDentBusiness.PayPlan,System.Boolean)">
            <summary>Inserts one PayPlan into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanCrud.Update(OpenDentBusiness.PayPlan)">
            <summary>Updates one PayPlan in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanCrud.Update(OpenDentBusiness.PayPlan,OpenDentBusiness.PayPlan)">
            <summary>Updates one PayPlan in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanCrud.UpdateComparison(OpenDentBusiness.PayPlan,OpenDentBusiness.PayPlan)">
            <summary>Returns true if Update(PayPlan,PayPlan) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PayPlanCrud.Delete(System.Int64)">
            <summary>Deletes one PayPlan from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaySplitCrud.SelectOne(System.Int64)">
            <summary>Gets one PaySplit object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaySplitCrud.SelectOne(System.String)">
            <summary>Gets one PaySplit object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaySplitCrud.SelectMany(System.String)">
            <summary>Gets a list of PaySplit objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaySplitCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaySplitCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PaySplit},System.String)">
            <summary>Converts a list of PaySplit into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaySplitCrud.Insert(OpenDentBusiness.PaySplit)">
            <summary>Inserts one PaySplit into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaySplitCrud.Insert(OpenDentBusiness.PaySplit,System.Boolean)">
            <summary>Inserts one PaySplit into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaySplitCrud.InsertNoCache(OpenDentBusiness.PaySplit)">
            <summary>Inserts one PaySplit into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaySplitCrud.InsertNoCache(OpenDentBusiness.PaySplit,System.Boolean)">
            <summary>Inserts one PaySplit into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaySplitCrud.Update(OpenDentBusiness.PaySplit)">
            <summary>Updates one PaySplit in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaySplitCrud.Update(OpenDentBusiness.PaySplit,OpenDentBusiness.PaySplit)">
            <summary>Updates one PaySplit in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaySplitCrud.UpdateComparison(OpenDentBusiness.PaySplit,OpenDentBusiness.PaySplit)">
            <summary>Returns true if Update(PaySplit,PaySplit) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaySplitCrud.Delete(System.Int64)">
            <summary>Deletes one PaySplit from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PaySplitCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.PaySplit},System.Collections.Generic.List{OpenDentBusiness.PaySplit},System.Int64)">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.
            Supply Security.CurUser.UserNum, used to set the SecUserNumEntry field for Inserts.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioExamCrud.SelectOne(System.Int64)">
            <summary>Gets one PerioExam object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioExamCrud.SelectOne(System.String)">
            <summary>Gets one PerioExam object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioExamCrud.SelectMany(System.String)">
            <summary>Gets a list of PerioExam objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioExamCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioExamCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PerioExam},System.String)">
            <summary>Converts a list of PerioExam into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioExamCrud.Insert(OpenDentBusiness.PerioExam)">
            <summary>Inserts one PerioExam into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioExamCrud.Insert(OpenDentBusiness.PerioExam,System.Boolean)">
            <summary>Inserts one PerioExam into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioExamCrud.InsertNoCache(OpenDentBusiness.PerioExam)">
            <summary>Inserts one PerioExam into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioExamCrud.InsertNoCache(OpenDentBusiness.PerioExam,System.Boolean)">
            <summary>Inserts one PerioExam into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioExamCrud.Update(OpenDentBusiness.PerioExam)">
            <summary>Updates one PerioExam in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioExamCrud.Update(OpenDentBusiness.PerioExam,OpenDentBusiness.PerioExam)">
            <summary>Updates one PerioExam in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioExamCrud.UpdateComparison(OpenDentBusiness.PerioExam,OpenDentBusiness.PerioExam)">
            <summary>Returns true if Update(PerioExam,PerioExam) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioExamCrud.Delete(System.Int64)">
            <summary>Deletes one PerioExam from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioMeasureCrud.SelectOne(System.Int64)">
            <summary>Gets one PerioMeasure object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioMeasureCrud.SelectOne(System.String)">
            <summary>Gets one PerioMeasure object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioMeasureCrud.SelectMany(System.String)">
            <summary>Gets a list of PerioMeasure objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioMeasureCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioMeasureCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PerioMeasure},System.String)">
            <summary>Converts a list of PerioMeasure into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioMeasureCrud.Insert(OpenDentBusiness.PerioMeasure)">
            <summary>Inserts one PerioMeasure into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioMeasureCrud.Insert(OpenDentBusiness.PerioMeasure,System.Boolean)">
            <summary>Inserts one PerioMeasure into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioMeasureCrud.InsertNoCache(OpenDentBusiness.PerioMeasure)">
            <summary>Inserts one PerioMeasure into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioMeasureCrud.InsertNoCache(OpenDentBusiness.PerioMeasure,System.Boolean)">
            <summary>Inserts one PerioMeasure into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioMeasureCrud.Update(OpenDentBusiness.PerioMeasure)">
            <summary>Updates one PerioMeasure in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioMeasureCrud.Update(OpenDentBusiness.PerioMeasure,OpenDentBusiness.PerioMeasure)">
            <summary>Updates one PerioMeasure in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioMeasureCrud.UpdateComparison(OpenDentBusiness.PerioMeasure,OpenDentBusiness.PerioMeasure)">
            <summary>Returns true if Update(PerioMeasure,PerioMeasure) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PerioMeasureCrud.Delete(System.Int64)">
            <summary>Deletes one PerioMeasure from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PharmacyCrud.SelectOne(System.Int64)">
            <summary>Gets one Pharmacy object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PharmacyCrud.SelectOne(System.String)">
            <summary>Gets one Pharmacy object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PharmacyCrud.SelectMany(System.String)">
            <summary>Gets a list of Pharmacy objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PharmacyCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PharmacyCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Pharmacy},System.String)">
            <summary>Converts a list of Pharmacy into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PharmacyCrud.Insert(OpenDentBusiness.Pharmacy)">
            <summary>Inserts one Pharmacy into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PharmacyCrud.Insert(OpenDentBusiness.Pharmacy,System.Boolean)">
            <summary>Inserts one Pharmacy into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PharmacyCrud.InsertNoCache(OpenDentBusiness.Pharmacy)">
            <summary>Inserts one Pharmacy into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PharmacyCrud.InsertNoCache(OpenDentBusiness.Pharmacy,System.Boolean)">
            <summary>Inserts one Pharmacy into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PharmacyCrud.Update(OpenDentBusiness.Pharmacy)">
            <summary>Updates one Pharmacy in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PharmacyCrud.Update(OpenDentBusiness.Pharmacy,OpenDentBusiness.Pharmacy)">
            <summary>Updates one Pharmacy in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PharmacyCrud.UpdateComparison(OpenDentBusiness.Pharmacy,OpenDentBusiness.Pharmacy)">
            <summary>Returns true if Update(Pharmacy,Pharmacy) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PharmacyCrud.Delete(System.Int64)">
            <summary>Deletes one Pharmacy from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneConfCrud.SelectOne(System.Int64)">
            <summary>Gets one PhoneConf object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneConfCrud.SelectOne(System.String)">
            <summary>Gets one PhoneConf object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneConfCrud.SelectMany(System.String)">
            <summary>Gets a list of PhoneConf objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneConfCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneConfCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PhoneConf},System.String)">
            <summary>Converts a list of PhoneConf into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneConfCrud.Insert(OpenDentBusiness.PhoneConf)">
            <summary>Inserts one PhoneConf into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneConfCrud.Insert(OpenDentBusiness.PhoneConf,System.Boolean)">
            <summary>Inserts one PhoneConf into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneConfCrud.InsertNoCache(OpenDentBusiness.PhoneConf)">
            <summary>Inserts one PhoneConf into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneConfCrud.InsertNoCache(OpenDentBusiness.PhoneConf,System.Boolean)">
            <summary>Inserts one PhoneConf into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneConfCrud.Update(OpenDentBusiness.PhoneConf)">
            <summary>Updates one PhoneConf in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneConfCrud.Update(OpenDentBusiness.PhoneConf,OpenDentBusiness.PhoneConf)">
            <summary>Updates one PhoneConf in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneConfCrud.UpdateComparison(OpenDentBusiness.PhoneConf,OpenDentBusiness.PhoneConf)">
            <summary>Returns true if Update(PhoneConf,PhoneConf) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneConfCrud.Delete(System.Int64)">
            <summary>Deletes one PhoneConf from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneCrud.SelectOne(System.Int64)">
            <summary>Gets one Phone object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneCrud.SelectOne(System.String)">
            <summary>Gets one Phone object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneCrud.SelectMany(System.String)">
            <summary>Gets a list of Phone objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Phone},System.String)">
            <summary>Converts a list of Phone into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneCrud.Insert(OpenDentBusiness.Phone)">
            <summary>Inserts one Phone into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneCrud.Insert(OpenDentBusiness.Phone,System.Boolean)">
            <summary>Inserts one Phone into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneCrud.InsertNoCache(OpenDentBusiness.Phone)">
            <summary>Inserts one Phone into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneCrud.InsertNoCache(OpenDentBusiness.Phone,System.Boolean)">
            <summary>Inserts one Phone into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneCrud.Update(OpenDentBusiness.Phone)">
            <summary>Updates one Phone in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneCrud.Update(OpenDentBusiness.Phone,OpenDentBusiness.Phone)">
            <summary>Updates one Phone in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneCrud.UpdateComparison(OpenDentBusiness.Phone,OpenDentBusiness.Phone)">
            <summary>Returns true if Update(Phone,Phone) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneCrud.Delete(System.Int64)">
            <summary>Deletes one Phone from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpDefaultCrud.SelectOne(System.Int64)">
            <summary>Gets one PhoneEmpDefault object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpDefaultCrud.SelectOne(System.String)">
            <summary>Gets one PhoneEmpDefault object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpDefaultCrud.SelectMany(System.String)">
            <summary>Gets a list of PhoneEmpDefault objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpDefaultCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpDefaultCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PhoneEmpDefault},System.String)">
            <summary>Converts a list of PhoneEmpDefault into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpDefaultCrud.Insert(OpenDentBusiness.PhoneEmpDefault)">
            <summary>Inserts one PhoneEmpDefault into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpDefaultCrud.Insert(OpenDentBusiness.PhoneEmpDefault,System.Boolean)">
            <summary>Inserts one PhoneEmpDefault into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpDefaultCrud.InsertNoCache(OpenDentBusiness.PhoneEmpDefault)">
            <summary>Inserts one PhoneEmpDefault into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpDefaultCrud.InsertNoCache(OpenDentBusiness.PhoneEmpDefault,System.Boolean)">
            <summary>Inserts one PhoneEmpDefault into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpDefaultCrud.Update(OpenDentBusiness.PhoneEmpDefault)">
            <summary>Updates one PhoneEmpDefault in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpDefaultCrud.Update(OpenDentBusiness.PhoneEmpDefault,OpenDentBusiness.PhoneEmpDefault)">
            <summary>Updates one PhoneEmpDefault in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpDefaultCrud.UpdateComparison(OpenDentBusiness.PhoneEmpDefault,OpenDentBusiness.PhoneEmpDefault)">
            <summary>Returns true if Update(PhoneEmpDefault,PhoneEmpDefault) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpDefaultCrud.Delete(System.Int64)">
            <summary>Deletes one PhoneEmpDefault from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpSubGroupCrud.SelectOne(System.Int64)">
            <summary>Gets one PhoneEmpSubGroup object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpSubGroupCrud.SelectOne(System.String)">
            <summary>Gets one PhoneEmpSubGroup object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpSubGroupCrud.SelectMany(System.String)">
            <summary>Gets a list of PhoneEmpSubGroup objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpSubGroupCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpSubGroupCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PhoneEmpSubGroup},System.String)">
            <summary>Converts a list of PhoneEmpSubGroup into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpSubGroupCrud.Insert(OpenDentBusiness.PhoneEmpSubGroup)">
            <summary>Inserts one PhoneEmpSubGroup into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpSubGroupCrud.Insert(OpenDentBusiness.PhoneEmpSubGroup,System.Boolean)">
            <summary>Inserts one PhoneEmpSubGroup into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpSubGroupCrud.InsertNoCache(OpenDentBusiness.PhoneEmpSubGroup)">
            <summary>Inserts one PhoneEmpSubGroup into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpSubGroupCrud.InsertNoCache(OpenDentBusiness.PhoneEmpSubGroup,System.Boolean)">
            <summary>Inserts one PhoneEmpSubGroup into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpSubGroupCrud.Update(OpenDentBusiness.PhoneEmpSubGroup)">
            <summary>Updates one PhoneEmpSubGroup in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpSubGroupCrud.Update(OpenDentBusiness.PhoneEmpSubGroup,OpenDentBusiness.PhoneEmpSubGroup)">
            <summary>Updates one PhoneEmpSubGroup in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpSubGroupCrud.UpdateComparison(OpenDentBusiness.PhoneEmpSubGroup,OpenDentBusiness.PhoneEmpSubGroup)">
            <summary>Returns true if Update(PhoneEmpSubGroup,PhoneEmpSubGroup) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpSubGroupCrud.Delete(System.Int64)">
            <summary>Deletes one PhoneEmpSubGroup from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneEmpSubGroupCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.PhoneEmpSubGroup},System.Collections.Generic.List{OpenDentBusiness.PhoneEmpSubGroup})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneGraphCrud.SelectOne(System.Int64)">
            <summary>Gets one PhoneGraph object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneGraphCrud.SelectOne(System.String)">
            <summary>Gets one PhoneGraph object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneGraphCrud.SelectMany(System.String)">
            <summary>Gets a list of PhoneGraph objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneGraphCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneGraphCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PhoneGraph},System.String)">
            <summary>Converts a list of PhoneGraph into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneGraphCrud.Insert(OpenDentBusiness.PhoneGraph)">
            <summary>Inserts one PhoneGraph into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneGraphCrud.Insert(OpenDentBusiness.PhoneGraph,System.Boolean)">
            <summary>Inserts one PhoneGraph into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneGraphCrud.InsertNoCache(OpenDentBusiness.PhoneGraph)">
            <summary>Inserts one PhoneGraph into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneGraphCrud.InsertNoCache(OpenDentBusiness.PhoneGraph,System.Boolean)">
            <summary>Inserts one PhoneGraph into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneGraphCrud.Update(OpenDentBusiness.PhoneGraph)">
            <summary>Updates one PhoneGraph in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneGraphCrud.Update(OpenDentBusiness.PhoneGraph,OpenDentBusiness.PhoneGraph)">
            <summary>Updates one PhoneGraph in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneGraphCrud.UpdateComparison(OpenDentBusiness.PhoneGraph,OpenDentBusiness.PhoneGraph)">
            <summary>Returns true if Update(PhoneGraph,PhoneGraph) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneGraphCrud.Delete(System.Int64)">
            <summary>Deletes one PhoneGraph from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneMetricCrud.SelectOne(System.Int64)">
            <summary>Gets one PhoneMetric object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneMetricCrud.SelectOne(System.String)">
            <summary>Gets one PhoneMetric object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneMetricCrud.SelectMany(System.String)">
            <summary>Gets a list of PhoneMetric objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneMetricCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneMetricCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PhoneMetric},System.String)">
            <summary>Converts a list of PhoneMetric into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneMetricCrud.Insert(OpenDentBusiness.PhoneMetric)">
            <summary>Inserts one PhoneMetric into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneMetricCrud.Insert(OpenDentBusiness.PhoneMetric,System.Boolean)">
            <summary>Inserts one PhoneMetric into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneMetricCrud.InsertNoCache(OpenDentBusiness.PhoneMetric)">
            <summary>Inserts one PhoneMetric into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneMetricCrud.InsertNoCache(OpenDentBusiness.PhoneMetric,System.Boolean)">
            <summary>Inserts one PhoneMetric into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneMetricCrud.Update(OpenDentBusiness.PhoneMetric)">
            <summary>Updates one PhoneMetric in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneMetricCrud.Update(OpenDentBusiness.PhoneMetric,OpenDentBusiness.PhoneMetric)">
            <summary>Updates one PhoneMetric in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneMetricCrud.UpdateComparison(OpenDentBusiness.PhoneMetric,OpenDentBusiness.PhoneMetric)">
            <summary>Returns true if Update(PhoneMetric,PhoneMetric) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneMetricCrud.Delete(System.Int64)">
            <summary>Deletes one PhoneMetric from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneNumberCrud.SelectOne(System.Int64)">
            <summary>Gets one PhoneNumber object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneNumberCrud.SelectOne(System.String)">
            <summary>Gets one PhoneNumber object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneNumberCrud.SelectMany(System.String)">
            <summary>Gets a list of PhoneNumber objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneNumberCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneNumberCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PhoneNumber},System.String)">
            <summary>Converts a list of PhoneNumber into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneNumberCrud.Insert(OpenDentBusiness.PhoneNumber)">
            <summary>Inserts one PhoneNumber into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneNumberCrud.Insert(OpenDentBusiness.PhoneNumber,System.Boolean)">
            <summary>Inserts one PhoneNumber into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneNumberCrud.InsertNoCache(OpenDentBusiness.PhoneNumber)">
            <summary>Inserts one PhoneNumber into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneNumberCrud.InsertNoCache(OpenDentBusiness.PhoneNumber,System.Boolean)">
            <summary>Inserts one PhoneNumber into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneNumberCrud.Update(OpenDentBusiness.PhoneNumber)">
            <summary>Updates one PhoneNumber in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneNumberCrud.Update(OpenDentBusiness.PhoneNumber,OpenDentBusiness.PhoneNumber)">
            <summary>Updates one PhoneNumber in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneNumberCrud.UpdateComparison(OpenDentBusiness.PhoneNumber,OpenDentBusiness.PhoneNumber)">
            <summary>Returns true if Update(PhoneNumber,PhoneNumber) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PhoneNumberCrud.Delete(System.Int64)">
            <summary>Deletes one PhoneNumber from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PlannedApptCrud.SelectOne(System.Int64)">
            <summary>Gets one PlannedAppt object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PlannedApptCrud.SelectOne(System.String)">
            <summary>Gets one PlannedAppt object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PlannedApptCrud.SelectMany(System.String)">
            <summary>Gets a list of PlannedAppt objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PlannedApptCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PlannedApptCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.PlannedAppt},System.String)">
            <summary>Converts a list of PlannedAppt into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PlannedApptCrud.Insert(OpenDentBusiness.PlannedAppt)">
            <summary>Inserts one PlannedAppt into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PlannedApptCrud.Insert(OpenDentBusiness.PlannedAppt,System.Boolean)">
            <summary>Inserts one PlannedAppt into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PlannedApptCrud.InsertNoCache(OpenDentBusiness.PlannedAppt)">
            <summary>Inserts one PlannedAppt into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PlannedApptCrud.InsertNoCache(OpenDentBusiness.PlannedAppt,System.Boolean)">
            <summary>Inserts one PlannedAppt into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PlannedApptCrud.Update(OpenDentBusiness.PlannedAppt)">
            <summary>Updates one PlannedAppt in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PlannedApptCrud.Update(OpenDentBusiness.PlannedAppt,OpenDentBusiness.PlannedAppt)">
            <summary>Updates one PlannedAppt in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PlannedApptCrud.UpdateComparison(OpenDentBusiness.PlannedAppt,OpenDentBusiness.PlannedAppt)">
            <summary>Returns true if Update(PlannedAppt,PlannedAppt) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PlannedApptCrud.Delete(System.Int64)">
            <summary>Deletes one PlannedAppt from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PopupCrud.SelectOne(System.Int64)">
            <summary>Gets one Popup object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PopupCrud.SelectOne(System.String)">
            <summary>Gets one Popup object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PopupCrud.SelectMany(System.String)">
            <summary>Gets a list of Popup objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PopupCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PopupCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Popup},System.String)">
            <summary>Converts a list of Popup into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PopupCrud.Insert(OpenDentBusiness.Popup)">
            <summary>Inserts one Popup into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PopupCrud.Insert(OpenDentBusiness.Popup,System.Boolean)">
            <summary>Inserts one Popup into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PopupCrud.InsertNoCache(OpenDentBusiness.Popup)">
            <summary>Inserts one Popup into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PopupCrud.InsertNoCache(OpenDentBusiness.Popup,System.Boolean)">
            <summary>Inserts one Popup into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PopupCrud.Update(OpenDentBusiness.Popup)">
            <summary>Updates one Popup in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PopupCrud.Update(OpenDentBusiness.Popup,OpenDentBusiness.Popup)">
            <summary>Updates one Popup in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PopupCrud.UpdateComparison(OpenDentBusiness.Popup,OpenDentBusiness.Popup)">
            <summary>Returns true if Update(Popup,Popup) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PopupCrud.Delete(System.Int64)">
            <summary>Deletes one Popup from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrefCrud.SelectOne(System.Int64)">
            <summary>Gets one Pref object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrefCrud.SelectOne(System.String)">
            <summary>Gets one Pref object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrefCrud.SelectMany(System.String)">
            <summary>Gets a list of Pref objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Pref},System.String)">
            <summary>Converts a list of Pref into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrefCrud.Insert(OpenDentBusiness.Pref)">
            <summary>Inserts one Pref into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrefCrud.Insert(OpenDentBusiness.Pref,System.Boolean)">
            <summary>Inserts one Pref into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrefCrud.InsertNoCache(OpenDentBusiness.Pref)">
            <summary>Inserts one Pref into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrefCrud.InsertNoCache(OpenDentBusiness.Pref,System.Boolean)">
            <summary>Inserts one Pref into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrefCrud.Update(OpenDentBusiness.Pref)">
            <summary>Updates one Pref in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrefCrud.Update(OpenDentBusiness.Pref,OpenDentBusiness.Pref)">
            <summary>Updates one Pref in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrefCrud.UpdateComparison(OpenDentBusiness.Pref,OpenDentBusiness.Pref)">
            <summary>Returns true if Update(Pref,Pref) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrefCrud.Delete(System.Int64)">
            <summary>Deletes one Pref from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrinterCrud.SelectOne(System.Int64)">
            <summary>Gets one Printer object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrinterCrud.SelectOne(System.String)">
            <summary>Gets one Printer object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrinterCrud.SelectMany(System.String)">
            <summary>Gets a list of Printer objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrinterCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrinterCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Printer},System.String)">
            <summary>Converts a list of Printer into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrinterCrud.Insert(OpenDentBusiness.Printer)">
            <summary>Inserts one Printer into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrinterCrud.Insert(OpenDentBusiness.Printer,System.Boolean)">
            <summary>Inserts one Printer into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrinterCrud.InsertNoCache(OpenDentBusiness.Printer)">
            <summary>Inserts one Printer into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrinterCrud.InsertNoCache(OpenDentBusiness.Printer,System.Boolean)">
            <summary>Inserts one Printer into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrinterCrud.Update(OpenDentBusiness.Printer)">
            <summary>Updates one Printer in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrinterCrud.Update(OpenDentBusiness.Printer,OpenDentBusiness.Printer)">
            <summary>Updates one Printer in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrinterCrud.UpdateComparison(OpenDentBusiness.Printer,OpenDentBusiness.Printer)">
            <summary>Returns true if Update(Printer,Printer) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.PrinterCrud.Delete(System.Int64)">
            <summary>Deletes one Printer from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcApptColorCrud.SelectOne(System.Int64)">
            <summary>Gets one ProcApptColor object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcApptColorCrud.SelectOne(System.String)">
            <summary>Gets one ProcApptColor object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcApptColorCrud.SelectMany(System.String)">
            <summary>Gets a list of ProcApptColor objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcApptColorCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcApptColorCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ProcApptColor},System.String)">
            <summary>Converts a list of ProcApptColor into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcApptColorCrud.Insert(OpenDentBusiness.ProcApptColor)">
            <summary>Inserts one ProcApptColor into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcApptColorCrud.Insert(OpenDentBusiness.ProcApptColor,System.Boolean)">
            <summary>Inserts one ProcApptColor into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcApptColorCrud.InsertNoCache(OpenDentBusiness.ProcApptColor)">
            <summary>Inserts one ProcApptColor into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcApptColorCrud.InsertNoCache(OpenDentBusiness.ProcApptColor,System.Boolean)">
            <summary>Inserts one ProcApptColor into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcApptColorCrud.Update(OpenDentBusiness.ProcApptColor)">
            <summary>Updates one ProcApptColor in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcApptColorCrud.Update(OpenDentBusiness.ProcApptColor,OpenDentBusiness.ProcApptColor)">
            <summary>Updates one ProcApptColor in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcApptColorCrud.UpdateComparison(OpenDentBusiness.ProcApptColor,OpenDentBusiness.ProcApptColor)">
            <summary>Returns true if Update(ProcApptColor,ProcApptColor) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcApptColorCrud.Delete(System.Int64)">
            <summary>Deletes one ProcApptColor from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonCrud.SelectOne(System.Int64)">
            <summary>Gets one ProcButton object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonCrud.SelectOne(System.String)">
            <summary>Gets one ProcButton object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonCrud.SelectMany(System.String)">
            <summary>Gets a list of ProcButton objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ProcButton},System.String)">
            <summary>Converts a list of ProcButton into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonCrud.Insert(OpenDentBusiness.ProcButton)">
            <summary>Inserts one ProcButton into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonCrud.Insert(OpenDentBusiness.ProcButton,System.Boolean)">
            <summary>Inserts one ProcButton into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonCrud.InsertNoCache(OpenDentBusiness.ProcButton)">
            <summary>Inserts one ProcButton into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonCrud.InsertNoCache(OpenDentBusiness.ProcButton,System.Boolean)">
            <summary>Inserts one ProcButton into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonCrud.Update(OpenDentBusiness.ProcButton)">
            <summary>Updates one ProcButton in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonCrud.Update(OpenDentBusiness.ProcButton,OpenDentBusiness.ProcButton)">
            <summary>Updates one ProcButton in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonCrud.UpdateComparison(OpenDentBusiness.ProcButton,OpenDentBusiness.ProcButton)">
            <summary>Returns true if Update(ProcButton,ProcButton) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonCrud.Delete(System.Int64)">
            <summary>Deletes one ProcButton from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonItemCrud.SelectOne(System.Int64)">
            <summary>Gets one ProcButtonItem object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonItemCrud.SelectOne(System.String)">
            <summary>Gets one ProcButtonItem object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonItemCrud.SelectMany(System.String)">
            <summary>Gets a list of ProcButtonItem objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonItemCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonItemCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ProcButtonItem},System.String)">
            <summary>Converts a list of ProcButtonItem into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonItemCrud.Insert(OpenDentBusiness.ProcButtonItem)">
            <summary>Inserts one ProcButtonItem into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonItemCrud.Insert(OpenDentBusiness.ProcButtonItem,System.Boolean)">
            <summary>Inserts one ProcButtonItem into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonItemCrud.InsertNoCache(OpenDentBusiness.ProcButtonItem)">
            <summary>Inserts one ProcButtonItem into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonItemCrud.InsertNoCache(OpenDentBusiness.ProcButtonItem,System.Boolean)">
            <summary>Inserts one ProcButtonItem into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonItemCrud.Update(OpenDentBusiness.ProcButtonItem)">
            <summary>Updates one ProcButtonItem in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonItemCrud.Update(OpenDentBusiness.ProcButtonItem,OpenDentBusiness.ProcButtonItem)">
            <summary>Updates one ProcButtonItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonItemCrud.UpdateComparison(OpenDentBusiness.ProcButtonItem,OpenDentBusiness.ProcButtonItem)">
            <summary>Returns true if Update(ProcButtonItem,ProcButtonItem) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonItemCrud.Delete(System.Int64)">
            <summary>Deletes one ProcButtonItem from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonQuickCrud.SelectOne(System.Int64)">
            <summary>Gets one ProcButtonQuick object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonQuickCrud.SelectOne(System.String)">
            <summary>Gets one ProcButtonQuick object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonQuickCrud.SelectMany(System.String)">
            <summary>Gets a list of ProcButtonQuick objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonQuickCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonQuickCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ProcButtonQuick},System.String)">
            <summary>Converts a list of ProcButtonQuick into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonQuickCrud.Insert(OpenDentBusiness.ProcButtonQuick)">
            <summary>Inserts one ProcButtonQuick into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonQuickCrud.Insert(OpenDentBusiness.ProcButtonQuick,System.Boolean)">
            <summary>Inserts one ProcButtonQuick into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonQuickCrud.InsertNoCache(OpenDentBusiness.ProcButtonQuick)">
            <summary>Inserts one ProcButtonQuick into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonQuickCrud.InsertNoCache(OpenDentBusiness.ProcButtonQuick,System.Boolean)">
            <summary>Inserts one ProcButtonQuick into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonQuickCrud.Update(OpenDentBusiness.ProcButtonQuick)">
            <summary>Updates one ProcButtonQuick in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonQuickCrud.Update(OpenDentBusiness.ProcButtonQuick,OpenDentBusiness.ProcButtonQuick)">
            <summary>Updates one ProcButtonQuick in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonQuickCrud.UpdateComparison(OpenDentBusiness.ProcButtonQuick,OpenDentBusiness.ProcButtonQuick)">
            <summary>Returns true if Update(ProcButtonQuick,ProcButtonQuick) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcButtonQuickCrud.Delete(System.Int64)">
            <summary>Deletes one ProcButtonQuick from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcCodeNoteCrud.SelectOne(System.Int64)">
            <summary>Gets one ProcCodeNote object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcCodeNoteCrud.SelectOne(System.String)">
            <summary>Gets one ProcCodeNote object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcCodeNoteCrud.SelectMany(System.String)">
            <summary>Gets a list of ProcCodeNote objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcCodeNoteCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcCodeNoteCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ProcCodeNote},System.String)">
            <summary>Converts a list of ProcCodeNote into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcCodeNoteCrud.Insert(OpenDentBusiness.ProcCodeNote)">
            <summary>Inserts one ProcCodeNote into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcCodeNoteCrud.Insert(OpenDentBusiness.ProcCodeNote,System.Boolean)">
            <summary>Inserts one ProcCodeNote into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcCodeNoteCrud.InsertNoCache(OpenDentBusiness.ProcCodeNote)">
            <summary>Inserts one ProcCodeNote into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcCodeNoteCrud.InsertNoCache(OpenDentBusiness.ProcCodeNote,System.Boolean)">
            <summary>Inserts one ProcCodeNote into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcCodeNoteCrud.Update(OpenDentBusiness.ProcCodeNote)">
            <summary>Updates one ProcCodeNote in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcCodeNoteCrud.Update(OpenDentBusiness.ProcCodeNote,OpenDentBusiness.ProcCodeNote)">
            <summary>Updates one ProcCodeNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcCodeNoteCrud.UpdateComparison(OpenDentBusiness.ProcCodeNote,OpenDentBusiness.ProcCodeNote)">
            <summary>Returns true if Update(ProcCodeNote,ProcCodeNote) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcCodeNoteCrud.Delete(System.Int64)">
            <summary>Deletes one ProcCodeNote from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCodeCrud.SelectOne(System.Int64)">
            <summary>Gets one ProcedureCode object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCodeCrud.SelectOne(System.String)">
            <summary>Gets one ProcedureCode object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCodeCrud.SelectMany(System.String)">
            <summary>Gets a list of ProcedureCode objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCodeCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCodeCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ProcedureCode},System.String)">
            <summary>Converts a list of ProcedureCode into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCodeCrud.Insert(OpenDentBusiness.ProcedureCode)">
            <summary>Inserts one ProcedureCode into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCodeCrud.Insert(OpenDentBusiness.ProcedureCode,System.Boolean)">
            <summary>Inserts one ProcedureCode into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCodeCrud.InsertNoCache(OpenDentBusiness.ProcedureCode)">
            <summary>Inserts one ProcedureCode into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCodeCrud.InsertNoCache(OpenDentBusiness.ProcedureCode,System.Boolean)">
            <summary>Inserts one ProcedureCode into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCodeCrud.Update(OpenDentBusiness.ProcedureCode)">
            <summary>Updates one ProcedureCode in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCodeCrud.Update(OpenDentBusiness.ProcedureCode,OpenDentBusiness.ProcedureCode)">
            <summary>Updates one ProcedureCode in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCodeCrud.UpdateComparison(OpenDentBusiness.ProcedureCode,OpenDentBusiness.ProcedureCode)">
            <summary>Returns true if Update(ProcedureCode,ProcedureCode) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCodeCrud.Delete(System.Int64)">
            <summary>Deletes one ProcedureCode from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCodeCrud.ClearFkey(System.Int64)">
            <summary>Zeros securitylog FKey column for rows that are using the matching codeNum as FKey and are related to ProcedureCode.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the ProcedureCode table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCodeCrud.ClearFkey(System.Collections.Generic.List{System.Int64})">
            <summary>Zeros securitylog FKey column for rows that are using the matching codeNums as FKey and are related to ProcedureCode.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the ProcedureCode table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCrud.SelectOne(System.Int64)">
            <summary>Gets one Procedure object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCrud.SelectOne(System.String)">
            <summary>Gets one Procedure object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCrud.SelectMany(System.String)">
            <summary>Gets a list of Procedure objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Procedure},System.String)">
            <summary>Converts a list of Procedure into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCrud.Insert(OpenDentBusiness.Procedure)">
            <summary>Inserts one Procedure into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCrud.Insert(OpenDentBusiness.Procedure,System.Boolean)">
            <summary>Inserts one Procedure into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCrud.InsertNoCache(OpenDentBusiness.Procedure)">
            <summary>Inserts one Procedure into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCrud.InsertNoCache(OpenDentBusiness.Procedure,System.Boolean)">
            <summary>Inserts one Procedure into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCrud.Update(OpenDentBusiness.Procedure)">
            <summary>Updates one Procedure in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCrud.Update(OpenDentBusiness.Procedure,OpenDentBusiness.Procedure)">
            <summary>Updates one Procedure in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCrud.UpdateComparison(OpenDentBusiness.Procedure,OpenDentBusiness.Procedure)">
            <summary>Returns true if Update(Procedure,Procedure) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcedureCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.Procedure},System.Collections.Generic.List{OpenDentBusiness.Procedure},System.Int64)">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.
            Supply Security.CurUser.UserNum, used to set the SecUserNumEntry field for Inserts.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcGroupItemCrud.SelectOne(System.Int64)">
            <summary>Gets one ProcGroupItem object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcGroupItemCrud.SelectOne(System.String)">
            <summary>Gets one ProcGroupItem object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcGroupItemCrud.SelectMany(System.String)">
            <summary>Gets a list of ProcGroupItem objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcGroupItemCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcGroupItemCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ProcGroupItem},System.String)">
            <summary>Converts a list of ProcGroupItem into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcGroupItemCrud.Insert(OpenDentBusiness.ProcGroupItem)">
            <summary>Inserts one ProcGroupItem into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcGroupItemCrud.Insert(OpenDentBusiness.ProcGroupItem,System.Boolean)">
            <summary>Inserts one ProcGroupItem into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcGroupItemCrud.InsertNoCache(OpenDentBusiness.ProcGroupItem)">
            <summary>Inserts one ProcGroupItem into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcGroupItemCrud.InsertNoCache(OpenDentBusiness.ProcGroupItem,System.Boolean)">
            <summary>Inserts one ProcGroupItem into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcGroupItemCrud.Update(OpenDentBusiness.ProcGroupItem)">
            <summary>Updates one ProcGroupItem in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcGroupItemCrud.Update(OpenDentBusiness.ProcGroupItem,OpenDentBusiness.ProcGroupItem)">
            <summary>Updates one ProcGroupItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcGroupItemCrud.UpdateComparison(OpenDentBusiness.ProcGroupItem,OpenDentBusiness.ProcGroupItem)">
            <summary>Returns true if Update(ProcGroupItem,ProcGroupItem) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcGroupItemCrud.Delete(System.Int64)">
            <summary>Deletes one ProcGroupItem from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcNoteCrud.SelectOne(System.Int64)">
            <summary>Gets one ProcNote object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcNoteCrud.SelectOne(System.String)">
            <summary>Gets one ProcNote object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcNoteCrud.SelectMany(System.String)">
            <summary>Gets a list of ProcNote objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcNoteCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcNoteCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ProcNote},System.String)">
            <summary>Converts a list of ProcNote into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcNoteCrud.Insert(OpenDentBusiness.ProcNote)">
            <summary>Inserts one ProcNote into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcNoteCrud.Insert(OpenDentBusiness.ProcNote,System.Boolean)">
            <summary>Inserts one ProcNote into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcNoteCrud.InsertNoCache(OpenDentBusiness.ProcNote)">
            <summary>Inserts one ProcNote into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcNoteCrud.InsertNoCache(OpenDentBusiness.ProcNote,System.Boolean)">
            <summary>Inserts one ProcNote into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcNoteCrud.Update(OpenDentBusiness.ProcNote)">
            <summary>Updates one ProcNote in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcNoteCrud.Update(OpenDentBusiness.ProcNote,OpenDentBusiness.ProcNote)">
            <summary>Updates one ProcNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcNoteCrud.UpdateComparison(OpenDentBusiness.ProcNote,OpenDentBusiness.ProcNote)">
            <summary>Returns true if Update(ProcNote,ProcNote) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcNoteCrud.Delete(System.Int64)">
            <summary>Deletes one ProcNote from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcTPCrud.SelectOne(System.Int64)">
            <summary>Gets one ProcTP object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcTPCrud.SelectOne(System.String)">
            <summary>Gets one ProcTP object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcTPCrud.SelectMany(System.String)">
            <summary>Gets a list of ProcTP objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcTPCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcTPCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ProcTP},System.String)">
            <summary>Converts a list of ProcTP into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcTPCrud.Insert(OpenDentBusiness.ProcTP)">
            <summary>Inserts one ProcTP into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcTPCrud.Insert(OpenDentBusiness.ProcTP,System.Boolean)">
            <summary>Inserts one ProcTP into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcTPCrud.InsertNoCache(OpenDentBusiness.ProcTP)">
            <summary>Inserts one ProcTP into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcTPCrud.InsertNoCache(OpenDentBusiness.ProcTP,System.Boolean)">
            <summary>Inserts one ProcTP into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcTPCrud.Update(OpenDentBusiness.ProcTP)">
            <summary>Updates one ProcTP in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcTPCrud.Update(OpenDentBusiness.ProcTP,OpenDentBusiness.ProcTP)">
            <summary>Updates one ProcTP in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcTPCrud.UpdateComparison(OpenDentBusiness.ProcTP,OpenDentBusiness.ProcTP)">
            <summary>Returns true if Update(ProcTP,ProcTP) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProcTPCrud.Delete(System.Int64)">
            <summary>Deletes one ProcTP from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramCrud.SelectOne(System.Int64)">
            <summary>Gets one Program object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramCrud.SelectOne(System.String)">
            <summary>Gets one Program object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramCrud.SelectMany(System.String)">
            <summary>Gets a list of Program objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Program},System.String)">
            <summary>Converts a list of Program into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramCrud.Insert(OpenDentBusiness.Program)">
            <summary>Inserts one Program into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramCrud.Insert(OpenDentBusiness.Program,System.Boolean)">
            <summary>Inserts one Program into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramCrud.InsertNoCache(OpenDentBusiness.Program)">
            <summary>Inserts one Program into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramCrud.InsertNoCache(OpenDentBusiness.Program,System.Boolean)">
            <summary>Inserts one Program into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramCrud.Update(OpenDentBusiness.Program)">
            <summary>Updates one Program in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramCrud.Update(OpenDentBusiness.Program,OpenDentBusiness.Program)">
            <summary>Updates one Program in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramCrud.UpdateComparison(OpenDentBusiness.Program,OpenDentBusiness.Program)">
            <summary>Returns true if Update(Program,Program) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramCrud.Delete(System.Int64)">
            <summary>Deletes one Program from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramPropertyCrud.SelectOne(System.Int64)">
            <summary>Gets one ProgramProperty object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramPropertyCrud.SelectOne(System.String)">
            <summary>Gets one ProgramProperty object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramPropertyCrud.SelectMany(System.String)">
            <summary>Gets a list of ProgramProperty objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramPropertyCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramPropertyCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ProgramProperty},System.String)">
            <summary>Converts a list of ProgramProperty into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramPropertyCrud.Insert(OpenDentBusiness.ProgramProperty)">
            <summary>Inserts one ProgramProperty into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramPropertyCrud.Insert(OpenDentBusiness.ProgramProperty,System.Boolean)">
            <summary>Inserts one ProgramProperty into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramPropertyCrud.InsertNoCache(OpenDentBusiness.ProgramProperty)">
            <summary>Inserts one ProgramProperty into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramPropertyCrud.InsertNoCache(OpenDentBusiness.ProgramProperty,System.Boolean)">
            <summary>Inserts one ProgramProperty into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramPropertyCrud.Update(OpenDentBusiness.ProgramProperty)">
            <summary>Updates one ProgramProperty in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramPropertyCrud.Update(OpenDentBusiness.ProgramProperty,OpenDentBusiness.ProgramProperty)">
            <summary>Updates one ProgramProperty in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramPropertyCrud.UpdateComparison(OpenDentBusiness.ProgramProperty,OpenDentBusiness.ProgramProperty)">
            <summary>Returns true if Update(ProgramProperty,ProgramProperty) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramPropertyCrud.Delete(System.Int64)">
            <summary>Deletes one ProgramProperty from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProgramPropertyCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.ProgramProperty},System.Collections.Generic.List{OpenDentBusiness.ProgramProperty})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderCrud.SelectOne(System.Int64)">
            <summary>Gets one Provider object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderCrud.SelectOne(System.String)">
            <summary>Gets one Provider object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderCrud.SelectMany(System.String)">
            <summary>Gets a list of Provider objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Provider},System.String)">
            <summary>Converts a list of Provider into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderCrud.Insert(OpenDentBusiness.Provider)">
            <summary>Inserts one Provider into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderCrud.Insert(OpenDentBusiness.Provider,System.Boolean)">
            <summary>Inserts one Provider into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderCrud.InsertNoCache(OpenDentBusiness.Provider)">
            <summary>Inserts one Provider into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderCrud.InsertNoCache(OpenDentBusiness.Provider,System.Boolean)">
            <summary>Inserts one Provider into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderCrud.Update(OpenDentBusiness.Provider)">
            <summary>Updates one Provider in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderCrud.Update(OpenDentBusiness.Provider,OpenDentBusiness.Provider)">
            <summary>Updates one Provider in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderCrud.UpdateComparison(OpenDentBusiness.Provider,OpenDentBusiness.Provider)">
            <summary>Returns true if Update(Provider,Provider) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderCrud.Delete(System.Int64)">
            <summary>Deletes one Provider from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderErxCrud.SelectOne(System.Int64)">
            <summary>Gets one ProviderErx object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderErxCrud.SelectOne(System.String)">
            <summary>Gets one ProviderErx object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderErxCrud.SelectMany(System.String)">
            <summary>Gets a list of ProviderErx objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderErxCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderErxCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ProviderErx},System.String)">
            <summary>Converts a list of ProviderErx into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderErxCrud.Insert(OpenDentBusiness.ProviderErx)">
            <summary>Inserts one ProviderErx into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderErxCrud.Insert(OpenDentBusiness.ProviderErx,System.Boolean)">
            <summary>Inserts one ProviderErx into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderErxCrud.InsertNoCache(OpenDentBusiness.ProviderErx)">
            <summary>Inserts one ProviderErx into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderErxCrud.InsertNoCache(OpenDentBusiness.ProviderErx,System.Boolean)">
            <summary>Inserts one ProviderErx into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderErxCrud.Update(OpenDentBusiness.ProviderErx)">
            <summary>Updates one ProviderErx in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderErxCrud.Update(OpenDentBusiness.ProviderErx,OpenDentBusiness.ProviderErx)">
            <summary>Updates one ProviderErx in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderErxCrud.UpdateComparison(OpenDentBusiness.ProviderErx,OpenDentBusiness.ProviderErx)">
            <summary>Returns true if Update(ProviderErx,ProviderErx) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderErxCrud.Delete(System.Int64)">
            <summary>Deletes one ProviderErx from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderErxCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.ProviderErx},System.Collections.Generic.List{OpenDentBusiness.ProviderErx})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderIdentCrud.SelectOne(System.Int64)">
            <summary>Gets one ProviderIdent object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderIdentCrud.SelectOne(System.String)">
            <summary>Gets one ProviderIdent object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderIdentCrud.SelectMany(System.String)">
            <summary>Gets a list of ProviderIdent objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderIdentCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderIdentCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ProviderIdent},System.String)">
            <summary>Converts a list of ProviderIdent into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderIdentCrud.Insert(OpenDentBusiness.ProviderIdent)">
            <summary>Inserts one ProviderIdent into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderIdentCrud.Insert(OpenDentBusiness.ProviderIdent,System.Boolean)">
            <summary>Inserts one ProviderIdent into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderIdentCrud.InsertNoCache(OpenDentBusiness.ProviderIdent)">
            <summary>Inserts one ProviderIdent into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderIdentCrud.InsertNoCache(OpenDentBusiness.ProviderIdent,System.Boolean)">
            <summary>Inserts one ProviderIdent into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderIdentCrud.Update(OpenDentBusiness.ProviderIdent)">
            <summary>Updates one ProviderIdent in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderIdentCrud.Update(OpenDentBusiness.ProviderIdent,OpenDentBusiness.ProviderIdent)">
            <summary>Updates one ProviderIdent in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderIdentCrud.UpdateComparison(OpenDentBusiness.ProviderIdent,OpenDentBusiness.ProviderIdent)">
            <summary>Returns true if Update(ProviderIdent,ProviderIdent) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ProviderIdentCrud.Delete(System.Int64)">
            <summary>Deletes one ProviderIdent from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionCrud.SelectOne(System.Int64)">
            <summary>Gets one Question object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionCrud.SelectOne(System.String)">
            <summary>Gets one Question object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionCrud.SelectMany(System.String)">
            <summary>Gets a list of Question objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Question},System.String)">
            <summary>Converts a list of Question into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionCrud.Insert(OpenDentBusiness.Question)">
            <summary>Inserts one Question into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionCrud.Insert(OpenDentBusiness.Question,System.Boolean)">
            <summary>Inserts one Question into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionCrud.InsertNoCache(OpenDentBusiness.Question)">
            <summary>Inserts one Question into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionCrud.InsertNoCache(OpenDentBusiness.Question,System.Boolean)">
            <summary>Inserts one Question into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionCrud.Update(OpenDentBusiness.Question)">
            <summary>Updates one Question in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionCrud.Update(OpenDentBusiness.Question,OpenDentBusiness.Question)">
            <summary>Updates one Question in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionCrud.UpdateComparison(OpenDentBusiness.Question,OpenDentBusiness.Question)">
            <summary>Returns true if Update(Question,Question) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionCrud.Delete(System.Int64)">
            <summary>Deletes one Question from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionDefCrud.SelectOne(System.Int64)">
            <summary>Gets one QuestionDef object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionDefCrud.SelectOne(System.String)">
            <summary>Gets one QuestionDef object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionDefCrud.SelectMany(System.String)">
            <summary>Gets a list of QuestionDef objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionDefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionDefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.QuestionDef},System.String)">
            <summary>Converts a list of QuestionDef into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionDefCrud.Insert(OpenDentBusiness.QuestionDef)">
            <summary>Inserts one QuestionDef into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionDefCrud.Insert(OpenDentBusiness.QuestionDef,System.Boolean)">
            <summary>Inserts one QuestionDef into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionDefCrud.InsertNoCache(OpenDentBusiness.QuestionDef)">
            <summary>Inserts one QuestionDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionDefCrud.InsertNoCache(OpenDentBusiness.QuestionDef,System.Boolean)">
            <summary>Inserts one QuestionDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionDefCrud.Update(OpenDentBusiness.QuestionDef)">
            <summary>Updates one QuestionDef in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionDefCrud.Update(OpenDentBusiness.QuestionDef,OpenDentBusiness.QuestionDef)">
            <summary>Updates one QuestionDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionDefCrud.UpdateComparison(OpenDentBusiness.QuestionDef,OpenDentBusiness.QuestionDef)">
            <summary>Returns true if Update(QuestionDef,QuestionDef) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuestionDefCrud.Delete(System.Int64)">
            <summary>Deletes one QuestionDef from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteCatCrud.SelectOne(System.Int64)">
            <summary>Gets one QuickPasteCat object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteCatCrud.SelectOne(System.String)">
            <summary>Gets one QuickPasteCat object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteCatCrud.SelectMany(System.String)">
            <summary>Gets a list of QuickPasteCat objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteCatCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteCatCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.QuickPasteCat},System.String)">
            <summary>Converts a list of QuickPasteCat into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteCatCrud.Insert(OpenDentBusiness.QuickPasteCat)">
            <summary>Inserts one QuickPasteCat into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteCatCrud.Insert(OpenDentBusiness.QuickPasteCat,System.Boolean)">
            <summary>Inserts one QuickPasteCat into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteCatCrud.InsertNoCache(OpenDentBusiness.QuickPasteCat)">
            <summary>Inserts one QuickPasteCat into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteCatCrud.InsertNoCache(OpenDentBusiness.QuickPasteCat,System.Boolean)">
            <summary>Inserts one QuickPasteCat into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteCatCrud.Update(OpenDentBusiness.QuickPasteCat)">
            <summary>Updates one QuickPasteCat in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteCatCrud.Update(OpenDentBusiness.QuickPasteCat,OpenDentBusiness.QuickPasteCat)">
            <summary>Updates one QuickPasteCat in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteCatCrud.UpdateComparison(OpenDentBusiness.QuickPasteCat,OpenDentBusiness.QuickPasteCat)">
            <summary>Returns true if Update(QuickPasteCat,QuickPasteCat) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteCatCrud.Delete(System.Int64)">
            <summary>Deletes one QuickPasteCat from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteCatCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.QuickPasteCat},System.Collections.Generic.List{OpenDentBusiness.QuickPasteCat})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteNoteCrud.SelectOne(System.Int64)">
            <summary>Gets one QuickPasteNote object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteNoteCrud.SelectOne(System.String)">
            <summary>Gets one QuickPasteNote object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteNoteCrud.SelectMany(System.String)">
            <summary>Gets a list of QuickPasteNote objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteNoteCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteNoteCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.QuickPasteNote},System.String)">
            <summary>Converts a list of QuickPasteNote into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteNoteCrud.Insert(OpenDentBusiness.QuickPasteNote)">
            <summary>Inserts one QuickPasteNote into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteNoteCrud.Insert(OpenDentBusiness.QuickPasteNote,System.Boolean)">
            <summary>Inserts one QuickPasteNote into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteNoteCrud.InsertNoCache(OpenDentBusiness.QuickPasteNote)">
            <summary>Inserts one QuickPasteNote into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteNoteCrud.InsertNoCache(OpenDentBusiness.QuickPasteNote,System.Boolean)">
            <summary>Inserts one QuickPasteNote into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteNoteCrud.Update(OpenDentBusiness.QuickPasteNote)">
            <summary>Updates one QuickPasteNote in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteNoteCrud.Update(OpenDentBusiness.QuickPasteNote,OpenDentBusiness.QuickPasteNote)">
            <summary>Updates one QuickPasteNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteNoteCrud.UpdateComparison(OpenDentBusiness.QuickPasteNote,OpenDentBusiness.QuickPasteNote)">
            <summary>Returns true if Update(QuickPasteNote,QuickPasteNote) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteNoteCrud.Delete(System.Int64)">
            <summary>Deletes one QuickPasteNote from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.QuickPasteNoteCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.QuickPasteNote},System.Collections.Generic.List{OpenDentBusiness.QuickPasteNote})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallCrud.SelectOne(System.Int64)">
            <summary>Gets one Recall object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallCrud.SelectOne(System.String)">
            <summary>Gets one Recall object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallCrud.SelectMany(System.String)">
            <summary>Gets a list of Recall objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Recall},System.String)">
            <summary>Converts a list of Recall into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallCrud.Insert(OpenDentBusiness.Recall)">
            <summary>Inserts one Recall into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallCrud.Insert(OpenDentBusiness.Recall,System.Boolean)">
            <summary>Inserts one Recall into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallCrud.InsertNoCache(OpenDentBusiness.Recall)">
            <summary>Inserts one Recall into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallCrud.InsertNoCache(OpenDentBusiness.Recall,System.Boolean)">
            <summary>Inserts one Recall into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallCrud.Update(OpenDentBusiness.Recall)">
            <summary>Updates one Recall in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallCrud.Update(OpenDentBusiness.Recall,OpenDentBusiness.Recall)">
            <summary>Updates one Recall in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallCrud.UpdateComparison(OpenDentBusiness.Recall,OpenDentBusiness.Recall)">
            <summary>Returns true if Update(Recall,Recall) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallCrud.Delete(System.Int64)">
            <summary>Deletes one Recall from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTriggerCrud.SelectOne(System.Int64)">
            <summary>Gets one RecallTrigger object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTriggerCrud.SelectOne(System.String)">
            <summary>Gets one RecallTrigger object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTriggerCrud.SelectMany(System.String)">
            <summary>Gets a list of RecallTrigger objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTriggerCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTriggerCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.RecallTrigger},System.String)">
            <summary>Converts a list of RecallTrigger into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTriggerCrud.Insert(OpenDentBusiness.RecallTrigger)">
            <summary>Inserts one RecallTrigger into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTriggerCrud.Insert(OpenDentBusiness.RecallTrigger,System.Boolean)">
            <summary>Inserts one RecallTrigger into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTriggerCrud.InsertNoCache(OpenDentBusiness.RecallTrigger)">
            <summary>Inserts one RecallTrigger into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTriggerCrud.InsertNoCache(OpenDentBusiness.RecallTrigger,System.Boolean)">
            <summary>Inserts one RecallTrigger into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTriggerCrud.Update(OpenDentBusiness.RecallTrigger)">
            <summary>Updates one RecallTrigger in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTriggerCrud.Update(OpenDentBusiness.RecallTrigger,OpenDentBusiness.RecallTrigger)">
            <summary>Updates one RecallTrigger in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTriggerCrud.UpdateComparison(OpenDentBusiness.RecallTrigger,OpenDentBusiness.RecallTrigger)">
            <summary>Returns true if Update(RecallTrigger,RecallTrigger) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTriggerCrud.Delete(System.Int64)">
            <summary>Deletes one RecallTrigger from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTypeCrud.SelectOne(System.Int64)">
            <summary>Gets one RecallType object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTypeCrud.SelectOne(System.String)">
            <summary>Gets one RecallType object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTypeCrud.SelectMany(System.String)">
            <summary>Gets a list of RecallType objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTypeCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTypeCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.RecallType},System.String)">
            <summary>Converts a list of RecallType into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTypeCrud.Insert(OpenDentBusiness.RecallType)">
            <summary>Inserts one RecallType into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTypeCrud.Insert(OpenDentBusiness.RecallType,System.Boolean)">
            <summary>Inserts one RecallType into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTypeCrud.InsertNoCache(OpenDentBusiness.RecallType)">
            <summary>Inserts one RecallType into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTypeCrud.InsertNoCache(OpenDentBusiness.RecallType,System.Boolean)">
            <summary>Inserts one RecallType into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTypeCrud.Update(OpenDentBusiness.RecallType)">
            <summary>Updates one RecallType in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTypeCrud.Update(OpenDentBusiness.RecallType,OpenDentBusiness.RecallType)">
            <summary>Updates one RecallType in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTypeCrud.UpdateComparison(OpenDentBusiness.RecallType,OpenDentBusiness.RecallType)">
            <summary>Returns true if Update(RecallType,RecallType) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RecallTypeCrud.Delete(System.Int64)">
            <summary>Deletes one RecallType from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReconcileCrud.SelectOne(System.Int64)">
            <summary>Gets one Reconcile object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReconcileCrud.SelectOne(System.String)">
            <summary>Gets one Reconcile object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReconcileCrud.SelectMany(System.String)">
            <summary>Gets a list of Reconcile objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReconcileCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReconcileCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Reconcile},System.String)">
            <summary>Converts a list of Reconcile into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReconcileCrud.Insert(OpenDentBusiness.Reconcile)">
            <summary>Inserts one Reconcile into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReconcileCrud.Insert(OpenDentBusiness.Reconcile,System.Boolean)">
            <summary>Inserts one Reconcile into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReconcileCrud.InsertNoCache(OpenDentBusiness.Reconcile)">
            <summary>Inserts one Reconcile into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReconcileCrud.InsertNoCache(OpenDentBusiness.Reconcile,System.Boolean)">
            <summary>Inserts one Reconcile into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReconcileCrud.Update(OpenDentBusiness.Reconcile)">
            <summary>Updates one Reconcile in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReconcileCrud.Update(OpenDentBusiness.Reconcile,OpenDentBusiness.Reconcile)">
            <summary>Updates one Reconcile in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReconcileCrud.UpdateComparison(OpenDentBusiness.Reconcile,OpenDentBusiness.Reconcile)">
            <summary>Returns true if Update(Reconcile,Reconcile) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReconcileCrud.Delete(System.Int64)">
            <summary>Deletes one Reconcile from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RefAttachCrud.SelectOne(System.Int64)">
            <summary>Gets one RefAttach object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RefAttachCrud.SelectOne(System.String)">
            <summary>Gets one RefAttach object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RefAttachCrud.SelectMany(System.String)">
            <summary>Gets a list of RefAttach objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RefAttachCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RefAttachCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.RefAttach},System.String)">
            <summary>Converts a list of RefAttach into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RefAttachCrud.Insert(OpenDentBusiness.RefAttach)">
            <summary>Inserts one RefAttach into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RefAttachCrud.Insert(OpenDentBusiness.RefAttach,System.Boolean)">
            <summary>Inserts one RefAttach into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RefAttachCrud.InsertNoCache(OpenDentBusiness.RefAttach)">
            <summary>Inserts one RefAttach into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RefAttachCrud.InsertNoCache(OpenDentBusiness.RefAttach,System.Boolean)">
            <summary>Inserts one RefAttach into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RefAttachCrud.Update(OpenDentBusiness.RefAttach)">
            <summary>Updates one RefAttach in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RefAttachCrud.Update(OpenDentBusiness.RefAttach,OpenDentBusiness.RefAttach)">
            <summary>Updates one RefAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RefAttachCrud.UpdateComparison(OpenDentBusiness.RefAttach,OpenDentBusiness.RefAttach)">
            <summary>Returns true if Update(RefAttach,RefAttach) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RefAttachCrud.Delete(System.Int64)">
            <summary>Deletes one RefAttach from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReferralCrud.SelectOne(System.Int64)">
            <summary>Gets one Referral object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReferralCrud.SelectOne(System.String)">
            <summary>Gets one Referral object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReferralCrud.SelectMany(System.String)">
            <summary>Gets a list of Referral objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReferralCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReferralCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Referral},System.String)">
            <summary>Converts a list of Referral into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReferralCrud.Insert(OpenDentBusiness.Referral)">
            <summary>Inserts one Referral into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReferralCrud.Insert(OpenDentBusiness.Referral,System.Boolean)">
            <summary>Inserts one Referral into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReferralCrud.InsertNoCache(OpenDentBusiness.Referral)">
            <summary>Inserts one Referral into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReferralCrud.InsertNoCache(OpenDentBusiness.Referral,System.Boolean)">
            <summary>Inserts one Referral into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReferralCrud.Update(OpenDentBusiness.Referral)">
            <summary>Updates one Referral in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReferralCrud.Update(OpenDentBusiness.Referral,OpenDentBusiness.Referral)">
            <summary>Updates one Referral in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReferralCrud.UpdateComparison(OpenDentBusiness.Referral,OpenDentBusiness.Referral)">
            <summary>Returns true if Update(Referral,Referral) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReferralCrud.Delete(System.Int64)">
            <summary>Deletes one Referral from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RegistrationKeyCrud.SelectOne(System.Int64)">
            <summary>Gets one RegistrationKey object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RegistrationKeyCrud.SelectOne(System.String)">
            <summary>Gets one RegistrationKey object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RegistrationKeyCrud.SelectMany(System.String)">
            <summary>Gets a list of RegistrationKey objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RegistrationKeyCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RegistrationKeyCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.RegistrationKey},System.String)">
            <summary>Converts a list of RegistrationKey into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RegistrationKeyCrud.Insert(OpenDentBusiness.RegistrationKey)">
            <summary>Inserts one RegistrationKey into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RegistrationKeyCrud.Insert(OpenDentBusiness.RegistrationKey,System.Boolean)">
            <summary>Inserts one RegistrationKey into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RegistrationKeyCrud.InsertNoCache(OpenDentBusiness.RegistrationKey)">
            <summary>Inserts one RegistrationKey into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RegistrationKeyCrud.InsertNoCache(OpenDentBusiness.RegistrationKey,System.Boolean)">
            <summary>Inserts one RegistrationKey into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RegistrationKeyCrud.Update(OpenDentBusiness.RegistrationKey)">
            <summary>Updates one RegistrationKey in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RegistrationKeyCrud.Update(OpenDentBusiness.RegistrationKey,OpenDentBusiness.RegistrationKey)">
            <summary>Updates one RegistrationKey in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RegistrationKeyCrud.UpdateComparison(OpenDentBusiness.RegistrationKey,OpenDentBusiness.RegistrationKey)">
            <summary>Returns true if Update(RegistrationKey,RegistrationKey) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RegistrationKeyCrud.Delete(System.Int64)">
            <summary>Deletes one RegistrationKey from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReminderRuleCrud.SelectOne(System.Int64)">
            <summary>Gets one ReminderRule object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReminderRuleCrud.SelectOne(System.String)">
            <summary>Gets one ReminderRule object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReminderRuleCrud.SelectMany(System.String)">
            <summary>Gets a list of ReminderRule objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReminderRuleCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReminderRuleCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ReminderRule},System.String)">
            <summary>Converts a list of ReminderRule into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReminderRuleCrud.Insert(OpenDentBusiness.ReminderRule)">
            <summary>Inserts one ReminderRule into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReminderRuleCrud.Insert(OpenDentBusiness.ReminderRule,System.Boolean)">
            <summary>Inserts one ReminderRule into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReminderRuleCrud.InsertNoCache(OpenDentBusiness.ReminderRule)">
            <summary>Inserts one ReminderRule into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReminderRuleCrud.InsertNoCache(OpenDentBusiness.ReminderRule,System.Boolean)">
            <summary>Inserts one ReminderRule into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReminderRuleCrud.Update(OpenDentBusiness.ReminderRule)">
            <summary>Updates one ReminderRule in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReminderRuleCrud.Update(OpenDentBusiness.ReminderRule,OpenDentBusiness.ReminderRule)">
            <summary>Updates one ReminderRule in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReminderRuleCrud.UpdateComparison(OpenDentBusiness.ReminderRule,OpenDentBusiness.ReminderRule)">
            <summary>Returns true if Update(ReminderRule,ReminderRule) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReminderRuleCrud.Delete(System.Int64)">
            <summary>Deletes one ReminderRule from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RepeatChargeCrud.SelectOne(System.Int64)">
            <summary>Gets one RepeatCharge object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RepeatChargeCrud.SelectOne(System.String)">
            <summary>Gets one RepeatCharge object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RepeatChargeCrud.SelectMany(System.String)">
            <summary>Gets a list of RepeatCharge objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RepeatChargeCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RepeatChargeCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.RepeatCharge},System.String)">
            <summary>Converts a list of RepeatCharge into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RepeatChargeCrud.Insert(OpenDentBusiness.RepeatCharge)">
            <summary>Inserts one RepeatCharge into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RepeatChargeCrud.Insert(OpenDentBusiness.RepeatCharge,System.Boolean)">
            <summary>Inserts one RepeatCharge into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RepeatChargeCrud.InsertNoCache(OpenDentBusiness.RepeatCharge)">
            <summary>Inserts one RepeatCharge into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RepeatChargeCrud.InsertNoCache(OpenDentBusiness.RepeatCharge,System.Boolean)">
            <summary>Inserts one RepeatCharge into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RepeatChargeCrud.Update(OpenDentBusiness.RepeatCharge)">
            <summary>Updates one RepeatCharge in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RepeatChargeCrud.Update(OpenDentBusiness.RepeatCharge,OpenDentBusiness.RepeatCharge)">
            <summary>Updates one RepeatCharge in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RepeatChargeCrud.UpdateComparison(OpenDentBusiness.RepeatCharge,OpenDentBusiness.RepeatCharge)">
            <summary>Returns true if Update(RepeatCharge,RepeatCharge) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RepeatChargeCrud.Delete(System.Int64)">
            <summary>Deletes one RepeatCharge from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReplicationServerCrud.SelectOne(System.Int64)">
            <summary>Gets one ReplicationServer object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReplicationServerCrud.SelectOne(System.String)">
            <summary>Gets one ReplicationServer object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReplicationServerCrud.SelectMany(System.String)">
            <summary>Gets a list of ReplicationServer objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReplicationServerCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReplicationServerCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ReplicationServer},System.String)">
            <summary>Converts a list of ReplicationServer into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReplicationServerCrud.Insert(OpenDentBusiness.ReplicationServer)">
            <summary>Inserts one ReplicationServer into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReplicationServerCrud.Insert(OpenDentBusiness.ReplicationServer,System.Boolean)">
            <summary>Inserts one ReplicationServer into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReplicationServerCrud.InsertNoCache(OpenDentBusiness.ReplicationServer)">
            <summary>Inserts one ReplicationServer into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReplicationServerCrud.InsertNoCache(OpenDentBusiness.ReplicationServer,System.Boolean)">
            <summary>Inserts one ReplicationServer into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReplicationServerCrud.Update(OpenDentBusiness.ReplicationServer)">
            <summary>Updates one ReplicationServer in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReplicationServerCrud.Update(OpenDentBusiness.ReplicationServer,OpenDentBusiness.ReplicationServer)">
            <summary>Updates one ReplicationServer in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReplicationServerCrud.UpdateComparison(OpenDentBusiness.ReplicationServer,OpenDentBusiness.ReplicationServer)">
            <summary>Returns true if Update(ReplicationServer,ReplicationServer) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReplicationServerCrud.Delete(System.Int64)">
            <summary>Deletes one ReplicationServer from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqNeededCrud.SelectOne(System.Int64)">
            <summary>Gets one ReqNeeded object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqNeededCrud.SelectOne(System.String)">
            <summary>Gets one ReqNeeded object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqNeededCrud.SelectMany(System.String)">
            <summary>Gets a list of ReqNeeded objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqNeededCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqNeededCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ReqNeeded},System.String)">
            <summary>Converts a list of ReqNeeded into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqNeededCrud.Insert(OpenDentBusiness.ReqNeeded)">
            <summary>Inserts one ReqNeeded into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqNeededCrud.Insert(OpenDentBusiness.ReqNeeded,System.Boolean)">
            <summary>Inserts one ReqNeeded into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqNeededCrud.InsertNoCache(OpenDentBusiness.ReqNeeded)">
            <summary>Inserts one ReqNeeded into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqNeededCrud.InsertNoCache(OpenDentBusiness.ReqNeeded,System.Boolean)">
            <summary>Inserts one ReqNeeded into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqNeededCrud.Update(OpenDentBusiness.ReqNeeded)">
            <summary>Updates one ReqNeeded in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqNeededCrud.Update(OpenDentBusiness.ReqNeeded,OpenDentBusiness.ReqNeeded)">
            <summary>Updates one ReqNeeded in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqNeededCrud.UpdateComparison(OpenDentBusiness.ReqNeeded,OpenDentBusiness.ReqNeeded)">
            <summary>Returns true if Update(ReqNeeded,ReqNeeded) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqNeededCrud.Delete(System.Int64)">
            <summary>Deletes one ReqNeeded from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqNeededCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.ReqNeeded},System.Collections.Generic.List{OpenDentBusiness.ReqNeeded})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqStudentCrud.SelectOne(System.Int64)">
            <summary>Gets one ReqStudent object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqStudentCrud.SelectOne(System.String)">
            <summary>Gets one ReqStudent object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqStudentCrud.SelectMany(System.String)">
            <summary>Gets a list of ReqStudent objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqStudentCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqStudentCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ReqStudent},System.String)">
            <summary>Converts a list of ReqStudent into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqStudentCrud.Insert(OpenDentBusiness.ReqStudent)">
            <summary>Inserts one ReqStudent into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqStudentCrud.Insert(OpenDentBusiness.ReqStudent,System.Boolean)">
            <summary>Inserts one ReqStudent into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqStudentCrud.InsertNoCache(OpenDentBusiness.ReqStudent)">
            <summary>Inserts one ReqStudent into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqStudentCrud.InsertNoCache(OpenDentBusiness.ReqStudent,System.Boolean)">
            <summary>Inserts one ReqStudent into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqStudentCrud.Update(OpenDentBusiness.ReqStudent)">
            <summary>Updates one ReqStudent in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqStudentCrud.Update(OpenDentBusiness.ReqStudent,OpenDentBusiness.ReqStudent)">
            <summary>Updates one ReqStudent in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqStudentCrud.UpdateComparison(OpenDentBusiness.ReqStudent,OpenDentBusiness.ReqStudent)">
            <summary>Returns true if Update(ReqStudent,ReqStudent) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ReqStudentCrud.Delete(System.Int64)">
            <summary>Deletes one ReqStudent from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldConditionCrud.SelectOne(System.Int64)">
            <summary>Gets one RequiredFieldCondition object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldConditionCrud.SelectOne(System.String)">
            <summary>Gets one RequiredFieldCondition object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldConditionCrud.SelectMany(System.String)">
            <summary>Gets a list of RequiredFieldCondition objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldConditionCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldConditionCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.RequiredFieldCondition},System.String)">
            <summary>Converts a list of RequiredFieldCondition into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldConditionCrud.Insert(OpenDentBusiness.RequiredFieldCondition)">
            <summary>Inserts one RequiredFieldCondition into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldConditionCrud.Insert(OpenDentBusiness.RequiredFieldCondition,System.Boolean)">
            <summary>Inserts one RequiredFieldCondition into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldConditionCrud.InsertNoCache(OpenDentBusiness.RequiredFieldCondition)">
            <summary>Inserts one RequiredFieldCondition into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldConditionCrud.InsertNoCache(OpenDentBusiness.RequiredFieldCondition,System.Boolean)">
            <summary>Inserts one RequiredFieldCondition into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldConditionCrud.Update(OpenDentBusiness.RequiredFieldCondition)">
            <summary>Updates one RequiredFieldCondition in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldConditionCrud.Update(OpenDentBusiness.RequiredFieldCondition,OpenDentBusiness.RequiredFieldCondition)">
            <summary>Updates one RequiredFieldCondition in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldConditionCrud.UpdateComparison(OpenDentBusiness.RequiredFieldCondition,OpenDentBusiness.RequiredFieldCondition)">
            <summary>Returns true if Update(RequiredFieldCondition,RequiredFieldCondition) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldConditionCrud.Delete(System.Int64)">
            <summary>Deletes one RequiredFieldCondition from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldCrud.SelectOne(System.Int64)">
            <summary>Gets one RequiredField object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldCrud.SelectOne(System.String)">
            <summary>Gets one RequiredField object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldCrud.SelectMany(System.String)">
            <summary>Gets a list of RequiredField objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.RequiredField},System.String)">
            <summary>Converts a list of RequiredField into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldCrud.Insert(OpenDentBusiness.RequiredField)">
            <summary>Inserts one RequiredField into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldCrud.Insert(OpenDentBusiness.RequiredField,System.Boolean)">
            <summary>Inserts one RequiredField into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldCrud.InsertNoCache(OpenDentBusiness.RequiredField)">
            <summary>Inserts one RequiredField into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldCrud.InsertNoCache(OpenDentBusiness.RequiredField,System.Boolean)">
            <summary>Inserts one RequiredField into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldCrud.Update(OpenDentBusiness.RequiredField)">
            <summary>Updates one RequiredField in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldCrud.Update(OpenDentBusiness.RequiredField,OpenDentBusiness.RequiredField)">
            <summary>Updates one RequiredField in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldCrud.UpdateComparison(OpenDentBusiness.RequiredField,OpenDentBusiness.RequiredField)">
            <summary>Returns true if Update(RequiredField,RequiredField) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RequiredFieldCrud.Delete(System.Int64)">
            <summary>Deletes one RequiredField from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerCrud.SelectOne(System.Int64)">
            <summary>Gets one Reseller object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerCrud.SelectOne(System.String)">
            <summary>Gets one Reseller object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerCrud.SelectMany(System.String)">
            <summary>Gets a list of Reseller objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Reseller},System.String)">
            <summary>Converts a list of Reseller into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerCrud.Insert(OpenDentBusiness.Reseller)">
            <summary>Inserts one Reseller into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerCrud.Insert(OpenDentBusiness.Reseller,System.Boolean)">
            <summary>Inserts one Reseller into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerCrud.InsertNoCache(OpenDentBusiness.Reseller)">
            <summary>Inserts one Reseller into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerCrud.InsertNoCache(OpenDentBusiness.Reseller,System.Boolean)">
            <summary>Inserts one Reseller into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerCrud.Update(OpenDentBusiness.Reseller)">
            <summary>Updates one Reseller in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerCrud.Update(OpenDentBusiness.Reseller,OpenDentBusiness.Reseller)">
            <summary>Updates one Reseller in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerCrud.UpdateComparison(OpenDentBusiness.Reseller,OpenDentBusiness.Reseller)">
            <summary>Returns true if Update(Reseller,Reseller) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerCrud.Delete(System.Int64)">
            <summary>Deletes one Reseller from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerServiceCrud.SelectOne(System.Int64)">
            <summary>Gets one ResellerService object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerServiceCrud.SelectOne(System.String)">
            <summary>Gets one ResellerService object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerServiceCrud.SelectMany(System.String)">
            <summary>Gets a list of ResellerService objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerServiceCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerServiceCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ResellerService},System.String)">
            <summary>Converts a list of ResellerService into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerServiceCrud.Insert(OpenDentBusiness.ResellerService)">
            <summary>Inserts one ResellerService into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerServiceCrud.Insert(OpenDentBusiness.ResellerService,System.Boolean)">
            <summary>Inserts one ResellerService into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerServiceCrud.InsertNoCache(OpenDentBusiness.ResellerService)">
            <summary>Inserts one ResellerService into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerServiceCrud.InsertNoCache(OpenDentBusiness.ResellerService,System.Boolean)">
            <summary>Inserts one ResellerService into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerServiceCrud.Update(OpenDentBusiness.ResellerService)">
            <summary>Updates one ResellerService in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerServiceCrud.Update(OpenDentBusiness.ResellerService,OpenDentBusiness.ResellerService)">
            <summary>Updates one ResellerService in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerServiceCrud.UpdateComparison(OpenDentBusiness.ResellerService,OpenDentBusiness.ResellerService)">
            <summary>Returns true if Update(ResellerService,ResellerService) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ResellerServiceCrud.Delete(System.Int64)">
            <summary>Deletes one ResellerService from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxAlertCrud.SelectOne(System.Int64)">
            <summary>Gets one RxAlert object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxAlertCrud.SelectOne(System.String)">
            <summary>Gets one RxAlert object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxAlertCrud.SelectMany(System.String)">
            <summary>Gets a list of RxAlert objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxAlertCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxAlertCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.RxAlert},System.String)">
            <summary>Converts a list of RxAlert into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxAlertCrud.Insert(OpenDentBusiness.RxAlert)">
            <summary>Inserts one RxAlert into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxAlertCrud.Insert(OpenDentBusiness.RxAlert,System.Boolean)">
            <summary>Inserts one RxAlert into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxAlertCrud.InsertNoCache(OpenDentBusiness.RxAlert)">
            <summary>Inserts one RxAlert into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxAlertCrud.InsertNoCache(OpenDentBusiness.RxAlert,System.Boolean)">
            <summary>Inserts one RxAlert into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxAlertCrud.Update(OpenDentBusiness.RxAlert)">
            <summary>Updates one RxAlert in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxAlertCrud.Update(OpenDentBusiness.RxAlert,OpenDentBusiness.RxAlert)">
            <summary>Updates one RxAlert in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxAlertCrud.UpdateComparison(OpenDentBusiness.RxAlert,OpenDentBusiness.RxAlert)">
            <summary>Returns true if Update(RxAlert,RxAlert) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxAlertCrud.Delete(System.Int64)">
            <summary>Deletes one RxAlert from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxDefCrud.SelectOne(System.Int64)">
            <summary>Gets one RxDef object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxDefCrud.SelectOne(System.String)">
            <summary>Gets one RxDef object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxDefCrud.SelectMany(System.String)">
            <summary>Gets a list of RxDef objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxDefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxDefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.RxDef},System.String)">
            <summary>Converts a list of RxDef into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxDefCrud.Insert(OpenDentBusiness.RxDef)">
            <summary>Inserts one RxDef into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxDefCrud.Insert(OpenDentBusiness.RxDef,System.Boolean)">
            <summary>Inserts one RxDef into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxDefCrud.InsertNoCache(OpenDentBusiness.RxDef)">
            <summary>Inserts one RxDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxDefCrud.InsertNoCache(OpenDentBusiness.RxDef,System.Boolean)">
            <summary>Inserts one RxDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxDefCrud.Update(OpenDentBusiness.RxDef)">
            <summary>Updates one RxDef in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxDefCrud.Update(OpenDentBusiness.RxDef,OpenDentBusiness.RxDef)">
            <summary>Updates one RxDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxDefCrud.UpdateComparison(OpenDentBusiness.RxDef,OpenDentBusiness.RxDef)">
            <summary>Returns true if Update(RxDef,RxDef) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxDefCrud.Delete(System.Int64)">
            <summary>Deletes one RxDef from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxNormCrud.SelectOne(System.Int64)">
            <summary>Gets one RxNorm object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxNormCrud.SelectOne(System.String)">
            <summary>Gets one RxNorm object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxNormCrud.SelectMany(System.String)">
            <summary>Gets a list of RxNorm objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxNormCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxNormCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.RxNorm},System.String)">
            <summary>Converts a list of RxNorm into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxNormCrud.Insert(OpenDentBusiness.RxNorm)">
            <summary>Inserts one RxNorm into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxNormCrud.Insert(OpenDentBusiness.RxNorm,System.Boolean)">
            <summary>Inserts one RxNorm into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxNormCrud.InsertNoCache(OpenDentBusiness.RxNorm)">
            <summary>Inserts one RxNorm into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxNormCrud.InsertNoCache(OpenDentBusiness.RxNorm,System.Boolean)">
            <summary>Inserts one RxNorm into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxNormCrud.Update(OpenDentBusiness.RxNorm)">
            <summary>Updates one RxNorm in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxNormCrud.Update(OpenDentBusiness.RxNorm,OpenDentBusiness.RxNorm)">
            <summary>Updates one RxNorm in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxNormCrud.UpdateComparison(OpenDentBusiness.RxNorm,OpenDentBusiness.RxNorm)">
            <summary>Returns true if Update(RxNorm,RxNorm) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxNormCrud.Delete(System.Int64)">
            <summary>Deletes one RxNorm from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxPatCrud.SelectOne(System.Int64)">
            <summary>Gets one RxPat object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxPatCrud.SelectOne(System.String)">
            <summary>Gets one RxPat object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxPatCrud.SelectMany(System.String)">
            <summary>Gets a list of RxPat objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxPatCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxPatCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.RxPat},System.String)">
            <summary>Converts a list of RxPat into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxPatCrud.Insert(OpenDentBusiness.RxPat)">
            <summary>Inserts one RxPat into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxPatCrud.Insert(OpenDentBusiness.RxPat,System.Boolean)">
            <summary>Inserts one RxPat into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxPatCrud.InsertNoCache(OpenDentBusiness.RxPat)">
            <summary>Inserts one RxPat into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxPatCrud.InsertNoCache(OpenDentBusiness.RxPat,System.Boolean)">
            <summary>Inserts one RxPat into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxPatCrud.Update(OpenDentBusiness.RxPat)">
            <summary>Updates one RxPat in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxPatCrud.Update(OpenDentBusiness.RxPat,OpenDentBusiness.RxPat)">
            <summary>Updates one RxPat in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxPatCrud.UpdateComparison(OpenDentBusiness.RxPat,OpenDentBusiness.RxPat)">
            <summary>Returns true if Update(RxPat,RxPat) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxPatCrud.Delete(System.Int64)">
            <summary>Deletes one RxPat from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxPatCrud.ClearFkey(System.Int64)">
            <summary>Zeros securitylog FKey column for rows that are using the matching rxNum as FKey and are related to RxPat.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the RxPat table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.RxPatCrud.ClearFkey(System.Collections.Generic.List{System.Int64})">
            <summary>Zeros securitylog FKey column for rows that are using the matching rxNums as FKey and are related to RxPat.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the RxPat table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleCrud.SelectOne(System.Int64)">
            <summary>Gets one Schedule object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleCrud.SelectOne(System.String)">
            <summary>Gets one Schedule object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleCrud.SelectMany(System.String)">
            <summary>Gets a list of Schedule objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Schedule},System.String)">
            <summary>Converts a list of Schedule into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleCrud.Insert(OpenDentBusiness.Schedule)">
            <summary>Inserts one Schedule into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleCrud.Insert(OpenDentBusiness.Schedule,System.Boolean)">
            <summary>Inserts one Schedule into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleCrud.InsertNoCache(OpenDentBusiness.Schedule)">
            <summary>Inserts one Schedule into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleCrud.InsertNoCache(OpenDentBusiness.Schedule,System.Boolean)">
            <summary>Inserts one Schedule into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleCrud.Update(OpenDentBusiness.Schedule)">
            <summary>Updates one Schedule in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleCrud.Update(OpenDentBusiness.Schedule,OpenDentBusiness.Schedule)">
            <summary>Updates one Schedule in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleCrud.UpdateComparison(OpenDentBusiness.Schedule,OpenDentBusiness.Schedule)">
            <summary>Returns true if Update(Schedule,Schedule) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleCrud.Delete(System.Int64)">
            <summary>Deletes one Schedule from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleOpCrud.SelectOne(System.Int64)">
            <summary>Gets one ScheduleOp object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleOpCrud.SelectOne(System.String)">
            <summary>Gets one ScheduleOp object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleOpCrud.SelectMany(System.String)">
            <summary>Gets a list of ScheduleOp objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleOpCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleOpCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ScheduleOp},System.String)">
            <summary>Converts a list of ScheduleOp into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleOpCrud.Insert(OpenDentBusiness.ScheduleOp)">
            <summary>Inserts one ScheduleOp into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleOpCrud.Insert(OpenDentBusiness.ScheduleOp,System.Boolean)">
            <summary>Inserts one ScheduleOp into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleOpCrud.InsertNoCache(OpenDentBusiness.ScheduleOp)">
            <summary>Inserts one ScheduleOp into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleOpCrud.InsertNoCache(OpenDentBusiness.ScheduleOp,System.Boolean)">
            <summary>Inserts one ScheduleOp into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleOpCrud.Update(OpenDentBusiness.ScheduleOp)">
            <summary>Updates one ScheduleOp in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleOpCrud.Update(OpenDentBusiness.ScheduleOp,OpenDentBusiness.ScheduleOp)">
            <summary>Updates one ScheduleOp in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleOpCrud.UpdateComparison(OpenDentBusiness.ScheduleOp,OpenDentBusiness.ScheduleOp)">
            <summary>Returns true if Update(ScheduleOp,ScheduleOp) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScheduleOpCrud.Delete(System.Int64)">
            <summary>Deletes one ScheduleOp from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolClassCrud.SelectOne(System.Int64)">
            <summary>Gets one SchoolClass object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolClassCrud.SelectOne(System.String)">
            <summary>Gets one SchoolClass object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolClassCrud.SelectMany(System.String)">
            <summary>Gets a list of SchoolClass objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolClassCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolClassCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.SchoolClass},System.String)">
            <summary>Converts a list of SchoolClass into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolClassCrud.Insert(OpenDentBusiness.SchoolClass)">
            <summary>Inserts one SchoolClass into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolClassCrud.Insert(OpenDentBusiness.SchoolClass,System.Boolean)">
            <summary>Inserts one SchoolClass into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolClassCrud.InsertNoCache(OpenDentBusiness.SchoolClass)">
            <summary>Inserts one SchoolClass into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolClassCrud.InsertNoCache(OpenDentBusiness.SchoolClass,System.Boolean)">
            <summary>Inserts one SchoolClass into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolClassCrud.Update(OpenDentBusiness.SchoolClass)">
            <summary>Updates one SchoolClass in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolClassCrud.Update(OpenDentBusiness.SchoolClass,OpenDentBusiness.SchoolClass)">
            <summary>Updates one SchoolClass in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolClassCrud.UpdateComparison(OpenDentBusiness.SchoolClass,OpenDentBusiness.SchoolClass)">
            <summary>Returns true if Update(SchoolClass,SchoolClass) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolClassCrud.Delete(System.Int64)">
            <summary>Deletes one SchoolClass from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolCourseCrud.SelectOne(System.Int64)">
            <summary>Gets one SchoolCourse object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolCourseCrud.SelectOne(System.String)">
            <summary>Gets one SchoolCourse object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolCourseCrud.SelectMany(System.String)">
            <summary>Gets a list of SchoolCourse objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolCourseCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolCourseCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.SchoolCourse},System.String)">
            <summary>Converts a list of SchoolCourse into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolCourseCrud.Insert(OpenDentBusiness.SchoolCourse)">
            <summary>Inserts one SchoolCourse into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolCourseCrud.Insert(OpenDentBusiness.SchoolCourse,System.Boolean)">
            <summary>Inserts one SchoolCourse into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolCourseCrud.InsertNoCache(OpenDentBusiness.SchoolCourse)">
            <summary>Inserts one SchoolCourse into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolCourseCrud.InsertNoCache(OpenDentBusiness.SchoolCourse,System.Boolean)">
            <summary>Inserts one SchoolCourse into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolCourseCrud.Update(OpenDentBusiness.SchoolCourse)">
            <summary>Updates one SchoolCourse in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolCourseCrud.Update(OpenDentBusiness.SchoolCourse,OpenDentBusiness.SchoolCourse)">
            <summary>Updates one SchoolCourse in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolCourseCrud.UpdateComparison(OpenDentBusiness.SchoolCourse,OpenDentBusiness.SchoolCourse)">
            <summary>Returns true if Update(SchoolCourse,SchoolCourse) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SchoolCourseCrud.Delete(System.Int64)">
            <summary>Deletes one SchoolCourse from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenCrud.SelectOne(System.Int64)">
            <summary>Gets one Screen object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenCrud.SelectOne(System.String)">
            <summary>Gets one Screen object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenCrud.SelectMany(System.String)">
            <summary>Gets a list of Screen objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Screen},System.String)">
            <summary>Converts a list of Screen into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenCrud.Insert(OpenDentBusiness.Screen)">
            <summary>Inserts one Screen into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenCrud.Insert(OpenDentBusiness.Screen,System.Boolean)">
            <summary>Inserts one Screen into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenCrud.InsertNoCache(OpenDentBusiness.Screen)">
            <summary>Inserts one Screen into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenCrud.InsertNoCache(OpenDentBusiness.Screen,System.Boolean)">
            <summary>Inserts one Screen into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenCrud.Update(OpenDentBusiness.Screen)">
            <summary>Updates one Screen in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenCrud.Update(OpenDentBusiness.Screen,OpenDentBusiness.Screen)">
            <summary>Updates one Screen in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenCrud.UpdateComparison(OpenDentBusiness.Screen,OpenDentBusiness.Screen)">
            <summary>Returns true if Update(Screen,Screen) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenCrud.Delete(System.Int64)">
            <summary>Deletes one Screen from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenGroupCrud.SelectOne(System.Int64)">
            <summary>Gets one ScreenGroup object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenGroupCrud.SelectOne(System.String)">
            <summary>Gets one ScreenGroup object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenGroupCrud.SelectMany(System.String)">
            <summary>Gets a list of ScreenGroup objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenGroupCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenGroupCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ScreenGroup},System.String)">
            <summary>Converts a list of ScreenGroup into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenGroupCrud.Insert(OpenDentBusiness.ScreenGroup)">
            <summary>Inserts one ScreenGroup into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenGroupCrud.Insert(OpenDentBusiness.ScreenGroup,System.Boolean)">
            <summary>Inserts one ScreenGroup into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenGroupCrud.InsertNoCache(OpenDentBusiness.ScreenGroup)">
            <summary>Inserts one ScreenGroup into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenGroupCrud.InsertNoCache(OpenDentBusiness.ScreenGroup,System.Boolean)">
            <summary>Inserts one ScreenGroup into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenGroupCrud.Update(OpenDentBusiness.ScreenGroup)">
            <summary>Updates one ScreenGroup in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenGroupCrud.Update(OpenDentBusiness.ScreenGroup,OpenDentBusiness.ScreenGroup)">
            <summary>Updates one ScreenGroup in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenGroupCrud.UpdateComparison(OpenDentBusiness.ScreenGroup,OpenDentBusiness.ScreenGroup)">
            <summary>Returns true if Update(ScreenGroup,ScreenGroup) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenGroupCrud.Delete(System.Int64)">
            <summary>Deletes one ScreenGroup from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenPatCrud.SelectOne(System.Int64)">
            <summary>Gets one ScreenPat object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenPatCrud.SelectOne(System.String)">
            <summary>Gets one ScreenPat object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenPatCrud.SelectMany(System.String)">
            <summary>Gets a list of ScreenPat objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenPatCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenPatCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ScreenPat},System.String)">
            <summary>Converts a list of ScreenPat into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenPatCrud.Insert(OpenDentBusiness.ScreenPat)">
            <summary>Inserts one ScreenPat into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenPatCrud.Insert(OpenDentBusiness.ScreenPat,System.Boolean)">
            <summary>Inserts one ScreenPat into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenPatCrud.InsertNoCache(OpenDentBusiness.ScreenPat)">
            <summary>Inserts one ScreenPat into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenPatCrud.InsertNoCache(OpenDentBusiness.ScreenPat,System.Boolean)">
            <summary>Inserts one ScreenPat into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenPatCrud.Update(OpenDentBusiness.ScreenPat)">
            <summary>Updates one ScreenPat in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenPatCrud.Update(OpenDentBusiness.ScreenPat,OpenDentBusiness.ScreenPat)">
            <summary>Updates one ScreenPat in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenPatCrud.UpdateComparison(OpenDentBusiness.ScreenPat,OpenDentBusiness.ScreenPat)">
            <summary>Returns true if Update(ScreenPat,ScreenPat) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenPatCrud.Delete(System.Int64)">
            <summary>Deletes one ScreenPat from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ScreenPatCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.ScreenPat},System.Collections.Generic.List{OpenDentBusiness.ScreenPat})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogCrud.SelectOne(System.Int64)">
            <summary>Gets one SecurityLog object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogCrud.SelectOne(System.String)">
            <summary>Gets one SecurityLog object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogCrud.SelectMany(System.String)">
            <summary>Gets a list of SecurityLog objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.SecurityLog},System.String)">
            <summary>Converts a list of SecurityLog into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogCrud.Insert(OpenDentBusiness.SecurityLog)">
            <summary>Inserts one SecurityLog into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogCrud.Insert(OpenDentBusiness.SecurityLog,System.Boolean)">
            <summary>Inserts one SecurityLog into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogCrud.InsertNoCache(OpenDentBusiness.SecurityLog)">
            <summary>Inserts one SecurityLog into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogCrud.InsertNoCache(OpenDentBusiness.SecurityLog,System.Boolean)">
            <summary>Inserts one SecurityLog into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogCrud.Update(OpenDentBusiness.SecurityLog)">
            <summary>Updates one SecurityLog in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogCrud.Update(OpenDentBusiness.SecurityLog,OpenDentBusiness.SecurityLog)">
            <summary>Updates one SecurityLog in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogCrud.UpdateComparison(OpenDentBusiness.SecurityLog,OpenDentBusiness.SecurityLog)">
            <summary>Returns true if Update(SecurityLog,SecurityLog) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogCrud.Delete(System.Int64)">
            <summary>Deletes one SecurityLog from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogHashCrud.SelectOne(System.Int64)">
            <summary>Gets one SecurityLogHash object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogHashCrud.SelectOne(System.String)">
            <summary>Gets one SecurityLogHash object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogHashCrud.SelectMany(System.String)">
            <summary>Gets a list of SecurityLogHash objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogHashCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogHashCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.SecurityLogHash},System.String)">
            <summary>Converts a list of SecurityLogHash into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogHashCrud.Insert(OpenDentBusiness.SecurityLogHash)">
            <summary>Inserts one SecurityLogHash into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogHashCrud.Insert(OpenDentBusiness.SecurityLogHash,System.Boolean)">
            <summary>Inserts one SecurityLogHash into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogHashCrud.InsertNoCache(OpenDentBusiness.SecurityLogHash)">
            <summary>Inserts one SecurityLogHash into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogHashCrud.InsertNoCache(OpenDentBusiness.SecurityLogHash,System.Boolean)">
            <summary>Inserts one SecurityLogHash into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogHashCrud.Update(OpenDentBusiness.SecurityLogHash)">
            <summary>Updates one SecurityLogHash in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogHashCrud.Update(OpenDentBusiness.SecurityLogHash,OpenDentBusiness.SecurityLogHash)">
            <summary>Updates one SecurityLogHash in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogHashCrud.UpdateComparison(OpenDentBusiness.SecurityLogHash,OpenDentBusiness.SecurityLogHash)">
            <summary>Returns true if Update(SecurityLogHash,SecurityLogHash) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SecurityLogHashCrud.Delete(System.Int64)">
            <summary>Deletes one SecurityLogHash from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetCrud.SelectOne(System.Int64)">
            <summary>Gets one Sheet object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetCrud.SelectOne(System.String)">
            <summary>Gets one Sheet object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetCrud.SelectMany(System.String)">
            <summary>Gets a list of Sheet objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Sheet},System.String)">
            <summary>Converts a list of Sheet into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetCrud.Insert(OpenDentBusiness.Sheet)">
            <summary>Inserts one Sheet into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetCrud.Insert(OpenDentBusiness.Sheet,System.Boolean)">
            <summary>Inserts one Sheet into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetCrud.InsertNoCache(OpenDentBusiness.Sheet)">
            <summary>Inserts one Sheet into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetCrud.InsertNoCache(OpenDentBusiness.Sheet,System.Boolean)">
            <summary>Inserts one Sheet into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetCrud.Update(OpenDentBusiness.Sheet)">
            <summary>Updates one Sheet in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetCrud.Update(OpenDentBusiness.Sheet,OpenDentBusiness.Sheet)">
            <summary>Updates one Sheet in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetCrud.UpdateComparison(OpenDentBusiness.Sheet,OpenDentBusiness.Sheet)">
            <summary>Returns true if Update(Sheet,Sheet) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetCrud.Delete(System.Int64)">
            <summary>Deletes one Sheet from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetDefCrud.SelectOne(System.Int64)">
            <summary>Gets one SheetDef object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetDefCrud.SelectOne(System.String)">
            <summary>Gets one SheetDef object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetDefCrud.SelectMany(System.String)">
            <summary>Gets a list of SheetDef objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetDefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetDefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.SheetDef},System.String)">
            <summary>Converts a list of SheetDef into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetDefCrud.Insert(OpenDentBusiness.SheetDef)">
            <summary>Inserts one SheetDef into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetDefCrud.Insert(OpenDentBusiness.SheetDef,System.Boolean)">
            <summary>Inserts one SheetDef into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetDefCrud.InsertNoCache(OpenDentBusiness.SheetDef)">
            <summary>Inserts one SheetDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetDefCrud.InsertNoCache(OpenDentBusiness.SheetDef,System.Boolean)">
            <summary>Inserts one SheetDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetDefCrud.Update(OpenDentBusiness.SheetDef)">
            <summary>Updates one SheetDef in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetDefCrud.Update(OpenDentBusiness.SheetDef,OpenDentBusiness.SheetDef)">
            <summary>Updates one SheetDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetDefCrud.UpdateComparison(OpenDentBusiness.SheetDef,OpenDentBusiness.SheetDef)">
            <summary>Returns true if Update(SheetDef,SheetDef) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetDefCrud.Delete(System.Int64)">
            <summary>Deletes one SheetDef from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldCrud.SelectOne(System.Int64)">
            <summary>Gets one SheetField object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldCrud.SelectOne(System.String)">
            <summary>Gets one SheetField object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldCrud.SelectMany(System.String)">
            <summary>Gets a list of SheetField objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.SheetField},System.String)">
            <summary>Converts a list of SheetField into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldCrud.Insert(OpenDentBusiness.SheetField)">
            <summary>Inserts one SheetField into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldCrud.Insert(OpenDentBusiness.SheetField,System.Boolean)">
            <summary>Inserts one SheetField into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldCrud.InsertNoCache(OpenDentBusiness.SheetField)">
            <summary>Inserts one SheetField into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldCrud.InsertNoCache(OpenDentBusiness.SheetField,System.Boolean)">
            <summary>Inserts one SheetField into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldCrud.Update(OpenDentBusiness.SheetField)">
            <summary>Updates one SheetField in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldCrud.Update(OpenDentBusiness.SheetField,OpenDentBusiness.SheetField)">
            <summary>Updates one SheetField in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldCrud.UpdateComparison(OpenDentBusiness.SheetField,OpenDentBusiness.SheetField)">
            <summary>Returns true if Update(SheetField,SheetField) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldCrud.Delete(System.Int64)">
            <summary>Deletes one SheetField from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.SheetField},System.Collections.Generic.List{OpenDentBusiness.SheetField})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldDefCrud.SelectOne(System.Int64)">
            <summary>Gets one SheetFieldDef object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldDefCrud.SelectOne(System.String)">
            <summary>Gets one SheetFieldDef object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldDefCrud.SelectMany(System.String)">
            <summary>Gets a list of SheetFieldDef objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldDefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldDefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.SheetFieldDef},System.String)">
            <summary>Converts a list of SheetFieldDef into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldDefCrud.Insert(OpenDentBusiness.SheetFieldDef)">
            <summary>Inserts one SheetFieldDef into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldDefCrud.Insert(OpenDentBusiness.SheetFieldDef,System.Boolean)">
            <summary>Inserts one SheetFieldDef into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldDefCrud.InsertNoCache(OpenDentBusiness.SheetFieldDef)">
            <summary>Inserts one SheetFieldDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldDefCrud.InsertNoCache(OpenDentBusiness.SheetFieldDef,System.Boolean)">
            <summary>Inserts one SheetFieldDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldDefCrud.Update(OpenDentBusiness.SheetFieldDef)">
            <summary>Updates one SheetFieldDef in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldDefCrud.Update(OpenDentBusiness.SheetFieldDef,OpenDentBusiness.SheetFieldDef)">
            <summary>Updates one SheetFieldDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldDefCrud.UpdateComparison(OpenDentBusiness.SheetFieldDef,OpenDentBusiness.SheetFieldDef)">
            <summary>Returns true if Update(SheetFieldDef,SheetFieldDef) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldDefCrud.Delete(System.Int64)">
            <summary>Deletes one SheetFieldDef from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SheetFieldDefCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.SheetFieldDef},System.Collections.Generic.List{OpenDentBusiness.SheetFieldDef})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigButDefCrud.SelectOne(System.Int64)">
            <summary>Gets one SigButDef object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigButDefCrud.SelectOne(System.String)">
            <summary>Gets one SigButDef object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigButDefCrud.SelectMany(System.String)">
            <summary>Gets a list of SigButDef objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigButDefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigButDefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.SigButDef},System.String)">
            <summary>Converts a list of SigButDef into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigButDefCrud.Insert(OpenDentBusiness.SigButDef)">
            <summary>Inserts one SigButDef into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigButDefCrud.Insert(OpenDentBusiness.SigButDef,System.Boolean)">
            <summary>Inserts one SigButDef into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigButDefCrud.InsertNoCache(OpenDentBusiness.SigButDef)">
            <summary>Inserts one SigButDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigButDefCrud.InsertNoCache(OpenDentBusiness.SigButDef,System.Boolean)">
            <summary>Inserts one SigButDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigButDefCrud.Update(OpenDentBusiness.SigButDef)">
            <summary>Updates one SigButDef in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigButDefCrud.Update(OpenDentBusiness.SigButDef,OpenDentBusiness.SigButDef)">
            <summary>Updates one SigButDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigButDefCrud.UpdateComparison(OpenDentBusiness.SigButDef,OpenDentBusiness.SigButDef)">
            <summary>Returns true if Update(SigButDef,SigButDef) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigButDefCrud.Delete(System.Int64)">
            <summary>Deletes one SigButDef from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigElementDefCrud.SelectOne(System.Int64)">
            <summary>Gets one SigElementDef object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigElementDefCrud.SelectOne(System.String)">
            <summary>Gets one SigElementDef object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigElementDefCrud.SelectMany(System.String)">
            <summary>Gets a list of SigElementDef objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigElementDefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigElementDefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.SigElementDef},System.String)">
            <summary>Converts a list of SigElementDef into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigElementDefCrud.Insert(OpenDentBusiness.SigElementDef)">
            <summary>Inserts one SigElementDef into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigElementDefCrud.Insert(OpenDentBusiness.SigElementDef,System.Boolean)">
            <summary>Inserts one SigElementDef into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigElementDefCrud.InsertNoCache(OpenDentBusiness.SigElementDef)">
            <summary>Inserts one SigElementDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigElementDefCrud.InsertNoCache(OpenDentBusiness.SigElementDef,System.Boolean)">
            <summary>Inserts one SigElementDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigElementDefCrud.Update(OpenDentBusiness.SigElementDef)">
            <summary>Updates one SigElementDef in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigElementDefCrud.Update(OpenDentBusiness.SigElementDef,OpenDentBusiness.SigElementDef)">
            <summary>Updates one SigElementDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigElementDefCrud.UpdateComparison(OpenDentBusiness.SigElementDef,OpenDentBusiness.SigElementDef)">
            <summary>Returns true if Update(SigElementDef,SigElementDef) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigElementDefCrud.Delete(System.Int64)">
            <summary>Deletes one SigElementDef from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigMessageCrud.SelectOne(System.Int64)">
            <summary>Gets one SigMessage object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigMessageCrud.SelectOne(System.String)">
            <summary>Gets one SigMessage object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigMessageCrud.SelectMany(System.String)">
            <summary>Gets a list of SigMessage objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigMessageCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigMessageCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.SigMessage},System.String)">
            <summary>Converts a list of SigMessage into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigMessageCrud.Insert(OpenDentBusiness.SigMessage)">
            <summary>Inserts one SigMessage into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigMessageCrud.Insert(OpenDentBusiness.SigMessage,System.Boolean)">
            <summary>Inserts one SigMessage into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigMessageCrud.InsertNoCache(OpenDentBusiness.SigMessage)">
            <summary>Inserts one SigMessage into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigMessageCrud.InsertNoCache(OpenDentBusiness.SigMessage,System.Boolean)">
            <summary>Inserts one SigMessage into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigMessageCrud.Update(OpenDentBusiness.SigMessage)">
            <summary>Updates one SigMessage in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigMessageCrud.Update(OpenDentBusiness.SigMessage,OpenDentBusiness.SigMessage)">
            <summary>Updates one SigMessage in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigMessageCrud.UpdateComparison(OpenDentBusiness.SigMessage,OpenDentBusiness.SigMessage)">
            <summary>Returns true if Update(SigMessage,SigMessage) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SigMessageCrud.Delete(System.Int64)">
            <summary>Deletes one SigMessage from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SignalodCrud.SelectOne(System.Int64)">
            <summary>Gets one Signalod object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SignalodCrud.SelectOne(System.String)">
            <summary>Gets one Signalod object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SignalodCrud.SelectMany(System.String)">
            <summary>Gets a list of Signalod objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SignalodCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SignalodCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Signalod},System.String)">
            <summary>Converts a list of Signalod into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SignalodCrud.Insert(OpenDentBusiness.Signalod)">
            <summary>Inserts one Signalod into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SignalodCrud.Insert(OpenDentBusiness.Signalod,System.Boolean)">
            <summary>Inserts one Signalod into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SignalodCrud.InsertNoCache(OpenDentBusiness.Signalod)">
            <summary>Inserts one Signalod into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SignalodCrud.InsertNoCache(OpenDentBusiness.Signalod,System.Boolean)">
            <summary>Inserts one Signalod into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SignalodCrud.Update(OpenDentBusiness.Signalod)">
            <summary>Updates one Signalod in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SignalodCrud.Update(OpenDentBusiness.Signalod,OpenDentBusiness.Signalod)">
            <summary>Updates one Signalod in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SignalodCrud.UpdateComparison(OpenDentBusiness.Signalod,OpenDentBusiness.Signalod)">
            <summary>Returns true if Update(Signalod,Signalod) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SignalodCrud.Delete(System.Int64)">
            <summary>Deletes one Signalod from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SiteCrud.SelectOne(System.Int64)">
            <summary>Gets one Site object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SiteCrud.SelectOne(System.String)">
            <summary>Gets one Site object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SiteCrud.SelectMany(System.String)">
            <summary>Gets a list of Site objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SiteCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SiteCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Site},System.String)">
            <summary>Converts a list of Site into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SiteCrud.Insert(OpenDentBusiness.Site)">
            <summary>Inserts one Site into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SiteCrud.Insert(OpenDentBusiness.Site,System.Boolean)">
            <summary>Inserts one Site into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SiteCrud.InsertNoCache(OpenDentBusiness.Site)">
            <summary>Inserts one Site into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SiteCrud.InsertNoCache(OpenDentBusiness.Site,System.Boolean)">
            <summary>Inserts one Site into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SiteCrud.Update(OpenDentBusiness.Site)">
            <summary>Updates one Site in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SiteCrud.Update(OpenDentBusiness.Site,OpenDentBusiness.Site)">
            <summary>Updates one Site in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SiteCrud.UpdateComparison(OpenDentBusiness.Site,OpenDentBusiness.Site)">
            <summary>Returns true if Update(Site,Site) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SiteCrud.Delete(System.Int64)">
            <summary>Deletes one Site from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StateAbbrCrud.SelectOne(System.Int64)">
            <summary>Gets one StateAbbr object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StateAbbrCrud.SelectOne(System.String)">
            <summary>Gets one StateAbbr object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StateAbbrCrud.SelectMany(System.String)">
            <summary>Gets a list of StateAbbr objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StateAbbrCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StateAbbrCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.StateAbbr},System.String)">
            <summary>Converts a list of StateAbbr into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StateAbbrCrud.Insert(OpenDentBusiness.StateAbbr)">
            <summary>Inserts one StateAbbr into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StateAbbrCrud.Insert(OpenDentBusiness.StateAbbr,System.Boolean)">
            <summary>Inserts one StateAbbr into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StateAbbrCrud.InsertNoCache(OpenDentBusiness.StateAbbr)">
            <summary>Inserts one StateAbbr into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StateAbbrCrud.InsertNoCache(OpenDentBusiness.StateAbbr,System.Boolean)">
            <summary>Inserts one StateAbbr into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StateAbbrCrud.Update(OpenDentBusiness.StateAbbr)">
            <summary>Updates one StateAbbr in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StateAbbrCrud.Update(OpenDentBusiness.StateAbbr,OpenDentBusiness.StateAbbr)">
            <summary>Updates one StateAbbr in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StateAbbrCrud.UpdateComparison(OpenDentBusiness.StateAbbr,OpenDentBusiness.StateAbbr)">
            <summary>Returns true if Update(StateAbbr,StateAbbr) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StateAbbrCrud.Delete(System.Int64)">
            <summary>Deletes one StateAbbr from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtAdjAttachCrud.SelectOne(System.Int64)">
            <summary>Gets one StmtAdjAttach object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtAdjAttachCrud.SelectOne(System.String)">
            <summary>Gets one StmtAdjAttach object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtAdjAttachCrud.SelectMany(System.String)">
            <summary>Gets a list of StmtAdjAttach objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtAdjAttachCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtAdjAttachCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.StmtAdjAttach},System.String)">
            <summary>Converts a list of StmtAdjAttach into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtAdjAttachCrud.Insert(OpenDentBusiness.StmtAdjAttach)">
            <summary>Inserts one StmtAdjAttach into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtAdjAttachCrud.Insert(OpenDentBusiness.StmtAdjAttach,System.Boolean)">
            <summary>Inserts one StmtAdjAttach into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtAdjAttachCrud.InsertNoCache(OpenDentBusiness.StmtAdjAttach)">
            <summary>Inserts one StmtAdjAttach into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtAdjAttachCrud.InsertNoCache(OpenDentBusiness.StmtAdjAttach,System.Boolean)">
            <summary>Inserts one StmtAdjAttach into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtAdjAttachCrud.Update(OpenDentBusiness.StmtAdjAttach)">
            <summary>Updates one StmtAdjAttach in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtAdjAttachCrud.Update(OpenDentBusiness.StmtAdjAttach,OpenDentBusiness.StmtAdjAttach)">
            <summary>Updates one StmtAdjAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtAdjAttachCrud.UpdateComparison(OpenDentBusiness.StmtAdjAttach,OpenDentBusiness.StmtAdjAttach)">
            <summary>Returns true if Update(StmtAdjAttach,StmtAdjAttach) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtAdjAttachCrud.Delete(System.Int64)">
            <summary>Deletes one StmtAdjAttach from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtPaySplitAttachCrud.SelectOne(System.Int64)">
            <summary>Gets one StmtPaySplitAttach object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtPaySplitAttachCrud.SelectOne(System.String)">
            <summary>Gets one StmtPaySplitAttach object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtPaySplitAttachCrud.SelectMany(System.String)">
            <summary>Gets a list of StmtPaySplitAttach objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtPaySplitAttachCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtPaySplitAttachCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.StmtPaySplitAttach},System.String)">
            <summary>Converts a list of StmtPaySplitAttach into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtPaySplitAttachCrud.Insert(OpenDentBusiness.StmtPaySplitAttach)">
            <summary>Inserts one StmtPaySplitAttach into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtPaySplitAttachCrud.Insert(OpenDentBusiness.StmtPaySplitAttach,System.Boolean)">
            <summary>Inserts one StmtPaySplitAttach into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtPaySplitAttachCrud.InsertNoCache(OpenDentBusiness.StmtPaySplitAttach)">
            <summary>Inserts one StmtPaySplitAttach into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtPaySplitAttachCrud.InsertNoCache(OpenDentBusiness.StmtPaySplitAttach,System.Boolean)">
            <summary>Inserts one StmtPaySplitAttach into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtPaySplitAttachCrud.Update(OpenDentBusiness.StmtPaySplitAttach)">
            <summary>Updates one StmtPaySplitAttach in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtPaySplitAttachCrud.Update(OpenDentBusiness.StmtPaySplitAttach,OpenDentBusiness.StmtPaySplitAttach)">
            <summary>Updates one StmtPaySplitAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtPaySplitAttachCrud.UpdateComparison(OpenDentBusiness.StmtPaySplitAttach,OpenDentBusiness.StmtPaySplitAttach)">
            <summary>Returns true if Update(StmtPaySplitAttach,StmtPaySplitAttach) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtPaySplitAttachCrud.Delete(System.Int64)">
            <summary>Deletes one StmtPaySplitAttach from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtProcAttachCrud.SelectOne(System.Int64)">
            <summary>Gets one StmtProcAttach object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtProcAttachCrud.SelectOne(System.String)">
            <summary>Gets one StmtProcAttach object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtProcAttachCrud.SelectMany(System.String)">
            <summary>Gets a list of StmtProcAttach objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtProcAttachCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtProcAttachCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.StmtProcAttach},System.String)">
            <summary>Converts a list of StmtProcAttach into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtProcAttachCrud.Insert(OpenDentBusiness.StmtProcAttach)">
            <summary>Inserts one StmtProcAttach into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtProcAttachCrud.Insert(OpenDentBusiness.StmtProcAttach,System.Boolean)">
            <summary>Inserts one StmtProcAttach into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtProcAttachCrud.InsertNoCache(OpenDentBusiness.StmtProcAttach)">
            <summary>Inserts one StmtProcAttach into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtProcAttachCrud.InsertNoCache(OpenDentBusiness.StmtProcAttach,System.Boolean)">
            <summary>Inserts one StmtProcAttach into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtProcAttachCrud.Update(OpenDentBusiness.StmtProcAttach)">
            <summary>Updates one StmtProcAttach in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtProcAttachCrud.Update(OpenDentBusiness.StmtProcAttach,OpenDentBusiness.StmtProcAttach)">
            <summary>Updates one StmtProcAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtProcAttachCrud.UpdateComparison(OpenDentBusiness.StmtProcAttach,OpenDentBusiness.StmtProcAttach)">
            <summary>Returns true if Update(StmtProcAttach,StmtProcAttach) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StmtProcAttachCrud.Delete(System.Int64)">
            <summary>Deletes one StmtProcAttach from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanAttachCrud.SelectOne(System.Int64)">
            <summary>Gets one TreatPlanAttach object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanAttachCrud.SelectOne(System.String)">
            <summary>Gets one TreatPlanAttach object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanAttachCrud.SelectMany(System.String)">
            <summary>Gets a list of TreatPlanAttach objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanAttachCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanAttachCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.TreatPlanAttach},System.String)">
            <summary>Converts a list of TreatPlanAttach into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanAttachCrud.Insert(OpenDentBusiness.TreatPlanAttach)">
            <summary>Inserts one TreatPlanAttach into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanAttachCrud.Insert(OpenDentBusiness.TreatPlanAttach,System.Boolean)">
            <summary>Inserts one TreatPlanAttach into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanAttachCrud.InsertNoCache(OpenDentBusiness.TreatPlanAttach)">
            <summary>Inserts one TreatPlanAttach into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanAttachCrud.InsertNoCache(OpenDentBusiness.TreatPlanAttach,System.Boolean)">
            <summary>Inserts one TreatPlanAttach into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanAttachCrud.Update(OpenDentBusiness.TreatPlanAttach)">
            <summary>Updates one TreatPlanAttach in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanAttachCrud.Update(OpenDentBusiness.TreatPlanAttach,OpenDentBusiness.TreatPlanAttach)">
            <summary>Updates one TreatPlanAttach in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanAttachCrud.UpdateComparison(OpenDentBusiness.TreatPlanAttach,OpenDentBusiness.TreatPlanAttach)">
            <summary>Returns true if Update(TreatPlanAttach,TreatPlanAttach) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanAttachCrud.Delete(System.Int64)">
            <summary>Deletes one TreatPlanAttach from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanAttachCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.TreatPlanAttach},System.Collections.Generic.List{OpenDentBusiness.TreatPlanAttach})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UpdateHistoryCrud.SelectOne(System.Int64)">
            <summary>Gets one UpdateHistory object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UpdateHistoryCrud.SelectOne(System.String)">
            <summary>Gets one UpdateHistory object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UpdateHistoryCrud.SelectMany(System.String)">
            <summary>Gets a list of UpdateHistory objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UpdateHistoryCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UpdateHistoryCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.UpdateHistory},System.String)">
            <summary>Converts a list of UpdateHistory into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UpdateHistoryCrud.Insert(OpenDentBusiness.UpdateHistory)">
            <summary>Inserts one UpdateHistory into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UpdateHistoryCrud.Insert(OpenDentBusiness.UpdateHistory,System.Boolean)">
            <summary>Inserts one UpdateHistory into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UpdateHistoryCrud.InsertNoCache(OpenDentBusiness.UpdateHistory)">
            <summary>Inserts one UpdateHistory into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UpdateHistoryCrud.InsertNoCache(OpenDentBusiness.UpdateHistory,System.Boolean)">
            <summary>Inserts one UpdateHistory into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UpdateHistoryCrud.Update(OpenDentBusiness.UpdateHistory)">
            <summary>Updates one UpdateHistory in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UpdateHistoryCrud.Update(OpenDentBusiness.UpdateHistory,OpenDentBusiness.UpdateHistory)">
            <summary>Updates one UpdateHistory in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UpdateHistoryCrud.UpdateComparison(OpenDentBusiness.UpdateHistory,OpenDentBusiness.UpdateHistory)">
            <summary>Returns true if Update(UpdateHistory,UpdateHistory) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UpdateHistoryCrud.Delete(System.Int64)">
            <summary>Deletes one UpdateHistory from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserClinicCrud.SelectOne(System.Int64)">
            <summary>Gets one UserClinic object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserClinicCrud.SelectOne(System.String)">
            <summary>Gets one UserClinic object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserClinicCrud.SelectMany(System.String)">
            <summary>Gets a list of UserClinic objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserClinicCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserClinicCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.UserClinic},System.String)">
            <summary>Converts a list of UserClinic into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserClinicCrud.Insert(OpenDentBusiness.UserClinic)">
            <summary>Inserts one UserClinic into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserClinicCrud.Insert(OpenDentBusiness.UserClinic,System.Boolean)">
            <summary>Inserts one UserClinic into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserClinicCrud.InsertNoCache(OpenDentBusiness.UserClinic)">
            <summary>Inserts one UserClinic into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserClinicCrud.InsertNoCache(OpenDentBusiness.UserClinic,System.Boolean)">
            <summary>Inserts one UserClinic into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserClinicCrud.Update(OpenDentBusiness.UserClinic)">
            <summary>Updates one UserClinic in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserClinicCrud.Update(OpenDentBusiness.UserClinic,OpenDentBusiness.UserClinic)">
            <summary>Updates one UserClinic in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserClinicCrud.UpdateComparison(OpenDentBusiness.UserClinic,OpenDentBusiness.UserClinic)">
            <summary>Returns true if Update(UserClinic,UserClinic) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserClinicCrud.Delete(System.Int64)">
            <summary>Deletes one UserClinic from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserClinicCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.UserClinic},System.Collections.Generic.List{OpenDentBusiness.UserClinic})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserOdPrefCrud.SelectOne(System.Int64)">
            <summary>Gets one UserOdPref object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserOdPrefCrud.SelectOne(System.String)">
            <summary>Gets one UserOdPref object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserOdPrefCrud.SelectMany(System.String)">
            <summary>Gets a list of UserOdPref objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserOdPrefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserOdPrefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.UserOdPref},System.String)">
            <summary>Converts a list of UserOdPref into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserOdPrefCrud.Insert(OpenDentBusiness.UserOdPref)">
            <summary>Inserts one UserOdPref into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserOdPrefCrud.Insert(OpenDentBusiness.UserOdPref,System.Boolean)">
            <summary>Inserts one UserOdPref into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserOdPrefCrud.InsertNoCache(OpenDentBusiness.UserOdPref)">
            <summary>Inserts one UserOdPref into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserOdPrefCrud.InsertNoCache(OpenDentBusiness.UserOdPref,System.Boolean)">
            <summary>Inserts one UserOdPref into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserOdPrefCrud.Update(OpenDentBusiness.UserOdPref)">
            <summary>Updates one UserOdPref in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserOdPrefCrud.Update(OpenDentBusiness.UserOdPref,OpenDentBusiness.UserOdPref)">
            <summary>Updates one UserOdPref in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserOdPrefCrud.UpdateComparison(OpenDentBusiness.UserOdPref,OpenDentBusiness.UserOdPref)">
            <summary>Returns true if Update(UserOdPref,UserOdPref) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserOdPrefCrud.Delete(System.Int64)">
            <summary>Deletes one UserOdPref from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserWebCrud.SelectOne(System.Int64)">
            <summary>Gets one UserWeb object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserWebCrud.SelectOne(System.String)">
            <summary>Gets one UserWeb object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserWebCrud.SelectMany(System.String)">
            <summary>Gets a list of UserWeb objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserWebCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserWebCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.UserWeb},System.String)">
            <summary>Converts a list of UserWeb into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserWebCrud.Insert(OpenDentBusiness.UserWeb)">
            <summary>Inserts one UserWeb into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserWebCrud.Insert(OpenDentBusiness.UserWeb,System.Boolean)">
            <summary>Inserts one UserWeb into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserWebCrud.InsertNoCache(OpenDentBusiness.UserWeb)">
            <summary>Inserts one UserWeb into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserWebCrud.InsertNoCache(OpenDentBusiness.UserWeb,System.Boolean)">
            <summary>Inserts one UserWeb into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserWebCrud.Update(OpenDentBusiness.UserWeb)">
            <summary>Updates one UserWeb in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserWebCrud.Update(OpenDentBusiness.UserWeb,OpenDentBusiness.UserWeb)">
            <summary>Updates one UserWeb in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserWebCrud.UpdateComparison(OpenDentBusiness.UserWeb,OpenDentBusiness.UserWeb)">
            <summary>Returns true if Update(UserWeb,UserWeb) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserWebCrud.Delete(System.Int64)">
            <summary>Deletes one UserWeb from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XWebResponseCrud.SelectOne(System.Int64)">
            <summary>Gets one XWebResponse object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XWebResponseCrud.SelectOne(System.String)">
            <summary>Gets one XWebResponse object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XWebResponseCrud.SelectMany(System.String)">
            <summary>Gets a list of XWebResponse objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XWebResponseCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XWebResponseCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.XWebResponse},System.String)">
            <summary>Converts a list of XWebResponse into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XWebResponseCrud.Insert(OpenDentBusiness.XWebResponse)">
            <summary>Inserts one XWebResponse into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XWebResponseCrud.Insert(OpenDentBusiness.XWebResponse,System.Boolean)">
            <summary>Inserts one XWebResponse into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XWebResponseCrud.InsertNoCache(OpenDentBusiness.XWebResponse)">
            <summary>Inserts one XWebResponse into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XWebResponseCrud.InsertNoCache(OpenDentBusiness.XWebResponse,System.Boolean)">
            <summary>Inserts one XWebResponse into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XWebResponseCrud.Update(OpenDentBusiness.XWebResponse)">
            <summary>Updates one XWebResponse in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XWebResponseCrud.Update(OpenDentBusiness.XWebResponse,OpenDentBusiness.XWebResponse)">
            <summary>Updates one XWebResponse in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XWebResponseCrud.UpdateComparison(OpenDentBusiness.XWebResponse,OpenDentBusiness.XWebResponse)">
            <summary>Returns true if Update(XWebResponse,XWebResponse) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XWebResponseCrud.Delete(System.Int64)">
            <summary>Deletes one XWebResponse from the database.</summary>
        </member>
        <member name="T:OpenDentBusiness.Crud.BugCrud">
            <summary>Does not support Oracle. Uses customer connection strings. NOT AUTO GENERATED.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BugCrud.SelectOne(System.Int64)">
            <summary>Gets one Bug object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BugCrud.SelectOne(System.String)">
            <summary>Gets one Bug object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BugCrud.SelectMany(System.String)">
            <summary>Gets a list of Bug objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BugCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BugCrud.Insert(OpenDentBusiness.Bug)">
            <summary>Inserts one Bug into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BugCrud.Insert(OpenDentBusiness.Bug,System.Boolean)">
            <summary>Inserts one Bug into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BugCrud.InsertNoCache(OpenDentBusiness.Bug)">
            <summary>Inserts one Bug into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BugCrud.InsertNoCache(OpenDentBusiness.Bug,System.Boolean)">
            <summary>Inserts one Bug into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BugCrud.Update(OpenDentBusiness.Bug)">
            <summary>Updates one Bug in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BugCrud.Update(OpenDentBusiness.Bug,OpenDentBusiness.Bug)">
            <summary>Updates one Bug in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.BugCrud.Delete(System.Int64)">
            <summary>Deletes one Bug from the database.</summary>
        </member>
        <member name="T:OpenDentBusiness.Crud.BugCrud.BugDb">
            <summary>Handles DB connections for the Bugs database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsBillingCrud.SelectOne(System.Int64)">
            <summary>Gets one SmsBilling object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsBillingCrud.SelectOne(System.String)">
            <summary>Gets one SmsBilling object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsBillingCrud.SelectMany(System.String)">
            <summary>Gets a list of SmsBilling objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsBillingCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsBillingCrud.Insert(OpenDentBusiness.SmsBilling)">
            <summary>Inserts one SmsBilling into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsBillingCrud.Insert(OpenDentBusiness.SmsBilling,System.Boolean)">
            <summary>Inserts one SmsBilling into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsBillingCrud.InsertNoCache(OpenDentBusiness.SmsBilling)">
            <summary>Inserts one SmsBilling into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsBillingCrud.InsertNoCache(OpenDentBusiness.SmsBilling,System.Boolean)">
            <summary>Inserts one SmsBilling into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsBillingCrud.Update(OpenDentBusiness.SmsBilling)">
            <summary>Updates one SmsBilling in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsBillingCrud.Update(OpenDentBusiness.SmsBilling,OpenDentBusiness.SmsBilling)">
            <summary>Updates one SmsBilling in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsBillingCrud.Delete(System.Int64)">
            <summary>Deletes one SmsBilling from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsFromMobileCrud.SelectOne(System.Int64)">
            <summary>Gets one SmsFromMobile object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsFromMobileCrud.SelectOne(System.String)">
            <summary>Gets one SmsFromMobile object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsFromMobileCrud.SelectMany(System.String)">
            <summary>Gets a list of SmsFromMobile objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsFromMobileCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsFromMobileCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.SmsFromMobile},System.String)">
            <summary>Converts a list of SmsFromMobile into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsFromMobileCrud.Insert(OpenDentBusiness.SmsFromMobile)">
            <summary>Inserts one SmsFromMobile into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsFromMobileCrud.Insert(OpenDentBusiness.SmsFromMobile,System.Boolean)">
            <summary>Inserts one SmsFromMobile into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsFromMobileCrud.InsertNoCache(OpenDentBusiness.SmsFromMobile)">
            <summary>Inserts one SmsFromMobile into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsFromMobileCrud.InsertNoCache(OpenDentBusiness.SmsFromMobile,System.Boolean)">
            <summary>Inserts one SmsFromMobile into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsFromMobileCrud.Update(OpenDentBusiness.SmsFromMobile)">
            <summary>Updates one SmsFromMobile in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsFromMobileCrud.Update(OpenDentBusiness.SmsFromMobile,OpenDentBusiness.SmsFromMobile)">
            <summary>Updates one SmsFromMobile in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsFromMobileCrud.UpdateComparison(OpenDentBusiness.SmsFromMobile,OpenDentBusiness.SmsFromMobile)">
            <summary>Returns true if Update(SmsFromMobile,SmsFromMobile) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsFromMobileCrud.Delete(System.Int64)">
            <summary>Deletes one SmsFromMobile from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsToMobileCrud.SelectOne(System.Int64)">
            <summary>Gets one SmsToMobile object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsToMobileCrud.SelectOne(System.String)">
            <summary>Gets one SmsToMobile object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsToMobileCrud.SelectMany(System.String)">
            <summary>Gets a list of SmsToMobile objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsToMobileCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsToMobileCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.SmsToMobile},System.String)">
            <summary>Converts a list of SmsToMobile into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsToMobileCrud.Insert(OpenDentBusiness.SmsToMobile)">
            <summary>Inserts one SmsToMobile into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsToMobileCrud.Insert(OpenDentBusiness.SmsToMobile,System.Boolean)">
            <summary>Inserts one SmsToMobile into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsToMobileCrud.InsertNoCache(OpenDentBusiness.SmsToMobile)">
            <summary>Inserts one SmsToMobile into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsToMobileCrud.InsertNoCache(OpenDentBusiness.SmsToMobile,System.Boolean)">
            <summary>Inserts one SmsToMobile into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsToMobileCrud.Update(OpenDentBusiness.SmsToMobile)">
            <summary>Updates one SmsToMobile in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsToMobileCrud.Update(OpenDentBusiness.SmsToMobile,OpenDentBusiness.SmsToMobile)">
            <summary>Updates one SmsToMobile in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsToMobileCrud.UpdateComparison(OpenDentBusiness.SmsToMobile,OpenDentBusiness.SmsToMobile)">
            <summary>Returns true if Update(SmsToMobile,SmsToMobile) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsToMobileCrud.Delete(System.Int64)">
            <summary>Deletes one SmsToMobile from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsPhoneCrud.SelectOne(System.Int64)">
            <summary>Gets one SmsPhone object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsPhoneCrud.SelectOne(System.String)">
            <summary>Gets one SmsPhone object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsPhoneCrud.SelectMany(System.String)">
            <summary>Gets a list of SmsPhone objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsPhoneCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsPhoneCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.SmsPhone},System.String)">
            <summary>Converts a list of SmsPhone into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsPhoneCrud.Insert(OpenDentBusiness.SmsPhone)">
            <summary>Inserts one SmsPhone into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsPhoneCrud.Insert(OpenDentBusiness.SmsPhone,System.Boolean)">
            <summary>Inserts one SmsPhone into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsPhoneCrud.InsertNoCache(OpenDentBusiness.SmsPhone)">
            <summary>Inserts one SmsPhone into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsPhoneCrud.InsertNoCache(OpenDentBusiness.SmsPhone,System.Boolean)">
            <summary>Inserts one SmsPhone into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsPhoneCrud.Update(OpenDentBusiness.SmsPhone)">
            <summary>Updates one SmsPhone in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsPhoneCrud.Update(OpenDentBusiness.SmsPhone,OpenDentBusiness.SmsPhone)">
            <summary>Updates one SmsPhone in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsPhoneCrud.UpdateComparison(OpenDentBusiness.SmsPhone,OpenDentBusiness.SmsPhone)">
            <summary>Returns true if Update(SmsPhone,SmsPhone) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsPhoneCrud.Delete(System.Int64)">
            <summary>Deletes one SmsPhone from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SmsPhoneCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.SmsPhone},System.Collections.Generic.List{OpenDentBusiness.SmsPhone})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SnomedCrud.SelectOne(System.Int64)">
            <summary>Gets one Snomed object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SnomedCrud.SelectOne(System.String)">
            <summary>Gets one Snomed object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SnomedCrud.SelectMany(System.String)">
            <summary>Gets a list of Snomed objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SnomedCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SnomedCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Snomed},System.String)">
            <summary>Converts a list of Snomed into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SnomedCrud.Insert(OpenDentBusiness.Snomed)">
            <summary>Inserts one Snomed into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SnomedCrud.Insert(OpenDentBusiness.Snomed,System.Boolean)">
            <summary>Inserts one Snomed into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SnomedCrud.InsertNoCache(OpenDentBusiness.Snomed)">
            <summary>Inserts one Snomed into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SnomedCrud.InsertNoCache(OpenDentBusiness.Snomed,System.Boolean)">
            <summary>Inserts one Snomed into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SnomedCrud.Update(OpenDentBusiness.Snomed)">
            <summary>Updates one Snomed in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SnomedCrud.Update(OpenDentBusiness.Snomed,OpenDentBusiness.Snomed)">
            <summary>Updates one Snomed in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SnomedCrud.UpdateComparison(OpenDentBusiness.Snomed,OpenDentBusiness.Snomed)">
            <summary>Returns true if Update(Snomed,Snomed) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SnomedCrud.Delete(System.Int64)">
            <summary>Deletes one Snomed from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SopCrud.SelectOne(System.Int64)">
            <summary>Gets one Sop object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SopCrud.SelectOne(System.String)">
            <summary>Gets one Sop object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SopCrud.SelectMany(System.String)">
            <summary>Gets a list of Sop objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SopCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SopCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Sop},System.String)">
            <summary>Converts a list of Sop into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SopCrud.Insert(OpenDentBusiness.Sop)">
            <summary>Inserts one Sop into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SopCrud.Insert(OpenDentBusiness.Sop,System.Boolean)">
            <summary>Inserts one Sop into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SopCrud.InsertNoCache(OpenDentBusiness.Sop)">
            <summary>Inserts one Sop into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SopCrud.InsertNoCache(OpenDentBusiness.Sop,System.Boolean)">
            <summary>Inserts one Sop into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SopCrud.Update(OpenDentBusiness.Sop)">
            <summary>Updates one Sop in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SopCrud.Update(OpenDentBusiness.Sop,OpenDentBusiness.Sop)">
            <summary>Updates one Sop in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SopCrud.UpdateComparison(OpenDentBusiness.Sop,OpenDentBusiness.Sop)">
            <summary>Returns true if Update(Sop,Sop) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SopCrud.Delete(System.Int64)">
            <summary>Deletes one Sop from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StatementCrud.SelectOne(System.Int64)">
            <summary>Gets one Statement object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StatementCrud.SelectOne(System.String)">
            <summary>Gets one Statement object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StatementCrud.SelectMany(System.String)">
            <summary>Gets a list of Statement objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StatementCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StatementCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Statement},System.String)">
            <summary>Converts a list of Statement into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StatementCrud.Insert(OpenDentBusiness.Statement)">
            <summary>Inserts one Statement into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StatementCrud.Insert(OpenDentBusiness.Statement,System.Boolean)">
            <summary>Inserts one Statement into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StatementCrud.InsertNoCache(OpenDentBusiness.Statement)">
            <summary>Inserts one Statement into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StatementCrud.InsertNoCache(OpenDentBusiness.Statement,System.Boolean)">
            <summary>Inserts one Statement into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StatementCrud.Update(OpenDentBusiness.Statement)">
            <summary>Updates one Statement in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StatementCrud.Update(OpenDentBusiness.Statement,OpenDentBusiness.Statement)">
            <summary>Updates one Statement in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StatementCrud.UpdateComparison(OpenDentBusiness.Statement,OpenDentBusiness.Statement)">
            <summary>Returns true if Update(Statement,Statement) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.StatementCrud.Delete(System.Int64)">
            <summary>Deletes one Statement from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplierCrud.SelectOne(System.Int64)">
            <summary>Gets one Supplier object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplierCrud.SelectOne(System.String)">
            <summary>Gets one Supplier object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplierCrud.SelectMany(System.String)">
            <summary>Gets a list of Supplier objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplierCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplierCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Supplier},System.String)">
            <summary>Converts a list of Supplier into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplierCrud.Insert(OpenDentBusiness.Supplier)">
            <summary>Inserts one Supplier into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplierCrud.Insert(OpenDentBusiness.Supplier,System.Boolean)">
            <summary>Inserts one Supplier into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplierCrud.InsertNoCache(OpenDentBusiness.Supplier)">
            <summary>Inserts one Supplier into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplierCrud.InsertNoCache(OpenDentBusiness.Supplier,System.Boolean)">
            <summary>Inserts one Supplier into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplierCrud.Update(OpenDentBusiness.Supplier)">
            <summary>Updates one Supplier in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplierCrud.Update(OpenDentBusiness.Supplier,OpenDentBusiness.Supplier)">
            <summary>Updates one Supplier in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplierCrud.UpdateComparison(OpenDentBusiness.Supplier,OpenDentBusiness.Supplier)">
            <summary>Returns true if Update(Supplier,Supplier) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplierCrud.Delete(System.Int64)">
            <summary>Deletes one Supplier from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyCrud.SelectOne(System.Int64)">
            <summary>Gets one Supply object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyCrud.SelectOne(System.String)">
            <summary>Gets one Supply object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyCrud.SelectMany(System.String)">
            <summary>Gets a list of Supply objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Supply},System.String)">
            <summary>Converts a list of Supply into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyCrud.Insert(OpenDentBusiness.Supply)">
            <summary>Inserts one Supply into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyCrud.Insert(OpenDentBusiness.Supply,System.Boolean)">
            <summary>Inserts one Supply into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyCrud.InsertNoCache(OpenDentBusiness.Supply)">
            <summary>Inserts one Supply into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyCrud.InsertNoCache(OpenDentBusiness.Supply,System.Boolean)">
            <summary>Inserts one Supply into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyCrud.Update(OpenDentBusiness.Supply)">
            <summary>Updates one Supply in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyCrud.Update(OpenDentBusiness.Supply,OpenDentBusiness.Supply)">
            <summary>Updates one Supply in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyCrud.UpdateComparison(OpenDentBusiness.Supply,OpenDentBusiness.Supply)">
            <summary>Returns true if Update(Supply,Supply) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyCrud.Delete(System.Int64)">
            <summary>Deletes one Supply from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyCrud.Sync(System.Collections.Generic.List{OpenDentBusiness.Supply},System.Collections.Generic.List{OpenDentBusiness.Supply})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyNeededCrud.SelectOne(System.Int64)">
            <summary>Gets one SupplyNeeded object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyNeededCrud.SelectOne(System.String)">
            <summary>Gets one SupplyNeeded object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyNeededCrud.SelectMany(System.String)">
            <summary>Gets a list of SupplyNeeded objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyNeededCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyNeededCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.SupplyNeeded},System.String)">
            <summary>Converts a list of SupplyNeeded into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyNeededCrud.Insert(OpenDentBusiness.SupplyNeeded)">
            <summary>Inserts one SupplyNeeded into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyNeededCrud.Insert(OpenDentBusiness.SupplyNeeded,System.Boolean)">
            <summary>Inserts one SupplyNeeded into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyNeededCrud.InsertNoCache(OpenDentBusiness.SupplyNeeded)">
            <summary>Inserts one SupplyNeeded into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyNeededCrud.InsertNoCache(OpenDentBusiness.SupplyNeeded,System.Boolean)">
            <summary>Inserts one SupplyNeeded into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyNeededCrud.Update(OpenDentBusiness.SupplyNeeded)">
            <summary>Updates one SupplyNeeded in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyNeededCrud.Update(OpenDentBusiness.SupplyNeeded,OpenDentBusiness.SupplyNeeded)">
            <summary>Updates one SupplyNeeded in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyNeededCrud.UpdateComparison(OpenDentBusiness.SupplyNeeded,OpenDentBusiness.SupplyNeeded)">
            <summary>Returns true if Update(SupplyNeeded,SupplyNeeded) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyNeededCrud.Delete(System.Int64)">
            <summary>Deletes one SupplyNeeded from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderCrud.SelectOne(System.Int64)">
            <summary>Gets one SupplyOrder object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderCrud.SelectOne(System.String)">
            <summary>Gets one SupplyOrder object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderCrud.SelectMany(System.String)">
            <summary>Gets a list of SupplyOrder objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.SupplyOrder},System.String)">
            <summary>Converts a list of SupplyOrder into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderCrud.Insert(OpenDentBusiness.SupplyOrder)">
            <summary>Inserts one SupplyOrder into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderCrud.Insert(OpenDentBusiness.SupplyOrder,System.Boolean)">
            <summary>Inserts one SupplyOrder into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderCrud.InsertNoCache(OpenDentBusiness.SupplyOrder)">
            <summary>Inserts one SupplyOrder into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderCrud.InsertNoCache(OpenDentBusiness.SupplyOrder,System.Boolean)">
            <summary>Inserts one SupplyOrder into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderCrud.Update(OpenDentBusiness.SupplyOrder)">
            <summary>Updates one SupplyOrder in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderCrud.Update(OpenDentBusiness.SupplyOrder,OpenDentBusiness.SupplyOrder)">
            <summary>Updates one SupplyOrder in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderCrud.UpdateComparison(OpenDentBusiness.SupplyOrder,OpenDentBusiness.SupplyOrder)">
            <summary>Returns true if Update(SupplyOrder,SupplyOrder) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderCrud.Delete(System.Int64)">
            <summary>Deletes one SupplyOrder from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderItemCrud.SelectOne(System.Int64)">
            <summary>Gets one SupplyOrderItem object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderItemCrud.SelectOne(System.String)">
            <summary>Gets one SupplyOrderItem object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderItemCrud.SelectMany(System.String)">
            <summary>Gets a list of SupplyOrderItem objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderItemCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderItemCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.SupplyOrderItem},System.String)">
            <summary>Converts a list of SupplyOrderItem into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderItemCrud.Insert(OpenDentBusiness.SupplyOrderItem)">
            <summary>Inserts one SupplyOrderItem into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderItemCrud.Insert(OpenDentBusiness.SupplyOrderItem,System.Boolean)">
            <summary>Inserts one SupplyOrderItem into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderItemCrud.InsertNoCache(OpenDentBusiness.SupplyOrderItem)">
            <summary>Inserts one SupplyOrderItem into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderItemCrud.InsertNoCache(OpenDentBusiness.SupplyOrderItem,System.Boolean)">
            <summary>Inserts one SupplyOrderItem into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderItemCrud.Update(OpenDentBusiness.SupplyOrderItem)">
            <summary>Updates one SupplyOrderItem in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderItemCrud.Update(OpenDentBusiness.SupplyOrderItem,OpenDentBusiness.SupplyOrderItem)">
            <summary>Updates one SupplyOrderItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderItemCrud.UpdateComparison(OpenDentBusiness.SupplyOrderItem,OpenDentBusiness.SupplyOrderItem)">
            <summary>Returns true if Update(SupplyOrderItem,SupplyOrderItem) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.SupplyOrderItemCrud.Delete(System.Int64)">
            <summary>Deletes one SupplyOrderItem from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskAncestorCrud.SelectOne(System.Int64)">
            <summary>Gets one TaskAncestor object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskAncestorCrud.SelectOne(System.String)">
            <summary>Gets one TaskAncestor object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskAncestorCrud.SelectMany(System.String)">
            <summary>Gets a list of TaskAncestor objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskAncestorCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskAncestorCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.TaskAncestor},System.String)">
            <summary>Converts a list of TaskAncestor into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskAncestorCrud.Insert(OpenDentBusiness.TaskAncestor)">
            <summary>Inserts one TaskAncestor into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskAncestorCrud.Insert(OpenDentBusiness.TaskAncestor,System.Boolean)">
            <summary>Inserts one TaskAncestor into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskAncestorCrud.InsertNoCache(OpenDentBusiness.TaskAncestor)">
            <summary>Inserts one TaskAncestor into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskAncestorCrud.InsertNoCache(OpenDentBusiness.TaskAncestor,System.Boolean)">
            <summary>Inserts one TaskAncestor into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskAncestorCrud.Update(OpenDentBusiness.TaskAncestor)">
            <summary>Updates one TaskAncestor in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskAncestorCrud.Update(OpenDentBusiness.TaskAncestor,OpenDentBusiness.TaskAncestor)">
            <summary>Updates one TaskAncestor in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskAncestorCrud.UpdateComparison(OpenDentBusiness.TaskAncestor,OpenDentBusiness.TaskAncestor)">
            <summary>Returns true if Update(TaskAncestor,TaskAncestor) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskAncestorCrud.Delete(System.Int64)">
            <summary>Deletes one TaskAncestor from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskCrud.SelectOne(System.Int64)">
            <summary>Gets one Task object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskCrud.SelectOne(System.String)">
            <summary>Gets one Task object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskCrud.SelectMany(System.String)">
            <summary>Gets a list of Task objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Task},System.String)">
            <summary>Converts a list of Task into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskCrud.Insert(OpenDentBusiness.Task)">
            <summary>Inserts one Task into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskCrud.Insert(OpenDentBusiness.Task,System.Boolean)">
            <summary>Inserts one Task into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskCrud.InsertNoCache(OpenDentBusiness.Task)">
            <summary>Inserts one Task into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskCrud.InsertNoCache(OpenDentBusiness.Task,System.Boolean)">
            <summary>Inserts one Task into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskCrud.Update(OpenDentBusiness.Task)">
            <summary>Updates one Task in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskCrud.Update(OpenDentBusiness.Task,OpenDentBusiness.Task)">
            <summary>Updates one Task in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskCrud.UpdateComparison(OpenDentBusiness.Task,OpenDentBusiness.Task)">
            <summary>Returns true if Update(Task,Task) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskCrud.Delete(System.Int64)">
            <summary>Deletes one Task from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskCrud.ClearFkey(System.Int64)">
            <summary>Zeros securitylog FKey column for rows that are using the matching taskNum as FKey and are related to Task.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Task table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskCrud.ClearFkey(System.Collections.Generic.List{System.Int64})">
            <summary>Zeros securitylog FKey column for rows that are using the matching taskNums as FKey and are related to Task.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Task table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskHistCrud.SelectOne(System.Int64)">
            <summary>Gets one TaskHist object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskHistCrud.SelectOne(System.String)">
            <summary>Gets one TaskHist object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskHistCrud.SelectMany(System.String)">
            <summary>Gets a list of TaskHist objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskHistCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskHistCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.TaskHist},System.String)">
            <summary>Converts a list of TaskHist into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskHistCrud.Insert(OpenDentBusiness.TaskHist)">
            <summary>Inserts one TaskHist into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskHistCrud.Insert(OpenDentBusiness.TaskHist,System.Boolean)">
            <summary>Inserts one TaskHist into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskHistCrud.InsertNoCache(OpenDentBusiness.TaskHist)">
            <summary>Inserts one TaskHist into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskHistCrud.InsertNoCache(OpenDentBusiness.TaskHist,System.Boolean)">
            <summary>Inserts one TaskHist into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskHistCrud.Update(OpenDentBusiness.TaskHist)">
            <summary>Updates one TaskHist in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskHistCrud.Update(OpenDentBusiness.TaskHist,OpenDentBusiness.TaskHist)">
            <summary>Updates one TaskHist in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskHistCrud.UpdateComparison(OpenDentBusiness.TaskHist,OpenDentBusiness.TaskHist)">
            <summary>Returns true if Update(TaskHist,TaskHist) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskHistCrud.Delete(System.Int64)">
            <summary>Deletes one TaskHist from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskListCrud.SelectOne(System.Int64)">
            <summary>Gets one TaskList object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskListCrud.SelectOne(System.String)">
            <summary>Gets one TaskList object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskListCrud.SelectMany(System.String)">
            <summary>Gets a list of TaskList objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskListCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskListCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.TaskList},System.String)">
            <summary>Converts a list of TaskList into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskListCrud.Insert(OpenDentBusiness.TaskList)">
            <summary>Inserts one TaskList into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskListCrud.Insert(OpenDentBusiness.TaskList,System.Boolean)">
            <summary>Inserts one TaskList into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskListCrud.InsertNoCache(OpenDentBusiness.TaskList)">
            <summary>Inserts one TaskList into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskListCrud.InsertNoCache(OpenDentBusiness.TaskList,System.Boolean)">
            <summary>Inserts one TaskList into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskListCrud.Update(OpenDentBusiness.TaskList)">
            <summary>Updates one TaskList in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskListCrud.Update(OpenDentBusiness.TaskList,OpenDentBusiness.TaskList)">
            <summary>Updates one TaskList in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskListCrud.UpdateComparison(OpenDentBusiness.TaskList,OpenDentBusiness.TaskList)">
            <summary>Returns true if Update(TaskList,TaskList) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskListCrud.Delete(System.Int64)">
            <summary>Deletes one TaskList from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskNoteCrud.SelectOne(System.Int64)">
            <summary>Gets one TaskNote object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskNoteCrud.SelectOne(System.String)">
            <summary>Gets one TaskNote object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskNoteCrud.SelectMany(System.String)">
            <summary>Gets a list of TaskNote objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskNoteCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskNoteCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.TaskNote},System.String)">
            <summary>Converts a list of TaskNote into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskNoteCrud.Insert(OpenDentBusiness.TaskNote)">
            <summary>Inserts one TaskNote into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskNoteCrud.Insert(OpenDentBusiness.TaskNote,System.Boolean)">
            <summary>Inserts one TaskNote into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskNoteCrud.InsertNoCache(OpenDentBusiness.TaskNote)">
            <summary>Inserts one TaskNote into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskNoteCrud.InsertNoCache(OpenDentBusiness.TaskNote,System.Boolean)">
            <summary>Inserts one TaskNote into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskNoteCrud.Update(OpenDentBusiness.TaskNote)">
            <summary>Updates one TaskNote in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskNoteCrud.Update(OpenDentBusiness.TaskNote,OpenDentBusiness.TaskNote)">
            <summary>Updates one TaskNote in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskNoteCrud.UpdateComparison(OpenDentBusiness.TaskNote,OpenDentBusiness.TaskNote)">
            <summary>Returns true if Update(TaskNote,TaskNote) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskNoteCrud.Delete(System.Int64)">
            <summary>Deletes one TaskNote from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskSubscriptionCrud.SelectOne(System.Int64)">
            <summary>Gets one TaskSubscription object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskSubscriptionCrud.SelectOne(System.String)">
            <summary>Gets one TaskSubscription object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskSubscriptionCrud.SelectMany(System.String)">
            <summary>Gets a list of TaskSubscription objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskSubscriptionCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskSubscriptionCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.TaskSubscription},System.String)">
            <summary>Converts a list of TaskSubscription into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskSubscriptionCrud.Insert(OpenDentBusiness.TaskSubscription)">
            <summary>Inserts one TaskSubscription into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskSubscriptionCrud.Insert(OpenDentBusiness.TaskSubscription,System.Boolean)">
            <summary>Inserts one TaskSubscription into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskSubscriptionCrud.InsertNoCache(OpenDentBusiness.TaskSubscription)">
            <summary>Inserts one TaskSubscription into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskSubscriptionCrud.InsertNoCache(OpenDentBusiness.TaskSubscription,System.Boolean)">
            <summary>Inserts one TaskSubscription into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskSubscriptionCrud.Update(OpenDentBusiness.TaskSubscription)">
            <summary>Updates one TaskSubscription in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskSubscriptionCrud.Update(OpenDentBusiness.TaskSubscription,OpenDentBusiness.TaskSubscription)">
            <summary>Updates one TaskSubscription in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskSubscriptionCrud.UpdateComparison(OpenDentBusiness.TaskSubscription,OpenDentBusiness.TaskSubscription)">
            <summary>Returns true if Update(TaskSubscription,TaskSubscription) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskSubscriptionCrud.Delete(System.Int64)">
            <summary>Deletes one TaskSubscription from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskUnreadCrud.SelectOne(System.Int64)">
            <summary>Gets one TaskUnread object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskUnreadCrud.SelectOne(System.String)">
            <summary>Gets one TaskUnread object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskUnreadCrud.SelectMany(System.String)">
            <summary>Gets a list of TaskUnread objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskUnreadCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskUnreadCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.TaskUnread},System.String)">
            <summary>Converts a list of TaskUnread into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskUnreadCrud.Insert(OpenDentBusiness.TaskUnread)">
            <summary>Inserts one TaskUnread into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskUnreadCrud.Insert(OpenDentBusiness.TaskUnread,System.Boolean)">
            <summary>Inserts one TaskUnread into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskUnreadCrud.InsertNoCache(OpenDentBusiness.TaskUnread)">
            <summary>Inserts one TaskUnread into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskUnreadCrud.InsertNoCache(OpenDentBusiness.TaskUnread,System.Boolean)">
            <summary>Inserts one TaskUnread into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskUnreadCrud.Update(OpenDentBusiness.TaskUnread)">
            <summary>Updates one TaskUnread in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskUnreadCrud.Update(OpenDentBusiness.TaskUnread,OpenDentBusiness.TaskUnread)">
            <summary>Updates one TaskUnread in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskUnreadCrud.UpdateComparison(OpenDentBusiness.TaskUnread,OpenDentBusiness.TaskUnread)">
            <summary>Returns true if Update(TaskUnread,TaskUnread) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TaskUnreadCrud.Delete(System.Int64)">
            <summary>Deletes one TaskUnread from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TerminalActiveCrud.SelectOne(System.Int64)">
            <summary>Gets one TerminalActive object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TerminalActiveCrud.SelectOne(System.String)">
            <summary>Gets one TerminalActive object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TerminalActiveCrud.SelectMany(System.String)">
            <summary>Gets a list of TerminalActive objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TerminalActiveCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TerminalActiveCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.TerminalActive},System.String)">
            <summary>Converts a list of TerminalActive into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TerminalActiveCrud.Insert(OpenDentBusiness.TerminalActive)">
            <summary>Inserts one TerminalActive into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TerminalActiveCrud.Insert(OpenDentBusiness.TerminalActive,System.Boolean)">
            <summary>Inserts one TerminalActive into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TerminalActiveCrud.InsertNoCache(OpenDentBusiness.TerminalActive)">
            <summary>Inserts one TerminalActive into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TerminalActiveCrud.InsertNoCache(OpenDentBusiness.TerminalActive,System.Boolean)">
            <summary>Inserts one TerminalActive into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TerminalActiveCrud.Update(OpenDentBusiness.TerminalActive)">
            <summary>Updates one TerminalActive in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TerminalActiveCrud.Update(OpenDentBusiness.TerminalActive,OpenDentBusiness.TerminalActive)">
            <summary>Updates one TerminalActive in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TerminalActiveCrud.UpdateComparison(OpenDentBusiness.TerminalActive,OpenDentBusiness.TerminalActive)">
            <summary>Returns true if Update(TerminalActive,TerminalActive) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TerminalActiveCrud.Delete(System.Int64)">
            <summary>Deletes one TerminalActive from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeAdjustCrud.SelectOne(System.Int64)">
            <summary>Gets one TimeAdjust object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeAdjustCrud.SelectOne(System.String)">
            <summary>Gets one TimeAdjust object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeAdjustCrud.SelectMany(System.String)">
            <summary>Gets a list of TimeAdjust objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeAdjustCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeAdjustCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.TimeAdjust},System.String)">
            <summary>Converts a list of TimeAdjust into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeAdjustCrud.Insert(OpenDentBusiness.TimeAdjust)">
            <summary>Inserts one TimeAdjust into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeAdjustCrud.Insert(OpenDentBusiness.TimeAdjust,System.Boolean)">
            <summary>Inserts one TimeAdjust into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeAdjustCrud.InsertNoCache(OpenDentBusiness.TimeAdjust)">
            <summary>Inserts one TimeAdjust into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeAdjustCrud.InsertNoCache(OpenDentBusiness.TimeAdjust,System.Boolean)">
            <summary>Inserts one TimeAdjust into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeAdjustCrud.Update(OpenDentBusiness.TimeAdjust)">
            <summary>Updates one TimeAdjust in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeAdjustCrud.Update(OpenDentBusiness.TimeAdjust,OpenDentBusiness.TimeAdjust)">
            <summary>Updates one TimeAdjust in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeAdjustCrud.UpdateComparison(OpenDentBusiness.TimeAdjust,OpenDentBusiness.TimeAdjust)">
            <summary>Returns true if Update(TimeAdjust,TimeAdjust) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeAdjustCrud.Delete(System.Int64)">
            <summary>Deletes one TimeAdjust from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeCardRuleCrud.SelectOne(System.Int64)">
            <summary>Gets one TimeCardRule object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeCardRuleCrud.SelectOne(System.String)">
            <summary>Gets one TimeCardRule object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeCardRuleCrud.SelectMany(System.String)">
            <summary>Gets a list of TimeCardRule objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeCardRuleCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeCardRuleCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.TimeCardRule},System.String)">
            <summary>Converts a list of TimeCardRule into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeCardRuleCrud.Insert(OpenDentBusiness.TimeCardRule)">
            <summary>Inserts one TimeCardRule into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeCardRuleCrud.Insert(OpenDentBusiness.TimeCardRule,System.Boolean)">
            <summary>Inserts one TimeCardRule into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeCardRuleCrud.InsertNoCache(OpenDentBusiness.TimeCardRule)">
            <summary>Inserts one TimeCardRule into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeCardRuleCrud.InsertNoCache(OpenDentBusiness.TimeCardRule,System.Boolean)">
            <summary>Inserts one TimeCardRule into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeCardRuleCrud.Update(OpenDentBusiness.TimeCardRule)">
            <summary>Updates one TimeCardRule in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeCardRuleCrud.Update(OpenDentBusiness.TimeCardRule,OpenDentBusiness.TimeCardRule)">
            <summary>Updates one TimeCardRule in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeCardRuleCrud.UpdateComparison(OpenDentBusiness.TimeCardRule,OpenDentBusiness.TimeCardRule)">
            <summary>Returns true if Update(TimeCardRule,TimeCardRule) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TimeCardRuleCrud.Delete(System.Int64)">
            <summary>Deletes one TimeCardRule from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToolButItemCrud.SelectOne(System.Int64)">
            <summary>Gets one ToolButItem object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToolButItemCrud.SelectOne(System.String)">
            <summary>Gets one ToolButItem object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToolButItemCrud.SelectMany(System.String)">
            <summary>Gets a list of ToolButItem objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToolButItemCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToolButItemCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ToolButItem},System.String)">
            <summary>Converts a list of ToolButItem into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToolButItemCrud.Insert(OpenDentBusiness.ToolButItem)">
            <summary>Inserts one ToolButItem into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToolButItemCrud.Insert(OpenDentBusiness.ToolButItem,System.Boolean)">
            <summary>Inserts one ToolButItem into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToolButItemCrud.InsertNoCache(OpenDentBusiness.ToolButItem)">
            <summary>Inserts one ToolButItem into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToolButItemCrud.InsertNoCache(OpenDentBusiness.ToolButItem,System.Boolean)">
            <summary>Inserts one ToolButItem into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToolButItemCrud.Update(OpenDentBusiness.ToolButItem)">
            <summary>Updates one ToolButItem in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToolButItemCrud.Update(OpenDentBusiness.ToolButItem,OpenDentBusiness.ToolButItem)">
            <summary>Updates one ToolButItem in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToolButItemCrud.UpdateComparison(OpenDentBusiness.ToolButItem,OpenDentBusiness.ToolButItem)">
            <summary>Returns true if Update(ToolButItem,ToolButItem) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToolButItemCrud.Delete(System.Int64)">
            <summary>Deletes one ToolButItem from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridCellCrud.SelectOne(System.Int64)">
            <summary>Gets one ToothGridCell object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridCellCrud.SelectOne(System.String)">
            <summary>Gets one ToothGridCell object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridCellCrud.SelectMany(System.String)">
            <summary>Gets a list of ToothGridCell objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridCellCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridCellCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ToothGridCell},System.String)">
            <summary>Converts a list of ToothGridCell into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridCellCrud.Insert(OpenDentBusiness.ToothGridCell)">
            <summary>Inserts one ToothGridCell into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridCellCrud.Insert(OpenDentBusiness.ToothGridCell,System.Boolean)">
            <summary>Inserts one ToothGridCell into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridCellCrud.InsertNoCache(OpenDentBusiness.ToothGridCell)">
            <summary>Inserts one ToothGridCell into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridCellCrud.InsertNoCache(OpenDentBusiness.ToothGridCell,System.Boolean)">
            <summary>Inserts one ToothGridCell into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridCellCrud.Update(OpenDentBusiness.ToothGridCell)">
            <summary>Updates one ToothGridCell in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridCellCrud.Update(OpenDentBusiness.ToothGridCell,OpenDentBusiness.ToothGridCell)">
            <summary>Updates one ToothGridCell in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridCellCrud.UpdateComparison(OpenDentBusiness.ToothGridCell,OpenDentBusiness.ToothGridCell)">
            <summary>Returns true if Update(ToothGridCell,ToothGridCell) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridCellCrud.Delete(System.Int64)">
            <summary>Deletes one ToothGridCell from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridColCrud.SelectOne(System.Int64)">
            <summary>Gets one ToothGridCol object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridColCrud.SelectOne(System.String)">
            <summary>Gets one ToothGridCol object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridColCrud.SelectMany(System.String)">
            <summary>Gets a list of ToothGridCol objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridColCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridColCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ToothGridCol},System.String)">
            <summary>Converts a list of ToothGridCol into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridColCrud.Insert(OpenDentBusiness.ToothGridCol)">
            <summary>Inserts one ToothGridCol into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridColCrud.Insert(OpenDentBusiness.ToothGridCol,System.Boolean)">
            <summary>Inserts one ToothGridCol into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridColCrud.InsertNoCache(OpenDentBusiness.ToothGridCol)">
            <summary>Inserts one ToothGridCol into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridColCrud.InsertNoCache(OpenDentBusiness.ToothGridCol,System.Boolean)">
            <summary>Inserts one ToothGridCol into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridColCrud.Update(OpenDentBusiness.ToothGridCol)">
            <summary>Updates one ToothGridCol in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridColCrud.Update(OpenDentBusiness.ToothGridCol,OpenDentBusiness.ToothGridCol)">
            <summary>Updates one ToothGridCol in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridColCrud.UpdateComparison(OpenDentBusiness.ToothGridCol,OpenDentBusiness.ToothGridCol)">
            <summary>Returns true if Update(ToothGridCol,ToothGridCol) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridColCrud.Delete(System.Int64)">
            <summary>Deletes one ToothGridCol from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridDefCrud.SelectOne(System.Int64)">
            <summary>Gets one ToothGridDef object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridDefCrud.SelectOne(System.String)">
            <summary>Gets one ToothGridDef object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridDefCrud.SelectMany(System.String)">
            <summary>Gets a list of ToothGridDef objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridDefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridDefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ToothGridDef},System.String)">
            <summary>Converts a list of ToothGridDef into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridDefCrud.Insert(OpenDentBusiness.ToothGridDef)">
            <summary>Inserts one ToothGridDef into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridDefCrud.Insert(OpenDentBusiness.ToothGridDef,System.Boolean)">
            <summary>Inserts one ToothGridDef into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridDefCrud.InsertNoCache(OpenDentBusiness.ToothGridDef)">
            <summary>Inserts one ToothGridDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridDefCrud.InsertNoCache(OpenDentBusiness.ToothGridDef,System.Boolean)">
            <summary>Inserts one ToothGridDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridDefCrud.Update(OpenDentBusiness.ToothGridDef)">
            <summary>Updates one ToothGridDef in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridDefCrud.Update(OpenDentBusiness.ToothGridDef,OpenDentBusiness.ToothGridDef)">
            <summary>Updates one ToothGridDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridDefCrud.UpdateComparison(OpenDentBusiness.ToothGridDef,OpenDentBusiness.ToothGridDef)">
            <summary>Returns true if Update(ToothGridDef,ToothGridDef) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothGridDefCrud.Delete(System.Int64)">
            <summary>Deletes one ToothGridDef from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothInitialCrud.SelectOne(System.Int64)">
            <summary>Gets one ToothInitial object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothInitialCrud.SelectOne(System.String)">
            <summary>Gets one ToothInitial object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothInitialCrud.SelectMany(System.String)">
            <summary>Gets a list of ToothInitial objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothInitialCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothInitialCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ToothInitial},System.String)">
            <summary>Converts a list of ToothInitial into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothInitialCrud.Insert(OpenDentBusiness.ToothInitial)">
            <summary>Inserts one ToothInitial into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothInitialCrud.Insert(OpenDentBusiness.ToothInitial,System.Boolean)">
            <summary>Inserts one ToothInitial into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothInitialCrud.InsertNoCache(OpenDentBusiness.ToothInitial)">
            <summary>Inserts one ToothInitial into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothInitialCrud.InsertNoCache(OpenDentBusiness.ToothInitial,System.Boolean)">
            <summary>Inserts one ToothInitial into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothInitialCrud.Update(OpenDentBusiness.ToothInitial)">
            <summary>Updates one ToothInitial in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothInitialCrud.Update(OpenDentBusiness.ToothInitial,OpenDentBusiness.ToothInitial)">
            <summary>Updates one ToothInitial in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothInitialCrud.UpdateComparison(OpenDentBusiness.ToothInitial,OpenDentBusiness.ToothInitial)">
            <summary>Returns true if Update(ToothInitial,ToothInitial) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ToothInitialCrud.Delete(System.Int64)">
            <summary>Deletes one ToothInitial from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TransactionCrud.SelectOne(System.Int64)">
            <summary>Gets one Transaction object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TransactionCrud.SelectOne(System.String)">
            <summary>Gets one Transaction object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TransactionCrud.SelectMany(System.String)">
            <summary>Gets a list of Transaction objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TransactionCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TransactionCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Transaction},System.String)">
            <summary>Converts a list of Transaction into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TransactionCrud.Insert(OpenDentBusiness.Transaction)">
            <summary>Inserts one Transaction into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TransactionCrud.Insert(OpenDentBusiness.Transaction,System.Boolean)">
            <summary>Inserts one Transaction into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TransactionCrud.InsertNoCache(OpenDentBusiness.Transaction)">
            <summary>Inserts one Transaction into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TransactionCrud.InsertNoCache(OpenDentBusiness.Transaction,System.Boolean)">
            <summary>Inserts one Transaction into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TransactionCrud.Update(OpenDentBusiness.Transaction)">
            <summary>Updates one Transaction in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TransactionCrud.Update(OpenDentBusiness.Transaction,OpenDentBusiness.Transaction)">
            <summary>Updates one Transaction in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TransactionCrud.UpdateComparison(OpenDentBusiness.Transaction,OpenDentBusiness.Transaction)">
            <summary>Returns true if Update(Transaction,Transaction) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TransactionCrud.Delete(System.Int64)">
            <summary>Deletes one Transaction from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanCrud.SelectOne(System.Int64)">
            <summary>Gets one TreatPlan object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanCrud.SelectOne(System.String)">
            <summary>Gets one TreatPlan object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanCrud.SelectMany(System.String)">
            <summary>Gets a list of TreatPlan objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.TreatPlan},System.String)">
            <summary>Converts a list of TreatPlan into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanCrud.Insert(OpenDentBusiness.TreatPlan)">
            <summary>Inserts one TreatPlan into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanCrud.Insert(OpenDentBusiness.TreatPlan,System.Boolean)">
            <summary>Inserts one TreatPlan into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanCrud.InsertNoCache(OpenDentBusiness.TreatPlan)">
            <summary>Inserts one TreatPlan into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanCrud.InsertNoCache(OpenDentBusiness.TreatPlan,System.Boolean)">
            <summary>Inserts one TreatPlan into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanCrud.Update(OpenDentBusiness.TreatPlan)">
            <summary>Updates one TreatPlan in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanCrud.Update(OpenDentBusiness.TreatPlan,OpenDentBusiness.TreatPlan)">
            <summary>Updates one TreatPlan in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanCrud.UpdateComparison(OpenDentBusiness.TreatPlan,OpenDentBusiness.TreatPlan)">
            <summary>Returns true if Update(TreatPlan,TreatPlan) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.TreatPlanCrud.Delete(System.Int64)">
            <summary>Deletes one TreatPlan from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UcumCrud.SelectOne(System.Int64)">
            <summary>Gets one Ucum object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UcumCrud.SelectOne(System.String)">
            <summary>Gets one Ucum object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UcumCrud.SelectMany(System.String)">
            <summary>Gets a list of Ucum objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UcumCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UcumCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Ucum},System.String)">
            <summary>Converts a list of Ucum into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UcumCrud.Insert(OpenDentBusiness.Ucum)">
            <summary>Inserts one Ucum into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UcumCrud.Insert(OpenDentBusiness.Ucum,System.Boolean)">
            <summary>Inserts one Ucum into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UcumCrud.InsertNoCache(OpenDentBusiness.Ucum)">
            <summary>Inserts one Ucum into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UcumCrud.InsertNoCache(OpenDentBusiness.Ucum,System.Boolean)">
            <summary>Inserts one Ucum into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UcumCrud.Update(OpenDentBusiness.Ucum)">
            <summary>Updates one Ucum in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UcumCrud.Update(OpenDentBusiness.Ucum,OpenDentBusiness.Ucum)">
            <summary>Updates one Ucum in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UcumCrud.UpdateComparison(OpenDentBusiness.Ucum,OpenDentBusiness.Ucum)">
            <summary>Returns true if Update(Ucum,Ucum) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UcumCrud.Delete(System.Int64)">
            <summary>Deletes one Ucum from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserGroupCrud.SelectOne(System.Int64)">
            <summary>Gets one UserGroup object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserGroupCrud.SelectOne(System.String)">
            <summary>Gets one UserGroup object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserGroupCrud.SelectMany(System.String)">
            <summary>Gets a list of UserGroup objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserGroupCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserGroupCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.UserGroup},System.String)">
            <summary>Converts a list of UserGroup into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserGroupCrud.Insert(OpenDentBusiness.UserGroup)">
            <summary>Inserts one UserGroup into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserGroupCrud.Insert(OpenDentBusiness.UserGroup,System.Boolean)">
            <summary>Inserts one UserGroup into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserGroupCrud.InsertNoCache(OpenDentBusiness.UserGroup)">
            <summary>Inserts one UserGroup into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserGroupCrud.InsertNoCache(OpenDentBusiness.UserGroup,System.Boolean)">
            <summary>Inserts one UserGroup into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserGroupCrud.Update(OpenDentBusiness.UserGroup)">
            <summary>Updates one UserGroup in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserGroupCrud.Update(OpenDentBusiness.UserGroup,OpenDentBusiness.UserGroup)">
            <summary>Updates one UserGroup in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserGroupCrud.UpdateComparison(OpenDentBusiness.UserGroup,OpenDentBusiness.UserGroup)">
            <summary>Returns true if Update(UserGroup,UserGroup) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserGroupCrud.Delete(System.Int64)">
            <summary>Deletes one UserGroup from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodApptViewCrud.SelectOne(System.Int64)">
            <summary>Gets one UserodApptView object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodApptViewCrud.SelectOne(System.String)">
            <summary>Gets one UserodApptView object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodApptViewCrud.SelectMany(System.String)">
            <summary>Gets a list of UserodApptView objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodApptViewCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodApptViewCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.UserodApptView},System.String)">
            <summary>Converts a list of UserodApptView into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodApptViewCrud.Insert(OpenDentBusiness.UserodApptView)">
            <summary>Inserts one UserodApptView into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodApptViewCrud.Insert(OpenDentBusiness.UserodApptView,System.Boolean)">
            <summary>Inserts one UserodApptView into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodApptViewCrud.InsertNoCache(OpenDentBusiness.UserodApptView)">
            <summary>Inserts one UserodApptView into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodApptViewCrud.InsertNoCache(OpenDentBusiness.UserodApptView,System.Boolean)">
            <summary>Inserts one UserodApptView into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodApptViewCrud.Update(OpenDentBusiness.UserodApptView)">
            <summary>Updates one UserodApptView in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodApptViewCrud.Update(OpenDentBusiness.UserodApptView,OpenDentBusiness.UserodApptView)">
            <summary>Updates one UserodApptView in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodApptViewCrud.UpdateComparison(OpenDentBusiness.UserodApptView,OpenDentBusiness.UserodApptView)">
            <summary>Returns true if Update(UserodApptView,UserodApptView) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodApptViewCrud.Delete(System.Int64)">
            <summary>Deletes one UserodApptView from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodCrud.SelectOne(System.Int64)">
            <summary>Gets one Userod object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodCrud.SelectOne(System.String)">
            <summary>Gets one Userod object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodCrud.SelectMany(System.String)">
            <summary>Gets a list of Userod objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Userod},System.String)">
            <summary>Converts a list of Userod into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodCrud.Insert(OpenDentBusiness.Userod)">
            <summary>Inserts one Userod into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodCrud.Insert(OpenDentBusiness.Userod,System.Boolean)">
            <summary>Inserts one Userod into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodCrud.InsertNoCache(OpenDentBusiness.Userod)">
            <summary>Inserts one Userod into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodCrud.InsertNoCache(OpenDentBusiness.Userod,System.Boolean)">
            <summary>Inserts one Userod into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodCrud.Update(OpenDentBusiness.Userod)">
            <summary>Updates one Userod in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodCrud.Update(OpenDentBusiness.Userod,OpenDentBusiness.Userod)">
            <summary>Updates one Userod in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodCrud.UpdateComparison(OpenDentBusiness.Userod,OpenDentBusiness.Userod)">
            <summary>Returns true if Update(Userod,Userod) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserodCrud.Delete(System.Int64)">
            <summary>Deletes one Userod from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserQueryCrud.SelectOne(System.Int64)">
            <summary>Gets one UserQuery object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserQueryCrud.SelectOne(System.String)">
            <summary>Gets one UserQuery object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserQueryCrud.SelectMany(System.String)">
            <summary>Gets a list of UserQuery objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserQueryCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserQueryCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.UserQuery},System.String)">
            <summary>Converts a list of UserQuery into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserQueryCrud.Insert(OpenDentBusiness.UserQuery)">
            <summary>Inserts one UserQuery into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserQueryCrud.Insert(OpenDentBusiness.UserQuery,System.Boolean)">
            <summary>Inserts one UserQuery into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserQueryCrud.InsertNoCache(OpenDentBusiness.UserQuery)">
            <summary>Inserts one UserQuery into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserQueryCrud.InsertNoCache(OpenDentBusiness.UserQuery,System.Boolean)">
            <summary>Inserts one UserQuery into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserQueryCrud.Update(OpenDentBusiness.UserQuery)">
            <summary>Updates one UserQuery in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserQueryCrud.Update(OpenDentBusiness.UserQuery,OpenDentBusiness.UserQuery)">
            <summary>Updates one UserQuery in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserQueryCrud.UpdateComparison(OpenDentBusiness.UserQuery,OpenDentBusiness.UserQuery)">
            <summary>Returns true if Update(UserQuery,UserQuery) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.UserQueryCrud.Delete(System.Int64)">
            <summary>Deletes one UserQuery from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineDefCrud.SelectOne(System.Int64)">
            <summary>Gets one VaccineDef object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineDefCrud.SelectOne(System.String)">
            <summary>Gets one VaccineDef object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineDefCrud.SelectMany(System.String)">
            <summary>Gets a list of VaccineDef objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineDefCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineDefCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.VaccineDef},System.String)">
            <summary>Converts a list of VaccineDef into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineDefCrud.Insert(OpenDentBusiness.VaccineDef)">
            <summary>Inserts one VaccineDef into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineDefCrud.Insert(OpenDentBusiness.VaccineDef,System.Boolean)">
            <summary>Inserts one VaccineDef into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineDefCrud.InsertNoCache(OpenDentBusiness.VaccineDef)">
            <summary>Inserts one VaccineDef into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineDefCrud.InsertNoCache(OpenDentBusiness.VaccineDef,System.Boolean)">
            <summary>Inserts one VaccineDef into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineDefCrud.Update(OpenDentBusiness.VaccineDef)">
            <summary>Updates one VaccineDef in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineDefCrud.Update(OpenDentBusiness.VaccineDef,OpenDentBusiness.VaccineDef)">
            <summary>Updates one VaccineDef in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineDefCrud.UpdateComparison(OpenDentBusiness.VaccineDef,OpenDentBusiness.VaccineDef)">
            <summary>Returns true if Update(VaccineDef,VaccineDef) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineDefCrud.Delete(System.Int64)">
            <summary>Deletes one VaccineDef from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineObsCrud.SelectOne(System.Int64)">
            <summary>Gets one VaccineObs object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineObsCrud.SelectOne(System.String)">
            <summary>Gets one VaccineObs object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineObsCrud.SelectMany(System.String)">
            <summary>Gets a list of VaccineObs objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineObsCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineObsCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.VaccineObs},System.String)">
            <summary>Converts a list of VaccineObs into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineObsCrud.Insert(OpenDentBusiness.VaccineObs)">
            <summary>Inserts one VaccineObs into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineObsCrud.Insert(OpenDentBusiness.VaccineObs,System.Boolean)">
            <summary>Inserts one VaccineObs into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineObsCrud.InsertNoCache(OpenDentBusiness.VaccineObs)">
            <summary>Inserts one VaccineObs into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineObsCrud.InsertNoCache(OpenDentBusiness.VaccineObs,System.Boolean)">
            <summary>Inserts one VaccineObs into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineObsCrud.Update(OpenDentBusiness.VaccineObs)">
            <summary>Updates one VaccineObs in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineObsCrud.Update(OpenDentBusiness.VaccineObs,OpenDentBusiness.VaccineObs)">
            <summary>Updates one VaccineObs in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineObsCrud.UpdateComparison(OpenDentBusiness.VaccineObs,OpenDentBusiness.VaccineObs)">
            <summary>Returns true if Update(VaccineObs,VaccineObs) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccineObsCrud.Delete(System.Int64)">
            <summary>Deletes one VaccineObs from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccinePatCrud.SelectOne(System.Int64)">
            <summary>Gets one VaccinePat object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccinePatCrud.SelectOne(System.String)">
            <summary>Gets one VaccinePat object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccinePatCrud.SelectMany(System.String)">
            <summary>Gets a list of VaccinePat objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccinePatCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccinePatCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.VaccinePat},System.String)">
            <summary>Converts a list of VaccinePat into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccinePatCrud.Insert(OpenDentBusiness.VaccinePat)">
            <summary>Inserts one VaccinePat into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccinePatCrud.Insert(OpenDentBusiness.VaccinePat,System.Boolean)">
            <summary>Inserts one VaccinePat into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccinePatCrud.InsertNoCache(OpenDentBusiness.VaccinePat)">
            <summary>Inserts one VaccinePat into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccinePatCrud.InsertNoCache(OpenDentBusiness.VaccinePat,System.Boolean)">
            <summary>Inserts one VaccinePat into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccinePatCrud.Update(OpenDentBusiness.VaccinePat)">
            <summary>Updates one VaccinePat in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccinePatCrud.Update(OpenDentBusiness.VaccinePat,OpenDentBusiness.VaccinePat)">
            <summary>Updates one VaccinePat in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccinePatCrud.UpdateComparison(OpenDentBusiness.VaccinePat,OpenDentBusiness.VaccinePat)">
            <summary>Returns true if Update(VaccinePat,VaccinePat) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VaccinePatCrud.Delete(System.Int64)">
            <summary>Deletes one VaccinePat from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VitalsignCrud.SelectOne(System.Int64)">
            <summary>Gets one Vitalsign object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VitalsignCrud.SelectOne(System.String)">
            <summary>Gets one Vitalsign object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VitalsignCrud.SelectMany(System.String)">
            <summary>Gets a list of Vitalsign objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VitalsignCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VitalsignCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.Vitalsign},System.String)">
            <summary>Converts a list of Vitalsign into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VitalsignCrud.Insert(OpenDentBusiness.Vitalsign)">
            <summary>Inserts one Vitalsign into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VitalsignCrud.Insert(OpenDentBusiness.Vitalsign,System.Boolean)">
            <summary>Inserts one Vitalsign into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VitalsignCrud.InsertNoCache(OpenDentBusiness.Vitalsign)">
            <summary>Inserts one Vitalsign into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VitalsignCrud.InsertNoCache(OpenDentBusiness.Vitalsign,System.Boolean)">
            <summary>Inserts one Vitalsign into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VitalsignCrud.Update(OpenDentBusiness.Vitalsign)">
            <summary>Updates one Vitalsign in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VitalsignCrud.Update(OpenDentBusiness.Vitalsign,OpenDentBusiness.Vitalsign)">
            <summary>Updates one Vitalsign in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VitalsignCrud.UpdateComparison(OpenDentBusiness.Vitalsign,OpenDentBusiness.Vitalsign)">
            <summary>Returns true if Update(Vitalsign,Vitalsign) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.VitalsignCrud.Delete(System.Int64)">
            <summary>Deletes one Vitalsign from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHeaderWidthCrud.SelectOne(System.Int64)">
            <summary>Gets one WikiListHeaderWidth object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHeaderWidthCrud.SelectOne(System.String)">
            <summary>Gets one WikiListHeaderWidth object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHeaderWidthCrud.SelectMany(System.String)">
            <summary>Gets a list of WikiListHeaderWidth objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHeaderWidthCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHeaderWidthCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.WikiListHeaderWidth},System.String)">
            <summary>Converts a list of WikiListHeaderWidth into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHeaderWidthCrud.Insert(OpenDentBusiness.WikiListHeaderWidth)">
            <summary>Inserts one WikiListHeaderWidth into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHeaderWidthCrud.Insert(OpenDentBusiness.WikiListHeaderWidth,System.Boolean)">
            <summary>Inserts one WikiListHeaderWidth into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHeaderWidthCrud.InsertNoCache(OpenDentBusiness.WikiListHeaderWidth)">
            <summary>Inserts one WikiListHeaderWidth into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHeaderWidthCrud.InsertNoCache(OpenDentBusiness.WikiListHeaderWidth,System.Boolean)">
            <summary>Inserts one WikiListHeaderWidth into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHeaderWidthCrud.Update(OpenDentBusiness.WikiListHeaderWidth)">
            <summary>Updates one WikiListHeaderWidth in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHeaderWidthCrud.Update(OpenDentBusiness.WikiListHeaderWidth,OpenDentBusiness.WikiListHeaderWidth)">
            <summary>Updates one WikiListHeaderWidth in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHeaderWidthCrud.UpdateComparison(OpenDentBusiness.WikiListHeaderWidth,OpenDentBusiness.WikiListHeaderWidth)">
            <summary>Returns true if Update(WikiListHeaderWidth,WikiListHeaderWidth) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHeaderWidthCrud.Delete(System.Int64)">
            <summary>Deletes one WikiListHeaderWidth from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHistCrud.SelectOne(System.Int64)">
            <summary>Gets one WikiListHist object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHistCrud.SelectOne(System.String)">
            <summary>Gets one WikiListHist object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHistCrud.SelectMany(System.String)">
            <summary>Gets a list of WikiListHist objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHistCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHistCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.WikiListHist},System.String)">
            <summary>Converts a list of WikiListHist into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHistCrud.Insert(OpenDentBusiness.WikiListHist)">
            <summary>Inserts one WikiListHist into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHistCrud.Insert(OpenDentBusiness.WikiListHist,System.Boolean)">
            <summary>Inserts one WikiListHist into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHistCrud.InsertNoCache(OpenDentBusiness.WikiListHist)">
            <summary>Inserts one WikiListHist into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHistCrud.InsertNoCache(OpenDentBusiness.WikiListHist,System.Boolean)">
            <summary>Inserts one WikiListHist into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHistCrud.Update(OpenDentBusiness.WikiListHist)">
            <summary>Updates one WikiListHist in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHistCrud.Update(OpenDentBusiness.WikiListHist,OpenDentBusiness.WikiListHist)">
            <summary>Updates one WikiListHist in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHistCrud.UpdateComparison(OpenDentBusiness.WikiListHist,OpenDentBusiness.WikiListHist)">
            <summary>Returns true if Update(WikiListHist,WikiListHist) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiListHistCrud.Delete(System.Int64)">
            <summary>Deletes one WikiListHist from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageCrud.SelectOne(System.Int64)">
            <summary>Gets one WikiPage object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageCrud.SelectOne(System.String)">
            <summary>Gets one WikiPage object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageCrud.SelectMany(System.String)">
            <summary>Gets a list of WikiPage objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.WikiPage},System.String)">
            <summary>Converts a list of WikiPage into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageCrud.Insert(OpenDentBusiness.WikiPage)">
            <summary>Inserts one WikiPage into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageCrud.Insert(OpenDentBusiness.WikiPage,System.Boolean)">
            <summary>Inserts one WikiPage into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageCrud.InsertNoCache(OpenDentBusiness.WikiPage)">
            <summary>Inserts one WikiPage into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageCrud.InsertNoCache(OpenDentBusiness.WikiPage,System.Boolean)">
            <summary>Inserts one WikiPage into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageCrud.Update(OpenDentBusiness.WikiPage)">
            <summary>Updates one WikiPage in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageCrud.Update(OpenDentBusiness.WikiPage,OpenDentBusiness.WikiPage)">
            <summary>Updates one WikiPage in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageCrud.UpdateComparison(OpenDentBusiness.WikiPage,OpenDentBusiness.WikiPage)">
            <summary>Returns true if Update(WikiPage,WikiPage) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageCrud.Delete(System.Int64)">
            <summary>Deletes one WikiPage from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageHistCrud.SelectOne(System.Int64)">
            <summary>Gets one WikiPageHist object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageHistCrud.SelectOne(System.String)">
            <summary>Gets one WikiPageHist object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageHistCrud.SelectMany(System.String)">
            <summary>Gets a list of WikiPageHist objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageHistCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageHistCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.WikiPageHist},System.String)">
            <summary>Converts a list of WikiPageHist into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageHistCrud.Insert(OpenDentBusiness.WikiPageHist)">
            <summary>Inserts one WikiPageHist into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageHistCrud.Insert(OpenDentBusiness.WikiPageHist,System.Boolean)">
            <summary>Inserts one WikiPageHist into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageHistCrud.InsertNoCache(OpenDentBusiness.WikiPageHist)">
            <summary>Inserts one WikiPageHist into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageHistCrud.InsertNoCache(OpenDentBusiness.WikiPageHist,System.Boolean)">
            <summary>Inserts one WikiPageHist into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageHistCrud.Update(OpenDentBusiness.WikiPageHist)">
            <summary>Updates one WikiPageHist in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageHistCrud.Update(OpenDentBusiness.WikiPageHist,OpenDentBusiness.WikiPageHist)">
            <summary>Updates one WikiPageHist in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageHistCrud.UpdateComparison(OpenDentBusiness.WikiPageHist,OpenDentBusiness.WikiPageHist)">
            <summary>Returns true if Update(WikiPageHist,WikiPageHist) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.WikiPageHistCrud.Delete(System.Int64)">
            <summary>Deletes one WikiPageHist from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XChargeTransactionCrud.SelectOne(System.Int64)">
            <summary>Gets one XChargeTransaction object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XChargeTransactionCrud.SelectOne(System.String)">
            <summary>Gets one XChargeTransaction object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XChargeTransactionCrud.SelectMany(System.String)">
            <summary>Gets a list of XChargeTransaction objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XChargeTransactionCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XChargeTransactionCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.XChargeTransaction},System.String)">
            <summary>Converts a list of XChargeTransaction into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XChargeTransactionCrud.Insert(OpenDentBusiness.XChargeTransaction)">
            <summary>Inserts one XChargeTransaction into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XChargeTransactionCrud.Insert(OpenDentBusiness.XChargeTransaction,System.Boolean)">
            <summary>Inserts one XChargeTransaction into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XChargeTransactionCrud.InsertNoCache(OpenDentBusiness.XChargeTransaction)">
            <summary>Inserts one XChargeTransaction into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XChargeTransactionCrud.InsertNoCache(OpenDentBusiness.XChargeTransaction,System.Boolean)">
            <summary>Inserts one XChargeTransaction into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XChargeTransactionCrud.Update(OpenDentBusiness.XChargeTransaction)">
            <summary>Updates one XChargeTransaction in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XChargeTransactionCrud.Update(OpenDentBusiness.XChargeTransaction,OpenDentBusiness.XChargeTransaction)">
            <summary>Updates one XChargeTransaction in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XChargeTransactionCrud.UpdateComparison(OpenDentBusiness.XChargeTransaction,OpenDentBusiness.XChargeTransaction)">
            <summary>Returns true if Update(XChargeTransaction,XChargeTransaction) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.XChargeTransactionCrud.Delete(System.Int64)">
            <summary>Deletes one XChargeTransaction from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ZipCodeCrud.SelectOne(System.Int64)">
            <summary>Gets one ZipCode object from the database using the primary key.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ZipCodeCrud.SelectOne(System.String)">
            <summary>Gets one ZipCode object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ZipCodeCrud.SelectMany(System.String)">
            <summary>Gets a list of ZipCode objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ZipCodeCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ZipCodeCrud.ListToTable(System.Collections.Generic.List{OpenDentBusiness.ZipCode},System.String)">
            <summary>Converts a list of ZipCode into a DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ZipCodeCrud.Insert(OpenDentBusiness.ZipCode)">
            <summary>Inserts one ZipCode into the database.  Returns the new priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ZipCodeCrud.Insert(OpenDentBusiness.ZipCode,System.Boolean)">
            <summary>Inserts one ZipCode into the database.  Provides option to use the existing priKey.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ZipCodeCrud.InsertNoCache(OpenDentBusiness.ZipCode)">
            <summary>Inserts one ZipCode into the database.  Returns the new priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ZipCodeCrud.InsertNoCache(OpenDentBusiness.ZipCode,System.Boolean)">
            <summary>Inserts one ZipCode into the database.  Provides option to use the existing priKey.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ZipCodeCrud.Update(OpenDentBusiness.ZipCode)">
            <summary>Updates one ZipCode in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ZipCodeCrud.Update(OpenDentBusiness.ZipCode,OpenDentBusiness.ZipCode)">
            <summary>Updates one ZipCode in the database.  Uses an old object to compare to, and only alters changed fields.  This prevents collisions and concurrency problems in heavily used tables.  Returns true if an update occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ZipCodeCrud.UpdateComparison(OpenDentBusiness.ZipCode,OpenDentBusiness.ZipCode)">
            <summary>Returns true if Update(ZipCode,ZipCode) would make changes to the database.
            Does not make any changes to the database and can be called before remoting role is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Crud.ZipCodeCrud.Delete(System.Int64)">
            <summary>Deletes one ZipCode from the database.</summary>
        </member>
        <member name="T:OpenDentBusiness.AlertItems">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertItems.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertItems.RefreshAll">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertItems.RefreshForClinicAndTypes(System.Int64,System.Collections.Generic.List{OpenDentBusiness.AlertType})">
            <summary>Returns a list of AlertItems for the given clinicNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.AlertItems.RefreshForType(OpenDentBusiness.AlertType)">
            <summary>Returns a list of AlertItems for the given cinicNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.AlertItems.GetOne(System.Int64)">
            <summary>Gets one AlertItem from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.AlertItems.Insert(OpenDentBusiness.AlertItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertItems.Update(OpenDentBusiness.AlertItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertItems.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertItems.Sync(System.Collections.Generic.List{OpenDentBusiness.AlertItem},System.Collections.Generic.List{OpenDentBusiness.AlertItem})">
            <summary>Inserts, updates, or deletes db rows to match listNew.  No need to pass in userNum, it's set before remoting role check and passed to
            the server if necessary.  Doesn't create ApptComm items, but will delete them.  If you use Sync, you must create new Apptcomm items.</summary>
        </member>
        <member name="T:OpenDentBusiness.AlertReads">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertReads.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertReads.RefreshForAlertNums(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertReads.GetOne(System.Int64)">
            <summary>Gets one AlertRead from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.AlertReads.Insert(OpenDentBusiness.AlertRead)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertReads.Update(OpenDentBusiness.AlertRead)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertReads.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertReads.DeleteForAlertItem(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertReads.Sync(System.Collections.Generic.List{OpenDentBusiness.AlertRead},System.Collections.Generic.List{OpenDentBusiness.AlertRead})">
            <summary>Inserts, updates, or deletes db rows to match listNew.  No need to pass in userNum, it's set before remoting role check and passed to
            the server if necessary.  Doesn't create ApptComm items, but will delete them.  If you use Sync, you must create new Apptcomm items.</summary>
        </member>
        <member name="T:OpenDentBusiness.AlertSubs">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AlertSubs._list">
            <summary>A list of all AlertSubs.</summary>
        </member>
        <member name="P:OpenDentBusiness.AlertSubs.List">
            <summary>A list of all AlertSubs.</summary>
        </member>
        <member name="M:OpenDentBusiness.AlertSubs.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertSubs.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertSubs.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertSubs.GetOne(System.Int64)">
            <summary>Gets one AlertSub from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.AlertSubs.Insert(OpenDentBusiness.AlertSub)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertSubs.Update(OpenDentBusiness.AlertSub)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertSubs.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AlertSubs.Sync(System.Collections.Generic.List{OpenDentBusiness.AlertSub},System.Collections.Generic.List{OpenDentBusiness.AlertSub})">
            <summary>Inserts, updates, or deletes db rows to match listNew.  No need to pass in userNum, it's set before remoting role check and passed to
            the server if necessary.  Doesn't create ApptComm items, but will delete them.  If you use Sync, you must create new Apptcomm items.</summary>
        </member>
        <member name="T:OpenDentBusiness.AppointmentDeleteds">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentDeleteds.GetByAptNum(System.Int64)">
            <summary>Gets one AppointmentDeleted from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentDeleteds.Insert(OpenDentBusiness.AppointmentDeleted)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ApptReminderRules">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.ApptReminderRules.IsReminders">
            <summary>If true, then </summary>
        </member>
        <member name="M:OpenDentBusiness.ApptReminderRules.GetAll">
            <summary>Gets all, sorts by TSPrior Desc, Should never be more than 3 (per clinic if this is implemented for clinics.)</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptReminderRules.Get_16_3_29_ConversionFlags">
            <summary>16.3.29 is more strict about reminder rule setup. Prompt the user and allow them to exit the update if desired. Get all currently enabled reminder rules.
            Returns 2 element list of bool. 
            [0] indicates if any single clinic/practice has more than 1 same day reminder. 
            [1] indicates if any single clinic/practice has more than 1 future day reminder.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptReminderRules.GetForClinic(System.Int64)">
            <summary>Gets all from the DB, sorts by TSPrior Desc, Should never be more than 3 (per clinic if this is implemented for clinics.)</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptReminderRules.GetOne(System.Int64)">
            <summary>Gets one ApptReminderRule from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptReminderRules.Insert(OpenDentBusiness.ApptReminderRule)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptReminderRules.Update(OpenDentBusiness.ApptReminderRule)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptReminderRules.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptReminderRules.UpdateAppointmentConfirmationStatus(System.Int64,System.Int64,System.String)">
            <summary>Update Appointment.Confirmed. Returns true if update was allowed. Returns false if it was prevented.</summary>
        </member>
        <member name="T:OpenDentBusiness.ApptReminderSents">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptReminderSents.Insert(OpenDentBusiness.ApptReminderSent)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptReminderSents.Update(OpenDentBusiness.ApptReminderSent)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptReminderSents.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimSnapshots">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimSnapshots.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimSnapshots.GetOne(System.Int64)">
            <summary>Gets one ClaimSnapshot from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimSnapshots.Insert(OpenDentBusiness.ClaimSnapshot)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimSnapshots.Update(OpenDentBusiness.ClaimSnapshot)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimSnapshots.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimSnapshots.CreateClaimSnapshot(System.Collections.Generic.List{OpenDentBusiness.ClaimProc},OpenDentBusiness.ClaimSnapshotTrigger)">
            <summary>Creates a snapshot for the claimprocs passed in.  Used for reporting purposes.
            If used from the eConnector, ignore passed in claimprocs and make snapshots for the entire day of completed procedures.
            When passing in claimprocs, the implementor will need to ensure that only primary claimprocs are being saved.
            Only creates snapshots if the feature is enabled and if the claimproc is of certain statuses.</summary>
        </member>
        <member name="T:OpenDentBusiness.ConfirmationRequests">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConfirmationRequests.GetAllOutstandingForSend">
            <summary>Get all rows where RSVPStatus==AwaitingTransmit.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConfirmationRequests.GetConfirmationsByShortGuid(System.String)">
            <summary>HQ only knows about the ShortGUID field. It treats both ShortGUIDEmail and ShortGuid as ShortGuid. 
            Returns any client side ConfirmationRequest(s) where either ShortGUIDEmail or ShortGuid matches the server side ShortGuid field.</summary>
        </member>
        <member name="T:OpenDentBusiness.DashboardCells">
            <summary>Insert, Update, Delete are all managed by DashboardLayouts. The 2 classes are tightly coupled and should not be modified separately.</summary>
        </member>
        <member name="M:OpenDentBusiness.DashboardCells.GetAll">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DashboardLayouts">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DashboardLayouts.SetDashboardLayout(System.Collections.Generic.List{OpenDentBusiness.DashboardLayout},System.String)">
            <summary>Inserts the given dashboard layouts and cells into the database.</summary>
        </member>
        <member name="T:OpenDentBusiness.DisplayReports">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DisplayReports.GetForCategory(OpenDentBusiness.DisplayReportCategory,System.Boolean)">
            <summary>Get all display reports for the passed-in category.  Pass in true to retrieve hidden display reports.</summary>
        </member>
        <member name="M:OpenDentBusiness.DisplayReports.GetAll(System.Boolean)">
            <summary>Pass in true to also retrieve hidden display reports.</summary>
        </member>
        <member name="M:OpenDentBusiness.DisplayReports.Sync(System.Collections.Generic.List{OpenDentBusiness.DisplayReport})">
            Must pass in a list of all current display reports, even hidden ones.
        </member>
        <member name="T:OpenDentBusiness.Ebills">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Ebills._listEbills">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Ebills.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Ebills.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Ebills.GetForClinic(System.Int64)">
            <summary>To get the defaults, use clinicNum=0.</summary>
        </member>
        <member name="T:OpenDentBusiness.EmailAutographs">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAutographs.listt">
            <summary>A list of all EmailAutographs.</summary>
        </member>
        <member name="P:OpenDentBusiness.EmailAutographs.Listt">
            <summary>A list of all EmailAutographs.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAutographs.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAutographs.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAutographs.Insert(OpenDentBusiness.EmailAutograph)">
            <summary>Insert one EmailAutograph in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAutographs.Update(OpenDentBusiness.EmailAutograph)">
            <summary>Updates an existing EmailAutograph in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAutographs.Delete(System.Int64)">
            <summary>Delete on EmailAutograph from the database.</summary>
        </member>
        <member name="T:OpenDentBusiness.FHIRContactPoints">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.FHIRContactPoints.Insert(OpenDentBusiness.FHIRContactPoint)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.FHIRContactPoints.Update(OpenDentBusiness.FHIRContactPoint)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.FHIRContactPoints.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.FHIRSubscriptions">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.FHIRSubscriptions.GetOne(System.Int64)">
            <summary>Gets one FHIRSubscription from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.FHIRSubscriptions.Insert(OpenDentBusiness.FHIRSubscription)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.FHIRSubscriptions.Update(OpenDentBusiness.FHIRSubscription)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.FHIRSubscriptions.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.HL7ProcAttaches">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7ProcAttaches.Insert(OpenDentBusiness.HL7ProcAttach)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.InsVerifies">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerifies.GetOne(System.Int64)">
            <summary>Gets one InsVerify from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerifies.GetOneByFKey(System.Int64,OpenDentBusiness.VerifyTypes)">
            <summary>Gets one InsVerify from the db that has the given fkey and verify type.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerifies.GetInsVerifyNumByFKey(System.Int64,OpenDentBusiness.VerifyTypes)">
            <summary>Gets one InsVerifyNum from the db that has the given fkey and verify type.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerifies.Insert(OpenDentBusiness.InsVerify)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerifies.Update(OpenDentBusiness.InsVerify)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerifies.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerifies.InsertForPatPlanNum(System.Int64)">
            <summary>Inserts a default InsVerify into the database based on the passed in patplan.  Used when inserting a new patplan.
            Returns the primary key of the new InsVerify.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerifies.InsertForPlanNum(System.Int64)">
            <summary>Inserts a default InsVerify into the database based on the passed in insplan.  Used when inserting a new insplan.
            Returns the primary key of the new InsVerify.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerifies.DeleteByFKey(System.Int64,OpenDentBusiness.VerifyTypes)">
            <summary>Deletes an InsVerify with the passed in FKey and VerifyType.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerifies.GetVerifyGridList(System.DateTime,System.DateTime,System.DateTime,System.DateTime,System.Int64,System.Int64,System.Int64,System.Int64,System.String,System.Boolean,System.Boolean)">
            <summary>UserNum=-1 is "All", UserNum=0 is "Unassigned". statusDefNum=-1 or statusDefNum=0 is "All".  ClinicNum=-1 is "All". ClinicNum=0 is "Unassigned". regionDefNum=0 or regionDefNum=-1 is "All".  </summary>
        </member>
        <member name="T:OpenDentBusiness.InsVerifyHists">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerifyHists.GetOne(System.Int64)">
            <summary>Gets one InsVerifyHist from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerifyHists.Insert(OpenDentBusiness.InsVerifyHist)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerifyHists.Update(OpenDentBusiness.InsVerifyHist)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerifyHists.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerifyHists.InsertFromInsVerify(OpenDentBusiness.InsVerify)">
            <summary>If the passed in InsVerify is null, do nothing.  
            Otherwise, insert the passed in InsVerify into InsVerifyHist and blank out InsVerify's UserNum, Status, and Note.</summary>
        </member>
        <member name="T:OpenDentBusiness.JobLogs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobLogs.MakeLogEntry(OpenDentBusiness.Job,OpenDentBusiness.Job)">
            <summary>Inserts log entry to DB and returns the resulting JobLog.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobLogs.GetJobLogsForJobs(System.Collections.Generic.List{System.Int64})">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobLogs.GetOne(System.Int64)">
            <summary>Gets one JobLog from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobLogs.Insert(OpenDentBusiness.JobLog)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.OrthoChartTabLinks">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.OrthoChartTabLinks._list">
            <summary>A list of all OrthoChartTabLinks.</summary>
        </member>
        <member name="P:OpenDentBusiness.OrthoChartTabLinks.List">
            <summary>A list of all OrthoChartTabLinks.</summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoChartTabLinks.GetList">
            <summary>Gets a deep copy of the current cached list.</summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoChartTabLinks.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoChartTabLinks.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoChartTabLinks.Sync(System.Collections.Generic.List{OpenDentBusiness.OrthoChartTabLink},System.Collections.Generic.List{OpenDentBusiness.OrthoChartTabLink})">
            <summary>Inserts, updates, or deletes the passed in list against the stale list listOld.  Returns true if db changes were made.</summary>
        </member>
        <member name="T:OpenDentBusiness.OrthoChartTabs">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.OrthoChartTabs._list">
            <summary>A list of all OrthoChartTabs.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrthoChartTabs._listt">
            <summary>A list of all OrthoChartTabs which are not hidden.</summary>
        </member>
        <member name="P:OpenDentBusiness.OrthoChartTabs.List">
            <summary>A list of all OrthoChartTabs.</summary>
        </member>
        <member name="P:OpenDentBusiness.OrthoChartTabs.Listt">
            <summary>A list of all OrthoChartTabs which are not hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoChartTabs.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoChartTabs.Sync(System.Collections.Generic.List{OpenDentBusiness.OrthoChartTab},System.Collections.Generic.List{OpenDentBusiness.OrthoChartTab})">
            <summary>Inserts, updates, or deletes the passed in list against the stale list listOld.  Returns true if db changes were made.</summary>
        </member>
        <member name="T:OpenDentBusiness.PatRestrictions">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PatRestrictions.GetAllForPat(System.Int64)">
            <summary>Gets all patrestrictions for the specified patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatRestrictions.Insert(System.Int64,OpenDentBusiness.PatRestrict)">
            <summary>This will only insert a new PatRestriction if there is not already an existing PatRestriction in the db for this patient and type.
            If exists, returns the PatRestrictionNum of the first one found.  Otherwise returns the PatRestrictionNum of the newly inserted one.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatRestrictions.IsRestricted(System.Int64,OpenDentBusiness.PatRestrict,System.Boolean)">
            <summary>Checks for an existing patrestriction for the specified patient and PatRestrictType.
            If one exists, returns true (IsRestricted).  If none exist, returns false (!IsRestricted).
            If suppressMessage is omitted or is set to false, a message box will display the patrestriction blocking the action.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatRestrictions.GetPatRestrictDesc(OpenDentBusiness.PatRestrict)">
            <summary>Gets the human readable description of the patrestriction, passed through Lans.g.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatRestrictions.RemovePatRestriction(System.Int64,OpenDentBusiness.PatRestrict)">
            <summary>Deletes any patrestrictions for the specified patient and type.</summary>
        </member>
        <member name="T:OpenDentBusiness.SigMessages">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SigMessages.GetSigMessages(System.Collections.Generic.List{System.Int64})">
            <summary>Gets one SigMessage from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigMessages.GetAll">
            <summary>Gets one SigMessage from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigMessages.RefreshCurrentButState">
            <summary>Only used when starting up to get the current button state.  Only gets unacked messages.
            There may well be extra and useless messages included.  But only the lights will be used anyway, so it doesn't matter.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigMessages.GetSigMessagesSinceDateTime(System.DateTime)">
            <summary>Includes all messages, whether acked or not.  It's up to the UI to filter out acked if necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigMessages.AckButton(System.Int32,System.DateTime)">
            <summary>When user clicks on a colored light, they intend to ack it to turn it off.  This acks all sigmessages with the specified index.
            This is in case multiple sigmessages have been created from different workstations.  This acks them all in one shot.
            Must specify a time because you only want to ack sigmessages earlier than the last time this workstation was refreshed.
            A newer sigmessage would not get acked. If this seems slow, then I will need to check to make sure all these tables are properly indexed.
            Inserts a signal for every SigMessageNum that was updated.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigMessages.AckSigMessage(OpenDentBusiness.SigMessage)">
            <summary>Acknowledge one sig message from the manage module grid.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigMessages.Insert(OpenDentBusiness.SigMessage)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SigMessages.Update(OpenDentBusiness.SigMessage)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SigMessages.ClearOldSigMessages">
            <summary>Deletes all sigmessages older than 2 days.  Will fail silently if anything goes wrong.</summary>
        </member>
        <member name="T:OpenDentBusiness.StmtAdjAttaches">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StmtAdjAttaches.Insert(OpenDentBusiness.StmtAdjAttach)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StmtAdjAttaches.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StmtAdjAttaches.DetachFromStatement(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StmtAdjAttaches.DetachAllFromStatements(System.Collections.Generic.List{System.Int64})">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StmtAdjAttaches.GetForStatement(System.Int64)">
            <summary>Gets AdjNums for all adjustments attached to a statement.  Returns an empty list if statementNum is invalid.</summary>
        </member>
        <member name="T:OpenDentBusiness.StmtPaySplitAttaches">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StmtPaySplitAttaches.Insert(OpenDentBusiness.StmtPaySplitAttach)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StmtPaySplitAttaches.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StmtPaySplitAttaches.DetachFromStatement(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StmtPaySplitAttaches.DetachAllFromStatements(System.Collections.Generic.List{System.Int64})">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StmtPaySplitAttaches.GetForStatement(System.Int64)">
            <summary>Gets PaySplitNums for all paysplits attached to a statement.  Returns an empty list if statementNum is invalid.</summary>
        </member>
        <member name="T:OpenDentBusiness.StmtProcAttaches">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StmtProcAttaches.Insert(OpenDentBusiness.StmtProcAttach)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StmtProcAttaches.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StmtProcAttaches.DetachFromStatement(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StmtProcAttaches.DetachAllFromStatements(System.Collections.Generic.List{System.Int64})">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StmtProcAttaches.GetForStatement(System.Int64)">
            <summary>Gets ProcNums for all procedures attached to a statement.  Returns an empty list if statementNum is invalid.</summary>
        </member>
        <member name="T:OpenDentBusiness.TreatPlanAttaches">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlanAttaches.Insert(OpenDentBusiness.TreatPlanAttach)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlanAttaches.Update(OpenDentBusiness.TreatPlanAttach)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlanAttaches.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlanAttaches.GetAllForPatNum(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlanAttaches.GetAllForTPs(System.Collections.Generic.List{System.Int64})">
            <summary>Gets all treatplanattaches with TreatPlanNum in listTpNums.</summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlanAttaches.GetAllForTreatPlan(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlanAttaches.DeleteOrphaned">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlanAttaches.Sync(System.Collections.Generic.List{OpenDentBusiness.TreatPlanAttach},System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlanAttaches.DeleteMany(System.Collections.Generic.List{OpenDentBusiness.TreatPlanAttach})">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.UpdateHistories">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UpdateHistories.GetOne(System.Int64)">
            <summary>Gets one UpdateHistory from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.UpdateHistories.Insert(OpenDentBusiness.UpdateHistory)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UpdateHistories.Update(OpenDentBusiness.UpdateHistory)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UpdateHistories.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UpdateHistories.GetAll">
            <summary>All updatehistory entries ordered by DateTimeUpdated.</summary>
        </member>
        <member name="M:OpenDentBusiness.UpdateHistories.GetForVersion(System.String)">
            <summary>Returns the latest version information.</summary>
        </member>
        <member name="M:OpenDentBusiness.UpdateHistories.GetDateForVersion(System.Version)">
            <summary>Returns the earliest datetime that a version was reached. If that version has not been reached, returns the MinDate.</summary>
        </member>
        <member name="T:OpenDentBusiness.UserOdPrefs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserOdPrefs.Update(OpenDentBusiness.UserOdPref)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserOdPrefs.Insert(OpenDentBusiness.UserOdPref)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserOdPrefs.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserOdPrefs.DeleteForFkey(System.Int64,OpenDentBusiness.UserOdFkeyType,System.Int64)">
            <summary>Deletes UserOdPref with provided parameters.  If "userNum" is 0 then will delete all UserOdPref's with corresponding fkeyType and fkey.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserOdPrefs.DeleteForValueString(System.Int64,OpenDentBusiness.UserOdFkeyType,System.String)">
            <summary>Deletes UserOdPref with provided parameters.
            If "userNum" is 0 then will delete all UserOdPref's with corresponding fkeyType and valueString.</summary>
        </member>
        <member name="T:OpenDentBusiness.UserWebs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserWebs.GetOne(System.Int64)">
            <summary>Gets one UserWeb from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserWebs.Insert(OpenDentBusiness.UserWeb)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserWebs.Update(OpenDentBusiness.UserWeb)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserWebs.Update(OpenDentBusiness.UserWeb,OpenDentBusiness.UserWeb)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserWebs.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserWebs.GetByUserNameAndPassword(System.String,System.String,OpenDentBusiness.UserWebFKeyType)">
            <summary>Gets the UserWeb associated to the passed in username and hashed password.  Must provide the FKeyType.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserWebs.GetByUserName(System.String,OpenDentBusiness.UserWebFKeyType)">
            <summary>Gets the UserWeb associated to the passed in username.  Must provide the FKeyType.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserWebs.GetByUserNameAndResetCode(System.String,System.String,OpenDentBusiness.UserWebFKeyType)">
            <summary>Gets the UserWeb associated to the passed in username and reset code.  Must provide the FKeyType.  Returns null if not found.</summary>
        </member>
        <member name="T:OpenDentBusiness.XWebResponses">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.XWebResponses.GetOne(System.Int64)">
            <summary>Gets one XWebResponse from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.XWebResponses.GetApprovedTransactions(System.Collections.Generic.List{System.Int64},System.DateTime,System.DateTime)">
            <summary>Gets the XWeb transactions for approved transactions. To get for all clinics, pass in a list of empty clinicNums.</summary>
        </member>
        <member name="M:OpenDentBusiness.XWebResponses.GetOneByPaymentNum(System.Int64)">
            <summary>Gets the XWebResponse that is associated with this payNum. Returns null if the XWebResponse does not exist.</summary>
        </member>
        <member name="M:OpenDentBusiness.XWebResponses.GetPendingHPFs">
            <summary>Gets all XWebResponses where TransactionStatus==XWebTransactionStatus.HpfPending from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.XWebResponses.Insert(OpenDentBusiness.XWebResponse)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.XWebResponses.Update(OpenDentBusiness.XWebResponse)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.FamAgings">
            <summary>This class will likely never be used.  The famaging table is used to store intermediate calculations for aging and once the patient
            table is updated the data is never accessed again.  A new aging calculation begins with truncating this table.  All edit commands, i.e. truncate,
            insert, etc., take place in the queries in Ledgers.ComputeAging.</summary>
        </member>
        <member name="T:OpenDentBusiness.Bugs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Bugs.GetByVersion(System.String,System.String)">
            <summary>Must pass in version as "Maj" or "Maj.Min" or "Maj.Min.Rev". Uses like operator.</summary>
        </member>
        <member name="M:OpenDentBusiness.Bugs.GetAll">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Bugs.GetOne(System.Int64)">
            <summary>Gets one Bug from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Bugs.Insert(OpenDentBusiness.Bug)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Bugs.Update(OpenDentBusiness.Bug)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Bugs.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.UserClinics">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.UserClinics._listt">
            <summary>A list of all UserClinics.</summary>
        </member>
        <member name="P:OpenDentBusiness.UserClinics.Listt">
            <summary>A list of all UserClinics.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserClinics.GetListt">
            <summary>A list of all UserCliniics.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserClinics.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserClinics.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserClinics.GetForUser(System.Int64)">
            <summary>Gets all User to Clinic associations for the user.  Can return an empty list if there are none.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserClinics.GetForClinic(System.Int64)">
            <summary>Gets all User to Clinic associations for a clinic.  Can return an empty list if there are none.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserClinics.GetOne(System.Int64)">
            <summary>Gets one UserClinic from cache.  Can return null if none are found.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserClinics.Insert(OpenDentBusiness.UserClinic)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserClinics.Update(OpenDentBusiness.UserClinic)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserClinics.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserClinics.DeleteForUser(System.Int64)">
            <summary>Deletes all User to Clinic associations for a specific user.</summary>
        </member>
        <member name="T:OpenDentBusiness.JobNotes">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobNotes.GetOne(System.Int64)">
            <summary>Gets one JobNote from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobNotes.Insert(OpenDentBusiness.JobNote)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobNotes.Update(OpenDentBusiness.JobNote)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobNotes.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobNotes.Sync(System.Collections.Generic.List{OpenDentBusiness.JobNote},System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobNotes.GetJobNotesForJobs(System.Collections.Generic.List{System.Int64})">
            <summary>Gets JobLinks for a specified JobNum. Only gets Bugs, Feature Requests, and Tasks.</summary>
        </member>
        <member name="T:OpenDentBusiness.JobQuotes">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobQuotes.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobQuotes.GetOne(System.Int64)">
            <summary>Gets one JobQuote from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobQuotes.Insert(OpenDentBusiness.JobQuote)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobQuotes.Update(OpenDentBusiness.JobQuote)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobQuotes.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.JobPermissions">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.JobPermissions._list">
            <summary>JobRoles cannot be hidden so there is only one list.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobPermissions.RefreshCache">
            <summary>Refresh all jobroles.  Not actually part of official cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobPermissions.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobPermissions.IsAuthorized(OpenDentBusiness.JobPerm,System.Boolean,System.Int64)">
            <summary>Checks to see if user is authorized, if no user provided checks currently logged in user.  If not authorized and not suppressed, it gives a Message box saying so and returns false.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobPermissions.GetForUser(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobPermissions.GetOne(System.Int64)">
            <summary>Gets one JobRole from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobPermissions.Insert(OpenDentBusiness.JobPermission)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobPermissions.Update(OpenDentBusiness.JobPermission)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobPermissions.Sync(System.Collections.Generic.List{OpenDentBusiness.JobPermission},System.Int64)">
            <summary>Inserts, updates, or deletes the passed in list against rows for the passed in user.  Returns true if db changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobPermissions.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ProviderErxs">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderErxs.listt">
            <summary>A list of all ProviderErxs.</summary>
        </member>
        <member name="P:OpenDentBusiness.ProviderErxs.Listt">
            <summary>A list of all ProviderErxs.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderErxs.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderErxs.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderErxs.Refresh(System.Int64)">
            <summary>Gets from db.  Used from FormErxAccess at HQ only.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderErxs.GetOneForNpi(System.String)">
            <summary>Gets one ProviderErx from the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderErxs.GetAllUnsent">
            <summary>Gets all ProviderErx which have not yet been sent to HQ.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderErxs.Insert(OpenDentBusiness.ProviderErx)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderErxs.Update(OpenDentBusiness.ProviderErx,OpenDentBusiness.ProviderErx)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderErxs.Sync(System.Collections.Generic.List{OpenDentBusiness.ProviderErx},System.Collections.Generic.List{OpenDentBusiness.ProviderErx})">
            <summary>Inserts, updates, or deletes the passed in list verses the old list.  Returns true if db changes were made.</summary>
        </member>
        <member name="T:OpenDentBusiness.StateAbbrs">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.StateAbbrs.listt">
            <summary>A list of all StateAbbrs.</summary>
        </member>
        <member name="P:OpenDentBusiness.StateAbbrs.Listt">
            <summary>A list of all StateAbbrs.</summary>
        </member>
        <member name="M:OpenDentBusiness.StateAbbrs.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StateAbbrs.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StateAbbrs.Insert(OpenDentBusiness.StateAbbr)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StateAbbrs.Update(OpenDentBusiness.StateAbbr)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StateAbbrs.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.StateAbbrs.GetSimilarAbbrs(System.String)">
            <summary>Returns a list of StatesAbbrs with abbreviations similar to the supplied string.
            Used in dropdown list from state field for faster entry.</summary>
        </member>
        <member name="M:OpenDentBusiness.StateAbbrs.GetMedicaidIDLength(System.String)">
            <summary>Returns the Medicaid ID Length for a given abbreviation.</summary>
        </member>
        <member name="M:OpenDentBusiness.StateAbbrs.IsValidAbbr(System.String)">
            <summary>Returns true if the abbreviation exists in the stateabbr table.</summary>
        </member>
        <member name="T:OpenDentBusiness.RequiredFieldConditions">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldConditions.listt">
            <summary>A list of all RequiredFieldConditions.</summary>
        </member>
        <member name="P:OpenDentBusiness.RequiredFieldConditions.Listt">
            <summary>A list of all RequiredFieldConditions.</summary>
        </member>
        <member name="M:OpenDentBusiness.RequiredFieldConditions.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RequiredFieldConditions.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RequiredFieldConditions.GetForRequiredField(System.Int64)">
            <summary>Gets the requiredfieldconditions for one required field.</summary>
        </member>
        <member name="M:OpenDentBusiness.RequiredFieldConditions.Insert(OpenDentBusiness.RequiredFieldCondition)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RequiredFieldConditions.Update(OpenDentBusiness.RequiredFieldCondition)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.RequiredFields">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFields.listt">
            <summary>A list of all RequiredFields.</summary>
        </member>
        <member name="P:OpenDentBusiness.RequiredFields.Listt">
            <summary>A list of all RequiredFields.</summary>
        </member>
        <member name="M:OpenDentBusiness.RequiredFields.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RequiredFields.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RequiredFields.Insert(OpenDentBusiness.RequiredField)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RequiredFields.Update(OpenDentBusiness.RequiredField)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RequiredFields.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EServiceMetrics">
            <summary>HQ only. This is NOT a table type. It is a class that is populated by the Broadcaster at a fairly frequenty interval (30 seconds or so).
            It is then serialized and saved as a ESerivceSignal via upsert. Each HQ workstation will then select that EServiceSignal very frequently and display the results.</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceMetrics.Timestamp">
            <summary>Time at which this data was generated. It past a certain threshold in the past then consider the data invalid.</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceMetrics.IsBroadcasterHeartbeatOk">
            <summary>True if all Broadcaster heartbeats are current and not critical; otherwise false.</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceMetrics.Warnings">
            <summary>Count of unprocessed warnings issued by Broadcaster.</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceMetrics.Errors">
            <summary>Count of unprocessed errors issued by Broadcaster</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceMetrics.InboundMessageCount">
            <summary>Count of messages sent out from doctors to patients in the given date range.</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceMetrics.OutboundMessageCount">
            <summary>Count of messages received from patients in the given date range.</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceMetrics.TotalChargedToCustomersUSD">
            <summary>Total charges that will be billed to OD customers for the given outbound messages.</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceMetrics.AccountBalanceEuro">
            <summary>Retreived from NexmoAPI.GetAccountBalance().</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceMetrics.IsValid">
            <summary>If true then this data is valid and came from the Broadcaster AccountMaintThread; otherwise this data is not accurate.
            Will be set after deserialization to indicate that the data was found and deserialized correctly.</summary>
        </member>
        <member name="P:OpenDentBusiness.EServiceMetrics.Severity">
            <summary>This is derived property. Do not serialize.</summary>
        </member>
        <member name="M:OpenDentBusiness.EServiceMetrics.GetEServiceMetricsFromSignalHQ">
            <summary>Gets one EServiceSignalHQ from the serviceshq db located on SERVER184. Returns null in case of failure.</summary>
        </member>
        <member name="M:OpenDentBusiness.EServiceMetrics.CalculateMetricsForToday(System.Single)">
            <summary>Get metrics from serviceshq.</summary>
        </member>
        <member name="M:OpenDentBusiness.EServiceMetrics.CalculateMetricsForDateRange(System.DateTime,System.DateTime,System.Single)">
            <summary>Get metrics from serviceshq.</summary>
             <param name="dateTimeStart">Used for message counts.</param>
             <param name="dateTimeEnd">Used for message counts.</param>
        </member>
        <member name="T:OpenDentBusiness.Allergies">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Allergies.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Allergies.GetOne(System.Int64)">
            <summary>Gets one Allergy from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Allergies.Insert(OpenDentBusiness.Allergy)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Allergies.Update(OpenDentBusiness.Allergy)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Allergies.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Allergies.GetAll(System.Int64,System.Boolean)">
            <summary>Gets all allergies for patient whether active or not.</summary>
        </member>
        <member name="M:OpenDentBusiness.Allergies.GetMultAllergies(System.Collections.Generic.List{System.Int64})">
            <summary>Used along with GetChangedSinceAllergyNums</summary>
        </member>
        <member name="M:OpenDentBusiness.Allergies.GetPatNamesForAllergy(System.Int64)">
            <summary>Returns an array of all patient names who are using this allergy.</summary>
        </member>
        <member name="M:OpenDentBusiness.Allergies.GetPatientsWithAllergy(System.Collections.Generic.List{System.Int64})">
            <summary>Returns a list of PatNums that have an allergy from the PatNums that are passed in.</summary>
        </member>
        <member name="M:OpenDentBusiness.Allergies.ResetTimeStamps(System.Int64)">
            <summary>Changes the value of the DateTStamp column to the current time stamp for all allergies of a patient</summary>
        </member>
        <member name="M:OpenDentBusiness.Allergies.ResetTimeStamps(System.Int64,System.Boolean)">
            <summary>Changes the value of the DateTStamp column to the current time stamp for all allergies of a patient that are the status specified</summary>
        </member>
        <member name="T:OpenDentBusiness.AllergyDefs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AllergyDefs.GetOne(System.Int64)">
            <summary>Gets one AllergyDef from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.AllergyDefs.GetOne(System.Int64,System.Collections.Generic.List{OpenDentBusiness.AllergyDef})">
            <summary>Gets one AllergyDef matching the specified allergyDefNum from the list passed in. If none found will search the db for a matching allergydef. Returns null if not found in the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.AllergyDefs.GetByDescription(System.String)">
            <summary>Gets one AllergyDef from the db with matching description, returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.AllergyDefs.Insert(OpenDentBusiness.AllergyDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AllergyDefs.Update(OpenDentBusiness.AllergyDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AllergyDefs.TableToList(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AllergyDefs.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AllergyDefs.GetAll(System.Boolean)">
            <summary>Gets all AllergyDefs based on hidden status.</summary>
        </member>
        <member name="M:OpenDentBusiness.AllergyDefs.DefIsInUse(System.Int64)">
            <summary>Returns true if the allergy def is in use and false if not.</summary>
        </member>
        <member name="M:OpenDentBusiness.AllergyDefs.GetMultAllergyDefs(System.Collections.Generic.List{System.Int64})">
            <summary>Used along with GetChangedSinceAllergyDefNums</summary>
        </member>
        <member name="M:OpenDentBusiness.AllergyDefs.GetSnomedAllergyDesc(OpenDentBusiness.SnomedAllergy)">
            <summary>Do not call from outside of ehr.  Returns the text for a SnomedAllergy Enum as it should appear in human readable form for a CCD.</summary>
        </member>
        <member name="M:OpenDentBusiness.AllergyDefs.GetDescription(System.Int64)">
            <summary>Returns the name of the allergy. Returns an empty string if allergyDefNum=0.</summary>
        </member>
        <member name="M:OpenDentBusiness.AllergyDefs.GetAllergyDefFromCode(System.String)">
            <summary>Returns the AllergyDef with the corresponding SNOMED allergyTo code. Returns null if codeValue is empty string.</summary>
        </member>
        <member name="M:OpenDentBusiness.AllergyDefs.GetAllergyDefFromMedication(System.Int64)">
            <summary>Returns the AllergyDef with the corresponding Medication. Returns null if medicationNum is 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.AllergyDefs.GetAllergyDefFromRxnorm(System.Int64)">
            <summary>Returns the AllergyDef set to SnomedType 2 (DrugAllergy) or SnomedType 3 (DrugIntolerance) that is attached to a medication with this rxnorm.  Returns null if rxnorm is 0 or no allergydef for this rxnorm exists.  Used by HL7 service for inserting drug allergies for patients.</summary>
        </member>
        <member name="T:OpenDentBusiness.AppointmentTypes">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AppointmentTypes.listt">
            <summary>A list of all AppointmentTypes.</summary>
        </member>
        <member name="P:OpenDentBusiness.AppointmentTypes.Listt">
            <summary>A list of all AppointmentTypes.</summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentTypes.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentTypes.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentTypes.GetListt">
            <summary>Returns a deep copy of Listt.</summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentTypes.Sync(System.Collections.Generic.List{OpenDentBusiness.AppointmentType},System.Collections.Generic.List{OpenDentBusiness.AppointmentType})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.</summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentTypes.GetOne(System.Int64)">
            <summary>Gets one AppointmentType from the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentTypes.Insert(OpenDentBusiness.AppointmentType)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentTypes.Update(OpenDentBusiness.AppointmentType)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentTypes.Delete(System.Int64)">
            <summary>Surround with try catch.</summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentTypes.CheckInUse(OpenDentBusiness.AppointmentType)">
            <summary>Used when attempting to delete.</summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentTypes.Compare(OpenDentBusiness.AppointmentType,OpenDentBusiness.AppointmentType)">
            <summary>Returns true if all members are the same.</summary>
        </member>
        <member name="T:OpenDentBusiness.ApptFieldDefs">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ApptFieldDefs.listt">
            <summary>A list of all ApptFieldDefs.</summary>
        </member>
        <member name="P:OpenDentBusiness.ApptFieldDefs.Listt">
            <summary>A list of all ApptFieldDefs.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptFieldDefs.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptFieldDefs.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptFieldDefs.Update(OpenDentBusiness.ApptFieldDef,System.String)">
            <summary>Must supply the old field name so that the apptFields attached to appointments can be updated.  Will throw exception if new FieldName is already in use.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptFieldDefs.Insert(OpenDentBusiness.ApptFieldDef)">
            <summary>Surround with try/catch in case field name already in use.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptFieldDefs.Delete(OpenDentBusiness.ApptFieldDef)">
            <summary>Surround with try/catch, because it will throw an exception if any appointment is using this def.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptFieldDefs.GetPickListByFieldName(System.String)">
            <summary>GetPickListByFieldName returns the pick list identified by the field name passed as a parameter.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptFieldDefs.HasDuplicateFieldNames">
            <summary>Returns true if there are any duplicate field names in the entire apptfielddef table.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptFieldDefs.GetFieldDefByFieldName(System.String)">
            <summary>Returns the ApptFieldDef for the specified field name. Returns null if an ApptFieldDef does not exist for that field name.</summary>
        </member>
        <member name="T:OpenDentBusiness.ApptFields">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptFields.GetOne(System.Int64)">
            <summary>Gets one ApptField from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptFields.Insert(OpenDentBusiness.ApptField)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptFields.Update(OpenDentBusiness.ApptField)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptFields.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.AutomationConditions">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationConditions.listt">
            <summary>A list of all AutomationConditions.</summary>
        </member>
        <member name="P:OpenDentBusiness.AutomationConditions.Listt">
            <summary>A list of all AutomationConditions.</summary>
        </member>
        <member name="M:OpenDentBusiness.AutomationConditions.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutomationConditions.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutomationConditions.GetOne(System.Int64)">
            <summary>Gets one AutomationCondition from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.AutomationConditions.GetListByAutomationNum(System.Int64)">
            <summary>Gets a list of AutomationConditions from the db by AutomationNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.AutomationConditions.Insert(OpenDentBusiness.AutomationCondition)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutomationConditions.Update(OpenDentBusiness.AutomationCondition)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutomationConditions.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutomationConditions.DeleteByAutomationNum(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Automations">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Automations.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Automations.Insert(OpenDentBusiness.Automation)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Automations.Update(OpenDentBusiness.Automation)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Automations.Delete(OpenDentBusiness.Automation)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.CDSPermissions">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CDSPermissions.GetAll">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CDSPermissions.InsertMissingValues">
            <summary>Inserts one row per UserOD if they do not have one already.</summary>
        </member>
        <member name="M:OpenDentBusiness.CDSPermissions.Insert(OpenDentBusiness.CDSPermission)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CDSPermissions.Update(OpenDentBusiness.CDSPermission)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ConnectionGroups">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ConnectionGroups.listt">
            <summary>A list of all ConnectionGroups.</summary>
        </member>
        <member name="P:OpenDentBusiness.ConnectionGroups.Listt">
            <summary>A list of all ConnectionGroups.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConnectionGroups.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConnectionGroups.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConnectionGroups.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConnectionGroups.Sync(System.Collections.Generic.List{OpenDentBusiness.ConnectionGroup})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConnectionGroups.GetOne(System.Int64)">
            <summary>Gets one ConnectionGroup from the db based on the ConnectionGroupNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConnectionGroups.GetByDescription(System.String)">
            <summary>Gets ConnectionGroups based on description.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConnectionGroups.Insert(OpenDentBusiness.ConnectionGroup)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConnectionGroups.Update(OpenDentBusiness.ConnectionGroup)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConnectionGroups.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ConnGroupAttaches">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConnGroupAttaches.Sync(System.Collections.Generic.List{OpenDentBusiness.ConnGroupAttach},System.Int64)">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Must always pass in ConnectionGroupNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConnGroupAttaches.GetOne(System.Int64)">
            <summary>Gets one ConnGroupAttach from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConnGroupAttaches.GetAll">
            <summary>Gets all conn group attaches from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConnGroupAttaches.GetForGroup(System.Int64)">
            <summary>Gets all ConnGroupAttaches for a given ConnectionGroupNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConnGroupAttaches.GetForConnection(System.Int64)">
            <summary>Gets all ConnGroupAttaches for a given CentralConnectionNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConnGroupAttaches.Insert(OpenDentBusiness.ConnGroupAttach)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConnGroupAttaches.Update(OpenDentBusiness.ConnGroupAttach)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConnGroupAttaches.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DispSupplies">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DispSupplies.RefreshDispensary(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DispSupplies.Insert(OpenDentBusiness.DispSupply)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrAptObses">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrAptObses.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrAptObses.Insert(OpenDentBusiness.EhrAptObs)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrAptObses.Update(OpenDentBusiness.EhrAptObs)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrAptObses.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrCarePlans">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCarePlans.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCarePlans.Insert(OpenDentBusiness.EhrCarePlan)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCarePlans.Update(OpenDentBusiness.EhrCarePlan)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCarePlans.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabClinicalInfos">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabClinicalInfos.GetForLab(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabClinicalInfos.DeleteForLab(System.Int64)">
            <summary>Deletes notes for lab results too.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabClinicalInfos.Insert(OpenDentBusiness.EhrLabClinicalInfo)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabImages">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabImages.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabImages.IsWaitingForImages(System.Int64)">
            <summary>Returns true if a row containing the given EhrLabNum and DocNum==-1 is found.  Otherwise returns false.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabImages.GetFirstLabForDocNum(System.Int64)">
            <summary>EhrLab first EhrLab which this docNum is attached to. Or returns null if docNum is not attached to any EhrLabs.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabImages.InsertAllForLabNum(System.Int64,System.Boolean,System.Collections.Generic.List{System.Int64})">
            <summary>Create an entry per each docNum in the list. If setting isWaiting flag to true then create a row containing the given EhrLabNum and DocNum==-1.  Otherwise omit such a row.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabImages.DeleteForLab(System.Int64)">
            <summary>Delete all rows for a given EhrLabNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabImages.GetDocNumExistsInList(System.Int64,System.Int64,System.Collections.Generic.List{OpenDentBusiness.EhrLabImage})">
            <summary>From local list. Returns true if EhrLabImage is found. Otherwise returns false.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabImages.GetFromList(System.Int64,System.Int64,System.Collections.Generic.List{OpenDentBusiness.EhrLabImage})">
            <summary>From local list. Returns EhrLabImage if found. Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabImages.Insert(OpenDentBusiness.EhrLabImage)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabNotes">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabNotes.GetForLab(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabNotes.GetForLabResult(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabNotes.DeleteForLab(System.Int64)">
            <summary>Deletes notes for lab results too.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabNotes.Insert(OpenDentBusiness.EhrLabNote)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabResults">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabResults.InsertItem(OpenDentBusiness.EhrLabResult)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabResults.Insert(OpenDentBusiness.EhrLabResult)">
            <summary>Does not insert lab result notes if attached.  Use InsertItem instead.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabResults.GetAllForPatient(System.Int64)">
            <summary>Get all lab results for one patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabResults.GetForLab(System.Int64)">
            <summary>Returns all EhrLabResults for a given EhrLab.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabResults.DeleteForLab(System.Int64)">
            <summary>Only deletes the notes for the Lab, there may still be notes attached to LabResults, that are attached to the lab.  Those notes are taken care of by DeleteForLabResults().</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabResults.GetHL70078Descriptions">
            <summary>Helper function to return a list of descriptions for the HL70078 enumeration.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabResults.GetHL70085Descriptions">
            <summary>Helper function to return a list of descriptions for the HL70085 enumeration.  First item in the list is blank.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabResults.GetHL70125Descriptions">
            <summary>Helper function to return a list of descriptions for the HL70125 enumeration.  First item in the list is blank.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabResults.GetHL70190Descriptions">
            <summary>Helper function to return a list of descriptions for the HL70190 enumeration.  First item in the list is blank.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabResults.GetHL70200Descriptions">
            <summary>Helper function to return a list of descriptions for the HL70200 enumeration.  First item in the list is blank.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabResults.GetUSPSAlphaStateCodeDescriptions">
            <summary>Helper function to return a list of descriptions for the USPSAlphaStateCode enumeration.  First item in the list is blank.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabResultsCopyTos">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabResultsCopyTos.GetForLab(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabResultsCopyTos.DeleteForLab(System.Int64)">
            <summary>Deletes notes for lab results too.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabResultsCopyTos.Insert(OpenDentBusiness.EhrLabResultsCopyTo)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabs.FindAttachedPatient(System.String)">
            <summary>Given an HL7 message, will attempt to fin the corresponding patient.  Will return null if not found.</summary>
             <param name="message"></param>
        </member>
        <member name="M:OpenDentBusiness.EhrLabs.ProcessHl7Message(System.String,System.Boolean)">
            <summary>Allows message to be processed and imported and will initialize empty lists instead of leaving them null.</summary>
            <param name="IsImport">Set to true if using for import preview.</param>
        </member>
        <member name="M:OpenDentBusiness.EhrLabs.ProcessHl7Message(System.String,OpenDentBusiness.Patient,System.Boolean)">
            <summary>Surround with Try/Catch.  Processes an HL7 message into an EHRLab object.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabs.GenerateAckMsg(System.String)">
            <summary>Not implemented. We do not yet need to acknowledge incoming messages.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabs.containsRequiredSegmentsHelper(System.String)">
            <summary>Throws an exception if message does not contain all required segments, or contains too many segments of a given type.  Does not validate contents of segments.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabs.SaveToDB(OpenDentBusiness.EhrLab)">
            <summary>Saves EhrLab to DB and all child elements.  Note: this can be used to overwrite new data with old data when viewing old messages.  
            Make sure you want to save all new data.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabs.GetOne(System.Int64)">
            <summary>Gets one EhrLab from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabs.GetByGUID(System.String,System.String)">
            <summary>Gets one EhrLab from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabs.GetAllForPat(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabs.GetAllForPatInDateRange(System.Int64,System.DateTime,System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabs.GetHL70203Descriptions">
            <summary>Helper function to return a list of descriptions for the HL70203 enumeration.  First item in the list is blank.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabs.GetHL70065Descriptions">
            <summary>Helper function to return a list of descriptions for the HL70065 enumeration.  First item in the list is blank.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabs.GetHL70123Descriptions">
            <summary>Helper function to return a list of descriptions for the HL70123 enumeration.  First item in the list is blank.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabs.Insert(OpenDentBusiness.EhrLab)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabs.Update(OpenDentBusiness.EhrLab)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabs.Delete(System.Int64)">
            <summary>Deletes EhrLab, EhrLabResults, EhrLabResultsCopyTos, EhrLabClinicalInfos, and EhrLabSpecimens.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabSpecimenConditions">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabSpecimenConditions.GetForEhrLabSpecimen(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabSpecimenConditions.DeleteForLab(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabSpecimenConditions.DeleteForLabSpecimen(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabSpecimenConditions.Insert(OpenDentBusiness.EhrLabSpecimenCondition)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabSpecimenRejectReasons">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabSpecimenRejectReasons.GetForEhrLabSpecimen(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabSpecimenRejectReasons.DeleteForLab(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabSpecimenRejectReasons.DeleteForLabSpecimen(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabSpecimenRejectReasons.Insert(OpenDentBusiness.EhrLabSpecimenRejectReason)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabSpecimens">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabSpecimens.GetForLab(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabSpecimens.DeleteForLab(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabSpecimens.InsertItem(OpenDentBusiness.EhrLabSpecimen)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrPatients">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrPatients.Refresh(System.Int64)">
            <summary>Only call when EHR is enabled.  Creates the ehrpatient record for the patient if a record does not already exist.  Always returns a non-null EhrPatient.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrPatients.Update(OpenDentBusiness.EhrPatient)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrPatients.Insert(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrPatients.GetOne(System.Int64)">
            <summary>Gets one EhrPatient from the db.  Returns null if there is no entry.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrTriggers">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrTriggers.TriggerMatch(System.Object,OpenDentBusiness.Patient)">
            <summary>This is the first step of automation, this checks to see if the new object matches one of the trigger conditions. </summary>
             <param name="triggerObject">Can be DiseaseDef, ICD9, Icd10, Snomed, Medication, RxNorm, Cvx, AllerfyDef, EHRLabResult, Patient, or VitalSign.</param>
             <param name="patCur">Triggers and intervention are currently always dependant on current patient. </param>
             <returns>Returns a list of CDSInterventions. Should be used to generate CDS intervention message and later be passed to FormInfobutton for knowledge request.</returns>
        </member>
        <member name="M:OpenDentBusiness.EhrTriggers.AddCDSIforOneOfEachTwoOrMoreAll(System.Object,System.String,OpenDentBusiness.Patient,OpenDentBusiness.EhrTrigger,System.Collections.Generic.List{OpenDentBusiness.CDSIntervention}@,System.Collections.Generic.List{OpenDentBusiness.MedicationPat},System.Collections.Generic.List{OpenDentBusiness.Allergy},System.Collections.Generic.List{OpenDentBusiness.DiseaseDef},System.Collections.Generic.List{OpenDentBusiness.EhrLab})">
            <summary>Adds interventions for all cardinalities except "One".</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrTriggers.OneOfEachCategoryHelper(OpenDentBusiness.EhrTrigger,System.Collections.Generic.List{System.Object})">
            <summary>Returns true if ListObjectMatches satisfies trigger conditions.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrTriggers.ConvertToKnowledgeRequests(System.Object)">
            <summary>Turns a trigger object into a list of KnowledgeReqests that can be passed to FormInfoButton. The supported objects are DiseaseDef,
            Medication, MedicationPat, ICD9, Icd10, Snomed, RxNorm, EhrLabResult, Loinc, and AllergyDef. If the passed in object is not one of these 
            objects, this method will return an empty list.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrTriggers.ConvertListToKnowledgeRequests(System.Collections.Generic.List{System.Object})">
            <summary>Turns a list of trigger objects into a list of KnowledgeReqests that can be passed to FormInfoButton. The supported objects are 
            DiseaseDef, Medication, MedicationPat, ICD9, Icd10, Snomed, RxNorm, EhrLabResult, Loinc, and AllergyDef. If none of the passed in objects are 
            one of these objects, this method will return an empty list.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrTriggers.Insert(OpenDentBusiness.EhrTrigger)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrTriggers.Update(OpenDentBusiness.EhrTrigger)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrTriggers.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Cdcrecs">
            <summary>Cache pattern only used for updates.</summary>
        </member>
        <member name="M:OpenDentBusiness.Cdcrecs.Insert(OpenDentBusiness.Cdcrec)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Cdcrecs.Update(OpenDentBusiness.Cdcrec)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Cdcrecs.GetAllCodes">
            <summary>Returns a list of just the codes for use in update or insert logic.</summary>
        </member>
        <member name="M:OpenDentBusiness.Cdcrecs.GetCodeCount">
            <summary>Returns the total count of CDCREC codes.  CDCREC codes cannot be hidden.</summary>
        </member>
        <member name="T:OpenDentBusiness.CentralConnections">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CentralConnections.GetConnections">
            <summary>Gets all the central connections from the database ordered by ItemOrder.</summary>
        </member>
        <member name="M:OpenDentBusiness.CentralConnections.FilterConnections(System.Collections.Generic.List{OpenDentBusiness.CentralConnection},System.String,OpenDentBusiness.ConnectionGroup)">
            <summary>Filters _listConns to only include connections that are associated to the selected connection group.</summary>
        </member>
        <member name="M:OpenDentBusiness.CentralConnections.Insert(OpenDentBusiness.CentralConnection)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CentralConnections.Update(OpenDentBusiness.CentralConnection)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CentralConnections.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CentralConnections.Encrypt(System.String,System.Byte[])">
            <summary>Encrypts signature text and returns a base 64 string so that it can go directly into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.CentralConnections.GenerateHash(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CentralConnections.GetConnectionString(OpenDentBusiness.CentralConnection)">
            <summary>Supply a CentralConnection and this method will go through the logic to put together the connection string.</summary>
        </member>
        <member name="M:OpenDentBusiness.CentralConnections.ByteToStr(System.Byte)">
            <summary>The only valid input is a value between 0 and 15.  Text returned will be 1-9 or a-f.</summary>
        </member>
        <member name="T:OpenDentBusiness.ChartViews">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViews.listt">
            <summary>A list of all ChartViews.</summary>
        </member>
        <member name="P:OpenDentBusiness.ChartViews.Listt">
            <summary>A list of all ChartViews.</summary>
        </member>
        <member name="M:OpenDentBusiness.ChartViews.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ChartViews.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ChartViews.Insert(OpenDentBusiness.ChartView)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ChartViews.Update(OpenDentBusiness.ChartView)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ChartViews.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.CodeSystems">
            <summary>Import functions in this class should typically be called from a worker thread.</summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystems.GetForCurrentVersion(System.Boolean)">
            <summary>Returns a list of code systems in the code system table.  This query will change from version to version depending on what code systems we have available.</summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystems.Update(OpenDentBusiness.CodeSystem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystems.UpdateCurrentVersion(OpenDentBusiness.CodeSystem)">
            <summary>Updates VersionCurrent to the VersionAvail of the codeSystem object passed in. Used by code system importer after successful import.</summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystems.UpdateCurrentVersion(OpenDentBusiness.CodeSystem,System.String)">
            <summary>Updates VersionCurrent to the versionID passed in. Used by code system importer after successful import.  Currently only used for CPT.</summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystems.ImportCdcrec(System.String,OpenDentBusiness.CodeSystems.ProgressArgs,System.Boolean@,System.Int32@,System.Int32@,System.Boolean)">
            <summary>Called after file is downloaded.  Throws exceptions.  It is assumed that this is called from a worker thread.  Progress delegate will be called every 100th iteration to inform thread of current progress. Quit flag can be set at any time in order to quit importing prematurely.</summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystems.ImportCpt(System.String,OpenDentBusiness.CodeSystems.ProgressArgs,System.Boolean@,System.Int32@,System.Int32@,System.String)">
            <summary>Called after user provides resource file.  Throws exceptions.  It is assumed that this is called from a worker thread.  Progress delegate will be called every 100th iteration to inform thread of current progress. Quit flag can be set at any time in order to quit importing prematurely.
            No UpdateExisting parameter because we force users to accept new descriptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystems.ImportCvx(System.String,OpenDentBusiness.CodeSystems.ProgressArgs,System.Boolean@,System.Int32@,System.Int32@,System.Boolean)">
            <summary>Called after file is downloaded.  Throws exceptions.  It is assumed that this is called from a worker thread.  Progress delegate will be called every 100th iteration to inform thread of current progress. Quit flag can be set at any time in order to quit importing prematurely.</summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystems.ImportHcpcs(System.String,OpenDentBusiness.CodeSystems.ProgressArgs,System.Boolean@,System.Int32@,System.Int32@,System.Boolean)">
            <summary>Called after file is downloaded.  Throws exceptions.  It is assumed that this is called from a worker thread.  Progress delegate will be called every 100th iteration to inform thread of current progress. Quit flag can be set at any time in order to quit importing prematurely.</summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystems.ImportIcd10(System.String,OpenDentBusiness.CodeSystems.ProgressArgs,System.Boolean@,System.Int32@,System.Int32@,System.Boolean)">
            <summary>Called after file is downloaded.  Throws exceptions.  It is assumed that this is called from a worker thread.  Progress delegate will be called every 100th iteration to inform thread of current progress. Quit flag can be set at any time in order to quit importing prematurely.</summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystems.ImportIcd9(System.String,OpenDentBusiness.CodeSystems.ProgressArgs,System.Boolean@,System.Int32@,System.Int32@,System.Boolean)">
            <summary>Called after file is downloaded.  Throws exceptions.  It is assumed that this is called from a worker thread.  Progress delegate will be called every 100th iteration to inform thread of current progress. Quit flag can be set at any time in order to quit importing prematurely.</summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystems.ImportLoinc(System.String,OpenDentBusiness.CodeSystems.ProgressArgs,System.Boolean@,System.Int32@,System.Int32@,System.Boolean)">
            <summary>Called after file is downloaded.  Throws exceptions.  It is assumed that this is called from a worker thread.  Progress delegate will be called every 100th iteration to inform thread of current progress. Quit flag can be set at any time in order to quit importing prematurely.</summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystems.ImportRxNorm(System.String,OpenDentBusiness.CodeSystems.ProgressArgs,System.Boolean@,System.Int32@,System.Int32@,System.Boolean)">
            <summary>Called after file is downloaded.  Throws exceptions.  It is assumed that this is called from a worker thread.  Progress delegate will be called every 100th iteration to inform thread of current progress. Quit flag can be set at any time in order to quit importing prematurely.</summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystems.ImportSnomed(System.String,OpenDentBusiness.CodeSystems.ProgressArgs,System.Boolean@,System.Int32@,System.Int32@,System.Boolean)">
            <summary>Called after file is downloaded.  Throws exceptions.  It is assumed that this is called from a worker thread.  Progress delegate will be called every 100th iteration to inform thread of current progress. Quit flag can be set at any time in order to quit importing prematurely.</summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystems.ImportSop(System.String,OpenDentBusiness.CodeSystems.ProgressArgs,System.Boolean@,System.Int32@,System.Int32@,System.Boolean)">
            <summary>Called after file is downloaded.  Throws exceptions.  It is assumed that this is called from a worker thread.  Progress delegate will be called every 100th iteration to inform thread of current progress. Quit flag can be set at any time in order to quit importing prematurely.</summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystems.ImportUcum(System.String,OpenDentBusiness.CodeSystems.ProgressArgs,System.Boolean@,System.Int32@,System.Int32@,System.Boolean)">
            <summary>Called after file is downloaded.  Throws exceptions.  It is assumed that this is called from a worker thread.  Progress delegate will be called every 100th iteration to inform thread of current progress. Quit flag can be set at any time in order to quit importing prematurely.</summary>
        </member>
        <member name="T:OpenDentBusiness.Cpts">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Cpts.Insert(OpenDentBusiness.Cpt)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Cpts.GetByCode(System.String)">
            <summary>Gets one Cpt object directly from the database by CptCode.  If code does not exist, returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Cpts.CodeExists(System.String)">
            <summary>Directly from db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Cpts.GetCodeCount">
            <summary>Returns the total count of CPT codes.  CPT codes cannot be hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.Cpts.UpdateDescription(System.String,System.String,System.String)">
            <summary>Updates an existing CPT code description if versionID is newer than current versionIDs.  If versionID is different than existing versionIDs, it will be added to the comma delimited list.</summary>
        </member>
        <member name="T:OpenDentBusiness.Cvxs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Cvxs.Insert(OpenDentBusiness.Cvx)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Cvxs.Update(OpenDentBusiness.Cvx)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Cvxs.GetAllCodes">
            <summary>Returns a list of just the codes for use in update or insert logic.</summary>
        </member>
        <member name="M:OpenDentBusiness.Cvxs.GetByCode(System.String)">
            <summary>Gets one Cvx object directly from the database by CodeValue.  If code does not exist, returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Cvxs.GetOneFromDb(System.String)">
            <summary>Gets one Cvx by CvxNum directly from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Cvxs.CodeExists(System.String)">
            <summary>Directly from db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Cvxs.GetCodeCount">
            <summary>Returns the total count of CVX codes.  CVS codes cannot be hidden, but might in the future be set active/inactive using the IsActive flag.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrAmendments">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrAmendments.Refresh(System.Int64)">
            <summary>Gets list of all amendments for a specific patient and orders them by DateTRequest</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrAmendments.GetOne(System.Int64)">
            <summary>Gets one EhrAmendment from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrAmendments.Insert(OpenDentBusiness.EhrAmendment)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrAmendments.Update(OpenDentBusiness.EhrAmendment)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrAmendments.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrCodes">
            <summary>Never insert or update, use cache pattern only.  This is not referencing a real table in the database, it is a static object filled by the contents of the EHR.dll.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCodes.listt">
            <summary>A list of all EhrCodes.</summary>
        </member>
        <member name="P:OpenDentBusiness.EhrCodes.Listt">
            <summary>A list of all EhrCodes.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCodes.UpdateList">
            <summary>Forces an update to the in-memory list.  The list is filled from an in-memory list that is inside our oubfuscated EHR.dll.  For future reference, this method should never call the database because it is called by a background thread during startup.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCodes.updateCodeExistsHelper">
            <summary>If the number of codes in the code tables (I.e. Snomed, Loinc, Cpt, etc.) are greater than the number we expect then this will set IsInDb=true otherwise false.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCodes.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCodes.GetMeasureIdsForCode(System.String,System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCodes.GetForValueSetOIDs(System.Collections.Generic.List{System.String})">
            <summary>Returns a list of EhrCode objects that belong to one of the value sets identified by the ValueSetOIDs supplied.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCodes.GetForValueSetOIDs(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>Returns a list of EhrCode objects that belong to one of the value sets identified by the ValueSetOIDs supplied AND only those codes that exist in the corresponding table in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCodes.GetCodeAndCodeSystem(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>Returns a dictionary of CodeValue and CodeSystem pairs where the value set is in the supplied list.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCodes.GetCodesExistingInAllSets(System.Collections.Generic.List{System.String})">
            <summary>Returns a dictionary of CodeValue,CodeSystem pairs of all codes that belong to every ValueSetOID sent in the incoming list as long as the code exists in the corresponding table in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCodes.GetForEventTypeByUse(OpenDentBusiness.EhrMeasureEventType)">
            <summary>Returns EhrCodes for the specified EhrMeasureEventType ordered by how often and how recently they have been used.  Results are
            ordered by applying a weight based on the date diff from current date to DateTEvent of the EhrMeasureEvents.  EhrCodes used most
            recently will have the largest weight and help move the EhrCode to the top of the list.  Specify a limit amount if the result set should only
            be a certain number of EhrCodes at most.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCodes.GetForIntervAndMedByUse(OpenDentBusiness.InterventionCodeSet,System.Collections.Generic.List{System.String})">
            <summary>Returns a list of EhrCodes for the specified InterventionCodeSet and ValueSetOID for any medication interventions.  Results will
            contain both intervention codes and medication codes that have been used in the last year.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrNotPerformeds">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrNotPerformeds.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrNotPerformeds.Insert(OpenDentBusiness.EhrNotPerformed)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrNotPerformeds.Update(OpenDentBusiness.EhrNotPerformed)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrNotPerformeds.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrNotPerformeds.GetOne(System.Int64)">
            <summary>Gets one EhrNotPerformed from the db.</summary>
        </member>
        <member name="T:OpenDentBusiness.EmailMessageUids">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessageUids.GetForRecipientAddress(System.String)">
            <summary>Gets all unique email ids for the given recipient email address.  The result is used to determine which emails to download for a particular inbox address.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessageUids.Insert(OpenDentBusiness.EmailMessageUid)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Encounters">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Encounters.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Encounters.GetOne(System.Int64)">
            <summary>Gets one Encounter from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Encounters.InsertDefaultEncounter(System.Int64,System.Int64,System.DateTime)">
            <summary>Automatically generate and insert encounter as long as there is no other encounter with that date and provider for that patient.  Does not insert an encounter if one of the CQM default encounter prefs are invalid.</summary>
        </member>
        <member name="M:OpenDentBusiness.Encounters.InsertEncsFromProcDates(System.DateTime,System.DateTime,System.String,System.String)">
            <summary>Inserts encounters for a specified code for a specified date range if there is not already an encounter for that code, patient, 
            provider, and procdate.</summary>
        </member>
        <member name="M:OpenDentBusiness.Encounters.Insert(OpenDentBusiness.Encounter)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Encounters.Update(OpenDentBusiness.Encounter)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Encounters.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EServiceSignals">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EServiceSignals.GetServiceHistory(OpenDentBusiness.eServiceCode,System.DateTime,System.DateTime)">
            <summary>returns all eServiceSignals for a given service within the date range, inclusive.</summary>
        </member>
        <member name="M:OpenDentBusiness.EServiceSignals.GetServiceStatus(OpenDentBusiness.eServiceCode)">
            <summary>Returns the last known status for the given eService.</summary>
        </member>
        <member name="M:OpenDentBusiness.EServiceSignals.GetListenerServiceStatus">
            <summary>Returns the last known status for the Listener Service.  
            Returns Critical if a signal has not been entered in the last 5 minutes.
            Returns Error if there are ANY error signals that have not been processed.</summary>
        </member>
        <member name="M:OpenDentBusiness.EServiceSignals.Insert(OpenDentBusiness.EServiceSignal)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EServiceSignals.InsertHeartbeatForService(OpenDentBusiness.eServiceCode)">
            <summary>Inserts a healthy heartbeat.</summary>
        </member>
        <member name="M:OpenDentBusiness.EServiceSignals.Update(OpenDentBusiness.EServiceSignal)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EServiceSignals.ProcessSignalsForSeverity(OpenDentBusiness.eServiceSignalSeverity)">
            <summary>Sets IsProcessed to true on all eService signals of the passed in severity.</summary>
        </member>
        <member name="M:OpenDentBusiness.EServiceSignals.ProcessErrorSignalsAroundTime(System.DateTime)">
            <summary>Sets IsProcessed to true on eService signals of Error severity that are within 15 minutes of the passed in DateTime.</summary>
        </member>
        <member name="T:OpenDentBusiness.EvaluationCriterionDefs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationCriterionDefs.GetAvailableCriterionDefs">
            <summary>Gets a list of all possible EvaluationCriterionDefs.  Defs attached to an EvaluationDef are copies and will not be shown.</summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationCriterionDefs.GetAllForEvaluationDef(System.Int64)">
            <summary>Gets a list of all EvaluationCriterion attached to an EvaluationDef.  Ordered by ItemOrder.</summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationCriterionDefs.GetOne(System.Int64)">
            <summary>Gets one EvaluationCriterionDef from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationCriterionDefs.Insert(OpenDentBusiness.EvaluationCriterionDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationCriterionDefs.Update(OpenDentBusiness.EvaluationCriterionDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationCriterionDefs.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EvaluationCriterions">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationCriterions.Refresh(System.Int64)">
            <summary>Get all Criterion attached to an Evaluation.</summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationCriterions.GetOne(System.Int64)">
            <summary>Gets one EvaluationCriterion from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationCriterions.Insert(OpenDentBusiness.EvaluationCriterion)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationCriterions.Update(OpenDentBusiness.EvaluationCriterion)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationCriterions.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EvaluationDefs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationDefs.Refresh">
            <summary>Gets all EvaluationDefs from the DB.</summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationDefs.GetAllByCourse(System.Int64)">
            <summary>Gets all EvaluationDefs from the DB that are attached to the specified course. If course is blank then it will get all of the defs.</summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationDefs.GetOne(System.Int64)">
            <summary>Gets one EvaluationDef from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationDefs.Insert(OpenDentBusiness.EvaluationDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationDefs.Update(OpenDentBusiness.EvaluationDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationDefs.Delete(System.Int64)">
            <summary>Deletes an EvaluationDef and all EvaluationCriterionDefs attached to it.</summary>
        </member>
        <member name="T:OpenDentBusiness.Evaluations">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Evaluations.GetOne(System.Int64)">
            <summary>Gets one Evaluation from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Evaluations.GetFilteredList(System.DateTime,System.DateTime,System.String,System.String,System.Int64,System.Int64,System.Int64)">
            <summary>Gets all Evaluations from the DB.  Multiple filters are available.  Dates must be valid before calling this.</summary>
        </member>
        <member name="M:OpenDentBusiness.Evaluations.GetFilteredList(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>Gets all Evaluations from the DB.  List filters are available.</summary>
        </member>
        <member name="M:OpenDentBusiness.Evaluations.Insert(OpenDentBusiness.Evaluation)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Evaluations.Update(OpenDentBusiness.Evaluation)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Evaluations.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.FamilyHealths">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.FamilyHealths.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.FamilyHealths.Insert(OpenDentBusiness.FamilyHealth)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.FamilyHealths.Update(OpenDentBusiness.FamilyHealth)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.FamilyHealths.GetFamilyHealthForPat(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.GradingScaleItems">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.GradingScaleItems.Refresh(System.Int64)">
            <summary>Gets all grading scale items ordered by GradeNumber descending.</summary>
        </member>
        <member name="M:OpenDentBusiness.GradingScaleItems.GetOne(System.Int64)">
            <summary>Gets one GradingScaleItem from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.GradingScaleItems.Insert(OpenDentBusiness.GradingScaleItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.GradingScaleItems.Update(OpenDentBusiness.GradingScaleItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.GradingScaleItems.DeleteAllByGradingScale(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.GradingScaleItems.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.GradingScales">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.GradingScales.RefreshList">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.GradingScales.GetOne(System.Int64)">
            <summary>Gets one GradingScale from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.GradingScales.Insert(OpenDentBusiness.GradingScale)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.GradingScales.Update(OpenDentBusiness.GradingScale)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.GradingScales.Delete(System.Int64)">
            <summary>Also deletes attached GradeScaleItems.  Will throw an error if GradeScale is in use.  Be sure to surround with try-catch.</summary>
        </member>
        <member name="T:OpenDentBusiness.Hcpcses">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Hcpcses.Insert(OpenDentBusiness.Hcpcs)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Hcpcses.Update(OpenDentBusiness.Hcpcs)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Hcpcses.GetAllCodes">
            <summary>Returns a list of just the codes for use in update or insert logic.</summary>
        </member>
        <member name="M:OpenDentBusiness.Hcpcses.GetCodeCount">
            <summary>Returns the total count of HCPCS codes.  HCPCS codes cannot be hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.Hcpcses.GetByCode(System.String)">
            <summary>Returns the Hcpcs of the code passed in by looking in cache.  If code does not exist, returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Hcpcses.CodeExists(System.String)">
            <summary>Directly from db.</summary>
        </member>
        <member name="T:OpenDentBusiness.Icd10s">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Icd10s.Insert(OpenDentBusiness.Icd10)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Icd10s.Update(OpenDentBusiness.Icd10)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Icd10s.GetAllCodes">
            <summary>Returns a list of just the codes for use in update or insert logic.</summary>
        </member>
        <member name="M:OpenDentBusiness.Icd10s.GetCodeCount">
            <summary>Returns the total number of ICD10 codes.  Some rows in the ICD10 table based on the IsCode column.</summary>
        </member>
        <member name="M:OpenDentBusiness.Icd10s.GetByCode(System.String)">
            <summary>Gets one ICD10 object directly from the database by CodeValue.  If code does not exist, returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Icd10s.CodeExists(System.String)">
            <summary>Directly from db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Icd10s.GetOne(System.Int64)">
            <summary>Gets one Icd10 from the db.</summary>
        </member>
        <member name="T:OpenDentBusiness.Interventions">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Interventions.Insert(OpenDentBusiness.Intervention)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Interventions.Update(OpenDentBusiness.Intervention)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Interventions.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Interventions.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Interventions.GetAllForCodeSet(OpenDentBusiness.InterventionCodeSet)">
            <summary>Gets list of CodeValue strings from interventions with DateEntry in the last year and CodeSet equal to the supplied codeSet.
            Result list is grouped by CodeValue, CodeSystem even though we only return the list of CodeValues.  However, there are no codes in the
            EHR intervention code list that conflict between code systems, so we should never have a duplicate code in the returned list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Interventions.GetOne(System.Int64)">
            <summary>Gets one Intervention from the db.</summary>
        </member>
        <member name="T:OpenDentBusiness.Loincs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Loincs.Insert(OpenDentBusiness.Loinc)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Loincs.Update(OpenDentBusiness.Loinc)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Loincs.GetAll">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Loincs.GetBySearchString(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Loincs.GetCodeCount">
            <summary>Returns the count of all LOINC codes.  LOINC codes cannot be hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.Loincs.GetByCode(System.String)">
            <summary>Gets one Loinc from the db based on LoincCode, returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Loincs.GetForCodeList(System.String)">
            <summary>Gets a list of Loinc objects from the db based on codeList.  codeList is a comma-delimited list of LoincCodes in the format "code,code,code,code".  Returns an empty list if none in the loinc table.</summary>
        </member>
        <member name="M:OpenDentBusiness.Loincs.DeleteAll">
            <summary>CAUTION, this empties the entire loinc table. "DELETE FROM loinc"</summary>
        </member>
        <member name="M:OpenDentBusiness.Loincs.GetAllCodes">
            <summary>Returns a list of just the codes for use in update or insert logic.</summary>
        </member>
        <member name="M:OpenDentBusiness.Loincs.CodeExists(System.String)">
            <summary>Directly from db.</summary>
        </member>
        <member name="T:OpenDentBusiness.MapAreas">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MapAreas.Refresh">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MapAreas.Insert(OpenDentBusiness.MapArea)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MapAreas.Update(OpenDentBusiness.MapArea)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MapAreas.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.MedLabFacAttaches">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabFacAttaches.Insert(OpenDentBusiness.MedLabFacAttach)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabFacAttaches.GetAllForLabOrResult(System.Int64,System.Int64)">
            <summary>Gets all MedLabFacAttach objects from the db for a MedLab or a MedLabResult.  Only one parameter is required,
            EITHER a MedLabNum OR a MedLabResultNum.  The other parameter should be 0.  If both parameters are >0, then list
            returned will be all MedLabFacAttaches with EITHER the MedLabNum OR the MedLabResultNum provided.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabFacAttaches.DeleteAllForLabsOrResults(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>Delete all MedLabFacAttach objects for the list of MedLabNums and/or list of MedLabResultNums.  Supply either list or both lists and
            the MedLabFacAttach entries for either list will be deleted.  This could leave MedLabFacility entries not attached
            to any lab or result, but we won't worry about cleaning those up since the MedLabFacility table will likely always remain very small.</summary>
        </member>
        <member name="T:OpenDentBusiness.MedLabFacilities">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabFacilities.InsertIfNotInDb(OpenDentBusiness.MedLabFacility)">
            <summary>Checks the database for a MedLabFacility with matching name, address, city, state, zip, phone, and director title/name.
            If the facility doesn't exist, it's inserted.  Returns the MedLabFacilityNum for the facility inserted or found.
            Doesn't need any indexes, this runs in under a second with 100k worst case scenario rows (identical data).</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabFacilities.GetOne(System.Int64)">
            <summary>Gets one MedLabFacility from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabFacilities.GetFacilityList(System.Collections.Generic.List{OpenDentBusiness.MedLab},System.Collections.Generic.List{OpenDentBusiness.MedLabResult}@)">
            <summary>Returns a list of MedLabFacilityNums, the order in the list will be the facility ID on the report.  Basically a local re-numbering.
            Each message has a facility or facilities with footnote IDs, e.g. 01, 02, etc.  The results each link to the facility that performed the test.
            But if there are multiple messages for a test order, e.g. when there is a final result for a subset of the original test results,
            the additional message may have a facility with footnote ID of 01 that is different than the original message facility with ID 01.
            So each ID could link to multiple facilities.  We will re-number the facilities so that each will have a unique number for this report.</summary>
        </member>
        <member name="T:OpenDentBusiness.MedLabResults">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabResults.GetForLab(System.Int64)">
            <summary>Returns a list of all MedLabResults from the db for a given MedLab.  Ordered by ObsID,ObsIDSub,ResultStatus,DateTimeObs DESC.
            Corrected (ResultStatus=0) will be first in the list then 1=Final, 2=Incomplete, 3=Preliminary, and 4=Cancelled.
            Then ordered by DateTimeObs DESC, most recent of each status comes first in the list.
            If there are no results for the lab (or medLabNum=0), this will return an empty list.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabResults.GetAllForLabs(System.Collections.Generic.List{OpenDentBusiness.MedLab})">
            <summary>Gets a list of all MedLabResult object from the database for all of the MedLab objects sent in.  The MedLabResults are ordered by
            ObsID,ObsIDSub,ResultStatus, and DateTimeObs DESC to make it easier to find the most recent and up to date result for a given ObsID and
            optional ObsIDSub result.  The result statuses are 0=Corrected, 1=Final, 2=Incomplete, 3=Preliminary, and 4=Cancelled.
            Corrected will be first in the list for each ObsID/ObsIDSub, then Final, etc.
            If there is more than one result with the same ObsID/ObsIDSub and status, the most recent DateTimeObs will be first.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabResults.GetResultHist(OpenDentBusiness.MedLabResult,System.Int64,System.String,System.String)">
            <summary>Gets a list of all MedLabResult objects for this patient with the same ObsID and ObsIDSub as the supplied medLabResult,
            and for the same SpecimenID and SpecimenIDFiller.  Ordered by ResultStatus,DateTimeObs descending, MedLabResultNum descending.
            Used to display the history of a result as many statuses may be received.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabResults.Insert(OpenDentBusiness.MedLabResult)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabResults.Update(OpenDentBusiness.MedLabResult)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabResults.DeleteAll(System.Collections.Generic.List{System.Int64})">
            <summary>Delete all of the MedLabResult objects by MedLabResultNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabResults.DeleteAllForMedLabs(System.Collections.Generic.List{System.Int64})">
            <summary>Delete all of the MedLabResult objects by MedLabNum.</summary>
        </member>
        <member name="T:OpenDentBusiness.MedLabs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabs.GetOne(System.Int64)">
            <summary>Gets one MedLab from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabs.GetForPatient(System.Int64)">
            <summary>Get all MedLab objects for a specific patient from the database.  Can return an empty list.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabs.GetOrdersForPatient(OpenDentBusiness.Patient,System.Boolean,System.Boolean,System.DateTime,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.Clinic})">
            <summary>Get unique MedLab orders, grouped by PatNum, ProvNum, and SpecimenID.  Also returns the most recent DateTime the results
            were released from the lab and a list of test descriptions ordered.  If includeNoPat==true, the lab orders not attached to a patient will be 
            included.  Filtered by MedLabs for the list of clinics supplied based on the medlab.PatAccountNum=clinic.MedLabAccountNum.  ClinicNum 0 will
            be for those medlabs with PatAccountNum that does not match any of the MedLabAccountNums set for a clinic.  listSelectedClinics is already
            filtered to only those clinics for which the current user has permission to access based on ClinicIsRestricted.  If clinics are not enabled,
            listSelectedClinics will contain 0 and all medlabs will be returned.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabs.GetForPatAndSpecimen(System.Int64,System.String,System.String)">
            <summary>Get MedLabs for a specific patient and a specific SpecimenID, SpecimenIDFiller combination.
            Ordered by DateTimeReported descending, MedLabNum descending so the most recently reported/processed message is first in the list.
            If using random primary keys, this information may be incorectly ordered, but that is only an annoyance and this function should still work.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabs.Insert(OpenDentBusiness.MedLab)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabs.Update(OpenDentBusiness.MedLab)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabs.UpdateAllPatNums(System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>Sets the PatNum column on MedLabs with MedLabNum in list.  Used when manually assigning/moving MedLabs to a patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabs.Reconcile">
            <summary>Reprocess the original HL7 msgs for any MedLabs with PatNum 0, creates the embedded PDF files from the base64 text in the ZEF segments
            <para>The old method used when parsing MedLab HL7 msgs was to wait to extract these files until the msg was manually associated with a patient.
            Associating the MedLabs to a patient and reprocessing the HL7 messages using middle tier was very slow.</para>
            <para>The new method is to create the PDF files and save them in the image folder in a subdirectory called "MedLabEmbeddedFiles" if a patient
            isn't located from the details in the PID segment of the message.  Associating the MedLabs to a pat is now just a matter of moving the files to
            the pat's image folder and updating the PatNum columns.  All files are now extracted and stored, either in a pat's folder or in the
            "MedLabEmbeddedFiles" folder, by the HL7 service.</para>
            <para>This will reprocess all HL7 messages for MedLabs with PatNum=0 and replace the MedLab, MedLabResult, MedLabSpecimen, and MedLabFacAttach
            rows as well as create any embedded files and insert document table rows.  The document table rows will have PatNum=0, just like the MedLabs,
            if a pat is still not located with the details in the PID segment.  Once the user manually attaches the MedLab to a patient, all rows will be
            updated with the correct PatNum and the embedded PDFs will be moved to the pat's image folder.  The document.FileName column will contain the
            name of the file, regardless of where it is located.  The file name will be updated to a relevant name for the folder in which it is located.
            i.e. in the MedLabEmbeddedFiles directory it may be named 3YG8Z420150909100527.pdf, but once moved to a pat's folder it will be renamed to
            something like PatientAustin375.pdf and the document.FileName column will be the current name.</para>
            <para>If storing images in the db, the document table rows will contain the base64 text version of the PDFs with PatNum=0 and will be updated
            with the correct PatNum once associated.  The FileName will be just the extension ".pdf" until it is associated with a patient at which time it
            will be updated to something like PatientAustin375.pdf.</para></summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabs.DeleteLabsAndResults(OpenDentBusiness.MedLab,System.Collections.Generic.List{System.Int64})">
            <summary>Cascading delete that deletes all MedLab, MedLabResult, MedLabSpecimen, and MedLabFacAttach.
            Also deletes any embedded PDFs that are linked to by the MedLabResults.
            The MedLabs and all associated results, specimens, and FacAttaches referenced by the MedLabNums in listExcludeMedLabNums will not be deleted.
            Used for deleting old entries and keeping new ones.  The list may be empty and then all will be deleted.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabs.GetStatusDescript(OpenDentBusiness.ResultStatus)">
            <summary>Translates enum values into human readable strings.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabs.DeleteAll(System.Collections.Generic.List{System.Int64})">
            <summary>Delete all of the MedLab objects by MedLabNum.</summary>
        </member>
        <member name="T:OpenDentBusiness.MedLabSpecimens">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabSpecimens.Insert(OpenDentBusiness.MedLabSpecimen)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabSpecimens.DeleteAllForLabs(System.Collections.Generic.List{System.Int64})">
            <summary>Deletes all MedLabSpecimen objects from the db for a list of MedLabNums.</summary>
        </member>
        <member name="T:OpenDentBusiness.OIDExternals">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.OIDExternals.GetByRootAndExtension(System.String,System.String)">
            <summary>Will return an OIDExternal if both the root and extension match exactly, returns null if not found.</summary>
             <param name="root">The OID of the object.</param>
             <param name="extension">If object is identified by only the root, this value should be an empty string.</param>
        </member>
        <member name="M:OpenDentBusiness.OIDExternals.GetByInternalIDAndType(System.Int64,OpenDentBusiness.IdentifierType)">
            <summary>Gets a list of all external ID's for the internal ID and type provided.  Used to construct outbound HL7 messages.</summary>
        </member>
        <member name="M:OpenDentBusiness.OIDExternals.Insert(OpenDentBusiness.OIDExternal)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.OIDExternals.Update(OpenDentBusiness.OIDExternal)">
            <summary>Under most circumstances this should not be used.</summary>
        </member>
        <member name="T:OpenDentBusiness.OIDInternals">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.OIDInternals.GetForType(OpenDentBusiness.IdentifierType)">
            <summary>Returns the currently defined OID for a given IndentifierType.  If not defined, IDroot will be empty string.</summary>
        </member>
        <member name="M:OpenDentBusiness.OIDInternals.InsertMissingValues">
            <summary>There should always be one entry in the DB per IdentifierType enumeration.</summary>
        </member>
        <member name="M:OpenDentBusiness.OIDInternals.GetAll">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.OIDInternals.Update(OpenDentBusiness.OIDInternal)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.PatientRaces">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PatientRaces.GetForPatient(System.Int64)">
            <summary>Gets all PatientRace enteries from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatientRaces.GetPatRaceList(System.Int64)">
            <summary>Gets all patintrace entries for the patient and returns all of their races as a list of ints.  The list of ints corresponds to the PatRace enum.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatientRaces.GetPatientRaceOldFromPatientRaces(System.Int64)">
            <summary>Returns the PatientRaceOld enum based on the PatientRace entries for the patient passed in.  Calls GetPatRaceList to get the list of races.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatientRaces.GetPatRacesFromPatientRaceOld(OpenDentBusiness.PatientRaceOld)">
            <summary>Gets a list of PatRaces that correspond to a PatientRaceOld enum.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatientRaces.Reconcile(System.Int64,System.Collections.Generic.List{OpenDentBusiness.PatRace})">
            <summary>Inserts or Deletes neccesary PatientRace entries for the specified patient given the list of PatRaces provided.</summary>
        </member>
        <member name="T:OpenDentBusiness.PayorTypes">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayorTypes.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayorTypes.GetCurrentDescription(System.Int64)">
            <summary>This will return "SopCode - Description" or empty string if the patient does not have a payor type entered.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayorTypes.GetCurrentType(System.Int64)">
            <summary>Gets most recent PayorType for a patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayorTypes.GetOne(System.Int64)">
            <summary>Gets one PayorType from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayorTypes.Insert(OpenDentBusiness.PayorType)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayorTypes.Update(OpenDentBusiness.PayorType)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayorTypes.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.SmsBillings">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SmsBillings.GetByDateRange(System.DateTime,System.DateTime)">
            <summary>dateFrom is inclusive. dateTo is exclusive. Used by OD Broadcaster. DO NOT REMOVE!!!</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsBillings.GetAll">
            <summary>HQ only. Broadcast Monitor. DO NOT REMOVE!!!</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsBillings.Insert(OpenDentBusiness.SmsBilling)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SmsBillings.getForPatNum(System.Int64,System.DateTime)">
            <summary>Can return null. Date usage should be the first of the month, if not will return the SmsBilling for the given patnum where month and year match dateUsage.</summary>
        </member>
        <member name="T:OpenDentBusiness.SmsFromMobiles">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SmsFromMobiles.GetSmsNotification">
            <summary>Returns the number of messages which have not yet been read.  If there are no unread messages, then empty string is returned.  If more than 99 messages are unread, then "99" is returned.  The count limit is 99, because only 2 digits can fit in the SMS notification text.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsFromMobiles.Insert(OpenDentBusiness.SmsFromMobile)">
            <summary>Call ProcessInboundSms instead.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsFromMobiles.GetMessages(System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64},System.Int64,System.Boolean,OpenDentBusiness.SmsFromStatus[])">
            <summary><para>Gets all SMS incoming messages for the specified filters.</para>
            <para>If dateStart is 01/01/0001 then no start date will be used.</para>
            <para>If dateEnd is 01/01/0001 then no end date will be used.</para>
            <para>If listClinicNums is empty then will not filter by clinic.</para>
            <para>If patNum is non-zero, then only the messages for the specified patient will be returned, otherwise messages for all patients will be returned.</para>
            <para>If arrayStatuses is empty then messages with all statuses will be returned.</para></summary>
        </member>
        <member name="M:OpenDentBusiness.SmsFromMobiles.ProcessInboundSms(System.Collections.Generic.List{OpenDentBusiness.SmsFromMobile})">
            <summary>Attempts to find exact match for patient. If found, creates commlog, associates Patnum, and inserts into DB.
            Otherwise, it simply inserts SmsFromMobiles into the DB. ClinicNum should have already been set before calling this function.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsFromMobiles.Update(OpenDentBusiness.SmsFromMobile,OpenDentBusiness.SmsFromMobile)">
            <summary>Updates only the changed fields of the SMS text message (if any).</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsFromMobiles.FindPatNums(System.String,System.String)">
            <summary>Used to link SmsFromMobiles to the patients that they came from. Returns list of patnum,garantorNum combos.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsFromMobiles.ConvertPhoneToRegexp(System.String,System.String)">
            <summary>Expands a phone number into a string that can be used to ignore punctuation in a phone number.
            Any string that passes through this function does not need to, and should not, go through POut.String()
            Expands </summary>
        </member>
        <member name="T:OpenDentBusiness.SmsToMobiles">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SmsToMobiles.Update(OpenDentBusiness.SmsToMobile)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SmsToMobiles.GetMessageByGuid(System.String)">
            <summary>Gets one SmsToMobile from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsToMobiles.Insert(OpenDentBusiness.SmsToMobile)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SmsToMobiles.GetMessages(System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>Gets all SMS incoming messages for the specified filters.  If dateStart is 01/01/0001 then no start date will be used.  If dateEnd is 01/01/0001 then no end date will be used.  If listClinicNums is empty then will return messages for all clinics.  If patNum is non-zero, then only the messages for the specified patient will be returned, otherwise messages for all patients will be returned.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsToMobiles.ConvertPhoneToInternational(System.String,System.String)">
            <summary>Convert a phone number to internation format and remove all punctuation. Validates input number format. Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsToMobiles.SendSmsSingle(System.Int64,System.String,System.String,System.Int64,OpenDentBusiness.SmsMessageSource,System.Boolean,OpenDentBusiness.Userod)">
            <summary>Surround with Try/Catch.  Sent as time sensitive message.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsToMobiles.Update(OpenDentBusiness.SmsToMobile,OpenDentBusiness.SmsToMobile)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SmsToMobiles.SendSms(System.Collections.Generic.List{OpenDentBusiness.SmsToMobile})">
            <summary>Surround with try/catch. Returns true if all messages succeded, throws exception if it failed. 
            All Integrated Texting should use this method, CallFire texting does not use this method.</summary>
        </member>
        <member name="T:OpenDentBusiness.SmsPhones">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SmsPhones.GetByPhone(System.String)">
            <summary>Gets one SmsPhone from the db. Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsPhones.Insert(OpenDentBusiness.SmsPhone)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SmsPhones.Update(OpenDentBusiness.SmsPhone)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SmsPhones.UpdateToInactive(System.String)">
            <summary>This will only be called by HQ via the listener in the event that this number has been cancelled.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsPhones.GetForPractice">
            <summary>Gets sms phones when not using clinics.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsPhones.SignContract(System.Int64,System.Double)">
            <summary>Surround with Try/Catch</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsPhones.UpdateOrInsertFromList(System.Collections.Generic.List{OpenDentBusiness.SmsPhone},System.Int64)">
            <summary>Find all phones in the db (by PhoneNumber) and sync with listPhonesSync. If a given PhoneNumber does not already exist then insert the SmsPhone.
            Sets all ClinicNum(s) of phones in listPhonesSync to the given clinicNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsPhones.GetClinicBalance(System.Int64)">
            <summary>Returns current clinic limit minus message usage for current calendar month.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsPhones.IsIntegratedTextingEnabled">
            <summary>Returns true if texting is enabled for any of the clinics, or if not using clinics, if it is enabled for the practice.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsPhones.GetClinicNumForTexting(System.Int64)">
            <summary>Returns 0 if clinics not in use, or patient.ClinicNum if assigned to a clinic, or ClinicNum of first clinic.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsPhones.IsTextingForCountry(System.String[])">
            <summary>Returns true if there is an active phone for the country code.</summary>
        </member>
        <member name="T:OpenDentBusiness.TaskHists">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TaskHists.GetOne(System.Int64)">
            <summary>Gets one TaskHist from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskHists.Insert(OpenDentBusiness.TaskHist)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TaskHists.Update(OpenDentBusiness.TaskHist)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TaskHists.UpdateTaskNums(OpenDentBusiness.Task,OpenDentBusiness.Task)">
            <summary>Updates TaskHist references when an old task is cut (not copied) and pasted somewhere so history is continuous.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskHists.GetArchivesForTask(System.Int64)">
            <summary>Gets a list of task histories for a given taskNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskHists.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.SmsBilling">
            <summary>Only used internally by OpenDental, Inc.  Not used by anyone else. Aggregates customer charges for integrated texting.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsBilling.SmsBillingNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsBilling.RegistrationKeyNum">
            <summary>Should be unique in this table per DateUsage.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsBilling.CustPatNum">
            <summary>Should be unique in this table per DateUsage.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsBilling.DateUsage">
            <summary>Indicates which calendar month this usage metric is for. Should be 1st of month at midnight. Example '2012-01-01 00:00:00'</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsBilling.MsgChargeTotalUSD">
            <summary>The aggregate cost of all message parts charged by Open Dental to the customer. Will need to be summed as the sum of all parts of multi-part messages.
            Is a function of MsgCost and is calculated from SMSResponse as a result of SendSMS. Maps to OpenDentBusiness.SmsToMobile.MsgCostUSD.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsBilling.AccessChargeTotalUSD">
            <summary>The aggregate cost of all clinic access charges. Calculated using ClinicsActive * RepeatingCharge.ChargeAmt WHERE ProcCode='038'.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsBilling.ClinicsTotalCount">
            <summary>Total number of clinics that have used Integrated Texting in the past for this customer.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsBilling.ClinicsActiveCount">
            <summary>Subset of ClinicsTotal. Represents number of clinics which have no inactive date or an inactive date on or after 1st of the given calendar month. 
            These clinics should each be included in the repeating charge for the given calendar month.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsBilling.ClinicsUsedCount">
            <summary>Subset of ClinicsTotal. Represents number of clinics which actually accrued messaging charges for the given calendar month.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsBilling.PhonesTotalCount">
            <summary>Total number of phones for this customer, active or archived.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsBilling.PhonesActiveCount">
            <summary>Subset of PhonesTotal. Represents number of Phones which have no inactive date or an inactive date on or after 1st of the given calendar month.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsBilling.PhonesUsedCount">
            <summary>Subset of PhonesTotal. Represents number of Phones which actually accrued messaging charges for the given calendar month.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsBilling.MsgSentOkCount">
            <summary>Sum of messages in MTerminate and MTSend which were succesfully transmitted to patients for this customer for the given calendar month.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsBilling.MsgRcvOkCount">
            <summary>Sum of messages in MOTerminate which were succesfully transmitted to the customer for the given calendar month. MOUnsent messages will not be included in this count as they have not technically been sent on to the customer yet.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsBilling.MsgSentFailCount">
            <summary>Sum of messages in MTerminate which expired before being transmitted to patients for this customer for the given calendar month.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsBilling.MsgRcvFailCount">
            <summary>Sum of messages in MOerminate which expired before being transmitted to the customer for the given calendar month. MOUnsent messages will not be included in this count as they have not technically been sent on to the customer yet.</summary>
        </member>
        <member name="T:OpenDentBusiness.JobControls">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobControls.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobControls.GetOne(System.Int64)">
            <summary>Gets one JobControl from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobControls.Insert(OpenDentBusiness.JobControl)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobControls.Update(OpenDentBusiness.JobControl)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobControls.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Bug">
            <summary>This schema is copied directly from JRMT. Do not rename columns here.</summary>
        </member>
        <member name="F:OpenDentBusiness.Bug.BugId">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Bug.CreationDate">
            <summary>Includes time.</summary>
        </member>
        <member name="F:OpenDentBusiness.Bug.Submitter">
            <summary>NOT UserNum</summary>
        </member>
        <member name="M:OpenDentBusiness.Bug.Copy">
            <summary>Returns a copy of this Bug.</summary>
        </member>
        <member name="T:OpenDentBusiness.BugStatus">
            <Summary>This is stored in the db as an enum rather than an int.</Summary>
        </member>
        <member name="T:OpenDentBusiness.JobLog">
            <summary>This table is not part of the general release.  User would have to add it manually.  
            All schema changes are done directly on our live database as needed.
            Used to store a brief history of a job including approved job states and cahnges to expert or engineer.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLog.JobLogNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLog.JobNum">
            <summary>FK to job.JobNum.  Links this event to the source job.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLog.UserNumChanged">
            <summary>FK to userod.UserNum. Usernum of user that caused the change</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLog.UserNumExpert">
            <summary>FK to userod.UserNum. Usernum of the expert on the job at the time of the log entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLog.UserNumEngineer">
            <summary>FK to userod.UserNum. Usernum of the engineer on the job at the time of the log entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLog.DateTimeEntry">
            <summary>Date/Time the event was created.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLog.Description">
            <summary>Human readable description of what was changed.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLog.MainRTF">
            <summary>Copy of the job description rtf if job log is an approval or implemented event.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobLog.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.JobQuote">
            <summary>This table is not part of the general release.  User would have to add it manually.  All schema changes are done directly on our live database as needed.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobQuote.JobQuoteNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobQuote.JobNum">
            <summary>FK to job.JobNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobQuote.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobQuote.Amount">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.JobQuote.Note">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobQuote.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.JobPermission">
            <summary>This table is not part of the general release.  User would have to add it manually.  All schema changes are done directly on our live database as needed.
             Gives permission if a row exists.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPermission.JobPermissionNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPermission.UserNum">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPermission.JobPermType">
            <summary>Enum:JobPermissions The role type that this user has.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobPermission.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.JobPerm">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.JobPerm.Writeup">
            <summary>0 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPerm.Assignment">
            <summary>1 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPerm.Approval">
            <summary>2 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPerm.Documentation">
            <summary>3 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPerm.Review">
            <summary>4 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPerm.Engineer">
            <summary>5 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPerm.Concept">
            <summary>6 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPerm.QueryManager">
            <summary>7 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPerm.FeatureManager">
            <summary>8 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPerm.NotifyCustomer">
            <summary>9 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPerm.Quote">
            <summary>10 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPerm.Override">
            <summary>11 -</summary>
        </member>
        <member name="T:OpenDentBusiness.JobControl">
            <summary>Deprecated. This table is not part of the general release.  User would have to add it manually. 
            All schema changes are done directly on our live database as needed.
            This table is used to keep track of user preferences in regards to which 'controls' they want to have open within the Job Manager Dashboard
            window and their location.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobControl.JobControlNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobControl.UserNum">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.JobControl.JobControlType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.JobControl.ControlData">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.JobControl.XPos">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.JobControl.YPos">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.JobControl.Width">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.JobControl.Height">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobControl.Copy">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.JobControlType.Projects">
            <summary>0 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobControlType.Jobs">
            <summary>1 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobControlType.Documentation">
            <summary>2 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobControlType.Bugs">
            <summary>3 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobControlType.FeatureRequests">
            <summary>4 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobControlType.QueryRequests">
            <summary>5 -</summary>
        </member>
        <member name="T:OpenDentBusiness.JobLink">
            <summary>This table is not part of the general release.  User would have to add it manually.  All schema changes are done directly on our live database as needed.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLink.JobLinkNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLink.JobNum">
            <summary>FK to job.JobNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLink.FKey">
            <summary>FK to table primary key based on LinkType.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLink.LinkType">
            <summary>Type of table this links to and what role the objects on that table are.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLink.Tag">
            <summary>Contains other information such as a unc path to a file.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobLink.Copy">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.JobLinkType.Task">
            <summary>0 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLinkType.Request">
            <summary>1 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLinkType.Bug">
            <summary>2 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLinkType.QueryRequest">
            <summary>3 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLinkType.Watcher">
            <summary>4 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobLinkType.File">
            <summary>5 -</summary>
        </member>
        <member name="T:OpenDentBusiness.JobLinks">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobLinks.GetByJobNum(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobLinks.GetOne(System.Int64)">
            <summary>Gets one JobLink from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobLinks.GetJobLinksForJobs(System.Collections.Generic.List{System.Int64})">
            <summary>Gets JobLinks for a specified JobNum. Only gets Bugs, Feature Requests, Quotes, and Tasks.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobLinks.GetForTask(System.Int64)">
            <summary>Gets JobLinks for a specified JobNum. Only gets Bugs, Feature Requests, Quotes, and Tasks.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobLinks.GetJobLinks(System.Int64)">
            <summary>Gets JobLinks for a specified JobNum. Only gets Bugs, Feature Requests, and Tasks.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobLinks.Insert(OpenDentBusiness.JobLink)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobLinks.Update(OpenDentBusiness.JobLink)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobLinks.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.JobProjects">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobProjects.GetAll(System.Boolean)">
            <summary>Gets all projects, specify true to get all Done projects as well.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobProjects.GetByRootProject(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobProjects.GetByParentProject(System.Int64,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobProjects.GetOne(System.Int64)">
            <summary>Gets one JobProject from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobProjects.Insert(OpenDentBusiness.JobProject)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobProjects.Update(OpenDentBusiness.JobProject)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobProjects.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.JobReviews">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobReviews.GetForReviewer(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobReviews.GetForJob(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobReviews.GetOne(System.Int64)">
            <summary>Gets one JobReview from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobReviews.Insert(OpenDentBusiness.JobReview)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobReviews.Update(OpenDentBusiness.JobReview)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JobReviews.Delete(System.Int64)">
            <summary>Deletes a joblink of the specified type and num.</summary>
        </member>
        <member name="T:OpenDentBusiness.Jobs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Jobs.GetOne(System.Int64)">
            <summary>Gets one Job from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Jobs.GetOneFilled(System.Int64)">
            <summary>Gets one Job from the db. Fills all respective object lists from the DB too.</summary>
        </member>
        <member name="M:OpenDentBusiness.Jobs.Insert(OpenDentBusiness.Job)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Jobs.Update(OpenDentBusiness.Job)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Jobs.Delete(System.Int64)">
            <summary>You must surround with a try-catch when calling this method.  Deletes one job from the database.  
            Also deletes all JobLinks, Job Events, and Job Notes associated with the job.  Jobs that have reviews or quotes on them may not be deleted and will throw an exception.</summary>
        </member>
        <member name="M:OpenDentBusiness.Jobs.FillInMemoryLists(System.Collections.Generic.List{OpenDentBusiness.Job})">
            <summary>Efficiently queries DB to fill all in memory lists for all jobs passed in.</summary>
        </member>
        <member name="M:OpenDentBusiness.Jobs.GetUserNums(OpenDentBusiness.Job,System.Boolean)">
            <summary>Must be called after job is filled using Jobs.FillInMemoryLists(). Returns list of user nums associated with this job.
             Currently that is Expert, Owner, and Watchers.</summary>
        </member>
        <member name="M:OpenDentBusiness.Jobs.CheckForLoop(System.Int64,System.Int64)">
            <summary>Attempts to find infinite loop when changing job parent. Can be optimized to reduce trips to DB since we have all jobs in memory in the job manager.</summary>
        </member>
        <member name="M:OpenDentBusiness.Jobs.GetFeatureRequestContact(System.Int64)">
            <summary>This is the query that wasused prior to the job manager to lookup customer votes, pledges, and contact information for feature requests.</summary>
        </member>
        <member name="F:OpenDentBusiness.Jobs.JobEmail.StatusMsg">
            <summary>UI field to display send errors.</summary>
        </member>
        <member name="T:OpenDentBusiness.Job">
            <summary>This table is not part of the general release.  User would have to add it manually.  All schema changes are done directly on our live database as needed.
             Base object for use in the job tracking system.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.JobNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.UserNumConcept">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.UserNumExpert">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.UserNumEngineer">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.UserNumApproverConcept">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.UserNumApproverJob">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.UserNumApproverChange">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.UserNumDocumenter">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.UserNumCustContact">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.UserNumCheckout">
            <summary>FK to userod.UserNum. IF set, this is the user currently editing the job. Once saved, this is set to 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.UserNumInfo">
            <summary>FK to userod.UserNum. If this is set, then the job is waiting on clarification from the user indicated. Once clarified, this is set back to 0. Not actually used yet.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.ParentNum">
            <summary>FK to job.JobNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.DateTimeCustContact">
            <summary>The date/time that the customer was contacted.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.Priority">
            <summary>The priority of the job.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.Category">
            <summary>The type of the job.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.JobVersion">
            <summary>The version the job is for. Example: 15.4.19, 16.1.1</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.HoursEstimate">
            <summary>The estimated hours a job will take.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.HoursActual">
            <summary>The actual hours a job took.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.DateTimeEntry">
            <summary>The date/time that the job was created.  Not user editable.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.Description">
            <summary>The description of the job. RTF content of the main body of the Job.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.Documentation">
            <summary>Used to record what was documented for this job and where it was documented.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.Title">
            <summary>The short title of the job.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.PhaseCur">
            <summary>The current status of the job.  Historical statuses for this job can be found in the jobevent table.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.IsApprovalNeeded">
            <summary>Applies to Several status.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.AckDateTime">
            <summary>Not yet used. Will be used for tracking acknowledgement of Bugs by Nathan. Should not halt development.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.ListJobLinks">
            <summary>Not a data column.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.ListJobNotes">
            <summary>Not a data column.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.ListJobReviews">
            <summary>Not a data column.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.ListJobQuotes">
            <summary>Not a data column.</summary>
        </member>
        <member name="F:OpenDentBusiness.Job.ListJobLogs">
            <summary>Not a data column.</summary>
        </member>
        <member name="M:OpenDentBusiness.Job.Copy">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.Job.OwnerNum">
            <summary>Returns userNum of the person assigned to the next task for a job, 0 if unnasined.</summary>
        </member>
        <member name="P:OpenDentBusiness.Job.OwnerAction">
            <summary>Same as GetOwnerAction() but wrapped in a Property for convenience. </summary>
        </member>
        <member name="M:OpenDentBusiness.Job.ActionForUser(OpenDentBusiness.Userod)">
            <summary>Similar To owner action, but allows you to specify a user.</summary>
        </member>
        <member name="M:OpenDentBusiness.Job.ToString">
            <summary>Used primarily to display a Job in the tree view.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPhase.Concept">
            <summary>0 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPhase.Definition">
            <summary>1 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPhase.Development">
            <summary>2 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPhase.Documentation">
            <summary>3 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPhase.Complete">
            <summary>4 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPhase.Cancelled">
            <summary>5 -</summary>
        </member>
        <member name="T:OpenDentBusiness.JobAction">
            <summary>Never Stored in the DB. Only used for sorting and displaying. The order these values are ordered in this enum is the order they will be displayed in.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPriority.High">
            <summary>0 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPriority.Normal">
            <summary>1 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPriority.Low">
            <summary>2 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobPriority.OnHold">
            <summary>3 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobCategory.Feature">
            <summary>0 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobCategory.Bug">
            <summary>1 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobCategory.Enhancement">
            <summary>2 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobCategory.Query">
            <summary>3 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobCategory.ProgramBridge">
            <summary>4 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobCategory.InternalRequest">
            <summary>5 -</summary>
        </member>
        <member name="T:OpenDentBusiness.JobProject">
            <summary>Deprecated. This table is not part of the general release.  User would have to add it manually.  All schema changes are done directly on our live database as needed.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobProject.JobProjectNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobProject.RootProjectNum">
            <summary>FK to project.ProjectNum.  Links this project to the source project.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobProject.ParentProjectNum">
            <summary>FK to project.ProjectNum.  Links this project to its parent project.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobProject.Title">
            <summary>The title of the project.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobProject.Description">
            <summary>A description of the project.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobProject.ProjectStatus">
            <summary>The status of this project.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobProject.Copy">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.JobProjectStatus.Design">
            <summary>0 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobProjectStatus.InProgress">
            <summary>1 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobProjectStatus.OnHold">
            <summary>2 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobProjectStatus.Done">
            <summary>3 -</summary>
        </member>
        <member name="T:OpenDentBusiness.JobReview">
            <summary>This table is not part of the general release.  User would have to add it manually.  All schema changes are done directly on our live database as needed.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobReview.JobReviewNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobReview.JobNum">
            <summary>FK to job.JobNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobReview.ReviewerNum">
            <summary>FK to userod.UserNum.  Links this project to the source project.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobReview.DateTStamp">
            <summary>Date/Time the review was created.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobReview.Description">
            <summary>The text in this review.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobReview.ReviewStatus">
            <summary>The status of this review.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobReview.Copy">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.JobReviewStatus.Sent">
            <summary>0 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobReviewStatus.Seen">
            <summary>1 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobReviewStatus.UnderReview">
            <summary>2 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobReviewStatus.NeedsAdditionalWork">
            <summary>3 -</summary>
        </member>
        <member name="F:OpenDentBusiness.JobReviewStatus.Done">
            <summary>4 -</summary>
        </member>
        <member name="T:OpenDentBusiness.JobNote">
            <summary>A jobnote is a note that may be added to a job. Many notes may be attached to a job.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobNote.JobNoteNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobNote.JobNum">
            <summary>FK to job.JobNum. The job this jobnote is attached to.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobNote.UserNum">
            <summary>FK to userod.UserNum. The user who created this jobnote.</summary>
        </member>
        <member name="F:OpenDentBusiness.JobNote.DateTimeNote">
            <summary>Date and time the note was created (editable).</summary>
        </member>
        <member name="F:OpenDentBusiness.JobNote.Note">
            <summary>Note. Text that the user wishes to show on the task.</summary>
        </member>
        <member name="M:OpenDentBusiness.JobNote.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.PhoneConfs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneConfs.GetAll">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneConfs.AddOccupantForExtension(System.Int32)">
            <summary>Increments the Occupants column by one for the corresponding extension passed in.
            A new row will be inserted if no row is found for the extension passed in.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneConfs.RemoveOccupantForExtension(System.Int32)">
            <summary>Decrements the Occupants column by one for the corresponding extension passed in.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneConfs.ClearOccupantsForExtension(System.Int32)">
            <summary>Sets the Occupants column to zero for the corresponding extension passed in.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcButtonQuicks">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtonQuicks.GetAll">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtonQuicks.sortYX(OpenDentBusiness.ProcButtonQuick,OpenDentBusiness.ProcButtonQuick)">
            <summary>Sort by Y values first, then sort by X values.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtonQuicks.Insert(OpenDentBusiness.ProcButtonQuick)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtonQuicks.Update(OpenDentBusiness.ProcButtonQuick)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtonQuicks.ValidateAll">
            <summary>Ensures that Quick Buttons category exists in DB, and validates all Quick buttons in the DB. 
            Returns false if there is something wrong with ProcButtonQuick table. (Similar to DB maint.)</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtonQuicks.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Resellers">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Resellers.GetOne(System.Int64)">
            <summary>Gets one Reseller from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Resellers.Insert(OpenDentBusiness.Reseller)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Resellers.Update(OpenDentBusiness.Reseller)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Resellers.Delete(System.Int64)">
            <summary>Make sure to check that the reseller does not have any customers before deleting them.</summary>
        </member>
        <member name="M:OpenDentBusiness.Resellers.GetResellerList">
            <summary>Gets a list of resellers and some of their information.  Only used from FormResellers to fill the grid.</summary>
        </member>
        <member name="M:OpenDentBusiness.Resellers.GetResellerCustomersList(System.Int64)">
            <summary>Gets all of the customers of the reseller (family members) that have active services.  Only used from FormResellerEdit to fill the grid.</summary>
        </member>
        <member name="M:OpenDentBusiness.Resellers.IsUserNameInUse(System.Int64,System.String)">
            <summary>Checks the database to see if the user name is already in use.</summary>
        </member>
        <member name="M:OpenDentBusiness.Resellers.IsResellerFamily(System.Int64)">
            <summary>Checks the database to see if the patient is a reseller.</summary>
        </member>
        <member name="M:OpenDentBusiness.Resellers.HasActiveResellerCustomers(OpenDentBusiness.Reseller)">
            <summary>Checks the database to see if the reseller has customers with active repeating charges.</summary>
        </member>
        <member name="T:OpenDentBusiness.ResellerServices">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ResellerServices.GetServicesForReseller(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ResellerServices.GetOne(System.Int64)">
            <summary>Gets one ResellerService from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.ResellerServices.Insert(OpenDentBusiness.ResellerService)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ResellerServices.Update(OpenDentBusiness.ResellerService)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ResellerServices.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.SecurityLogHashes">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogHashes.Insert(OpenDentBusiness.SecurityLogHash)">
            <summary>Inserts securityloghash into Db.</summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogHashes.InsertNoCache(OpenDentBusiness.SecurityLogHash)">
            <summary>Insertion logic that doesn't use the cache. Has special cases for generating random PK's and handling Oracle insertions.</summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogHashes.InsertSecurityLogHash(System.Int64)">
            <summary>Creates a new SecurityLogHash entry in the Db.</summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogHashes.InsertSecurityLogHashNoCache(System.Int64)">
            <summary>Used for inserting without using the cache.  Usually used when multithreading connections.</summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogHashes.GetHashString(OpenDentBusiness.SecurityLog)">
            <summary>Does not make a call to the db.  Returns a SHA-256 hash of the entire security log.  Length of 32 bytes.  Only called from CreateSecurityLogHash() and FormAudit.FillGrid()</summary>
        </member>
        <member name="T:OpenDentBusiness.Snomeds">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Snomeds.GetByCodeOrDescription(System.String)">
            <summary>For FormSnomeds to get the list to be displayed in the ListBox. Only gets the first 10,000 in order to remain fast.</summary>		
        </member>
        <member name="M:OpenDentBusiness.Snomeds.GetByCodes(System.String)">
            <summary>For FormSnomeds. Must be in the format "code,code,code,code" for it to work properly. Harmless if malformed. Gets exactly the list of codes provided.</summary>		
        </member>
        <member name="M:OpenDentBusiness.Snomeds.GetOne(System.Int64)">
            <summary>Gets one Snomed from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Snomeds.CodeExists(System.String)">
            <summary>Directly from db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Snomeds.Insert(OpenDentBusiness.Snomed)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Snomeds.Update(OpenDentBusiness.Snomed)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Snomeds.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Snomeds.DeleteAll">
            <summary>Delete all for import. Before importing Snomed Codes, delete the existing list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Snomeds.GetCodeAndDescription(System.String)">
            <summary>Gets the code and description of the snomed directly from the database by code value.  Re-written to not utilize the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Snomeds.GetByCode(System.String)">
            <summary>Gets one snomed object directly from the database by CodeValue.  If code does not exist, returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Snomeds.GetICD9toSNOMEDDictionary">
            <summary>Returns dictionary&lt;ICD9Code,SNOMEDCode&gt; for crossmapping exact matches between ICD9 and SNOMED.</summary>
        </member>
        <member name="M:OpenDentBusiness.Snomeds.GetAllCodes">
            <summary>Returns a list of just the codes for use in update or insert logic.</summary>
        </member>
        <member name="T:OpenDentBusiness.Sops">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Sops.listt">
            <summary>A list of all Sops.</summary>
        </member>
        <member name="P:OpenDentBusiness.Sops.Listt">
            <summary>A list of all Sops.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sops.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Sops.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Sops.Insert(OpenDentBusiness.Sop)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Sops.Update(OpenDentBusiness.Sop)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Sops.GetOneNum(System.String)">
            <summary>Returns one SopNum. If SopCode not found returns 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sops.GetAllCodes">
            <summary>Returns a list of just the codes for use in update or insert logic.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sops.GetCodeCount">
            <summary>Returns the count of all SOP codes.  SOP codes cannot be hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sops.GetDescriptionFromCode(System.String)">
            <summary>Returns an Sop description based on the given payor type info.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sops.GetOneCode(System.Int64)">
            <summary>Returns one code for use in update or insert logic.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sops.GetAllDescriptions">
            <summary>Returns a list of just the descriptions for use in update or insert logic.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sops.GetOneDescription(System.String)">
            <summary>Returns the description for the specified SopCode.  Returns an empty string if no code is found.</summary>
        </member>
        <member name="T:OpenDentBusiness.Ucums">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Ucums.Insert(OpenDentBusiness.Ucum)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Ucums.Update(OpenDentBusiness.Ucum)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Ucums.GetAllCodes">
            <summary>Returns a list of just the codes for use in update or insert logic.</summary>
        </member>
        <member name="T:OpenDentBusiness.UserodApptViews">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserodApptViews.GetOneForUserAndClinic(System.Int64,System.Int64)">
            <summary>Gets the most recent UserodApptView from the db for the user and clinic.  clinicNum can be 0.  Returns null if no match found.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserodApptViews.Insert(OpenDentBusiness.UserodApptView)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserodApptViews.Update(OpenDentBusiness.UserodApptView)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.VaccineObses">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.VaccineObses.Insert(OpenDentBusiness.VaccineObs)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.VaccineObses.GetForVaccine(System.Int64)">
            <summary>Gets one VaccineObs from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.VaccineObses.Update(OpenDentBusiness.VaccineObs)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.VaccineObses.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.WikiListHeaderWidths">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.WikiListHeaderWidths.dummyColName">
            <summary>Used temporarily.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiListHeaderWidths.listt">
            <summary>A list of all WikiListHeaderWidths.</summary>
        </member>
        <member name="P:OpenDentBusiness.WikiListHeaderWidths.Listt">
            <summary>A list of all WikiListHeaderWidths.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiListHeaderWidths.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.WikiListHeaderWidths.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.WikiListHeaderWidths.GetForList(System.String)">
            <summary>Returns header widths for list sorted in the same order as the columns appear in the DB.  Uses cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiListHeaderWidths.UpdateNamesAndWidths(System.String,System.Collections.Generic.List{OpenDentBusiness.WikiListHeaderWidth})">
            <summary>Also alters the db table for the list itself.  Throws exception if number of columns does not match.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiListHeaderWidths.InsertNew(OpenDentBusiness.WikiListHeaderWidth)">
            <summary>No error checking. Only called from WikiLists.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiListHeaderWidths.Delete(System.String,System.String)">
            <summary>No error checking. Only called from WikiLists after the corresponding column has been dropped from its respective table.</summary>
        </member>
        <member name="T:OpenDentBusiness.WikiListHists">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.WikiListHists.GetByName(System.String)">
            <summary>Ordered by dateTimeSaved.  Case insensitive.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiListHists.Insert(OpenDentBusiness.WikiListHist)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.WikiListHists.GenerateFromName(System.String,System.Int64)">
            <summary>Does not save to DB. Return null if listName does not exist.
            Pass in the userod.UserNum of the user that is making the change.  Typically Security.CurUser.UserNum.
            Security.CurUser cannot be used within this method due to the server side of middle tier.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiListHists.RevertFrom(OpenDentBusiness.WikiListHist,System.Int64)">
            <summary>Drops table in DB.  Recreates Table, then fills with Data.
            Pass in the userod.UserNum of the user that is making the change.  Typically Security.CurUser.UserNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiListHists.Rename(System.String,System.String)">
            <summary>Checks remoting roles. Does not check permissions. Does not check for existing listname. If listname already exists it will "merge" the history.</summary>
        </member>
        <member name="T:OpenDentBusiness.WikiLists">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.WikiLists.CreateNewWikiList(System.String)">
            <summary>Creates empty table with a single column for PK. List name must be formatted correctly before being passed here. Ie. no spaces, all lowercase.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiLists.AddColumn(System.String)">
            <summary>Column is automatically named "Column#" where # is the number of columns+1.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiLists.CheckColumnEmpty(System.String,System.String)">
            <summary>Check to see if column can be deleted, returns true is the column contains only nulls.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiLists.DeleteColumn(System.String,System.String)">
            <summary>Check to see if column can be deleted, returns true is the column contains only nulls.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiLists.ShiftColumnLeft(System.String,System.String)">
            <summary>Shifts the column to the left, does nothing if trying to shift leftmost two columns.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiLists.ShiftColumnRight(System.String,System.String)">
            <summary>Shifts the column to the right, does nothing if trying to shift the rightmost column.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiLists.AddItem(System.String)">
            <summary>Adds one item to wiki list and returns the new PK.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiLists.UpdateItem(System.String,System.Data.DataTable)">
            <summary></summary>
            <param name="ItemTable">Should be a DataTable object with a single DataRow containing the item.</param>
        </member>
        <member name="M:OpenDentBusiness.WikiLists.Rename(System.String,System.String)">
            <summary><para>Surround with try catch.  Safely renames list by creating new list, selecting existing list into new list, then deleting existing list.</para>
            <para>This code could be used to either copy or backup lists in the future. (With minor modifications).</para></summary>
        </member>
        <member name="T:OpenDentBusiness.CreditCards">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.Refresh(System.Int64)">
            <summary>If patNum==0 then does not filter on PatNum; otherwise filters on PatNum. Only includes credit cards whose source is Open Dental
            proper.</summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.RefreshBySource(System.Int64,System.Collections.Generic.List{OpenDentBusiness.CreditCardSource})">
            <summary>Get all credit cards by a given list of CreditCardSource(s). Optionally filter by a given patNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.GetOne(System.Int64)">
            <summary>Gets one CreditCard from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.Insert(OpenDentBusiness.CreditCard)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.InsertFromXWeb(OpenDentBusiness.XWebResponse)">
            <summary>Validate xWebResponse and create a new credit card from the XWebResponse.</summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.Update(OpenDentBusiness.CreditCard)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.GetMonthlyCardsOnFile(System.Int64)">
            <summary>Gets the masked CC# and exp date for all cards setup for monthly charges for the specified patient.  Only used for filling [CreditCardsOnFile] variable when emailing statements.</summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.GetActiveCards(System.Int64)">
            <summary>Returns list of active credit cards.</summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.GetRecurringChargeList(System.Collections.Generic.List{System.Int64})">
            <summary>Returns list of credit cards that are ready for a recurring charge.  Filters by ClinicNums in list if provided.  List of ClinicNums
            should contain all clinics the current user is authorized to access.  Further filtering by selected clinics is done at the UI level to save
            DB calls.</summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.TotalRecurringCharges(System.Int64,System.String,System.Int32)">
            <summary>Adds up the total fees for the procedures passed in that have been completed since the last billing day.</summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.ProcLinkedToCard(System.Int64,System.String,System.Int64)">
            <summary>Returns true if the procedure passed in is linked to any other active card on the patient's account.</summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.FilterRecurringChargeList(System.Data.DataTable)">
            <summary>Table must include columns labeled LatestPayment and DateStart.</summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.GetTokenCount(System.String,System.Collections.Generic.List{OpenDentBusiness.CreditCardSource})">
            <summary>Returns number of times token is in use.  Token was duplicated once and caused the wrong card to be charged.</summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.GetTokenCount(System.String,OpenDentBusiness.CreditCardSource)">
            <summary>Returns number of times token is in use.  Token was duplicated once and caused the wrong card to be charged.</summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.TokenExists(System.String,OpenDentBusiness.CreditCardSource)">
            <summary>Checks if token already exists in db.</summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.GetCardsWithXChargeTokens(OpenDentBusiness.CreditCardSource)">
            <summary>Gets every credit card in the db with an X-Charge token that was created from the specified source.</summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCards.GetCardsWithPayConnectTokens">
            <summary>Gets every credit card in the db with a PayConnect token.</summary>
        </member>
        <member name="T:OpenDentBusiness.CustRefEntries">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CustRefEntries.GetOne(System.Int64)">
            <summary>Gets one CustRefEntry from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.CustRefEntries.Insert(OpenDentBusiness.CustRefEntry)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CustRefEntries.Update(OpenDentBusiness.CustRefEntry)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CustRefEntries.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CustRefEntries.GetEntryListForCustomer(System.Int64)">
            <summary>Gets all the entries for the customer.</summary>
        </member>
        <member name="M:OpenDentBusiness.CustRefEntries.GetEntryListForReference(System.Int64)">
            <summary>Gets all the entries for the reference.</summary>
        </member>
        <member name="T:OpenDentBusiness.CustReferences">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CustReferences.GetOne(System.Int64)">
            <summary>Gets one CustReference from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.CustReferences.Insert(OpenDentBusiness.CustReference)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CustReferences.Update(OpenDentBusiness.CustReference)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CustReferences.Delete(System.Int64)">
            <summary>Might not be used.  Might implement when a patient is deleted but doesn't happen often if ever.</summary>
        </member>
        <member name="M:OpenDentBusiness.CustReferences.GetReferenceTable(System.Boolean,System.Int64[],System.Boolean,System.Boolean,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.Int32,System.String)">
            <summary>Used only from FormReferenceSelect to get the list of references.</summary>
        </member>
        <member name="M:OpenDentBusiness.CustReferences.GetCustNameFL(System.Int64)">
            <summary>Returns FName 'Preferred' M LName.  This is here because I get names by patnum a lot with references.</summary>
        </member>
        <member name="M:OpenDentBusiness.CustReferences.GetOneByPatNum(System.Int64)">
            <summary>Gets the most recent CustReference entry for that patient.  Returns null if none found.  There should be only one entry for each patient, but there was a bug before 14.3 that could have created multiple so we only get the more relevant entry.</summary>
        </member>
        <member name="T:OpenDentBusiness.DashboardARs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DashboardARs.Refresh(System.DateTime)">
            <summary>Gets all rows gt= dateFrom.</summary>
        </member>
        <member name="M:OpenDentBusiness.DashboardARs.Insert(OpenDentBusiness.DashboardAR)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DictCustoms">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DictCustoms.listt">
            <summary>A list of all DictCustoms.</summary>
        </member>
        <member name="P:OpenDentBusiness.DictCustoms.Listt">
            <summary>A list of all DictCustoms.</summary>
        </member>
        <member name="M:OpenDentBusiness.DictCustoms.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DictCustoms.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DictCustoms.Insert(OpenDentBusiness.DictCustom)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DictCustoms.Update(OpenDentBusiness.DictCustom)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DictCustoms.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DisplayFields.Insert(OpenDentBusiness.DisplayField)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DisplayFields.Update(OpenDentBusiness.DisplayField)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DisplayFields.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DisplayFields.DeleteForChartView(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DisplayFields.GetForCategory(OpenDentBusiness.DisplayFieldCategory)">
            <Summary>Returns an ordered list for just one category.  Do not use with None, or it will malfunction.  These are display fields that the user has entered, which are stored in the db, and then are pulled into the cache.  Categories with no display fields will return the default list.</Summary>
        </member>
        <member name="M:OpenDentBusiness.DisplayFields.GetForChartView(System.Int64)">
            <Summary>Returns an ordered list for just one chart view</Summary>
        </member>
        <member name="T:OpenDentBusiness.DocumentMiscs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DocumentMiscs.Insert(OpenDentBusiness.DocumentMisc)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DocumentMiscs.AppendRawBase64ForUpdateFiles(System.String)">
            <summary>Appends the passed in rawBase64 string to the RawBase64 column in the db for the UpdateFiles DocMiscType row.</summary>
        </member>
        <member name="M:OpenDentBusiness.DocumentMiscs.DeleteAllForType(OpenDentBusiness.DocumentMiscType)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DrugManufacturers">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DrugManufacturers.listt">
            <summary>A list of all DrugManufacturers.</summary>
        </member>
        <member name="P:OpenDentBusiness.DrugManufacturers.Listt">
            <summary>A list of all DrugManufacturers.</summary>
        </member>
        <member name="M:OpenDentBusiness.DrugManufacturers.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DrugManufacturers.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DrugManufacturers.GetOne(System.Int64)">
            <summary>Gets one DrugManufacturer from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.DrugManufacturers.Insert(OpenDentBusiness.DrugManufacturer)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DrugManufacturers.Update(OpenDentBusiness.DrugManufacturer)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DrugManufacturers.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DrugUnits">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DrugUnits.listt">
            <summary>A list of all DrugUnits.</summary>
        </member>
        <member name="P:OpenDentBusiness.DrugUnits.Listt">
            <summary>A list of all DrugUnits.</summary>
        </member>
        <member name="M:OpenDentBusiness.DrugUnits.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DrugUnits.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DrugUnits.GetOne(System.Int64)">
            <summary>Gets one DrugUnit from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.DrugUnits.Insert(OpenDentBusiness.DrugUnit)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DrugUnits.Update(OpenDentBusiness.DrugUnit)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DrugUnits.Delete(System.Int64)">
            <summary>Surround with a try/catch.  Will fail if drug unit is in use.</summary>
        </member>
        <member name="M:OpenDentBusiness.DrugUnits.GetMultDrugUnits(System.Collections.Generic.List{System.Int64})">
            <summary>Used along with GetChangedSinceDrugUnitNums</summary>
        </member>
        <member name="T:OpenDentBusiness.EduResources">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EduResources.GenerateForPatient(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EduResources.SelectAll">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EduResources.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EduResources.Insert(OpenDentBusiness.EduResource)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EduResources.Update(OpenDentBusiness.EduResource)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrMeasureEvents">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasureEvents.GetAllByTypeFromDB(System.DateTime,System.DateTime,OpenDentBusiness.EhrMeasureEventType,System.Boolean)">
            <summary>Gets a list of MeasureEvents.  Primarily used in FormEhrMeasureEvents.  Pass in true to get all EhrMeasureEvents for the date range.  Passing in true will ignore the specified measure event type.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasureEvents.GetLatestInfoByType(OpenDentBusiness.EhrMeasureEventType)">
            <summary>Gets the MoreInfo column from the most recent event of the specified type. Returns blank if none exists.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasureEvents.Refresh(System.Int64)">
            <summary>Ordered by dateT</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasureEvents.RefreshByType(System.Int64,OpenDentBusiness.EhrMeasureEventType[])">
            <summary>Ordered by dateT</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasureEvents.CreateEventForPat(System.Int64,OpenDentBusiness.EhrMeasureEventType)">
            <summary>Creates a measure event for the patient and event type passed in.  Used by eServices.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasureEvents.Insert(OpenDentBusiness.EhrMeasureEvent)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasureEvents.Update(OpenDentBusiness.EhrMeasureEvent)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasureEvents.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasureEvents.GetByType(System.Collections.Generic.List{OpenDentBusiness.EhrMeasureEvent},OpenDentBusiness.EhrMeasureEventType)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasureEvents.GetListCodesUsedForType(OpenDentBusiness.EhrMeasureEventType)">
            <summary>Gets codes (SNOMEDCT) from CodeValueResult for EhrMeasureEvents with DateTEvent within the last year for the given EhrMeasureEventType.
            Result list is grouped by code.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrMeasures">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasures._snomedLabResult">
            <summary>Positive/Negative Snomed indicators for lab results.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.SelectAll(System.DateTime,System.DateTime,System.Int64)">
            <summary>Select All EHRMeasures from combination of db, static data, and complex calculations.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.SelectAllMu2(System.DateTime,System.DateTime,System.Int64)">
            <summary>Select All EHRMeasures from combination of db, static data, and complex calculations.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.Update(OpenDentBusiness.EhrMeasure)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetObjective(OpenDentBusiness.EhrMeasureType)">
            <summary>Returns the Objective text based on the EHR certification documents.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetMeasure(OpenDentBusiness.EhrMeasureType)">
            <summary>Returns the Measures text based on the EHR certification documents.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetThreshold(OpenDentBusiness.EhrMeasureType)">
            <summary>Returns the Measures text based on the EHR certification documents.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.CalcNumerator(System.Data.DataTable)">
            <summary>Just counts up the number of rows with an X in the met column.  Very simple.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetNumeratorExplain(OpenDentBusiness.EhrMeasureType)">
            <summary>Returns the explanation of the numerator based on the EHR certification documents.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetDenominatorExplain(OpenDentBusiness.EhrMeasureType)">
            <summary>Returns the explanation of the denominator based on the EHR certification documents.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetExclusionExplain(OpenDentBusiness.EhrMeasureType)">
            <summary>Returns the explanation of the exclusion if there is one, if none returns 'No exclusions.'.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetExclusionCount(OpenDentBusiness.EhrMeasureType,System.DateTime,System.DateTime,System.Int64)">
            <summary>Returns the count the office will need to report in order to attest to being excluded from this measure.  Will return -1 if there is no applicable count for this measure.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetExclusionCountDescript(OpenDentBusiness.EhrMeasureType)">
            <summary>Returns the description of what the count displayed is.  May be count of patients under a certain age or number of Rx's written, this will be the label that describes the number.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetMu(OpenDentBusiness.Patient)">
            <summary>Only called from FormEHR to load the patient specific MU data and tell the user what action to take to get closer to meeting MU.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetObjectiveMu2(OpenDentBusiness.EhrMeasureType)">
            <summary>Returns the Objective text based on the EHR certification documents.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetMeasureMu2(OpenDentBusiness.EhrMeasureType)">
            <summary>Returns the Measures text based on the EHR certification documents.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetThresholdMu2(OpenDentBusiness.EhrMeasureType)">
            <summary>Returns the Measures text based on the EHR certification documents.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetNumeratorExplainMu2(OpenDentBusiness.EhrMeasureType)">
            <summary>Returns the explanation of the numerator based on the EHR certification documents.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetDenominatorExplainMu2(OpenDentBusiness.EhrMeasureType)">
            <summary>Returns the explanation of the denominator based on the EHR certification documents.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetExclusionExplainMu2(OpenDentBusiness.EhrMeasureType)">
            <summary>Returns the explanation of the exclusion if there is one, if none returns 'No exclusions.'.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetExclusionCountMu2(OpenDentBusiness.EhrMeasureType,System.DateTime,System.DateTime,System.Int64)">
            <summary>Returns the count the office will need to report in order to attest to being excluded from this measure.  Will return -1 if there is no applicable count for this measure.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetExclusionCountDescriptMu2(OpenDentBusiness.EhrMeasureType)">
            <summary>Returns the description of what the count displayed is.  May be count of patients under a certain age or number of Rx's written, this will be the label that describes the number.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.GetMu2(OpenDentBusiness.Patient)">
            <summary>Only called from FormEHR to load the patient specific MU data and tell the user what action to take to get closer to meeting MU.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasures.CompareReferralsToReconciles(System.Int64)">
            <summary>Returns an int comparison of count when comparing reconciles and referrals. If reconciles are greater than or equal to referrals, returns 1. If referrals are greater than reconciles, returns -1. If there are no referrals, returns 0.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrFormResult">
            <summary>When FormEHR closes, the result will be one of these.  Different results will lead to different behaviors.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrProvKeys">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrProvKeys.RefreshForFam(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrProvKeys.GetAllKeys">
            <summary>Get a list of all EhrProvKeys. Ordered by LName and then YearValue.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrProvKeys.GetKeysByFLName(System.String,System.String)">
            <summary>Get a list of all EhrProvKeys for a provider matching the given first and last name.  Ordered by year value.  Returns empty list if lName or fName is empty.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrProvKeys.HasProvHadKey(System.String,System.String)">
            <summary>Returns true if a provider with the same last and first name passed in has ever had an EHR prov key.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrProvKeys.Insert(OpenDentBusiness.EhrProvKey)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrProvKeys.Update(OpenDentBusiness.EhrProvKey)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrProvKeys.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrQuarterlyKeys">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrQuarterlyKeys.Refresh(System.Int64)">
            <summary>Pass in a guarantor of 0 when not using from OD tech station.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrQuarterlyKeys.GetAllKeys">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrQuarterlyKeys.GetAllKeys(System.DateTime,System.DateTime)">
            <summary>Returns all keys in the given years.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrQuarterlyKeys.FindStartDate(System.Collections.Generic.List{OpenDentBusiness.EhrQuarterlyKey})">
            <summary>We want to find the first day of the oldest quarter less than or equal to one year old from the latest entered valid key.  validKeys must be sorted ascending.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrQuarterlyKeys.CalculateQuarters(System.DateTime,System.DateTime)">
            <summary>Gets the count of quarters between the dates inclusive.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrQuarterlyKeys.Insert(OpenDentBusiness.EhrQuarterlyKey)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrQuarterlyKeys.Update(OpenDentBusiness.EhrQuarterlyKey)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrQuarterlyKeys.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrSummaryCcds">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrSummaryCcds.listt">
            <summary>A list of all EhrSummaryCcds.</summary>
        </member>
        <member name="P:OpenDentBusiness.EhrSummaryCcds.Listt">
            <summary>A list of all EhrSummaryCcds.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrSummaryCcds.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrSummaryCcds.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrSummaryCcds.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrSummaryCcds.Insert(OpenDentBusiness.EhrSummaryCcd)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrSummaryCcds.GetOneForEmailAttach(System.Int64)">
            <summary>Returns null if no record is found.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrSummaryCcds.Update(OpenDentBusiness.EhrSummaryCcd)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EmailAddresses">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAddresses._listt">
            <summary>A list of all EmailAddresses whose UserNum=0.</summary>
        </member>
        <member name="P:OpenDentBusiness.EmailAddresses.Listt">
            <summary>A list of all EmailAddresses whose UserNum=0.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAddresses.GetListt">
            <summary>A list of all EmailAddresses whose UserNum=0.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAddresses.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAddresses.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAddresses.GetByClinic(System.Int64)">
            <summary>Gets the default email address for the clinic/practice. Takes a clinic num. If clinic num is 0 or there is no default for that clinic, it will get practice default. May return a new blank object.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAddresses.GetForUser(System.Int64)">
            <summary>Executes a query to the database to get the email address associated to the passed-in user.  
            Does not use the cache.  Returns null if no email address in the database matches the passed-in user.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAddresses.GetOne(System.Int64)">
            <summary>Gets one EmailAddress from the cached listt.  Might be null.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAddresses.AddressExists(System.String,System.Int64)">
            <summary>Returns true if the passed-in email username already exists in the cached list of non-user email addresses.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAddresses.GetAll">
            <summary>Gets all email addresses, including those email addresses which are not in the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAddresses.ExistsValidEmail">
            <summary>Checks to make sure at least one non-user email address has a valid (not blank) SMTP server.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAddresses.Insert(OpenDentBusiness.EmailAddress)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAddresses.Update(OpenDentBusiness.EmailAddress)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAddresses.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EobAttaches">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EobAttaches.Refresh(System.Int64)">
            <summary>Gets all EobAttaches for a given claimpayment.</summary>
        </member>
        <member name="M:OpenDentBusiness.EobAttaches.GetOne(System.Int64)">
            <summary>Gets one EobAttach from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.EobAttaches.Exists(System.Int64)">
            <summary>Tests to see whether an attachment exists on this claimpayment.</summary>
        </member>
        <member name="M:OpenDentBusiness.EobAttaches.Insert(OpenDentBusiness.EobAttach)">
            <summary>Set the extension before calling.  Inserts a new eobattach into db, creates a filename based on EobAttachNum, and then updates the db with this filename.  Should always refresh the eobattach after calling this method in order to get the correct filename for RemotingRole.ClientWeb.</summary>
        </member>
        <member name="M:OpenDentBusiness.EobAttaches.Update(OpenDentBusiness.EobAttach)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EobAttaches.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ErxLogs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ErxLogs.Insert(OpenDentBusiness.ErxLog)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ErxLogs.GetLatestForPat(System.Int64,System.DateTime)">
            <summary>Returns the latest ErxLog entry for the specified patient and before the specified dateTimeMax. Can return null.
            Called from Chart when fetching prescriptions from NewCrop to determine the provider on incoming prescriptions.</summary>
        </member>
        <member name="T:OpenDentBusiness.Guardians">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Guardians.Refresh(System.Int64)">
            <summary>Get all guardians for a one dependant/child.</summary>
        </member>
        <member name="M:OpenDentBusiness.Guardians.Insert(OpenDentBusiness.Guardian)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Guardians.Update(OpenDentBusiness.Guardian)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Guardians.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Guardians.DeleteForFamily(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Guardians.ExistForFamily(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Guardians.GetGuardianRelationshipStr(OpenDentBusiness.GuardianRelationship)">
            <summary>Short abbreviation of relationship within parentheses.</summary>
        </member>
        <member name="M:OpenDentBusiness.Guardians.RevertChanges(System.Collections.Generic.List{OpenDentBusiness.Guardian},System.Collections.Generic.List{System.Int64})">
            <summary>Inserts, updates, or deletes database rows from the provided list of family PatNums back to the state of listNew.
            Must always pass in the list of family PatNums.</summary>
        </member>
        <member name="M:OpenDentBusiness.Guardians.Sync(System.Collections.Generic.List{OpenDentBusiness.Guardian},System.Collections.Generic.List{OpenDentBusiness.Guardian})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.</summary>
        </member>
        <member name="T:OpenDentBusiness.Equipments">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Equipments.GetList(System.DateTime,System.DateTime,OpenDentBusiness.EnumEquipmentDisplayMode,System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Equipments.Insert(OpenDentBusiness.Equipment)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Equipments.Update(OpenDentBusiness.Equipment)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Equipments.Delete(OpenDentBusiness.Equipment)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Equipments.GenerateSerialNum">
            <summary>Generates a unique 3 char alphanumeric serialnumber.  Checks to make sure it's not already in use.</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7DefFields">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefFields.listt">
            <summary>A list of all HL7DefFields.</summary>
        </member>
        <member name="P:OpenDentBusiness.HL7DefFields.Listt">
            <summary>A list of all HL7DefFields.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefFields.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefFields.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefFields.GetFromDb(System.Int64)">
            <summary>Gets it straight from the database instead of from cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefFields.GetFromCache(System.Int64)">
            <summary>Gets the field list from the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefFields.Insert(OpenDentBusiness.HL7DefField)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefFields.Update(OpenDentBusiness.HL7DefField)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefFields.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.HL7DefMessages">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefMessages.listt">
            <summary>A list of all HL7DefMessages.</summary>
        </member>
        <member name="P:OpenDentBusiness.HL7DefMessages.Listt">
            <summary>A list of all HL7DefMessages.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefMessages.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefMessages.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefMessages.GetShallowFromDb(System.Int64)">
            <summary>Gets a list of all Messages for this def from the database. No child objects included.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefMessages.GetDeepFromCache(System.Int64)">
            <summary>Gets a full deep list of all Messages for this def from cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefMessages.GetDeepFromDb(System.Int64)">
            <summary>Gets a full deep list of all Messages for this def from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefMessages.Insert(OpenDentBusiness.HL7DefMessage)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefMessages.Update(OpenDentBusiness.HL7DefMessage)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefMessages.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.HL7Defs">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Defs.listt">
            <summary>A list of all HL7Defs.</summary>
        </member>
        <member name="P:OpenDentBusiness.HL7Defs.Listt">
            <summary>A list of all HL7Defs.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Defs.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Defs.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Defs.GetInternalFromDb(OpenDentBusiness.HL7InternalType)">
            <summary>Gets an internal HL7Def from the database of the specified type.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Defs.GetOneDeepEnabled">
            <summary>Gets from cache.  Will get all enabled defs that are not InternalType HL7InternalType.MedLabv2_3.
            Only one def that is not MedLabv2_3 can be enabled so this is guaranteed to return only one def.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Defs.GetOneDeepEnabled(System.Boolean)">
            <summary>Gets from cache.  If isMedLabHL7 is true, this will only return the enabled def if it is HL7InternalType.MedLabv2_3.
            If false, then only those defs not of that type.  This will return null if no HL7defs are enabled.  Since only one can be enabled,
            this will return only one.  No need to check RemotingRole, cache is filled by calling GetTableRemotelyIfNeeded.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Defs.GetDeepInternalList">
            <summary>Gets a full deep list of all internal defs.  If one is enabled, then it might be in database.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Defs.GetDeepForInternal(OpenDentBusiness.HL7Def)">
            <summary>Gets from C# internal code rather than db</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Defs.IsExistingHL7Enabled(System.Int64,System.Boolean)">
            <summary>Tells us whether there is an existing enabled HL7Def, excluding the def with excludeHL7DefNum.
            If isMedLabHL7 is true, this will only check to see if a def of type HL7InternalType.MedLabv2_3 is enabled.
            Otherwise, only defs not of that type will be checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Defs.IsExistingHL7Enabled">
            <summary>Tells us whether there is an existing enabled HL7Def that is not HL7InternalType.MedLabv2_3.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Defs.GetDeepCustomList">
            <summary>Gets a full deep list of all defs that are not internal from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Defs.GetShallowFromDb">
            <summary>Gets shallow list of all defs that are not internal from the database</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Defs.EnableInternalForTests(OpenDentBusiness.HL7InternalType)">
            <summary>Only used from Unit Tests.  Since we clear the db of hl7Defs we have to insert this internal def not update it.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Defs.Insert(OpenDentBusiness.HL7Def)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Defs.Update(OpenDentBusiness.HL7Def)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Defs.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.HL7DefSegments">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefSegments.listt">
            <summary>A list of all HL7DefSegments.</summary>
        </member>
        <member name="P:OpenDentBusiness.HL7DefSegments.Listt">
            <summary>A list of all HL7DefSegments.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefSegments.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefSegments.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefSegments.GetShallowFromDb(System.Int64)">
            <summary>Gets it straight from the database instead of from cache. No child objects included.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefSegments.GetDeepFromCache(System.Int64)">
            <summary>Gets deep list from cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefSegments.GetDeepFromDb(System.Int64)">
            <summary>Gets a full deep list of all Segments for this message from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefSegments.Insert(OpenDentBusiness.HL7DefSegment)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefSegments.Update(OpenDentBusiness.HL7DefSegment)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefSegments.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ICD9s">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ICD9s.listt">
            <summary>A list of all ICD9s.</summary>
        </member>
        <member name="P:OpenDentBusiness.ICD9s.Listt">
            <summary>A list of all ICD9s.</summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9s.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9s.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9s.GetByCodeOrDescription(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9s.GetOne(System.Int64)">
            <summary>Gets one ICD9 from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9s.GetAll">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9s.GetCodeCount">
            <summary>Returns the total count of ICD9 codes.  ICD9 codes cannot be hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9s.CodeExists(System.String)">
            <summary>Directly from db.</summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9s.Insert(OpenDentBusiness.ICD9)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9s.Update(OpenDentBusiness.ICD9)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9s.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9s.GetChangedSinceICD9Nums(System.DateTime)">
            <summary>This method uploads only the ICD9s that are used by the disease table. This is to reduce upload time.</summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9s.GetMultICD9s(System.Collections.Generic.List{System.Int64})">
            <summary>Used along with GetChangedSinceICD9Nums</summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9s.GetCodeAndDescription(System.String)">
            <summary>Returns the code and description of the icd9.</summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9s.GetByCode(System.String)">
            <summary>Returns the ICD9 of the code passed in by looking in cache.  If code does not exist, returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9s.IsOldDescriptions">
            <summary>Returns true if descriptions have not been updated to non-Caps Lock.  Always returns false if not MySQL.</summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9s.GetAllCodes">
            <summary>Returns a list of just the codes for use in update or insert logic.</summary>
        </member>
        <member name="T:OpenDentBusiness.InsSubs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsSubs.GetSub(System.Int64,System.Collections.Generic.List{OpenDentBusiness.InsSub})">
            <summary>It's fastest if you supply a sub list that contains the sub, but it also works just fine if it can't initally locate the sub in the list.  You can supply an empty list.  If still not found, returns a new InsSub. The reason for the new InsSub is because it is common to immediately get an insplan using inssub.InsSubNum.  And, of course, that would fail if inssub was null.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsSubs.GetOne(System.Int64)">
            <summary>Gets one InsSub from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsSubs.RefreshForFam(OpenDentBusiness.Family)">
            <summary>Gets new List for the specified family.  The only insSubs it misses are for claims with no current coverage.  These are handled as needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsSubs.Insert(OpenDentBusiness.InsSub)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsSubs.Insert(OpenDentBusiness.InsSub,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsSubs.Update(OpenDentBusiness.InsSub)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsSubs.Delete(System.Int64)">
            <summary>Throws exception if dependencies.  Doesn't delete anything else.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsSubs.ValidateNoKeys(System.Int64,System.Boolean)">
            <summary>Will throw an exception if this InsSub is being used anywhere. Set strict true to test against every check.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsSubs.GetListForSubscriber(System.Int64)">
            <summary>Used in FormInsSelectSubscr to get a list of insplans for one subscriber directly from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsSubs.GetSubscriberCountForPlan(System.Int64,System.Boolean)">
            <summary>Only used once.  Gets a count of subscribers from the database that have the specified plan. Used to display in the insplan window.  The returned count never includes the inssub that we're viewing.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsSubs.GetSubscribersForPlan(System.Int64,System.Int64)">
            <summary>Only used once.  Gets a list of subscriber names from the database that have the specified plan. Used to display in the insplan window.  The returned list never includes the inssub that we're viewing.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsSubs.GetBenefitNotes(System.Int64,System.Int64)">
            <summary>Called from FormInsPlan when user wants to view a benefit note for other subscribers on a plan.  Should never include the current subscriber that the user is editing.  This function will get one note from the database, not including blank notes.  If no note can be found, then it returns empty string.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsSubs.SetAllSubsAssignBen">
            <summary>Returns the number of subs affected.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsSubs.SynchPlanNumsForNewPlan(OpenDentBusiness.InsSub)">
            <summary>This will assign all PlanNums to new value when Create New Plan If Needed is selected and there are multiple subscribers to a plan and an inssub object has been updated to point at a new PlanNum.  The PlanNum values need to be reflected in the claim, claimproc, payplan, and etrans tables, since those all both store inssub.InsSubNum and insplan.PlanNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsSubs.MoveSubscribers(System.Int64,System.Int64,System.Int64)">
            <summary>Returns the number of subscribers moved.
            No need to pass in userNum, it's set before remoting role check and passed to the server if necessary.</summary>
        </member>
        <member name="T:OpenDentBusiness.InstallmentPlans">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InstallmentPlans.GetOneForFam(System.Int64)">
            <summary>Gets the installment plan for this family.  If none, returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.InstallmentPlans.GetForSuperFam(System.Int64)">
            <summary>Gets the installment plans for a SuperFamily.  If none, returns empty list.</summary>
        </member>
        <member name="M:OpenDentBusiness.InstallmentPlans.GetOne(System.Int64)">
            <summary>Gets one InstallmentPlan from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.InstallmentPlans.Insert(OpenDentBusiness.InstallmentPlan)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InstallmentPlans.Update(OpenDentBusiness.InstallmentPlan)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InstallmentPlans.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.LabPanels">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LabPanels.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LabPanels.GetPanelsForOrder(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LabPanels.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LabPanels.GetMultLabPanels(System.Collections.Generic.List{System.Int64})">
            <summary>Used along with GetChangedSinceLabPanelNums</summary>
        </member>
        <member name="M:OpenDentBusiness.LabPanels.Insert(OpenDentBusiness.LabPanel)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LabPanels.Update(OpenDentBusiness.LabPanel)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LabPanels.ResetTimeStamps(System.Int64)">
            <summary>Changes the value of the DateTStamp column to the current time stamp for all labpanels of a patient</summary>
        </member>
        <member name="M:OpenDentBusiness.LabPanels.GetOne(System.Int64)">
            <summary>Gets one LabPanel from the db.</summary>
        </member>
        <member name="T:OpenDentBusiness.LabResults">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LabResults.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LabResults.DeleteForPanel(System.Int64)">
            <summary>Deletes all Lab Results associated with Lab Panel.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabResults.GetMultLabResults(System.Collections.Generic.List{System.Int64})">
            <summary>Used along with GetChangedSinceLabResultNums</summary>
        </member>
        <member name="M:OpenDentBusiness.LabResults.GetAllForPatient(System.Int64)">
            <summary>Get all lab results for one patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabResults.Insert(OpenDentBusiness.LabResult)">
            <summary>Insert new lab results.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabResults.Update(OpenDentBusiness.LabResult)">
            <summary>Update existing lab results.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabResults.GetAbnormalFlagDesc(OpenDentBusiness.LabAbnormalFlag)">
            <summary>Returns the text for a SnomedAllergy Enum as it should appear in human readable form for a CCD.</summary>
        </member>
        <member name="T:OpenDentBusiness.MedicalOrders">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedicalOrders.GetOrderTable(System.Int64,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedicalOrders.GetAllLabs(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedicalOrders.GetLabsByDate(System.Int64,System.DateTime,System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedicalOrders.LabHasResultsAttached(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedicalOrders.GetOne(System.Int64)">
            <summary>Gets one MedicalOrder from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedicalOrders.Insert(OpenDentBusiness.MedicalOrder)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedicalOrders.Update(OpenDentBusiness.MedicalOrder)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedicalOrders.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.MedicalOrderLineComparer">
            <summary>The supplied DataRows must include the following columns: DateTime</summary>
        </member>
        <member name="M:OpenDentBusiness.MedicalOrderLineComparer.Compare(System.Data.DataRow,System.Data.DataRow)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.OrionProcs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.OrionProcs.GetOne(System.Int64)">
            <summary>Gets one OrionProc from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.OrionProcs.GetOneByProcNum(System.Int64)">
            <summary>Gets one OrionProc from the db by ProcNum</summary>
        </member>
        <member name="M:OpenDentBusiness.OrionProcs.Insert(OpenDentBusiness.OrionProc)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.OrionProcs.Update(OpenDentBusiness.OrionProc)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.OrionProcs.SetCompleteInAppt(System.Collections.Generic.List{OpenDentBusiness.Procedure})">
            <summary>Loops through every procedure attached to an appt and sets the Status2 to complete.</summary>
        </member>
        <member name="T:OpenDentBusiness.OrthoCharts">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoCharts.GetAll">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoCharts.GetAllForPatient(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoCharts.GetDistinctFieldNames">
            <summary>Gets all distinct field names used by any ortho chart.  Useful for displaying the "available" display fields.</summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoCharts.Insert(OpenDentBusiness.OrthoChart)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoCharts.Update(OpenDentBusiness.OrthoChart)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoCharts.Update(OpenDentBusiness.OrthoChart,OpenDentBusiness.OrthoChart)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoCharts.Delete(System.Int64)">
            <summary>Ortho charts were briefly not deleted between 05/06/2014 and 01/02/2015.  Deleting occurs regularly when FieldValue="".</summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoCharts.GetOrthoDateFromLog(OpenDentBusiness.SecurityLog)">
            <summary>Used for ortho chart audit trail.  Attempts to parse the DateOfService from the security log text. If it is unable to parse the date, it will return MinDate.
            <para>Returning MinDate from this function results in the audit trail entries for multiple dates of service displaying intermingled on the date "0001-01-01", harmless.</para></summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoCharts.GetKeyDataForSignatureSaving(OpenDentBusiness.Patient,System.Collections.Generic.List{OpenDentBusiness.OrthoChart},System.DateTime)">
            <summary>Gets the hashstring for generating signatures.
            Should only be used when saving signatures, for validating see GetKeyDataForSignatureHash() and GetHashStringForSignature()</summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoCharts.GetKeyDataForSignatureHash(OpenDentBusiness.Patient,System.Collections.Generic.List{OpenDentBusiness.OrthoChart},System.DateTime)">
            <summary>Gets the key data string needed to create a hashstring to be used later when filling the signature.
            This is done seperate of the hashing so that new line replacements can be done when validating signatures before hashing.</summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoCharts.GetHashStringForSignature(System.String)">
            <summary>Gets the hashstring from the provided string that is typically generated from GetStringForSignatureHash().
            This is done seperate of building the string so that new line replacements can be done when validating signatures before hashing.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcApptColors">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ProcApptColors._listt">
            <summary>A list of all ProcApptColors.</summary>
        </member>
        <member name="P:OpenDentBusiness.ProcApptColors.Listt">
            <summary>A list of all ProcApptColors.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcApptColors.GetListLong">
            <summary>A list of all ProcApptColors.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcApptColors.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcApptColors.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcApptColors.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcApptColors.Insert(OpenDentBusiness.ProcApptColor)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcApptColors.Update(OpenDentBusiness.ProcApptColor)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcApptColors.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcApptColors.GetMatch(System.String)">
            <summary>Supply code such as D####.  Returns null if no match</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcGroupItems">
            <summary>In ProcGroupItems the ProcNum is a procedure in a group and GroupNum is the group the procedure is in. GroupNum is a FK to the Procedure table. There is a special type of procedure with the procedure code "~GRP~" that is used to indicate this is a group Procedure.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcGroupItems.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcGroupItems.GetForGroup(System.Int64)">
            <summary>Gets all the ProcGroupItems for a Procedure Group.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcGroupItems.Insert(OpenDentBusiness.ProcGroupItem)">
            <summary>Adds a procedure to a group.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcGroupItems.Delete(System.Int64)">
            <summary>Deletes a ProcGroupItem based on its procGroupItemNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcGroupItems.GetCountCompletedProcsForGroup(System.Int64)">
            <summary>Returns a count of the number of completed procedures attached to a group note.  Takes the ProcNum of a group note.
            Used when deleting group notes to determine which permission to check.</summary>
        </member>
        <member name="T:OpenDentBusiness.ReminderRules">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ReminderRules.Insert(OpenDentBusiness.ReminderRule)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ReminderRules.Update(OpenDentBusiness.ReminderRule)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ReminderRules.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ReminderRules.SelectAll">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ReplicationServers">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ReplicationServers.listt">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ReplicationServers.server_id">
            <summary>This value is only retrieved once upon startup.  This variable is a long because Google's cloud services have server id's that
            are of a higher value than a signed int can contained.  Additionally, 0 is a valid server id based on MySQL so we need to use -1 and can't
            use a uint data type.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReplicationServers._random">
            <summary>Class level variable because tick interval is long enough to result in frequent duplicate random numbers.</summary>
        </member>
        <member name="P:OpenDentBusiness.ReplicationServers.Server_id">
            <summary>The first time this is accessed, the value is obtained using a query.  Will be 0 unless a server id was set in my.ini.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReplicationServers.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ReplicationServers.Insert(OpenDentBusiness.ReplicationServer)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ReplicationServers.Update(OpenDentBusiness.ReplicationServer)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ReplicationServers.GetServer_id">
            <summary>Gets the MySQL server_id variable for the current connection.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReplicationServers.GetKey(System.String,System.String)">
            <summary>Generates a random primary key.  Tests to see if that key already exists before returning it for use.  The range of returned values is greater than 0, and less than or equal to 9223372036854775807.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReplicationServers.GetKeyNoCache(System.String,System.String)">
            <summary>Generates a random primary key without using the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReplicationServers.GetServer(System.Int64)">
            <summary>Gets a single ReplicationServer based on server_id.  Used to avoid cache issues.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReplicationServers.GetAtoZpath">
            <summary>If this server id is 0, or if no AtoZ entered for this server, then returns empty string.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReplicationServers.GetForLocalComputer">
            <summary>If this server id is 0, this returns null.  Or if there is no ReplicationServer object for this server id, then this returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReplicationServers.ServerIsBlocked">
            <summary>Used during database maint and from update window. We cannot use objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReplicationServers.IsConnectedReportServer">
            <summary>Checks if the current database connected to is the replication report server.  Allows users to run dangerous custom queries that could potentially break replication.  We will allow these queries to be run on exactly one replication server (the report server), because our custom queries contain CREATE TABLE statements for static temporary table names which can cause replication failure if multiple users run the same query at the same time.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReplicationServers.GetSlaveStatus">
            <summary>Get the status of the replication server.</summary>
        </member>
        <member name="T:OpenDentBusiness.InsFilingCodes">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsFilingCodes.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsFilingCodes.GetOrInsertForEclaimCode(System.String,System.String)">
            <summary>Gets the InsFilingCode for the specified eclaimCode, or creates one if the eclaimCodes does not exist.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsFilingCodes.Insert(OpenDentBusiness.InsFilingCode)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsFilingCodes.Update(OpenDentBusiness.InsFilingCode)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsFilingCodes.Delete(System.Int64)">
            <summary>Surround with try/catch</summary>
        </member>
        <member name="T:OpenDentBusiness.EtransMessageTexts">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EtransMessageTexts.Insert(OpenDentBusiness.EtransMessageText)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EtransMessageTexts.GetMessageText(System.Int64)">
            <summary>If the message text is X12, then it always normalizes it to include carriage returns for better readability.</summary>
        </member>
        <member name="M:OpenDentBusiness.EtransMessageTexts.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.InsFilingCodeSubtypes">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsFilingCodeSubtypes.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsFilingCodeSubtypes.GetOne(System.Int64)">
            <Summary>Gets one InsFilingCodeSubtype from the database.</Summary>
        </member>
        <member name="M:OpenDentBusiness.InsFilingCodeSubtypes.Insert(OpenDentBusiness.InsFilingCodeSubtype)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsFilingCodeSubtypes.Update(OpenDentBusiness.InsFilingCodeSubtype)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsFilingCodeSubtypes.Delete(System.Int64)">
            <summary>Surround with try/catch</summary>
        </member>
        <member name="T:OpenDentBusiness.RxNorms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxNorms.GetListByCodeOrDesc(System.String,System.Boolean,System.Boolean)">
            <summary>Never returns multums, only used for displaying after a search.</summary>
        </member>
        <member name="M:OpenDentBusiness.RxNorms.GetMmslCodeByRxCui(System.String)">
            <summary>Used to return the multum code based on RxCui.  If blank, use the Description instead.</summary>
        </member>
        <member name="M:OpenDentBusiness.RxNorms.GetDescByRxCui(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxNorms.GetOne(System.Int64)">
            <summary>Gets one RxNorm from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.RxNorms.Insert(OpenDentBusiness.RxNorm)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxNorms.Update(OpenDentBusiness.RxNorm)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxNorms.GetAll">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxNorms.GetAllCodes">
            <summary>Returns a list of just the codes for use in the codesystem import tool.</summary>
        </member>
        <member name="M:OpenDentBusiness.RxNorms.GetCodeCount">
            <summary>Returns the count of all RxNorm codes in the database.  RxNorms cannot be hidden.</summary>
        </member>
        <member name="T:OpenDentBusiness.ScreenPats">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ScreenPats.Insert(OpenDentBusiness.ScreenPat)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ScreenPats.GetForScreenGroup(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ScreenPats.Sync(System.Collections.Generic.List{OpenDentBusiness.ScreenPat},System.Collections.Generic.List{OpenDentBusiness.ScreenPat})">
            <summary>Inserts, updates, or deletes rows to reflect changes between listScreenPats and stale listScreenPatsOld.</summary>
        </member>
        <member name="T:OpenDentBusiness.Signalods">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Signalods.SignalLastRefreshed">
            <summary>This is not the actual date/time last refreshed.  It is really the server based date/time of the last item in the database retrieved on previous refreshes.  That way, the local workstation time is irrelevant.</summary>
        </member>
        <member name="F:OpenDentBusiness.Signalods.StartTimer">
            <summary>Set from FormOpenDental to the method that starts the signal processor timer.</summary>
        </member>
        <member name="F:OpenDentBusiness.Signalods.StopTimer">
            <summary>Set from FormOpenDental to the method that stops the signal processor timer.</summary>
        </member>
        <member name="F:OpenDentBusiness.Signalods.OnShutdown">
            <summary>Set from FormOpenDental to the method that is used to perform the shutdown workstation function.</summary>
        </member>
        <member name="M:OpenDentBusiness.Signalods.Subscribe(System.Windows.Forms.Form)">
            <summary>Called in Form_Load() to subscribe a given form the signals.</summary>
        </member>
        <member name="M:OpenDentBusiness.Signalods.SignalsTick(System.Collections.Generic.List{OpenDentBusiness.Signalod})">
            <summary>Retreives new signals from the DB, updates Caches, and broadcasts signals to all subscribed forms.
            Returns the list of signals processed if there weren't any errors.  Otherwise, returns an empty list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Signalods.RefreshTimed(System.DateTime)">
            <summary>Gets all Signals since a given DateTime.  If it can't connect to the database, then it returns a list of length 0.
            Remeber that the supplied dateTime is server time.  This has to be accounted for.</summary>
        </member>
        <member name="M:OpenDentBusiness.Signalods.RefreshForWeb(System.DateTime@)">
            <summary>Process all Signals and Acks Since a given DateTime.  Only to be used by OpenDentalWebService.
            Returns latest valid signal Date/Time and the list of InvalidTypes that were refreshed.
            Can throw exception.</summary>
        </member>
        <member name="M:OpenDentBusiness.Signalods.Insert(OpenDentBusiness.Signalod)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Signalods.SetInvalid(OpenDentBusiness.InvalidType,OpenDentBusiness.KeyType,System.Int64)">
            <summary>Simplest way to use the new fKey and FKeyType. Set isBroadcast=true to process signals immediately on workstation.</summary>
        </member>
        <member name="M:OpenDentBusiness.Signalods.SetInvalidAppt(OpenDentBusiness.Appointment,OpenDentBusiness.Appointment)">
            <summary>Pass one or two appointments into this function to send 2 to 6 invalid signals depending on the changes made to the appointment.
             Always call a refresh of the appointment module before calling this method.
             Cannot pass null for both parameters.</summary>
             <param name="apptNew">Required. If changes are made to an appointment or a new appointment is made, it should be passed in here.</param>
             <param name="apptOld">Optional. Only used if changes are being made to an existing appointment.</param>
        </member>
        <member name="M:OpenDentBusiness.Signalods.InsertSmsNotification(System.Int64)">
            <summary>Inserts a signal which tells all client machines to update the received unread SMS message count inside the Text button of the main toolbar.  To get the current count from the database, use SmsFromMobiles.GetSmsNotification().</summary>
        </member>
        <member name="M:OpenDentBusiness.Signalods.ApptNeedsRefresh(System.Collections.Generic.List{OpenDentBusiness.Signalod},System.DateTime)">
            <summary>After a refresh, this is used to determine whether the Appt Module needs to be refreshed.  Must supply the current date showing as well as the recently retrieved signal list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Signalods.GetInvalidTypes(System.Collections.Generic.List{OpenDentBusiness.Signalod})">
            <summary>After a refresh, this is used to get a list containing all flags of types that need to be refreshed. The FKey must be 0 and the
            FKeyType must Undefined. Types of Task and SmsTextMsgReceivedUnreadCount are not included.</summary>
        </member>
        <member name="M:OpenDentBusiness.Signalods.GetInvalidTypesForWeb(System.Collections.Generic.List{OpenDentBusiness.Signalod})">
            <summary>Our eServices have not been refactored yet to handle granular refreshes yet. This method does include signals that have a FKey. 
            Ideally this method will be deprecated once eServices uses FKeys in cache refreshes.</summary>
        </member>
        <member name="M:OpenDentBusiness.Signalods.SetInvalid(OpenDentBusiness.InvalidType[])">
            <summary>Won't work with InvalidType.Date, InvalidType.Task, or InvalidType.TaskPopup  yet.</summary>
        </member>
        <member name="M:OpenDentBusiness.Signalods.SetInvalidNoCache(OpenDentBusiness.InvalidType[])">
            <summary>Insertion logic that doesn't use the cache. Has special cases for generating random PK's and handling Oracle insertions.</summary>
        </member>
        <member name="M:OpenDentBusiness.Signalods.ClearOldSignals">
            <summary>Must be called after Preference cache has been filled.
            Deletes all signals older than 2 days if this has not been run within the last week.  Will fail silently if anything goes wrong.</summary>
        </member>
        <member name="T:OpenDentBusiness.TaskNotes">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TaskNotes.GetForTask(System.Int64)">
            <summary>A list of notes for one task, ordered by datetime.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskNotes.GetForTasks(System.Collections.Generic.List{System.Int64})">
            <summary>A list of notes for many tasks.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskNotes.RefreshForTasks(System.Collections.Generic.List{System.Int64})">
            <summary>A list of notes for multiple tasks, ordered by date time.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskNotes.Insert(OpenDentBusiness.TaskNote)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TaskNotes.Update(OpenDentBusiness.TaskNote)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TaskNotes.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.TaskUnreads">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TaskUnreads.Insert(OpenDentBusiness.TaskUnread)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TaskUnreads.SetRead(System.Int64,System.Int64)">
            <summary>Sets a task read by a user by deleting all the matching taskunreads.  Quick and efficient to run any time.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskUnreads.SetUnread(System.Int64,System.Int64)">
            <summary>Sets unread for a single user.  Works well without duplicates, whether it's already set to Unread(new) or not.</summary>
        </member>
        <member name="F:OpenDentBusiness.AppointmentRuleC.list">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.ApptViewItemC.List">
            <summary>A list of all ApptViewItems.</summary>
        </member>
        <member name="P:OpenDentBusiness.ApptViewC.List">
            <summary>A list of all apptviews, in order.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCodeCondC.list">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCodeC.list">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCodeC.listShort">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.AutoCodeC.HList">
            <summary>key=AutoCodeNum, value=AutoCode</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCodeItemC.list">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.AutoCodeItemC.HList">
            <summary>key=CodeNum,value=AutoCodeNum</summary>
        </member>
        <member name="M:OpenDentBusiness.Cache.GetTableRemotelyIfNeeded(System.Reflection.MethodBase,System.String)">
            <summary>This is only used in the RefreshCache methods.  Used instead of Meth.  The command is only used if not ClientWeb.</summary>
        </member>
        <member name="M:OpenDentBusiness.Cache.Refresh(OpenDentBusiness.InvalidType[])">
            <summary>itypesStr= comma-delimited list of int.  Called directly from UI in one spot.  Called from above repeatedly.  The end result is that both server and client have been properly refreshed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Cache.ClearAllCache">
            <summary>This is an incomplete stub and should not be used very much yet.  This will get used when switching databases.  Switching databases is allowed from ClientWeb in the sense that the user can connect to a different server from the ChooseDatabase window.</summary>
        </member>
        <member name="M:OpenDentBusiness.Cache.GetCacheDs(OpenDentBusiness.InvalidType[])">
            <summary>If ClientWeb, then this method is instead run on the server, and the result passed back to the client.  And since it's ClientWeb, FillCache will be run on the client.</summary>
        </member>
        <member name="M:OpenDentBusiness.Cache.FillCache(System.Data.DataSet,OpenDentBusiness.InvalidType[])">
            <summary>only if ClientWeb</summary>
        </member>
        <member name="M:OpenDentBusiness.Cache.GetAllCachedInvalidTypes">
            <summary>Returns a list of all invalid types that are used for the cache.  Currently only called from DBM.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimFormItemC.listt">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.ProcedureCodeC.HList">
            <summary>key:ProcCode, value:ProcedureCode</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodeC.GetListLong">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodeC.GetHList">
            <summary>key:ProcCode, value:ProcedureCode</summary>
        </member>
        <member name="F:OpenDentBusiness.ProgramPropertyC._listt">
            <summary>A list of all program (link) properties.</summary>
        </member>
        <member name="P:OpenDentBusiness.ProgramPropertyC.Listt">
            <summary>A list of all program (link) properties.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProgramC._hList">
            <summary>key:ProgName, value:Program</summary>
        </member>
        <member name="F:OpenDentBusiness.ProgramC._listt">
            <summary>A list of all Program links.</summary>
        </member>
        <member name="P:OpenDentBusiness.ProgramC.HList">
            <summary>key:ProgName, value:Program</summary>
        </member>
        <member name="P:OpenDentBusiness.ProgramC.Listt">
            <summary>A list of all Program links.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramC.GetHList">
            <summary>key:ProgName, value:Program</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramC.GetListt">
            <summary>A list of all Program links.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramC.HListIsNull">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PharmacyC.listt">
            <summary>A list of all pharmacies.</summary>
        </member>
        <member name="F:OpenDentBusiness.FeeSchedC._listLong">
            <summary>A list of all feescheds.</summary>
        </member>
        <member name="F:OpenDentBusiness.FeeSchedC._listShort">
            <summary>A list of feescheds that are not hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.FeeSchedC.GetListLong">
            <summary>A list of all feescheds.</summary>
        </member>
        <member name="M:OpenDentBusiness.FeeSchedC.GetListShort">
            <summary>A list of feescheds that are not hidden.</summary>
        </member>
        <member name="F:OpenDentBusiness.RecallTriggerC.listt">
            <summary>A list of all recall triggers.</summary>
        </member>
        <member name="P:OpenDentBusiness.RecallTypeC.Listt">
            <summary>A list of all recall Types.</summary>
        </member>
        <member name="M:OpenDentBusiness.RecallTypeC.GetListt">
            <summary>A list of all recall Types.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDefC.listt">
            <summary>A list of all sheetfielddefs.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetDefC.listt">
            <summary>A list of all sheetdefs.</summary>
        </member>
        <member name="F:OpenDentBusiness.SiteC.list">
            <summary>A list of all sites.</summary>
        </member>
        <member name="P:OpenDentBusiness.DisplayFieldC.Listt">
            <summary>A list of all DisplayFields, sorted by ItemOrder, but not by Category.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderC._lockObj">
            <summary>Thread safe lock object.  Any time you access _listShort or _listLong you MUST wrap the code block with lock(_lockObj).  Failing to lock will result in a potential for unsafe access by multiple threads at the same time.</summary>
        </member>
        <member name="P:OpenDentBusiness.ProviderC.ListLong">
            <summary>Rarely used. Includes all providers, even if hidden.</summary>
        </member>
        <member name="P:OpenDentBusiness.ProviderC.ListShort">
            <summary>This is the list used most often. It does not include hidden providers.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderC.GetListLong">
            <summary>Rarely used. Includes all providers, even if hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderC.GetListShort">
            <summary>This is the list used most often. It does not include hidden providers.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderC.GetListReports">
            <summary>Only for reports. Includes all providers where IsHiddenReport = 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.OperatoryC._listt">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.OperatoryC._listShort">
            <summary>A list of only those operatories that are visible.</summary>
        </member>
        <member name="P:OpenDentBusiness.OperatoryC.ListShort">
            <summary>A list of only those operatories that are visible.</summary>
        </member>
        <member name="M:OpenDentBusiness.OperatoryC.GetListShort">
            <summary>A list of only those operatories that are visible.</summary>
        </member>
        <member name="F:OpenDentBusiness.CovSpanC._list">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovSpanC.GetList">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.GroupPermissionC.List">
            <summary>A list of all GroupPermissions for all groups.</summary>
        </member>
        <member name="P:OpenDentBusiness.UserodC.Listt">
            <summary>A list of all users.</summary>
        </member>
        <member name="P:OpenDentBusiness.UserodC.ShortList">
            <summary>A list of users.  Does not include hidden users.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserodC.GetListt">
            <summary>A list of all users.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserodC.GetListShort">
            <summary>A list of users.  Does not include hidden users or CEMT users.</summary>
        </member>
        <member name="P:OpenDentBusiness.CovCatC.Listt">
            <summary>All CovCats</summary>
        </member>
        <member name="P:OpenDentBusiness.CovCatC.ListShort">
            <summary>Only CovCats that are not hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.CovCatC.GetListt">
            <summary>All CovCats</summary>
        </member>
        <member name="M:OpenDentBusiness.CovCatC.GetListShort">
            <summary>Only CovCats that are not hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.CovCatC.GetOrderLong(System.Int64)">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.DefC.Long">
            <summary>Stores all defs in a 2D array.</summary>
        </member>
        <member name="P:OpenDentBusiness.DefC.Short">
            <summary>Stores all defs in a 2D array except the hidden ones.  The first dimension is the category, in int format.  The second dimension is the index of the definition in this category.  This is dependent on how it was refreshed, and not on what is in the database.  If you need to reference a specific def, then the DefNum is more effective.</summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetArrayLong">
            <summary>Stores all defs in a 2D array.</summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetArrayShort">
            <summary>Stores all defs in a 2D array except the hidden ones.  The first dimension is the category, in int format.  The second dimension is the index of the definition in this category.  This is dependent on how it was refreshed, and not on what is in the database.  If you need to reference a specific def, then the DefNum is more effective.</summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetList(OpenDentBusiness.DefCat)">
            <summary>Gets a list of non-hidden defs for one category.</summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetListLong(OpenDentBusiness.DefCat)">
            <summary>Gets a list of all defs for one category.</summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetDefs(OpenDentBusiness.DefCat,System.Collections.Generic.List{System.Int64})">
            <summary>Gets a list of defs from the list of defnums and passed-in cat.</summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetDef(OpenDentBusiness.DefCat,System.Int64)">
            <summary>Get one def from Long.  Returns null if not found.  Only used for very limited situations.  Other Get functions tend to be much more useful since they don't return null.  There is also BIG potential for silent bugs if you use this.ItemOrder instead of GetOrder().</summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetDefByExactName(OpenDentBusiness.DefCat,System.String)">
            <summary>Returns the Def with the exact itemName passed in.  Returns null if not found.
            If itemName is blank, then it returns the first def in the category.</summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetName(OpenDentBusiness.DefCat,System.Int64,OpenDentBusiness.Def[][])">
            <summary>Pass in an array of all defs to save from making deep copies of the cache if you are going to call this method repeatedly.</summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetByExactName(OpenDentBusiness.DefCat,System.String)">
            <summary>Returns 0 if it can't find the named def.  If the name is blank, then it returns the first def in the category.</summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetByExactNameNeverZero(OpenDentBusiness.DefCat,System.String)">
            <summary>Returns the named def.  If it can't find the name, then it returns the first def in the category.</summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetOrder(OpenDentBusiness.DefCat,System.Int64)">
            <summary>Gets the order of the def within Short or -1 if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetValue(OpenDentBusiness.DefCat,System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetColor(OpenDentBusiness.DefCat,System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetHidden(OpenDentBusiness.DefCat,System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetPositiveAdjTypes">
            <summary>Returns defs from the AdjTypes that contain '+' in the ItemValue column.</summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetNegativeAdjTypes">
            <summary>Returns defs from the AdjTypes that contain '-' in the ItemValue column.</summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.GetImageCat(OpenDentBusiness.ImageCategorySpecial)">
            <summary>Returns a DefNum for the special image category specified.  Returns 0 if no match found.</summary>
        </member>
        <member name="M:OpenDentBusiness.DefC.IsDefDeprecated(OpenDentBusiness.Def)">
            <summary>Returns true if the passed-in def is deprecated.  This method must be updated whenever another def is deprecated.</summary>
        </member>
        <member name="T:OpenDentBusiness.ImageCategorySpecial">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ImageCategorySpecial.X">
            <summary>Show in Chart module.</summary>
        </member>
        <member name="F:OpenDentBusiness.ImageCategorySpecial.F">
            <summary>Show in patient forms.</summary>
        </member>
        <member name="F:OpenDentBusiness.ImageCategorySpecial.L">
            <summary>Show in patient portal.</summary>
        </member>
        <member name="F:OpenDentBusiness.ImageCategorySpecial.P">
            <summary>Patient picture (only one)</summary>
        </member>
        <member name="F:OpenDentBusiness.ImageCategorySpecial.S">
            <summary>Statements (only one)</summary>
        </member>
        <member name="F:OpenDentBusiness.ImageCategorySpecial.T">
            <summary>Graphical tooth charts and perio charts (only one)</summary>
        </member>
        <member name="F:OpenDentBusiness.ImageCategorySpecial.R">
            <summary>Treatment plan (only one)</summary>
        </member>
        <member name="F:OpenDentBusiness.ImageCategorySpecial.E">
            <summary>Expanded by default.</summary>
        </member>
        <member name="T:OpenDentBusiness.RemotingRole">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RemotingRole.ClientDirect">
            <summary>This dll is on a local workstation, and this workstation has successfully connected directly to the database with no 'server' layer.</summary>
        </member>
        <member name="F:OpenDentBusiness.RemotingRole.ClientWeb">
            <summary>Workstation that is getting its data from a web service on the server.</summary>
        </member>
        <member name="F:OpenDentBusiness.RemotingRole.ServerWeb">
            <summary>This dll is part of a web server that is providing data via web services.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountDefC.listt">
            <summary>A list of all MountDefs.</summary>
        </member>
        <member name="P:OpenDentBusiness.PrefC.Dict">
            <summary>Key is prefName.  Can't use the enum, because prefs are allowed to be added by outside programmers, and this framework will support those prefs, too.</summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.GetDict">
            <summary>Key is prefName.  Can't use the enum, because prefs are allowed to be added by outside programmers, and this framework will support those prefs, too.</summary>
        </member>
        <member name="P:OpenDentBusiness.PrefC.RandomKeys">
            <summary>This property is just a shortcut to this pref to make typing faster.  This pref is used a lot.</summary>
        </member>
        <member name="P:OpenDentBusiness.PrefC.AtoZfolderUsed">
            <summary>This property is just a shortcut to this pref to make typing faster.  This pref is used a lot.</summary>
        </member>
        <member name="P:OpenDentBusiness.PrefC.HasClinicsEnabled">
            <summary>This property is just a shortcut to the negative of the EasyNoClinics pref to make logic easier to follow.</summary>
        </member>
        <member name="P:OpenDentBusiness.PrefC.HasSuperStatementsEnabled">
            <summary>This property is just a shortcut.  Returns true if both StatementsUseSheets and ShowFeatureSuperFamilies are true.</summary>
        </member>
        <member name="P:OpenDentBusiness.PrefC.IsODHQ">
            <summary>Returns true if DockPhonePanelShow is enabled. Convenience function that should be used if for ODHQ only, and not resellers.</summary>
             <returns></returns>
        </member>
        <member name="M:OpenDentBusiness.PrefC.GetLong(OpenDentBusiness.PrefName,System.Collections.Generic.Dictionary{System.String,OpenDentBusiness.Pref})">
            <summary>Gets a pref of type long.  Pass in a dictionary of preferences to avoid getting a deep copy of the current cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.GetInt(OpenDentBusiness.PrefName)">
            <summary>Gets a pref of type int32.  Used when the pref is an enumeration, itemorder, etc.  Also used for historical queries in ConvertDatabase.</summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.GetByte(OpenDentBusiness.PrefName)">
            <summary>Gets a pref of type byte.  Used when the pref is a very small integer (0-255).</summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.GetDouble(OpenDentBusiness.PrefName)">
            <summary>Gets a pref of type double.</summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.GetBool(OpenDentBusiness.PrefName)">
            <summary>Gets a pref of type bool.</summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.GetBoolSilent(OpenDentBusiness.PrefName,System.Boolean)">
            <Summary>Gets a pref of type bool, but will not throw an exception if null or not found.  Indicate whether the silent default is true or false.</Summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.GetString(OpenDentBusiness.PrefName,System.Collections.Generic.Dictionary{System.String,OpenDentBusiness.Pref})">
            <summary>Gets a pref of type string.  Pass in a dictionary of preferences to avoid getting a deep copy of the current cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.GetStringNoCache(OpenDentBusiness.PrefName)">
            <summary>Gets a pref of type string without using the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.GetStringSilent(OpenDentBusiness.PrefName)">
            <summary>Gets a pref of type string.  Will not throw an exception if null or not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.GetDate(OpenDentBusiness.PrefName)">
            <summary>Gets a pref of type date.</summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.GetDateT(OpenDentBusiness.PrefName)">
            <summary>Gets a pref of type datetime.</summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.GetColor(OpenDentBusiness.PrefName)">
            <summary>Gets a color from an int32 pref.</summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.GetRaw(System.String)">
            <summary>Used sometimes for prefs that are not part of the enum, especially for outside developers.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OpenDentBusiness.PrefC.GetLanguageAndRegion" -->
        <member name="M:OpenDentBusiness.PrefC.HasOnlinePaymentEnabled">
            <summary>Returns true if the XCharge program is enabled and at least one clinic has online payments enabled.</summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.ContainsKey(System.String)">
            <summary>Used by an outside developer.</summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.HListIsNull">
            <summary>Used by an outside developer.</summary>
        </member>
        <member name="P:OpenDentBusiness.PrefC.DictRef">
            <summary>Only used in the unit tests.  This quick hack has not been tested.</summary>
        </member>
        <member name="P:OpenDentBusiness.PrefC.IsTreatPlanSortByTooth">
            <summary>Static preference used to always reflect FormOpenDental.IsTreatPlanSortByTooth.  
            This setter should only be called in FormOpenDental.IsTreatPlanSortByTooth.</summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.GetTempFolderPath">
            <summary>Returns the path to the temporary opendental directory, temp/opendental.  Also performs one-time cleanup, if necessary.  In FormOpenDental_FormClosing, the contents of temp/opendental get cleaned up.</summary>
        </member>
        <member name="M:OpenDentBusiness.PrefC.GetRandomTempFile(System.String)">
            <summary>Creates a new randomly named file in the given directory path with the given extension and returns the full path to the new file.</summary>
        </member>
        <member name="T:OpenDentBusiness.TimeCardRules">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.TimeCardRules._listEvents">
            <summary>One list of tuples per week, each list of tuples contains up to one entry per clinic, if employee clocked any time at that clinic.
            <para>Tuple is &lt;ClinicNum,TimeSpan></para></summary>
        </member>
        <member name="F:OpenDentBusiness.TimeCardRules.listt">
            <summary>A list of all TimeCardRules.</summary>
        </member>
        <member name="P:OpenDentBusiness.TimeCardRules.Listt">
            <summary>A list of all TimeCardRules.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.Insert(OpenDentBusiness.TimeCardRule)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.Update(OpenDentBusiness.TimeCardRule)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.ValidatePayPeriod(OpenDentBusiness.Employee,System.DateTime,System.DateTime)">
            <summary>Validates pay period before making any adjustments.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.ValidateOvertimeRules(System.Collections.Generic.List{System.Int64})">
            <summary>Cannot have both AM/PM rules and OverHours rules defined. 
             We no longer block having multiple rules defined. With a better interface we can improve some of this functionality. Per NS 09/15/2015.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.ClearAuto(System.Int64,System.DateTime,System.DateTime)">
            <summary>Clears automatic adjustment/adjustOT values and deletes automatic TimeAdjusts for period.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.ClearManual(System.Int64,System.DateTime,System.DateTime)">
            <summary>Clears all manual adjustments/Adjust OT values from clock events. Does not alter adjustments to clockevent.TimeDisplayed1/2 nor does it delete or alter any TimeAdjusts.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.GetTimeCardRule(OpenDentBusiness.Employee)">
            <summary>Validates list and throws exceptions. Always returns a value. Creates a timecard rule based on all applicable timecard rules for a given employee.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.CalculateDailyOvertime_Old(OpenDentBusiness.Employee,System.DateTime,System.DateTime)">
            <summary>Calculates daily overtime. Throws exceptions when encountering errors, though all errors SHOULD have been caught already by using the ValidatePayPeriod() function and generating a msgbox.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.CalculateDailyOvertime(OpenDentBusiness.Employee,System.DateTime,System.DateTime)">
            <summary>Calculates daily overtime.  Daily overtime does not take into account any time adjust events.  All manually entered time adjust events are assumed to be entered correctly and should not be used in calculating automatic totals.  Throws exceptions when encountering errors.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.timeClockEventsOverlapHelper(OpenDentBusiness.ClockEvent,OpenDentBusiness.ClockEvent)">
            <summary>Returns true if two clock events overlap. Useful for determining if a break applies to a given clock event.  
            Does not matter which order clock events are provided.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.AdjustAutoClockEventEntriesHelper(System.Collections.Generic.List{OpenDentBusiness.ClockEvent},System.Collections.Generic.List{OpenDentBusiness.ClockEvent},System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>Updates OTimeAuto, AdjustAuto (calculated and set above., and Rate2Auto based on the rules passed in, and calculated break time overages.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.AdjustBreaksHelper(OpenDentBusiness.Employee,System.DateTime,System.DateTime)">
            <summary>Deprecated.  This function is aesthetic and has no bearing on actual OT calculations. It adds adjustments to breaks so that when viewing them you can see if they went over 30 minutes.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.CalculateWeeklyOvertime_Old(OpenDentBusiness.Employee,System.DateTime,System.DateTime)">
            <summary>Calculates weekly overtime and inserts TimeAdjustments accordingly.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.CalculateWeeklyOvertime(OpenDentBusiness.Employee,System.DateTime,System.DateTime)">
            <summary>Calculates weekly overtime and inserts TimeAdjustments accordingly.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRules.FillWeeklyTotalsHelper(System.Boolean,OpenDentBusiness.Employee,System.Collections.ArrayList)">
            <summary>This was originally analogous to the FormTimeCard.FillGrid(), before this logic was moved to the business layer.</summary>
        </member>
        <member name="T:OpenDentBusiness.ToothGridCells">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ToothGridCols">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ToothGridDefs">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.VaccineDefs">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineDefs.listt">
            <summary>A list of all VaccineDefs.</summary>
        </member>
        <member name="P:OpenDentBusiness.VaccineDefs.Listt">
            <summary>A list of all VaccineDefs.</summary>
        </member>
        <member name="M:OpenDentBusiness.VaccineDefs.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.VaccineDefs.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.VaccineDefs.GetOne(System.Int64)">
            <summary>Gets one VaccineDef from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.VaccineDefs.Insert(OpenDentBusiness.VaccineDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.VaccineDefs.Update(OpenDentBusiness.VaccineDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.VaccineDefs.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.VaccinePats">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.VaccinePats.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.VaccinePats.Insert(OpenDentBusiness.VaccinePat)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.VaccinePats.Update(OpenDentBusiness.VaccinePat)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.VaccinePats.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Vitalsigns">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Vitalsigns.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Vitalsigns.GetOne(System.Int64)">
            <summary>Gets one Vitalsign from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Vitalsigns.GetFromEhrNotPerformedNum(System.Int64)">
            <summary>Get vitalsign that this EhrNotPerformed object is linked to. Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Vitalsigns.GetListFromPregDiseaseNum(System.Int64)">
            <summary>Gets one Vitalsign with the given DiseaseNum as the PregDiseaseNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Vitalsigns.Insert(OpenDentBusiness.Vitalsign)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Vitalsigns.Update(OpenDentBusiness.Vitalsign)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Vitalsigns.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.WikiPageHists">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPageHists.GetByTitle(System.String)">
            <summary>Ordered by dateTimeSaved.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPageHists.GetDeletedPages(System.String,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPageHists.GetDeletedByTitle(System.String)">
            <summary>Only returns the most recently deleted version of the page. Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPageHists.Insert(OpenDentBusiness.WikiPageHist)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.WikiPages">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.WikiPages.NavToPageDelegate">
            <summary>Defines delegate signature to be used for WikiPages.NavPageDelegate.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiPages.NavPageDelegate">
            <summary>Sent in from FormOpendental. Allows static method for business layer to cause wikipage navigation in FormOpendental.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiPages.masterPage">
            <summary>The only wiki page that gets cached is the master page.</summary>
        </member>
        <member name="P:OpenDentBusiness.WikiPages.MasterPage">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.GetByTitle(System.String)">
            <summary>Returns null if page does not exist. Does not return drafts.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.GetByTitleContains(System.String)">
            <summary>Returns a list of pages with PageTitle LIKE '%searchText%'.  Excludes titles that start with underscore.
            Does not return drafts.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.GetDraftsByTitle(System.String)">
            <summary>Returns empty list if page does not exist.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.GetTitle(System.String)">
            <summary>Used when saving a page to check and fix the capitalization on each internal link. 
            So the returned pagetitle might have different capitalization than the supplied pagetitle.
            Does not return drafts.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.InsertAndArchive(OpenDentBusiness.WikiPage)">
            <summary>Archives first by moving to WikiPageHist if it already exists.  Then, in either case, it inserts the new page.
            Does not delete drafts.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.InsertAsDraft(OpenDentBusiness.WikiPage)">
            <summary>Should only be used for inserting drafts.  Inserting a non-draft wikipage should call InsertAndArchive.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.UpdateDraft(OpenDentBusiness.WikiPage)">
            <summary>Throws Exceptions, surround with try catch. Should only be used for updating drafts.  Updating a non-draft wikipage should never happen.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.GetForSearch(System.String,System.Boolean)">
            <summary>Searches keywords, title, content.  Does not return pagetitles for drafts.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.GetIncomingLinks(System.String)">
            <summary>Returns a list of all pages that reference "PageTitle".  No historical pages or drafts.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.Rename(OpenDentBusiness.WikiPage,System.String)">
            <summary>Validation was already done in FormWikiRename to make sure that the page does not already exist in WikiPage table.
            But what if the page already exists in WikiPageHistory?  In that case, previous history for the other page would start showing as history for
            the newly renamed page, which is fine.  Also renamed drafts, so that we can still match them to their parent wiki page.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.CheckPageNamesExist(System.Collections.Generic.List{System.String})">
            <summary>Used in TranslateToXhtml to know whether to mark a page as not exists.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.GetWikiPath">
            <summary>Surround with try/catch.  Typically returns something similar to \\SERVER\OpenDentImages\Wiki</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.TranslateToXhtml(System.String,System.Boolean)">
            <summary>Surround with try/catch.  Also aggregates the content into the master page.  If isPreviewOnly, then the internal links will not be checked to see if the page exists, as it would make the refresh sluggish.  And isPreviewOnly also changes the pointer so that the page looks non-clickable.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.ProcessList(System.String,System.String)">
            <summary>This will get called repeatedly.  prefixChars is, for now, * or #.  Returns the altered text of the full document.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.ProcessParagraph(System.String,System.Boolean)">
            <summary>This will wrap the text in p tags as well as handle internal carriage returns.  startsWithCR is only used on the first paragraph for the unusual case where the entire content starts with a CR.  This prevents stripping it off.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.DeleteDraft(OpenDentBusiness.WikiPage)">
            <summary>Throws exceptions, surround with Try catch.Only delete wiki drafts with this function.  Normal wiki pages cannot be deleted, only archived.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPages.Archive(System.String,System.Int64)">
            <summary>Creates historical entry of deletion into wikiPageHist, and deletes current non-draft page from WikiPage.
            For middle tier purposes we need to have the currently logged in user passed into this method.</summary>
        </member>
        <member name="M:OpenDentBusiness.XChargeTransactions.Insert(OpenDentBusiness.XChargeTransaction)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.XChargeTransactions.GetOneByBatchItem(System.String,System.String)">
            <summary>Gets one XChargeTransaction from the db by batchNum and itemNum. For example: ("1515","0001").</summary>
        </member>
        <member name="M:OpenDentBusiness.XChargeTransactions.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardQueries._showElapsedTimesForDebug">
            <summary>Set this boolean to true if you want to have message boxes pop up after each method is run when in debug mode.  Used to time long computations before loading the dashboard.</summary>
        </member>
        <member name="M:OpenDentBusiness.DashboardQueries.GetAR(System.DateTime,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.DashboardAR})">
            <summary>Returns all DashbaordAR(s) for the given time period. Caution, this will run aging and calculate a/r if a month within the given range is missing.
            This can take several seconds per month missing.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrPatListElements">
            <summary>Used in Ehr patient lists.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrPatListElements.GetListOrderBy2014Retro(System.Collections.Generic.List{OpenDentBusiness.EhrPatListElement})">
            <summary>This is a potential fix to be backported to 13.2 so that patient lists can be used for MU1 2013. on large databases these queries take way to long to run. (At least several minutes).</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrPatListElements.contactMethodHelper(System.String)">
            <summary>Tries to match input string to enum name of ContactMethod and returns an int(as a string). Returns empty string if no match.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrPatListElements.patNumHelper(System.Collections.Generic.List{System.Int64})">
            <summary>generate list of PatNums in the format "(#,#,#,#,...)" for use in an "IN" clause. Works with empty list.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrPatListElements.GetOperandText(OpenDentBusiness.EhrOperand)">
            <summary>Returns lt, gt, or equals</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrPatListElements.GetFilteringText(OpenDentBusiness.EhrPatListElement)">
            <summary>Returns text used in WHERE clause of query for tempehrlist.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrPatListElement">
            <summary>Used by ehr "Generate Patient Lists".  This object represents one row in the grid when building the report.  Multiple such elements will be ANDed together to automatically generate a query.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatListElement.Restriction">
            <summary>Birthdate, Disease, Medication, or LabResult</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatListElement.CompareString">
            <summary>For all 4 types, what to compare against.  Examples:  Birthdate: '50', Disease: '4140' (icd9 code will be followed by wildcard), Medication: 'Lisinopril' (not case sensitive, surrounded by wildcards), LabResult: 'HDL-cholesterol'.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatListElement.Operand">
            <summary>gt, lt, or equal.  Only used for lab and birthdate.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatListElement.LabValue">
            <summary>Only used for Lab.  Usually a number.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatListElement.OrderBy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrRestrictionType">
            <summary>Add to end of list, do not change the order.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrPatListElement2014">
            <summary>Used by ehr "Generate Patient Lists".  This object represents one row in the grid when building the report.  Multiple such elements will be ANDed together to automatically generate a query.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatListElement2014.Restriction">
            <summary>Birthdate, Disease, Medication, or LabResult</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatListElement2014.CompareString">
            <summary>For all 4 types, what to compare against.  Examples:  Birthdate: '50', Disease: '4140' (icd9 code will be followed by wildcard), Medication: 'Lisinopril' (not case sensitive, surrounded by wildcards), LabResult: 'HDL-cholesterol'. Allergy:'Allergy - Morphene'. CommPref:'MobilePh'(exact enum names)</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatListElement2014.Operand">
            <summary>gt, lt, or equal.  Only used for lab and birthdate.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatListElement2014.LabValue">
            <summary>Only used for Lab.  Usually a number.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatListElement2014.StartDate">
            <summary>Only select records after this date, i.e. date of diagnosis, prescription, lab date, etc... If ==null or ==DateTime.MinValue this value is ignored.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatListElement2014.EndDate">
            <summary>Only select records before this date, i.e. date of diagnosis, prescription, lab date, etc... If ==null or ==DateTime.MinValue this value is ignored.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatListElement2014.LabValueType">
            <summary>Used to determine how the LabValue should be compaired.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatListElement2014.LabValueUnits">
            <summary>Ucum codes. Example: mg/dL</summary>
        </member>
        <member name="T:OpenDentBusiness.QualityMeasure">
            <summary>Used by ehr.</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityMeasure.NotMet">
            <summary>Denominator-Exceptions-Exclusions-Numerator.  Those that do not fall into a sub-population.</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityMeasure.ReportingRate">
            <summary>This represents the percentage of patients in the denominator who fall into one of the other sub-populations.  The Reporting Rate is calculated as: Rate=(Numerator+Exclusions+Exceptions)/Denominator. See \\SERVERFILES\storage\EHR\Quality Measures\QRDA\CDAR2_QRDA_CATIII_DSTU_R1_2012NOV\CDAR2_QRDAIII_DSTU_R1_2012NOV.pdf page 86.</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityMeasure.PerformanceRate">
            <summary>The performance rate is a ratio of patients that meet the numerator criteria divided by patients in the denominator (after accounting for exclusions and exceptions).  Rate = Numerator/(Denominator-Exclusions-Exceptions).</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasure.Copy">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.QualityType2014.WeightOver65">
            <summary>Considered Population 1</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityType2014.WeightAdult">
            <summary>Considered Population 2</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityType2014.CariesPrevent_1">
            <summary>age 0-5.  Considered Stratification 1</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityType2014.CariesPrevent_2">
            <summary>age 6-12.  Considered Stratification 2</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityType2014.CariesPrevent_3">
            <summary>age 13-20.  Considered Stratification 3</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityType2014.WeightChild_1_1">
            <summary>patients 3-16 with height, weight, and BMI recorded.  Considered Numerator 1 All</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityType2014.WeightChild_1_2">
            <summary>patients 3-16 counseled for nutrition.  Considered Numerator 2 All</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityType2014.WeightChild_1_3">
            <summary>patients 3-16 counseled for physical activity.  Considered Numerator 3 All</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityType2014.WeightChild_2_1">
            <summary>patients 3-11 with height, weight, and BMI recorded.  Considered Numerator 1 Stratification 1</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityType2014.WeightChild_2_2">
            <summary>patients 3-11 counseled for nutrition.  Considered Numerator 2 Stratification 1</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityType2014.WeightChild_2_3">
            <summary>patients 3-11 counseled for physical activity.  Considered Numerator 3 Stratification 1</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityType2014.WeightChild_3_1">
            <summary>patients 12-16 with height, weight, and BMI recorded.  Considered Numerator 1 Stratification 2</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityType2014.WeightChild_3_2">
            <summary>patients 12-16 counseled for nutrition.  Considered Numerator 2 Stratification 2</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityType2014.WeightChild_3_3">
            <summary>patients 12-16 counseled for physical activity.  Considered Numerator 3 Stratification 2</summary>
        </member>
        <member name="F:OpenDentBusiness.CqmItemAbbreviation.Enc">
            <summary>Encounter Performed</summary>
        </member>
        <member name="F:OpenDentBusiness.CqmItemAbbreviation.Proc">
            <summary>Procedure Performed</summary>
        </member>
        <member name="F:OpenDentBusiness.CqmItemAbbreviation.Ivn">
            <summary>Intervention Order/Performed</summary>
        </member>
        <member name="F:OpenDentBusiness.CqmItemAbbreviation.MeasEvn">
            <summary>EhrMeasureEvents, used for Current Medications Documented 'procedures' and Tobacco Assessment Events</summary>
        </member>
        <member name="F:OpenDentBusiness.CqmItemAbbreviation.MedPat">
            <summary>Medication Active/Order/Administered</summary>
        </member>
        <member name="F:OpenDentBusiness.CqmItemAbbreviation.NotPerf">
            <summary>EhrNotPerformed</summary>
        </member>
        <member name="F:OpenDentBusiness.CqmItemAbbreviation.Prob">
            <summary>Problem (Diagnosis)</summary>
        </member>
        <member name="F:OpenDentBusiness.CqmItemAbbreviation.Vital">
            <summary>Vitalsign</summary>
        </member>
        <member name="F:OpenDentBusiness.CqmItemAbbreviation.Payer">
            <summary>Payer</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrCqmPatient">
            <summary>This is all of the patient data required for QRDA category 1 reporting (in the patient recordTarget section).  If the patient is in ListEhrPats for this EhrCqmData object, the patient is part of the initial patient population.  The patient will also be placed into the 'Numerator', 'Exclusion', or 'Exception' category, for counting up results for the QRDA category 3 report for this measure.  A short explanation will be provided if the patient is not in the 'Numerator' to help the user improve their percentage.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCqmVitalsign.BMI">
            <summary>BMI=-1 if it is a Physical Exam, Finding: Diastolic/Systolic BP</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCqmVitalsign.BpSystolic">
            <summary>BpSystolic=-1 if it is a Physical Exam, Finding: BMI</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCqmVitalsign.BpDiastolic">
            <summary>BpDiastolic=-1 if it is a Physical Exam, Finding: BMI</summary>
        </member>
        <member name="T:OpenDentBusiness.QualityMeasures">
            <summary>Used in Ehr quality measures.</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityMeasures.strCodeSystemLoinc">
            <summary>OID: 2.16.840.1.113883.6.1</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityMeasures.strCodeSystemNameLoinc">
            <summary>LOINC</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityMeasures.strCodeSystemSnomed">
            <summary>OID: 2.16.840.1.113883.6.96</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityMeasures.strCodeSystemNameSnomed">
            <summary>SNOMED CT</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityMeasures._provOutQrda">
            <summary>OID: 2.16.840.1.113883.6.88</summary>
            <summary>Set each time GenerateQrda_xml() is called. Used by helper functions to avoid sending the provider as a parameter to each helper function.</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityMeasures._w">
            <summary>Instantiated each time GenerateQrda_xml() is called. Used by helper functions to avoid sending the writer as a parameter to each helper function.</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityMeasures._x">
            <summary>Instantiated each time GenerateQrda_xml() is called. Used by helper functions to avoid sending the writer as a parameter to each helper function.  Second writer to generate patient data entries in text form and xml form simultaneously.  The helper functions will take a bool to determine which variable to modify.</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityMeasures._isWriterW">
            <summary>This global variable tells the helper functions which of the above XmlWriters to use.  If true, then the _w writer is modified, false=_x.</summary>
        </member>
        <member name="F:OpenDentBusiness.QualityMeasures._hashQrdaGuids">
            <summary>Instantiated each time GenerateQrda_xml() is called. Used to generate unique "id" element "root" attribute identifiers. The Ids in this list are random GUIDs which are 36 characters in length.  They are used to uniquely identify the QRDA documents.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetAll(System.DateTime,System.DateTime,System.Int64)">
            <summary>Generates a list of all the quality measures for 2011.  Performs all calculations and manipulations.  Returns list for viewing/output.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetAll2014(System.DateTime,System.DateTime,System.Int64)">
            <summary>Generates a list of all the quality measures for 2014.  Performs all calculations and manipulations.  Returns list for viewing/output.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetPQRIMeasureNumber(OpenDentBusiness.QualityType)">
            <summary>Used in reporting, and only for certain types.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetEhrCqmData(OpenDentBusiness.QualityType2014,System.DateTime,System.DateTime,System.Int64)">
            <summary>Only called from GetAll2014.  Once the EhrCqmData object is created, all of the data relevant to the measure and required by the QRDA category 1 and category 3 reporting is part of the object.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetListPatNums(System.Collections.Generic.List{OpenDentBusiness.EhrCqmPatient})">
            <summary>Simple helper function to get a list of PatNums from a list of EhrCqmPatient objects.  Used to limit the number of records returned in other Get functions below, like GetProcs.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetEncountersWithOneOfAndTwoOfOIDs(System.String,System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String})">
            <summary>The string command will retrieve all unique encounters in the date range, for the provider (based on provider first and last name, so may be more than one ProvNum), with age limitation or other restrictions applied.  The encounters will then be required to belong to the value sets identified by the oneOf and twoOf lists of OID's (Object Identifiers), and the patient will have to have had one or more of the oneOf encounters or two or more of the two of encounters in the list returned by the string command.  We will return a dictionary with PatNum as the key that links to a list of all EhrCqmEncounter objects for that patient with all of the required elements for creating the QRDA Category I and III documents.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetEhrPatsFromEncsOrProcs(System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{OpenDentBusiness.EhrCqmEncounter}},System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{OpenDentBusiness.EhrCqmProc}})">
            <summary>Get relevant demographic and supplemental patient data required for CQM reporting for each unique patient in the list of eligible encounters in the dictionary of PatNums linked to a list of encounters for each PatNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetTobaccoAssessmentEvents(System.Collections.Generic.List{System.Int64},System.DateTime)">
            <summary>Get ehrmeasureevents of type TobaccoAssessment where the event code is in the Tobacco Use Screening value set and the assessment resulted in categorizing the patient as a user or non-user and the screening was within 24 months of the measurement period end date.  Ordered by PatNum, DateTEvent.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetInterventions(System.String,System.Collections.Generic.List{System.String})">
            <summary>Get all data needed for reporting QRDA's for interventions from the supplied command where the code belongs to the value set(s) sent in.  Command orders interventions by patnum, then date entered so the first one found for patient is most recent intervention when looping through table.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetMedPats(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String},System.DateTime,System.DateTime)">
            <summary>Get the medication information for medications where the code belongs to one of the value sets in the supplied list and the medication start date is in the supplied date range.  Ordered by PatNum,DateStart so first found for patient is most recent to make calculation easier.  If there is a PatNote, this is a Medication Order.  If there is no note and there is either no stop date or the stop date is after the measurement period end date, this is an active Medication.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetNotPerformeds(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.String},System.DateTime,System.DateTime)">
            <summary>Get all NotPerformed items that belong to one of the ValueSetOIDs in listItemOIDs, with valid reasons that belong to one of the ValueSetOIDs in listReasonOIDs, that were entered between dateStart and dateStop.  For QRDA reporting, the resulting list must include the item not performed, a code for 'reason', and the code for the specific reason.  Example: If not administering a flu vaccine, you would have the code not being done (like CVX 141 "Influenza, seasonal, injectable"), the code for 'reason' (like SNOMEDCT 281000124100 "Patient reason for exclusion from performance measure (observable entity)"), and the code for the specific reason (like SNOMEDCT 105480006 "Refusal of treatment by patient (situation)").  Not fun.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetProblems(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String},System.DateTime,System.DateTime)">
            <summary>Get all problems that started before or during the date range, that have a code that belong to the value sets in listProbOIDs, and that either have no stop date or the stop date is after dateStart.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetMedDocumentedProcs(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String},System.DateTime,System.DateTime)">
            <summary>Get all medication documented procedures that happened in the date range that belong to the value set OIDs.  These 'procedures' are actually in the ehrmeasureevent table and can only possibly be one code (restricted by value set OID), SNOMEDCT - 428191000124101 - Documentation of current medications (procedure).  Ordered by PatNum, DateTEvent DESC for making CQM calc easier, most recent 'procedure' will be the first one found for the patient in list.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetVitalsignsForBMI(System.Collections.Generic.List{System.Int64},System.DateTime,System.DateTime)">
            <summary>Used in measure 69, BMI Screening and Follow-up and measure 155, Weight Assessment and Counseling for Nutrition and Physical Activity for Children and Adolescents.  Get all vitalsigns with DateTaken in the date range with valid height and weight.  Only one code available for a BMI exam - LOINC 39156-5 Body mass index (BMI) [Ratio].  Any vitalsign object with valid height and weight is assumed to be a LOINC 39156-5, not stored explicitly.  Results ordered by PatNum then DateTaken DESC, so MOST RECENT for each patient will be the first one in the list for that pat (i.e. dict[PatNum][0]).</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetVitalsignsForBP(System.Collections.Generic.List{System.Int64},System.DateTime,System.DateTime)">
            <summary>Used in measure 165, Controlling High Blood Pressure.  Get all vitalsigns with DateTaken in the date range with valid BP.  Only one code available for Systolic BP, LOINC 8480-6, and one code for Diastolic, LOINC 8462-4.  Results ordered by PatNum then DateTaken DESC, so MOST RECENT for each patient will be the first one in the list for that pat (i.e. dict[PatNum][0]).</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetProcs(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String},System.DateTime,System.DateTime)">
            <summary>Get all procedures with ProcDate in the date range and ProcCode in the list of codes that belong to one of the value sets in listValueSetOIDs.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetVaccines(System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.String},System.DateTime,System.DateTime,System.Boolean)">
            <summary>Returns all vaccinepat objects for pneumonia and influenza CQMs.  These are basically just medicationpat objects, so we will use the same object with two optional fields to identify them as vaccinepats instead of medicationpats.  The isGiven bool set to true will return only those with the CompletionStatus=0 (complete).  If isGiven=false, all will be returned and the logic to determine whether it was given or not will take place in calculation.  The only time we want vaccines with a status other than complete is when we are looking for vaccines NotAdministered in the influenza vaccine measure.  These NotAdministered vaccines will be due to an intolerance or allergy and entered as such.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.ClassifyPatients(OpenDentBusiness.QualityMeasure,OpenDentBusiness.QualityType2014,System.DateTime,System.DateTime)">
            <summary>Using the data in alldata, determine if the patients in alldata.ListEhrPats are in the 'Numerator', 'Exclusion', or 'Exception' category for this measure and enter an explanation if applicable.  All of the patients in ListEhrPats are the initial patient population (almost always equal to the Denominator).</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.CalcNumerator(System.Data.DataTable)">
            <summary>Just counts up the number of rows with an X in the numerator column.  Very simple.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.CalcNumerator2014(System.Collections.Generic.List{OpenDentBusiness.EhrCqmPatient})">
            <summary>Just counts up the number of EhrPatients with IsNumerator=true.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.CalcDenominator2014(System.Collections.Generic.List{OpenDentBusiness.EhrCqmPatient})">
            <summary>Just counts up the number of EhrPatients with IsDenominator=true.  The only measure that may have some patients in the initial patient population that are not in the denominator is the influenza vaccine measure, CMS147v2.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.CalcDenominator2014_Encs(System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{OpenDentBusiness.EhrCqmEncounter}})">
            <summary>This is only used by measure 68, current meds documented.  This is the only measure that is not patient based, but encounter based.  So every eligible encounter is the denominator/ipp.  We will have to handle this case carefully.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.CalcExclusions(System.Data.DataTable)">
            <summary>Just counts up the number of rows with an X in the exclusion column.  Very simple.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.CalcExceptions2014(System.Collections.Generic.List{OpenDentBusiness.EhrCqmPatient})">
            <summary>Just counts up the number of EhrPatients with IsException=true.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.CalcNumerator2014_Encs(System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{OpenDentBusiness.EhrCqmEncounter}})">
            <summary>This is only used by measure 68, current meds documented.  This is the only measure that is not patient based, but encounter based.  Simply loop through all encounters for all patients in the dictionary and count up the encounters with IsNumerator=true.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.CalcException2014_Encs(System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{OpenDentBusiness.EhrCqmEncounter}})">
            <summary>This is only used by measure 68, current meds documented.  This is the only measure that is not patient based, but encounter based.  Simply loop through all encounters for all patients in the dictionary and count up the encounters with IsException=true.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.CalcExclusions2014(System.Collections.Generic.List{OpenDentBusiness.EhrCqmPatient})">
            <summary>Just counts up the number of EhrPatients with IsExclusion=true.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetExclusionsExplain2014(OpenDentBusiness.QualityType2014)">
            <summary>The exclusions and exceptions are very similar, in fact no measure from our set of 9 CQM's has both an exclusion and an exception.  Possibly combine these into one text box called "Exclusions/Exceptions" to save space on FormQualityMeasureEdit2014.  We will have to report them in the correctly labeled section in our QRDA III report, so we probably have to keep them in separate functions.  The difference between them is when to take each into account in calculating measure.  Find denominator, apply exclusions, then classify using numerator criteria, then only if not in numerator apply exceptions and subtract from denominator.  Exceptions only apply if the patient/encounter doesn't meet the numerator criteria, don't immediately subtract from the denominator population.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GenerateQRDA(System.Collections.Generic.List{OpenDentBusiness.QualityMeasure},System.Int64,System.DateTime,System.DateTime,System.String,System.Int64)">
            <summary>listQMs will be a list of 9 QualityMeasure objects for the selected CQMs.
            Those objects will have every encounter, procedure, problem, etc. required for creating the category I and category III QRDA documents.
            Category I is the patient level documents, and will be one document for every patient in the initial patient population for the specific measure.
            Each encounter, procedure, etc. may appear in the Category I document multiple times if, for instance, the encounter falls into more than one value set
            and qualifies the patient for inclusion in multiple measures.
            The Category I files will be zipped per measure, so a patient's file be in the zip for every measure to which they belong.
            The Category III document contains the aggregate information for each of the selected measures.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GenerateQRDACatThree(System.Collections.Generic.List{OpenDentBusiness.QualityMeasure},System.DateTime,System.DateTime,System.String)">
            <summary>This method generates the entire Category III aggregate information document and places it in the path supplied in folderRoot\QRDA_Category_III.xml.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.FillDictPopCounts(System.Collections.Generic.List{OpenDentBusiness.EhrCqmPatient},System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{OpenDentBusiness.EhrCqmEncounter}})">
            <summary>List of dictionaries that hold the count of supplemental data for each population.
            <para>Send in the measure IPP, which may be 0, and the list will be filled with supplemental counts for each population.</para>
            <para>Use the index of the dictionary to get the counts desired.</para>
            <para>0=IPP, 1=Denominator, 2=Denominator Exclusions, 3=Numerator, 4=Denominator Exceptions.</para>
            <para>Example, for counts of supplemental data for the denominator, get the dict[1].  dict[1] will have relevant counts for race, gender, ethnicity, and payer.</para></summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GetSupplementalCounts(System.Collections.Generic.List{OpenDentBusiness.EhrCqmPatient})">
            <summary>Gets count of gender, race, ethnicity, and payer type.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GenerateEncounterEntry(OpenDentBusiness.EhrCqmEncounter)">
            <summary>Generates one encounter xml entry and uses the global writer _x instead of the main writer _w.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GenerateProcedureEntry(OpenDentBusiness.EhrCqmProc,OpenDentBusiness.EhrCqmProblem)">
            <summary>Either a proc or a problem will be sent in, the other will be null.  If probCur then Procedure, Order: item, if procCur then Procedure, Perforemed: item.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.GenerateNotPerfEntry(OpenDentBusiness.EhrCqmNotPerf)">
            <summary>
            <para>if ValueSetOID=2.16.840.1.113883.3.526.3.1254, then Medication, Administered not done: Medical/Patient/System Reason (flu vaccine med)</para>
            <para>if ValueSetOID=2.16.840.1.113883.3.526.3.402, then Procedure, Performed not done: Medical/Patient/System Reason (flu vaccine proc)</para>
            <para>if ValueSetOID=2.16.840.1.113883.3.600.1.462, then Procedure, Performed not done: Medical or Other reason not done (current meds documented proc)</para>
            <para>if ValueSetOID=2.16.840.1.113883.3.600.1.681, then Physical Exam, Performed not done: Medical or Other reason not done/Patient Reason Refused (vitalsign exam)</para>
            <para>if ValueSetOID=2.16.840.1.113883.3.526.3.1278, then Risk Category Assessment not done: Medical Reason (tobacco assessment)</para>
            <para>Then use the negationInd="true" attribute to indicate that it was not performed</para></summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.Guid">
            <summary>Helper for GenerateQRDA(). Builds an "id" element and writes a 36 character GUID string into the "root" attribute.
            An example of how the uid might look: "5b010313-eff2-432c-9909-6193d8416fac"</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.Start(System.String,System.String[])">
            <summary>Helper for GenerateQRDA().  Modifies the global _w variable.  Performs a WriteStartElement, followed by any attributes.  Attributes must be in pairs: name, value.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.End(System.String)">
            <summary>Helper for GenerateQRDA().  Modifies the global _w variable.  Performs a WriteEndElement.  The specified elementName is for readability only.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.StartAndEnd(System.String,System.String[])">
            <summary>Helper for GenerateQRDA().  Modifies the global _w variable.  Performs a WriteStartElement, followed by any attributes, followed by a WriteEndElement.  Attributes must be in pairs: name, value.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.TemplateId(System.String)">
            <summary>Helper for GenerateQRDA().  Modifies the global _w variable.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.TemplateId(System.String,System.String)">
            <summary>Helper for GenerateQRDA().  Modifies the global _w variable.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.DateText(System.String,System.DateTime)">
            <summary>Use for HTML tables. Writes the element strElement name and writes the dateTime string in the required date format.  Will not write if year is before 1880.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.DateElement(System.String,System.DateTime)">
            <summary>Use for XML. Writes the element strElement name and writes the dateTime in the required date format into the value attribute.
            Will write nullFlavor="UNK" instead of value if year is before 1880.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.Attribs(System.String[])">
            <summary>Helper for GenerateQrda().  Performs a WriteAttributeString for each attribute.  Attributes must be in pairs: name, value.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.TimeElement(System.String,System.DateTime)">
            <summary>Writes the element strElement name and writes the dateTime in the required date format into the value attribute.
            Will write nullFlavor="UNK" instead of value if year is before 1880.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.ValidateSettings">
            <summary>Checks data values for preferences and practice information to ensure required data is available for QRDA creation.
            Returns empty string if no errors, otherwise returns a string containing error messages.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.ValidatePatient(OpenDentBusiness.Patient)">
            <summary>Checks data values for pat as well as primary provider information to ensure required data is available for CCD creation.
            Returns empty string if no errors, otherwise returns a string containing error messages.</summary>
        </member>
        <member name="M:OpenDentBusiness.QualityMeasures.ValidateMedicaidID(System.String)">
            <summary>Validation rules:
            <para>1. No embedded dashes or spaces.</para>
            <para>2. Must be alphanumeric.</para>
            <para>3. Alpha characters must be upper case.</para>
            <para>4. Length can't be > 12 or less than 7.</para>
            <para>5. If alphanumeric, all numbers cannot be 9s.</para>
            <para>6. If length 7: must be 1 alpha + 6 numeric.</para>
            <para>7. If length 8: must be 2 alpha + 6 numeric.</para>
            <para>8. If length 9: must be 3 alpha + 6 numeric.</para>
            <para>9. If length 10: can either be 1 alpha + 9 numeric, or 9 numeric + 1 alpha.</para>
            <para>10. If length 11: must be 2 alpha + 9 numeric, or 9 numeric + 1 alpha + 1 numeric, or 9 numeric + 2 alpha.</para>
            <para>11. If length 12: must be 3 alpha + 9 numeric.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.DbSchemaCol.TextSize">
            <summary>Specify textSize if there's any chance of it being greater than 4000 char.</summary>
        </member>
        <member name="F:OpenDentBusiness.DbSchemaCol.IntUseSmallInt">
            <summary>If specifying an int, it uses int by default.  Set this to true to instead use smallint.</summary>
        </member>
        <member name="M:OpenDentBusiness.DbSchemaCol.Copy">
            <summary>Creates a new instance of this object with identical variable values.</summary>
        </member>
        <member name="F:OpenDentBusiness.TextSizeMySqlOracle.Small">
            <summary>255-4k, MySql: text, Oracle: varchar2</summary>
        </member>
        <member name="F:OpenDentBusiness.TextSizeMySqlOracle.Medium">
            <summary>4k-65k, MySql: text, Oracle: clob</summary>
        </member>
        <member name="F:OpenDentBusiness.TextSizeMySqlOracle.Large">
            <summary>65k+, MySql: mediumtext, Oracle: clob</summary>
        </member>
        <member name="F:OpenDentBusiness.OdDbType.Bool">
            <summary>C#:bool, MySql:tinyint(3)or(1), Oracle:number(3), </summary>
        </member>
        <member name="F:OpenDentBusiness.OdDbType.Byte">
            <summary>C#:byte, MySql:tinyint unsigned, Oracle:number(3), Range:0-255.</summary>
        </member>
        <member name="F:OpenDentBusiness.OdDbType.Currency">
            <summary>C#:double, MySql:double, Oracle:number(38,8), Need to change C# type to Decimal.  Need to change MySQL type.</summary>
        </member>
        <member name="F:OpenDentBusiness.OdDbType.Date">
            <summary>C#:DateTime, MySql:date, Oracle:date, 0000-00-00 not allowed in Oracle and causes problems in MySql</summary>
        </member>
        <member name="F:OpenDentBusiness.OdDbType.DateTime">
            <summary>C#:DateTime, MySql:datetime, Oracle:date, </summary>
        </member>
        <member name="F:OpenDentBusiness.OdDbType.DateTimeStamp">
            <summary>C#:DateTime, MySql:timestamp, Oracle:date + trigger, </summary>
        </member>
        <member name="F:OpenDentBusiness.OdDbType.Enum">
            <summary>C#:enum, MySql:tinyint, Oracle:number(3), </summary>
        </member>
        <member name="F:OpenDentBusiness.OdDbType.Float">
            <summary>C#:float, MySql:float, Oracle:number(38,8), </summary>
        </member>
        <member name="F:OpenDentBusiness.OdDbType.Int">
            <summary>C#:int32, MySql:int,smallint(if careful), Oracle:number(11), Range:-2,147,483,647-2,147,483,647.  Also used for colors</summary>
        </member>
        <member name="F:OpenDentBusiness.OdDbType.Long">
            <summary>C#:long, MySql:bigint, Oracle:number(20), Range:–9,223,372,036,854,775,808 to 9,223,372,036,854,775,807</summary>
        </member>
        <member name="F:OpenDentBusiness.OdDbType.Text">
            <summary>C#:string, MySql:text,mediumtext, Oracle:varchar2,clob, Range:256+. MaxSizes: MySql.text=65k, Oracle.varchar2=4k.</summary>
        </member>
        <member name="F:OpenDentBusiness.OdDbType.TimeOfDay">
            <summary>C#:TimeSpan, MySql:time, Oracle:date, Range:Valid time of day.</summary>
        </member>
        <member name="F:OpenDentBusiness.OdDbType.TimeSpan">
            <summary>C#:TimeSpan, MySql:time, Oracle:varchar2, Range:Pos or neg spans of many days.  Oracle has no such type.</summary>
        </member>
        <member name="F:OpenDentBusiness.OdDbType.VarChar255">
            <summary>C#:string, MySql:varchar(255), Oracle:varchar2(255), MaxSize:255</summary>
        </member>
        <member name="T:OpenDentBusiness.SchemaCrudProposedTest">
            <summary>Please ignore this class.  It's used only for testing.</summary>
        </member>
        <member name="M:OpenDentBusiness.SchemaCrudProposedTest.AddTableTempcore">
            <summary>Example only</summary>
        </member>
        <member name="M:OpenDentBusiness.SchemaCrudProposedTest.AddColumnEndClob">
            <summary>Example only</summary>
        </member>
        <member name="M:OpenDentBusiness.SchemaCrudProposedTest.AddColumnEndInt">
            <summary>Example only</summary>
        </member>
        <member name="M:OpenDentBusiness.SchemaCrudProposedTest.AddColumnEndTimeStamp">
            <summary>Example only</summary>
        </member>
        <member name="M:OpenDentBusiness.SchemaCrudProposedTest.AddIndex">
            <summary>Example only</summary>
        </member>
        <member name="M:OpenDentBusiness.SchemaCrudProposedTest.DropColumn">
            <summary>Example only</summary>
        </member>
        <member name="T:OpenDentBusiness.SchemaCrudTest">
            <summary>Please ignore this class.  It's used only for testing.</summary>
        </member>
        <member name="M:OpenDentBusiness.SchemaCrudTest.AddTableTempcore">
            <summary>Example only</summary>
        </member>
        <member name="M:OpenDentBusiness.SchemaCrudTest.AddColumnEndClob">
            <summary>Example only</summary>
        </member>
        <member name="M:OpenDentBusiness.SchemaCrudTest.AddColumnEndInt">
            <summary>Example only</summary>
        </member>
        <member name="M:OpenDentBusiness.SchemaCrudTest.AddColumnEndTimeStamp">
            <summary>Example only</summary>
        </member>
        <member name="M:OpenDentBusiness.SchemaCrudTest.AddIndex">
            <summary>Example only</summary>
        </member>
        <member name="M:OpenDentBusiness.SchemaCrudTest.DropColumn">
            <summary>Example only</summary>
        </member>
        <member name="M:OpenDentBusiness.ErxXml.BuildClickThroughXml(OpenDentBusiness.Provider,OpenDentBusiness.Employee,OpenDentBusiness.Patient)">
            <summary>Only called from Chart for now.  No validation is performed here.  Validate before calling.  There are many validtion checks, including the NPI must be exactly 10 digits.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OpenDentBusiness.ErxXml.Tidy(System.String,System.Int32)" -->
        <member name="T:OpenDentBusiness.NCScript">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCScript.Credentials">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCScript.UserRole">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCScript.Destination">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCScript.Account">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCScript.Location">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCScript.LocationTree">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCScript.LicensedPrescriber">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCScript.Staff">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCScript.SupervisingDoctor">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCScript.SupervisingDoctorLocation">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCScript.MidlevelPrescriber">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCScript.Patient">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCScript.NewPrescription">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCScript.PrescriptionRenewalResponse">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCScript.OutsidePrescription">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCScript.NewPrescriptionWithImages">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.CredentialsType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.CredentialsType.partnerName">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.CredentialsType.name">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.CredentialsType.password">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.CredentialsType.productName">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.CredentialsType.productVersion">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PrescriptionRenewalRequestType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalRequestType.pharmacyIdentifier">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalRequestType.drugNDC">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalRequestType.drug">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalRequestType.dispenseNumber">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalRequestType.dosage">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalRequestType.lastFillDate">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalRequestType.writtenDate">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalRequestType.daysSupply">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalRequestType.substitution">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalRequestType.refills">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalRequestType.pharmacistMessage">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalRequestType.ID">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.DrugSubstitutionType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugSubstitutionType.DispenseAsWritten">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugSubstitutionType.SubstitutionAllowed">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.NewPrescriptionImageType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionImageType.imageDataType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionImageType.imageDataFormat">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionImageType.imageDataWidth">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionImageType.imageDataHeight">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionImageType.imageDataSize">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionImageType.imageData">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionImageType.ID">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.NewPrescriptionWithImagesType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.pharmacyIdentifier">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.drugName">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.drugStrength">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.drugStrengthUOM">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.drugRoute">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.drugForm">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.drugIdentifier">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.drugIdentifierType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.drugIdentifierTypeSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.dispenseNumber">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.dosage">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.refillCount">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.substitution">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.substitutionSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.pharmacistMessage">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.images">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionWithImagesType.ID">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.DrugDatabaseType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugDatabaseType.FDA">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugDatabaseType.FDB">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugDatabaseType.RXNORM">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugDatabaseType.Z">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugDatabaseType.Y">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.OutsidePrescriptionType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.externalId">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.pharmacyIdentifier">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.pharmacyPhone">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.pharmacyFax">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.date">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.doctorName">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.drug">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.dosage">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.dispenseNumber">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.sig">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.refillCount">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.substitution">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.substitutionSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.pharmacistMessage">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.drugIdentifier">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.drugIdentifierType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.drugIdentifierTypeSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.prescriptionType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.externalOverrideDrug">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.renewalRequestIdentifier">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.codifiedSigType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.prn">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.prnSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.prescriptionStatus">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.prescriptionStatusSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.prescriptionSubStatus">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.prescriptionSubStatusSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.prescriptionArchiveStatus">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.prescriptionArchiveStatusSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OutsidePrescriptionType.ID">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.ExternalDrugOverrideType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ExternalDrugOverrideType.externalDrugConcept">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ExternalDrugOverrideType.externalDrugName">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ExternalDrugOverrideType.externalDrugStrength">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ExternalDrugOverrideType.externalDrugStrengthUOM">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ExternalDrugOverrideType.externalDrugStrengthWithUOM">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ExternalDrugOverrideType.externalDrugDosageForm">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ExternalDrugOverrideType.externalDrugRoute">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ExternalDrugOverrideType.externalDrugIdentifier">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ExternalDrugOverrideType.externalDrugIdentifierType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ExternalDrugOverrideType.externalDrugSchedule">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ExternalDrugOverrideType.externalDrugOverTheCounter">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ExternalDrugOverrideType.externalDrugOverTheCounterSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ExternalDrugOverrideType.externalDrugNdc">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.DrugScheduleType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugScheduleType.Item1">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugScheduleType.Item2">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugScheduleType.Item3">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugScheduleType.Item4">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugScheduleType.Item5">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugScheduleType.None">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugScheduleType.Unknown">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.DrugOTCType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugOTCType.Yes">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugOTCType.No">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugOTCType.Both">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.CodifiedSigType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.CodifiedSigType.ActionType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.CodifiedSigType.NumberType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.CodifiedSigType.FormType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.CodifiedSigType.RouteType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.CodifiedSigType.FrequencyType">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.DrugTakeAsNeededType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugTakeAsNeededType.Yes">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DrugTakeAsNeededType.No">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PrescriptionStatusType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PrescriptionStatusType.Current">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PrescriptionStatusType.Pending">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PrescriptionSubStatusType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PrescriptionSubStatusType.InProcess">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PrescriptionSubStatusType.NeedsDoctorReview">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PrescriptionSubStatusType.NeedsStaffReview">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PrescriptionArchiveType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PrescriptionArchiveType.Yes">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PrescriptionArchiveType.No">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PrescriptionRenewalResponseType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalResponseType.renewalRequestIdentifier">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalResponseType.responseCode">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalResponseType.refillCount">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalResponseType.drugSchedule">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalResponseType.drugScheduleSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalResponseType.responseDenyCode">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalResponseType.responseDenyCodeSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalResponseType.messageToPharmacist">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PrescriptionRenewalResponseType.ID">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.ResponseCodeType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseCodeType.Accept">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseCodeType.Deny">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseCodeType.UnableToProcess">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseCodeType.Undetermined">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.ResponseDenyCodeType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseDenyCodeType.PatientUnknownToThePrescriber">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseDenyCodeType.PatientNeverUnderPrescriberCare">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseDenyCodeType.PatientNoLongerUnderPrescriberCare">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseDenyCodeType.PatientHasRequestedRefillTooSoon">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseDenyCodeType.MedicationNeverPrescribedForThePatient">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseDenyCodeType.PatientShouldContactPrescriberFirst">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseDenyCodeType.RefillNotAppropriate">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseDenyCodeType.PatientHasPickedUpPrescription">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseDenyCodeType.PatientHasPickedUpPartialFillOfPrescription">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseDenyCodeType.PatientHasNotPickedUpPrescriptionDrugReturnedToStock">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseDenyCodeType.ChangeNotAppropriate">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseDenyCodeType.PatientNeedsAppointment">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseDenyCodeType.PrescriberNotAssociatedWithThisPracticeOrLocation">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseDenyCodeType.NoAttemptWillBeMadeToObtainPriorAuthorization">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.ResponseDenyCodeType.DeniedNewPrescriptionToFollow">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.NewPrescriptionType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionType.pharmacyIdentifier">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionType.drugIdentifier">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionType.drugIdentifierType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionType.dispenseNumber">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionType.dosage">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionType.refillCount">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionType.substitution">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionType.pharmacistMessage">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionType.externalOverrideDrug">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionType.renewalRequestIdentifier">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionType.codifiedSigType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionType.prn">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionType.prnSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NewPrescriptionType.ID">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PatientAllergyFreeformType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientAllergyFreeformType.allergyName">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientAllergyFreeformType.allergySeverityTypeID">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientAllergyFreeformType.allergySeverityTypeIDSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientAllergyFreeformType.allergyComment">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientAllergyFreeformType.ID">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.AllergySeverityType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.AllergySeverityType.Unspecified">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.AllergySeverityType.Mild">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.AllergySeverityType.Moderate">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.AllergySeverityType.Severe">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PatientHealthplanFreeformType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientHealthplanFreeformType.healthplanName">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PatientIdentifierType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientIdentifierType.patientID">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientIdentifierType.patientIDType">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PatientDiagnosisType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientDiagnosisType.diagnosisID">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientDiagnosisType.diagnosisType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientDiagnosisType.onsetDate">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientDiagnosisType.diagnosisName">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.DiagnosisType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DiagnosisType.ICD9">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DiagnosisType.ICD9CM">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DiagnosisType.ICD10">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PatientHealthplanType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientHealthplanType.healthplanID">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientHealthplanType.healthplanTypeID">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientHealthplanType.group">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.HealthplanType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.HealthplanType.Summary">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.HealthplanType.Detail">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PatientAllergyType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientAllergyType.allergyID">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientAllergyType.allergyTypeID">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientAllergyType.allergySeverityTypeID">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientAllergyType.allergySeverityTypeIDSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientAllergyType.allergyComment">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PatientCharacteristicsType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientCharacteristicsType.dob">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientCharacteristicsType.gender">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientCharacteristicsType.genderSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientCharacteristicsType.height">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientCharacteristicsType.heightUnits">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientCharacteristicsType.weight">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientCharacteristicsType.weightUnits">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientCharacteristicsType.language">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientCharacteristicsType.languageSpecified">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.GenderType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.GenderType.M">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.GenderType.F">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.GenderType.U">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.LanguageType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.Arabic">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.Chinese">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.ChineseSimplified">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.Creole">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.English">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.French">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.German">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.Greek">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.Italian">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.Japanese">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.Korean">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.Polish">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.Portuguese">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.Russian">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.Spanish">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.Tagalog">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.Turkish">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.LanguageType.Vietnamese">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.ContactType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ContactType.homeTelephone">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ContactType.workTelephone">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ContactType.cellularTelephone">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ContactType.pagerTelephone">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ContactType.fax">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ContactType.email">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ContactType.backOfficeTelephone">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.ContactType.backOfficeFax">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.AddressOptionalType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AddressOptionalType.address1">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AddressOptionalType.address2">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AddressOptionalType.city">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AddressOptionalType.state">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AddressOptionalType.zip">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AddressOptionalType.zip4">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AddressOptionalType.country">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PatientType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.PatientName">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.medicalRecordNumber">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.socialSecurityNumber">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.memo">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.PatientAddress">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.PatientContact">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.PatientCharacteristics">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.PatientAllergies">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.PatientHealthplans">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.PatientDiagnosis">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.PatientDiagnosisSearch">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.PatientIdentifier">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.PatientFreeformHealthplans">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.EpisodeIdentifier">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.EncounterIdentifier">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.PatientFreeformAllergy">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PatientType.ID">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PersonNameType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PersonNameType.last">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PersonNameType.first">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PersonNameType.middle">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PersonNameType.prefix">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PersonNameType.prefixSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PersonNameType.suffix">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.PersonNameType.suffixSpecified">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PersonNamePrefix">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNamePrefix.Ms">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNamePrefix.Ms1">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNamePrefix.Miss">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNamePrefix.Mr">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNamePrefix.Mr1">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNamePrefix.Mrs">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNamePrefix.Mrs1">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNamePrefix.Dr">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNamePrefix.Dr1">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PersonNameSuffix">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNameSuffix.DDS">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNameSuffix.DO">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNameSuffix.Jr">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNameSuffix.LVN">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNameSuffix.MD">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNameSuffix.NP">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNameSuffix.PA">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNameSuffix.RN">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNameSuffix.Sr">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNameSuffix.I">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNameSuffix.II">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNameSuffix.III">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNameSuffix.PhD">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNameSuffix.PharmD">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNameSuffix.RPh">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PersonNameSuffix.MA">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.MidlevelPrescriberType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.MidlevelPrescriberType.LicensedPrescriberName">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.MidlevelPrescriberType.dea">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.MidlevelPrescriberType.prescriberStatus">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.MidlevelPrescriberType.prescriberStatusSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.MidlevelPrescriberType.upin">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.MidlevelPrescriberType.licenseState">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.MidlevelPrescriberType.licenseNumber">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.MidlevelPrescriberType.prescriberNetwork">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.MidlevelPrescriberType.prescriberNetworkSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.MidlevelPrescriberType.prescriberStartDateTime">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.MidlevelPrescriberType.prescriberStopDateTime">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.MidlevelPrescriberType.npi">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.MidlevelPrescriberType.ID">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PrescriberStatus">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PrescriberStatus.Active">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PrescriberStatus.Inactive">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.PrescriberNetwork">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PrescriberNetwork.SureScripts">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.PrescriberNetwork.RxHub">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.StaffType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.StaffType.StaffName">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.StaffType.license">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.StaffType.npi">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.StaffType.ID">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.LicensedPrescriberType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LicensedPrescriberType.LicensedPrescriberName">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LicensedPrescriberType.dea">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LicensedPrescriberType.prescriberStatus">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LicensedPrescriberType.prescriberStatusSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LicensedPrescriberType.upin">
            No used and not required, because NPIs replaced UPINs and we require NPI before allowing a prescription to be sent. <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LicensedPrescriberType.licenseState">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LicensedPrescriberType.licenseNumber">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LicensedPrescriberType.prescriberNetwork">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LicensedPrescriberType.prescriberNetworkSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LicensedPrescriberType.prescriberStartDateTime">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LicensedPrescriberType.prescriberStopDateTime">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LicensedPrescriberType.npi">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LicensedPrescriberType.ID">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.LocationTreeType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LocationTreeType.locationName">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LocationTreeType.locationShortName">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LocationTreeType.level">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LocationTreeType.ID">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.LocationType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LocationType.locationName">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LocationType.locationShortName">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LocationType.LocationAddress">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LocationType.primaryPhoneNumber">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LocationType.primaryFaxNumber">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LocationType.pharmacyContactNumber">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.LocationType.ID">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.AddressType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AddressType.address1">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AddressType.address2">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AddressType.city">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AddressType.state">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AddressType.zip">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AddressType.zip4">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AddressType.country">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.AccountTypeRx">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AccountTypeRx.accountName">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AccountTypeRx.siteID">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AccountTypeRx.AccountAddress">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AccountTypeRx.accountPrimaryPhoneNumber">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AccountTypeRx.accountPrimaryFaxNumber">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.AccountTypeRx.ID">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.DestinationType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.DestinationType.requestedPage">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.DestinationType.logoutPage">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.DestinationType.sessionTimeoutInMinutes">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.RequestedPageType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.compose">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.admin">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.manager">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.status">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.wsrxsend">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.wsrxbulk">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.wsrxbulknomatch">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.wsrenewalsend">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.wsregisterlicensedPrescriber">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.wsimagerxsend">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.wspbmeligibility">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.medentry">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.patientDetail">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.transmit">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.resource">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.maintainHealthplans">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.wsregister">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.route">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.rxhistoryexternal">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.renewalconfirmation">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.wsprocessrenewal">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.rxdetail">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.renewal">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.wsgentestrenewal">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RequestedPageType.dosing">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.CurrentFeatureType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.CurrentFeatureType.feature">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.CurrentFeatureType.featureStatus">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.CurrentFeatureType.featureExpiration">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.CurrentFeatureType.featureExpirationSpecified">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.CurrentFeatureType.featureExpirationDate">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.FeatureType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.FeatureType.Connect">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.FeatureType.Advanced">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.FeatureType.Formulary">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.FeatureType.Fax">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.FeatureStatusType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.FeatureStatusType.Active">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.FeatureStatusType.Inactive">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.FeatureExpirationType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.FeatureExpirationType.ExpirationDate">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.FeatureExpirationType.Recurring">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.UserRoleType">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.UserRoleType.user">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.UserRoleType.role">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.UserRoleType.name">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.UserRoleType.password">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.UserRoleType.Features">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.UserType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.UserType.LicensedPrescriber">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.UserType.Staff">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.UserType.InterestedParty">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.UserType.SupervisingDoctor">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.UserType.MidlevelPrescriber">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.RoleType">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RoleType.doctor">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RoleType.nurse">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RoleType.admin">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RoleType.manager">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RoleType.nurseNoRx">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RoleType.doctorNoRx">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RoleType.doctorReadOnly">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RoleType.nurseReadOnly">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RoleType.interestedPartyReadOnly">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RoleType.supervisingDoctor">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.RoleType.midlevelPrescriber">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.NCRenewal">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCRenewal.Credentials">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCRenewal.Account">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCRenewal.Location">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCRenewal.LicensedPrescriber">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCRenewal.Staff">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCRenewal.Patient">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.NCRenewal.PrescriptionRenewalRequest">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.HL7.EhrADT_A01">
            <summary>Syndromic surveillance messaging.  Written using the PHIN HL7 2.5.1 guide.
            Since we are only certifying ambulatory, we have much fewer requirements to meet certification.
            Ambulatory implementations must fill all required fields, but can ignore all "required if known" fields and can also ignore all optional fields.
            Inpatient implementations must fill all required fields and all "required if known" fields, but are allowed to skip optional fields.
            For inpatient, if a field is required if known, then UI would be needed if there was no way to enter the data.  Basically required if known fields become required fields if implementing inpatient.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.EhrADT_A01._appt">
            <summary>Set in constructor and must not be modified.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.EhrADT_A01._pat">
            <summary>Set in constructor and must not be modified.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.EhrADT_A01._msg">
            <summary>The entire message object after it is successfully built.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.EhrADT_A01._seg">
            <summary>Helper variable.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrADT_A01.#ctor(OpenDentBusiness.Appointment)">
            <summary>Creates the Message object and fills it with data.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrADT_A01.EVN">
            <summary>Event Type segment.  Used to communicate trigger event information to receiving applications.  Guide page 38.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrADT_A01.MSH">
            <summary>Message Segment Header segment.  Required.  Defines intent, source, destination and syntax of the message.  Guide page 33.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrADT_A01.OBX">
            <summary>Observation/result segment.  Used to transmit observations related to the patient and visit.  Guide page 64.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrADT_A01.PID">
            <summary>Patient Identifier segment.  Required.  Guide page 40.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrADT_A01.PV1">
            <summary>Patient Visit segment.  Used by Registration/Patient Administration applications to communicate information on a visit-specific basis.  Guide page 51.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrADT_A01.WriteCE(System.Int32,System.String,System.String,System.String)">
            <summary>Type CE.  Writes a coded element into the fieldIndex field of the current segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrADT_A01.WriteGender(System.Int32,OpenDentBusiness.PatientGender)">
            <summary>Type IS.  Writes a string corresponding to table HL70001 into the fieldIndex field for the current segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrADT_A01.WriteXAD(System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>Type XAD.  Writes an extended address into the fieldIndex field for the current segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrADT_A01.WriteXPN(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>Type XPN (guide page 82).  Writes an person's name into the fieldIndex field for the current segment.
            The fName and lName cannot be blank.
            The middleI may be blank.
            nameTypeCode can be one of: L=Legal Name,S=Pseudonym,U=Unspecified.</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.EhrORU">
            <summary>An ORU message is an Unsolicited Observation Message.  It is a message sent out from Open Dental containing immunization status in order to satisfy ehr public health requirements.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrORU.#ctor">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrORU.Initialize(System.Collections.Generic.List{OpenDentBusiness.LabPanel})">
            <summary>Creates the Message object and fills it with data.  All panels will be for the same patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrORU.MSH">
            <summary>Message Header Segment</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrORU.PID(OpenDentBusiness.Patient)">
            <summary>Patient identification.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrORU.OBX(OpenDentBusiness.LabResult,System.Int32)">
            <summary>idx passed in will be zero-based. Will be converted to 1-based.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrORU.ConvertRace(OpenDentBusiness.PatientRaceOld)">
            <summary>Uses deprecated PatientRaceOld enum which should be converted from PatientRace entries before this function is called.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrORU.ConvertEthnicGroup(OpenDentBusiness.PatientRaceOld)">
            <summary>Uses deprecated PatientRaceOld enum which should be converted from PatientRace entries before this function is called.</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.EhrVXU">
            <summary>A VXU message is an Unsolicited Vaccination Record Update.  It is a message sent out from Open Dental detailing vaccinations that were given.
            Implementation based on HL7 version 2.5.1 Immunization Messaging Release 1.4 08/01/2012.  Data types defined on page 52.
            To view specific HL7 table definitions, see http://hl7.org/implement/standards/fhir/terminologies-v2.html. </summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.EhrVXU._pat">
            <summary>Set in constructor and must not be modified.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.EhrVXU._vaccines">
            <summary>Set in constructor and must not be modified.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.EhrVXU._msg">
            <summary>The entire message object after it is successfully built.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.EhrVXU._seg">
            <summary>Helper variable.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.EhrVXU.cityWhereEntered">
            <summary>A variable which is used in multiple places but always has the same value. At class level for convenience.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.EhrVXU.stateWhereEntered">
            <summary>A variable which is used in multiple places but always has the same value. At class level for convenience.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.#ctor(OpenDentBusiness.Patient,System.Collections.Generic.List{OpenDentBusiness.VaccinePat})">
            <summary>Creates the Message object and fills it with data.  Vaccines must all be for the same patient.
            A list of vaccines is passed in so the user can select a subset of vaccines to send for the patient.
            Throws an exception if validation fails.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.MSH">
            <summary>Message Segment Header segment.  Required.  Defines intent, source, destination and syntax of the message.  Guide page 104.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.NK1">
            <summary>Next of Kin segment.  Required if known.  Guide page 111.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.NTE">
            <summary>Note segment.  Required if known.  Guide page 116.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.OBX(OpenDentBusiness.VaccinePat)">
            <summary>Observation Result segment.  Required if known.  The basic format is question and answer.  Guide page 116.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.ORC(OpenDentBusiness.VaccinePat)">
            <summary>Order Request segment.  Required.  Guide page 126.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.PD1">
            <summary>Patient Demographic segment.  Required if known.  Additional demographics.  Guide page 132.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.PID">
            <summary>Patient Identifier segment.  Required.  Guide page 137.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.RXA(OpenDentBusiness.VaccinePat)">
            <summary>Pharmacy/Treatment Administration segment.  Required.  Guide page 149.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.RXR(OpenDentBusiness.VaccinePat)">
            <summary>Pharmacy/Treatment Route segment.  Required if known.  Guide page 158.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.WriteCE(System.Int32,System.String,System.String,System.String)">
            <summary>Type CE (guide page 53).  Writes a coded element into the fieldIndex field of the current segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.WriteEI(System.Int32,System.String,System.String,System.String)">
            <summary>Type EI (guid page 62).  Writes an Entity Identifier (order number) into the fieldIndex field of the current segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.GetAssigningAuthority(System.String,System.String)">
            <summary>Corresponds to table HL70363 (guide page 229).</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.WriteGender(System.Int32,OpenDentBusiness.PatientGender)">
            <summary>Type IS (guide page 68).  Writes a string corresponding to table HL70001 (guide page 193) into the fieldIndex field for the current segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.WriteLA2(System.Int32,System.String)">
            <summary>Type LA2 (guide page 68).  Writes facility information into the fieldIndex field of the current segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.WriteXAD(System.Int32,System.String,System.String,System.String,System.String,System.String)">
            <summary>Type XAD (guide page 74).  Writes an extended address into the fieldIndex field for the current segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.WriteXCN(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Type XCN (guide page 77).  Writes user name and id into the fieldIndex field for the current segment.
            Either the fName and lName must be specified, or id and city and state must be specified. All fields may be specified.
            Allowed values for nameTypeCode: A=Alias name,L=Legal name,D=Display name,M=Maiden name,C=Adopted name,B=Name at birth,P=Name of partner/spouse,U=Unspecified.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.WriteXTN(System.Int32,System.String[])">
            <summary>Type XTN (guide page 84).  Writes a phone number or other contact information (such as email address) into the fieldIndex field for the current segment.
            The arrayContactInfo params list must contain 4 parameters for each piece of contact information, in the following order:
            1) Telecommunication Use Code from value set HL70201 (guide page 203).
            2) Telecommunication Equipment Type from value set HL70202 (guide page 203).
            3) The value "F" to force the field to be written in all cases or empty string to only write the field if the contact information is present.
            4) The contact infomration (phone number or email address).
            Can specify 0 or more contacts. The first valid phone number in the list will be written and the other phone numbers will be ignored.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.TidyPhone(System.String)">
            <summary>Removes any characters from the phone number which are not digits.  Returns empty string if the phone number is invalid.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EhrVXU.WriteXPN(System.Int32,System.String,System.String,System.String,System.String)">
            <summary>Type XPN (guide page 82).  Writes an person's name into the fieldIndex field for the current segment.
            The fName and lName cannot be blank.
            The middleI may be blank.
            nameTypeCode can be one of: A=Alias Name,L=Legal Name,D=Display Name,M=Maiden Name,C=Adopted Name,B=Name at birth,P=Name of partner/spouse,U=Unspecified.</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.FieldParserMedLab">
            <summary>Parses a single incoming MedLab HL7 field.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldParserMedLab.DateTimeParse(System.String)">
            <summary>yyyyMMdd[[[HH]mm]ss].  Hours, minutes, and seconds are optional.  Can have more precision than seconds and won't break.
            If less than 8 digits, returns MinVal.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldParserMedLab.AbnormalFlagParse(System.String)">
            <summary>Converts the value in the MedLab HL7 message field to its corresponding AbnormalFlag enumeration.
            Supported values are 'L', 'H', 'LL', 'HH', '&lt;', '>', 'A', 'AA', 'S', 'R', 'I', 'NEG', and 'POS'.
            If parsing the value into an enum fails, defaults to AbnormalFlag.None, but this won't likely ever be displayed to the user.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldParserMedLab.ResultStatusParse(System.String)">
            <summary>Converts the value in the MedLab HL7 message field to its corresponding ResultStatus enumeration.
            Supported values are 'P', 'X', 'F', 'C', and 'I'.  If parsing the value into an enum fails, defaults to ResultStatus.F - final.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldParserMedLab.ResultActionParse(System.String)">
            <summary>Converts the value in the MedLab HL7 message field to its corresponding ResultAction enumeration.  Supported values are
            'A', 'G', and blank.  If parsing the value into an enum fails, or for blank fields, the default is ResultAction.None.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldParserMedLab.OrderingProvIDParse(OpenDentBusiness.HL7.FieldHL7,System.String)">
            <summary>Searches the field and any repetitions for the ID from the specified source.  Possible sources are "U"=UPIN, "P"=Provider Number
            (Medicaid or Commercial Ins Prov ID), "N"=NPI, "L"=Local Physician ID.  If the idSource is not a U, P, N, or L or if there is no ID of that
            type in the field, this will return an empty string.  If fieldCur==null returns empty string.</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.MessageParserMedLab">
            <summary>This is the engine that will parse our incoming HL7 messages for MedLab interfaces.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.Process(OpenDentBusiness.HL7.MessageHL7,System.String,System.Boolean,OpenDentBusiness.Patient)">
            <summary>Processes the msg and creates the MedLab, MedLabResult, MedLabSpecimen, MedLabFacility, and MedLabAttach objects.
            Stores the msgArchiveFileName for each MedLab object created from the inbound message.
            Each message will result in one MedLab object for each repitition of the ORC/OBR observation group in the message.
            Each of the MedLab objects created will be linked to the msgArchiveFileName supplied.
            Each repetition of the OBX result group will result in a MedLabResult object.
            This returns a list of the MedLab.MedLabNums for all MedLab objects created from this message.
            Use selectedPat to manually specify the patient to attach the objects and embedded files to.  Used when a patient could not be located using
            the original message PID segment info and the user has now manually selected a patient.  The ZEF segments would not have been processed if a
            patient could not be located and once the user selects the patient we will need to re-process the message to create the embedded PDFs.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.GetPatFromPID(OpenDentBusiness.HL7DefSegment,OpenDentBusiness.HL7.SegmentHL7)">
            <summary>Finds a patient from the information in the PID segment, using the PID segment definition in the enabled HL7 def.
            Will return null if a patient cannot be found using the information in the PID segment.  If an alternate patient ID is
            provided and the name and birthdate in the PID segment match the name and birthdate of the patient located,
            it will be stored in the oidexternal table linked to the patient's PatNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.IsMatchNameBirthdate(OpenDentBusiness.Patient,System.String,System.String,System.DateTime)">
            <summary>Compare the first and last name of the patient to the string values.  The string value for lname cannot exceed 25 chars,
            so we only compare the first 25 chars.  The string value for fname cannot exceed 15 chars, so we only compare the first 15 chars.
            These limitations are set by LabCorp in their HL7 documentation.  If name and birthdate match, this returns true.  Otherwise false.
            If patCur is null, returns false.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.GetSegDefByName(OpenDentBusiness.HL7DefMessage,OpenDentBusiness.SegmentNameHL7,OpenDentBusiness.SegmentNameHL7)">
            <summary>Returns the segment definion based on the name supplied, and only if it follows the previous segment name supplied.  If prevSegName
            is Unknown, we'll return the first match by segName only.  If a segment can appear in a message definition more than once and in multiple
            locations, send in the preceding segment name.  For example, the NTE seg can follow the PID (or optional NK1), OBR, and OBX (or optional ZEF)
            segments. Returns the definition that immediately follows the previous segment name given. If the segment def follows an optional
            segment, the prevSegName could be any preceding segment up to and including the first preceding required segment. We'll decrement backward
            through the segments looking for a predecessor with the prevSegName until we get to the first required (IsOptional=false) segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.ProcessSeg(OpenDentBusiness.HL7DefMessage,System.Collections.Generic.List{OpenDentBusiness.HL7.SegmentHL7},OpenDentBusiness.HL7.MessageHL7,OpenDentBusiness.SegmentNameHL7)">
            <summary>listSegs will only contain more than one segment if the segment repeats.
            prevSegName is only required when processing NTE segment(s) to determine which level NTE we are processing,
            either a PID NTE, a OBR NTE, or a OBX NTE.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.ProcessMSH(OpenDentBusiness.HL7DefSegment,OpenDentBusiness.HL7.SegmentHL7,OpenDentBusiness.HL7.MessageHL7)">
            <summary>This will insert a new MedLab object and set _medLabCur.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.ProcessNK1(OpenDentBusiness.HL7DefSegment,System.Collections.Generic.List{OpenDentBusiness.HL7.SegmentHL7})">
            <summary>Not currently processing the NK1 segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.ProcessNTE(OpenDentBusiness.HL7DefSegment,System.Collections.Generic.List{OpenDentBusiness.HL7.SegmentHL7},OpenDentBusiness.HL7.MessageHL7)">
            <summary>The segDef contains the field name that will identify which NTE segment we're processing.  It could be a PID note, an OBR/ORC note,
            or an OBX note.  The segDef field is named accordingly.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.ProcessOBR(OpenDentBusiness.HL7DefSegment,OpenDentBusiness.HL7.SegmentHL7,OpenDentBusiness.HL7.MessageHL7)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.ProcessOBX(OpenDentBusiness.HL7DefSegment,OpenDentBusiness.HL7.SegmentHL7)">
            <summary>This will insert a new MedLabResult object and set _medLabResultCur.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.ProcessORC(OpenDentBusiness.HL7DefSegment,OpenDentBusiness.HL7.SegmentHL7)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.ProcessPID(OpenDentBusiness.HL7DefSegment,OpenDentBusiness.HL7.SegmentHL7)">
            <summary>Sets values on _medLabCur based on the PID segment fields.  Also sets medlab.OriginalPIDSegment to the full PID segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.ProcessSPM(OpenDentBusiness.HL7DefSegment,System.Collections.Generic.List{OpenDentBusiness.HL7.SegmentHL7})">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.ProcessZEF(OpenDentBusiness.HL7DefSegment,System.Collections.Generic.List{OpenDentBusiness.HL7.SegmentHL7})">
            <summary>Appends all base64 fields from all repetitions of the ZEF segments in this repetition of the observation result group into a single
            base64 text version of the PDF.  Then converts the base64 string into a PDF file and stores it in the patients image folder.  This will use
            the image category stored in the def, or if not set in the def it will use the first image category in the list.  An entry is then made in
            the document table and the DocNum for the imported PDF is stored in the MedLabResult.DocNum field.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.ProcessZPS(OpenDentBusiness.HL7DefSegment,System.Collections.Generic.List{OpenDentBusiness.HL7.SegmentHL7},OpenDentBusiness.HL7.MessageHL7)">
            <summary>Inserts any MedLabFacility objects not in the database.  Creates a dictionary linking the facilityIDs to a list of MedLabFacilityNums.
            For each MedLab and MedLabResult in the message, OBR.24 and OBX.15, respectively, will contain the facilityID for the facility where the lab
            was performed.  Using the facilityID, the orders and results will be attached to facilities via entries in the MedLabAttach table.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.SortSegsBySeqNum(OpenDentBusiness.HL7.SegmentHL7,OpenDentBusiness.HL7.SegmentHL7)">
            <summary>Sort by the sequence num located in the field at index _sequenceNumIndex.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParserMedLab.SortByNpiMedicaidIdMatch(OpenDentBusiness.Provider,OpenDentBusiness.Provider)">
            <summary>A prov with both NPI and Medicaid ID matching those in the message will come before a prov with only one ID matching.  Those with only
            NPI matching will come before those with only Medicaid ID matching.  The provs compared should have at least one matching ID.  If there are
            multiple provs with the same matching IDs, those with matching LName and FName will come before those with matching LName only which will come
            before those with no name match.</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.MedLabv2_3">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.InternalHL7v2_6">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.InternalCentricity">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.FieldConstructor">
            <summary>This is the engine that will construct our outgoing HL7 message fields.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldConstructor.GenerateFieldADT(OpenDentBusiness.HL7Def,System.String,OpenDentBusiness.Patient,OpenDentBusiness.Provider,OpenDentBusiness.Patient,System.Int32,OpenDentBusiness.EventTypeHL7,OpenDentBusiness.SegmentNameHL7)">
            <summary>Sends null values in for objects not required.  GenerateField will return an empty string if a field requires an object and that object is null.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldConstructor.GenerateFieldSIU(OpenDentBusiness.HL7Def,System.String,OpenDentBusiness.Patient,OpenDentBusiness.Provider,OpenDentBusiness.Patient,OpenDentBusiness.Appointment,System.Int32,OpenDentBusiness.EventTypeHL7,OpenDentBusiness.SegmentNameHL7)">
            <summary>Sends null values in for objects not required.  GenerateField will return an empty string if a field requires an object and that object is null.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldConstructor.GenerateFieldSRR(OpenDentBusiness.HL7Def,System.String,OpenDentBusiness.Patient,OpenDentBusiness.Provider,OpenDentBusiness.Appointment,System.Int32,OpenDentBusiness.EventTypeHL7,OpenDentBusiness.SegmentNameHL7)">
            <summary>Sends null values in for objects not required.  GenerateField will return an empty string if a field requires an object and that object is null.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldConstructor.GenerateField(OpenDentBusiness.HL7Def,System.String,OpenDentBusiness.MessageTypeHL7,OpenDentBusiness.Patient,OpenDentBusiness.Provider,OpenDentBusiness.Procedure,OpenDentBusiness.Patient,OpenDentBusiness.Appointment,System.Int32,OpenDentBusiness.EventTypeHL7,System.String,System.String,OpenDentBusiness.MessageStructureHL7,OpenDentBusiness.SegmentNameHL7)">
            <summary>apt, guar, proc, prov, pdfDescription, pdfDataString, patplanCur, inssubCur, insplanCur, carrierCur, and patSub can be null and will return an empty string if a field requires that object</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldConstructor.GenerateFieldIN1(OpenDentBusiness.HL7Def,System.String,System.Int32,OpenDentBusiness.PatPlan,OpenDentBusiness.InsSub,OpenDentBusiness.InsPlan,OpenDentBusiness.Carrier,System.Int32,OpenDentBusiness.Patient)">
            <summary>Only for creating the IN1 segment(s).</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldConstructor.gConcat(System.String,System.String[])">
            <summary>Send in component separator for this def and the values in the order they should be in the message.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OpenDentBusiness.HL7.FieldConstructor.gTreatArea(System.String,OpenDentBusiness.Procedure,System.Boolean)" -->
        <member name="M:OpenDentBusiness.HL7.FieldConstructor.gXTN(System.String,System.Int32)">
            <summary>XTN is a phone number.</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.InternalEcwFull">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.InternalEcwStandalone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.InternalEcwTight">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.FieldParser">
            <summary>Parses a single incoming HL7 field.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldParser.DateTimeParse(System.String)">
            <summary>yyyyMMddHHmmss.  Can have more precision than seconds and won't break.  If less than 8 digits, returns MinVal.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldParser.GenderParse(System.String)">
            <summary>M,F,U</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldParser.PhoneParse(System.String)">
            <summary>If it's exactly 10 digits, it will be formatted like this: (###)###-####.  Otherwise, no change.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldParser.ProvProcessEcw(OpenDentBusiness.HL7.FieldHL7)">
            <summary>Used by eCW.  This will locate a provider by EcwID and update the FName, LName, and MI if necessary.  If no provider is found by EcwID, than a new provider is inserted and the FName, LName, and MI are set.  Supply in format UPIN^LastName^FirstName^MI (PV1 or AIP) or UPIN^LastName, FirstName MI (AIG).  If UPIN(abbr) does not exist, provider gets created.  If name has changed, provider gets updated.  ProvNum is returned.  If blank, then returns 0.  If field is NULL, returns 0. For PV1, the provider.LName field will hold "LastName, FirstName MI". They can manually change later.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldParser.ProvParse(OpenDentBusiness.HL7.FieldHL7,OpenDentBusiness.SegmentNameHL7,System.Boolean)">
            <summary>This field could be a CWE data type or a XCN data type, depending on if it came from an AIG segment, an AIP segment, or a PV1 segment.  The AIG segment would have this as a CWE data type in the format ProvID^LName, FName^^Abbr.  For the AIP and PV1 segments, the data type is XCN and the format would be ProvID^LName^FName^^^Abbr.  The ProvID is used first.  This will contain the root OID and ProvNum extension.  If it has the OD root OID for a provider, the number is assumed to be the OD ProvNum and used to find the provider.  If the root OID is not the OD root, it is used for on oidexternal table lookup.  If the provider is not found from the ID in either the provider table or the oidexternals table, then an attempt is made to find the provider by name and abbreviation.  This will return 0 if the field or segName are null or if no provider can be found.  A new provider will not be inserted with the information provided if not found by ProvID or name and abbr.  This field is repeatable, so we will check all repetitions for valid provider ID's or name/abbr combinations.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldParser.RaceParse(System.String)">
            <summary>Returns the race for the CDCREC code supplied using the new patient race enum.  Default is to return PatRace.Other.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldParser.RaceParseOld(System.String)">
            <summary>Returns the depricated PatientRaceOld enum.  It gets converted to new patient race entries where it's called.  This is the old way of receiving the race, just a string that matches exactly.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldParser.FeeScheduleParse(System.String)">
            <summary>Will return 0 if string cannot be parsed to a number.  Will return 0 if the fee schedule passed in does not exactly match the description of a regular fee schedule.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldParser.StringNewLineParse(System.String,System.Char)">
            <summary>A string supplied with new line escape commands (\.br\) will be converted to a string with \r\n in it.  The escapeChar supplied will have been retrieved from the escape characters defined in the message, usually "\".  Example: string supplied - line 1\.br\line2\.br\line3; string returned - line 1\r\nline2\r\nline3.</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.MessageParser">
            <summary>This is the engine that will parse our incoming HL7 messages.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParser.ProcessAIGorAIP(OpenDentBusiness.Patient,OpenDentBusiness.Appointment,OpenDentBusiness.HL7DefSegment,OpenDentBusiness.HL7.SegmentHL7)">
            <summary>This is used to set the provider (either dentist or hygienist depending on provType) and the confirmation status of the appointment.  If the apt is null, does nothing.  If this is an AIG, the provider field will be in the format ProvNum^LName, FName^^Abbr.  AIP and PV1 have the provider field in the format ProvNum^LName^FName^^^Abbr.  segDef.SegmentName will be used to determine how to parse the field.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParser.ProcessAIL(OpenDentBusiness.Patient,OpenDentBusiness.Appointment,OpenDentBusiness.HL7DefSegment,OpenDentBusiness.HL7.SegmentHL7)">
            <summary>This will be used to set the clinic and confirmation status of the appointment.  If apt is null, does nothing.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParser.ProcessARQ(OpenDentBusiness.Patient,OpenDentBusiness.Appointment,OpenDentBusiness.HL7DefSegment,OpenDentBusiness.HL7.SegmentHL7,OpenDentBusiness.HL7.MessageHL7)">
            <summary>Appointment request segment.  Included in inbound SRM, Schedule Request Messages.  When OD is the filler application, this will identify the appointment that the placer or auxiliary aplication is trying to update.  We only support event S03 - Appt Modification requests or event S04 - Appt Cancellation requests for now.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParser.ProcessGT1(OpenDentBusiness.Patient,OpenDentBusiness.HL7DefSegment,OpenDentBusiness.HL7.SegmentHL7,OpenDentBusiness.HL7.MessageHL7)">
            <summary>If relationship is self, this method does nothing.  A new pat will later change guarantor to be same as patnum. </summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParser.ProcessNTE(OpenDentBusiness.Patient,OpenDentBusiness.Appointment,OpenDentBusiness.HL7DefSegment,OpenDentBusiness.HL7.SegmentHL7,OpenDentBusiness.HL7.MessageHL7)">
            <summary>So far this is only used in SRM messages and saves data to the appointment note field.  If apt is null this does nothing.  The note in the NTE segment will be appended to the existing appointment note unless the existing note already contains the exact note we are attempting to append.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParser.ProcessPV1(OpenDentBusiness.Patient,OpenDentBusiness.Appointment,OpenDentBusiness.HL7DefSegment,OpenDentBusiness.HL7.SegmentHL7)">
            <summary>apt could be null if the PV1 segment is from a message that does not refer to an appointment like an ADT or PPR message or if it is from an SIU message and is for a new appointment.  If apt is null, do not update any of the apt fields, like clinic or provider.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParser.ProcessSCH(OpenDentBusiness.Patient,OpenDentBusiness.Appointment,OpenDentBusiness.HL7DefSegment,OpenDentBusiness.HL7.SegmentHL7,OpenDentBusiness.HL7.MessageHL7)">
            <summary>Returns AptNum of the incoming appointment.  apt was found using the apt.AptNum field of the SCH segment, but can be null if it's a new appointment.  Used for eCW and other interfaces where OD is not the filler application.  When OD is not the filler application, we allow appointments to be created by the interfaced software and communicated to OD with an SIU message.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParser.M11CheckDigit(System.String)">
            <summary>This uses the Mod11 check digit algorithm to calculate and return the checkDigit for the supplied objectID.
            <para>(see \\SERVERFILES\storage\OPEN DENTAL\Programmers Documents\Standards (X12, ADA, etc)\HL7\Version2.6\V26_CH02A_DataTypes_M4_JAN2007.doc page 23)</para>
            <para>If objectId is an empty string, this will return -1.</para>
            <para>Returns the calculated check digit to compare to check digit received or use in constructing a message.</para>
            <para>M11 algorithm: d	=	digit of number starting from units digit, followed by 10’s position, followed by 100’s position, etc.</para>
            <para>w	=	weight of digit position starting with the units position, followed by 10’s position, followed by 100’s position etc.</para>
            <para>Values for w = 2,3,4,5,6,7,2,3,4,5,6,7,etc. (repeats for each group of 6 digits)</para>
            <para>c	=	check digit</para>
            <para>(Step 1) m = sum of (d*w) starting at units position for d=digit value starting with units position to highest order,</para>
            <para>for w=weight value from 2 to 7 for every 6 positions starting with units digit</para>
            <para>(Step 2) c1 = m mod 11</para>
            <para>(Step 3) if c1 = 0 then c1 = 1</para>
            <para>(Step 4) c = (11 - c1) mod 10</para>
            <para>Example: 1234567, check digit is 4; m=(7*2)+(6*3)+(5*4)+(4*5)+(3*6)+(2*7)+(1*2)=106; 106 mod 11=7; (11-7) mod 10=4.</para></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageParser.M10CheckDigit(System.String)">
            <summary>This uses the Mod10 check digit algorithm to calculate and return the checkDigit for the supplied objectId.
            <para>(see \\SERVERFILES\storage\OPEN DENTAL\Programmers Documents\Standards (X12, ADA, etc)\HL7\Version2.6\V26_CH02A_DataTypes_M4_JAN2007.doc page 22)</para>
            <para>If objectId is an empty string, this will return -1.</para>
            <para>Returns the calculated check digit to compare to check digit received or use in constructing a message.</para>
            <para>M10 algorithm: (Step 1) Take the odd positioned digits starting from the right and append them into a single number.</para>
            <para>(Step 2) Multiply value from step 1 by 2.</para>
            <para>(Step 3) Take the even digit positions starting from the right (of the original number) and prepend these to the value from step 2.</para>
            <para>(Step 4) Add all of the digits together and subtract the total from the next highest multiple of 10.  If it is a multiple of 10, check digit is 0.</para>
            <para>Example: 12345, check digit is 5; Step 1: 531; Step 2: 531*2=1062; Step 3: 421062; Step 4: 4+2+1+0+6+2=15; 20-15=5.</para></summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.MessageConstructor">
            <summary>This is the engine that will construct our outgoing HL7 messages.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageConstructor.GenerateDFT(System.Collections.Generic.List{OpenDentBusiness.Procedure},OpenDentBusiness.EventTypeHL7,OpenDentBusiness.Patient,OpenDentBusiness.Patient,System.Int64,System.String,System.String)">
            <summary>Returns null if there is no HL7Def enabled or if there is no outbound DFT defined for the enabled HL7Def.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageConstructor.GenerateADT(OpenDentBusiness.Patient,OpenDentBusiness.Patient,OpenDentBusiness.EventTypeHL7)">
            <summary>Returns null if there is no HL7Def enabled or if there is no outbound ADT defined for the enabled HL7Def.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageConstructor.GenerateSIU(OpenDentBusiness.Patient,OpenDentBusiness.Patient,OpenDentBusiness.EventTypeHL7,OpenDentBusiness.Appointment)">
            <summary>Returns null if there is no HL7Def enabled or if there is no outbound SIU defined for the enabled HL7Def.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageConstructor.GenerateACK(System.String,System.Boolean,System.String)">
            <summary>Returns null if no HL7 def is enabled or no ACK is defined in the enabled def.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageConstructor.GenerateSRR(OpenDentBusiness.Patient,OpenDentBusiness.Appointment,OpenDentBusiness.EventTypeHL7,System.String,System.Boolean,System.String)">
            <summary>Returns null if no HL7 def is enabled or no SRR is defined in the enabled def.  An SRR - Schedule Request Response message is sent when an SRM - Schedule Request Message is received.  The SRM is acknowledged just like any inbound message, but the SRR notifies the placer application that the requested modification took place.  Currently the only appointment modifications allowed are updating the appt note, setting the dentist and hygienist, updating the confirmation status, and changing the ClinicNum.  Setting the appointment status to Broken is also supported.</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.EcwADT">
            <summary>ADT messages are known as Patient Administration messages.  There are around 60 different kinds of ADT messages.  ADT messages are the most common message type, and I always think of them as "demographics" messages.  Not sure what ADT stands for; probably "admit/discharge/transfer" since many of the kinds of ADTs have to do with handling incoming and outgoing patients.</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.ComponentHL7">
            <summary>A component in HL7 is a subportion of a field.  For example, a name field might have LName and FName components.  Components are 0-based.</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.EcwDFT">
            <summary>A DFT message is a Charge Specification.  There are different kinds.  The kind we have implemented passes information about completed procedures and their charges to external programs for billing purposes.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwDFT.#ctor">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwDFT.InitializeEcw(System.Int64,System.Int64,OpenDentBusiness.Patient,System.String,System.String,System.Boolean,System.Collections.Generic.List{OpenDentBusiness.Procedure})">
            <summary>Creates the Message object and fills it with data.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwDFT.MSH">
            <summary>Message Header Segment</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwDFT.EVN">
            <summary>Event type segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwDFT.PID(OpenDentBusiness.Patient)">
            <summary>Patient identification.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwDFT.PV1(System.Int64,System.Int64)">
            <summary>Patient visit.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwDFT.FT1(System.Collections.Generic.List{OpenDentBusiness.Procedure},System.Boolean)">
            <summary>Financial transaction segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwDFT.DG1">
            <summary>Diagnosis segment. Optional.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwDFT.ZX1(System.String,System.String)">
            <summary>PDF data segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwDFT.ConvertRace(OpenDentBusiness.PatientRaceOld)">
            <summary>Convert the patient race entries to the deprecated PatientRaceOld enum before calling this method.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.FieldHL7.fullText">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.FieldHL7.ListRepeatFields">
            <summary>Not often used. Some HL7 fields are allowed to "repeat" multiple times. For example, in immunization messaging export (VXU messages), PID-3 repeats twice, once for patient ID and once for SSN.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.FieldHL7._delimiters">
            <summary>Delimiter order: component separator, repetition separator, escape character, subcomponent separator.
            <para>Defaults: ^ component, ~ repetition, \ escape character, &amp; subcomponent.</para></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldHL7.#ctor(System.Char[])">
            <summary>Use this constructor when generating a message.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldHL7.#ctor(System.String)">
            <summary>Use this constructor when we have a message to parse.  Uses the default delimiters.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldHL7.#ctor(System.String,System.Char[])">
            <summary>Use this constructor when we have a message to parse.  Uses the delimiters provided, retrieved from the enabled HL7 def if exists.</summary>
        </member>
        <member name="P:OpenDentBusiness.HL7.FieldHL7.FullText">
            <summary>Setting the FullText resets all the child components to the values passed in here.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldHL7.GetComponentVal(System.Int32)">
            <summary>If the index supplied is greater than the number of components, this will return an empty string.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldHL7.SetVals(System.String[])">
            <summary>This also resets the number of components.  And it sets fullText.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.FieldHL7.RepeatVals(System.String[])">
            <summary>Not often used. Some HL7 fields are allowed to "repeat" multiple times. For example, in immunization messaging export (VXU messages), PID-3 repeats twice, once for patient ID and once for SSN.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.MessageHL7.AckEvent">
            <summary>We will grab the event type sent to us to echo back to eCW in acknowledgment. All ADT's and SIU's will be treated the same, so while they may send an event type we do not have in our enumeration, we still want to process it and send back the ACK with the correct event type.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.MessageHL7.Delimiters">
            <summary>The default delimiters are: ^ component separator, ~ repetition separator, \ escape character, and &amp; subcomponent separator.  In that order.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageHL7.#ctor(OpenDentBusiness.MessageTypeHL7)">
            <summary>Only use this constructor when generating a message instead of parsing a message.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageHL7.ToString">
            <summary>This will always be generated on the fly, based on the FullText of all the segments combined.  FullText for any other object is cached rather than being generated on the fly.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageHL7.GetSegment(OpenDentBusiness.SegmentNameHL7,System.Boolean)">
            <summary>If an optional segment is not present, this will return null.  If a required segment is missing, this will throw an exception.
            This should only be used for non-repeatable segments, and only those that would be in a message 0 or 1 time.  If a segment can be in the
            message more than one time, like a NTE note segment, then this will return the first one found every time and there could be many others.
            Use GetSegments if the segment can repeat.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.MessageHL7.GetSegments(OpenDentBusiness.SegmentNameHL7,System.Boolean)">
            <summary>If an optional segment is not present, this will return an empty list.  If a required segment is missing, this will throw an exception.</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.SegmentHL7">
            <summary>A 'row' in the message.  Composed of fields</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.SegmentHL7.Name">
            <summary>The name</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7.SegmentHL7._fullText">
            <summary>The original full text of the segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.SegmentHL7.#ctor(OpenDentBusiness.SegmentNameHL7)">
            <summary>Only use this constructor when generating a message instead of parsing a message.  Uses the default message delimiters.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.SegmentHL7.#ctor(OpenDentBusiness.SegmentNameHL7,System.Char[])">
            <summary>Only use this constructor when generating a message instead of parsing a message.  Uses the delimiters provided, retrieved from the enabled HL7 def if exists.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.SegmentHL7.#ctor(System.String)">
            <summary>Use this constructor when we have a message to parse.  Uses the default message delimiters.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.SegmentHL7.#ctor(System.String,System.Char[])">
            <summary>Use this constructor when we have a message to parse.  Uses the delimiters provided, retrieved from the enabled HL7 def if exists.</summary>
        </member>
        <member name="P:OpenDentBusiness.HL7.SegmentHL7.FullText">
            <summary>Setting the FullText resets all the child fields.</summary>
        </member>
        <member name="P:OpenDentBusiness.HL7.SegmentHL7.SequenceNum">
            <summary>Read-only property.  This is the sequence number of this segment within the HL7 message.  Repeatable segments have a sequence number
            identifying which repetition the segment is and is used to order the repeating segments.  If the value in the field with index SequenceNumPos
            cannot be parsed into an int, or if the segment does not have an index SequenceNumPos field, the SequenceNum returned will be -1.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.SegmentHL7.GetFieldFullText(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.SegmentHL7.GetFieldComponent(System.Int32)">
            <summary>Really just a handy shortcut.  Identical to getting component 0 or to GetFieldFullText if there is only one component.
            This will return an empty string if fieldIndex is greater than the number of fields in the segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.SegmentHL7.GetField(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.SegmentHL7.SetField(System.Int32,System.String[])">
            <summary>Pass in one val to set the whole field.  Pass in multiple vals to set multiple components.  It also sets the fullText of the segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.SegmentHL7.RepeatField(System.Int32,System.String[])">
            <summary>Not often used.  If RepeatField() is called before SetField(), then the first field instance will be blank.
            Some HL7 fields are allowed to "repeat" multiple times.
            For example, in immunization messaging export (VXU messages), PID-3 repeats twice, once for patient ID and once for SSN.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.SegmentHL7.SetOrRepeatField(System.Int32,System.String[])">
            <summary>Sets the field if not yet set, otherwise repeats the field with the new values.
            Not often used.  Some HL7 fields are allowed to "repeat" multiple times.
            For example, in immunization messaging export (VXU messages), PID-3 repeats twice, once for patient ID and once for SSN.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.SegmentHL7.GetDateTime(System.Int32)">
            <summary>yyyyMMdd[HHmm[ss]].  If not in that format, it returns minVal.</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7.EcwSegmentPID">
            <summary>(and GT1 and PV1)</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwSegmentPID.ProcessPID(OpenDentBusiness.Patient,OpenDentBusiness.HL7.SegmentHL7,System.Boolean,System.Collections.Generic.List{OpenDentBusiness.PatRace})">
            <summary>PatNum will not be altered here.  The pat passed in must either have PatNum=0, or must have a PatNum matching the segment.  The reason that isStandalone is passed in is because if using tight integration mode (isStandalone=false), then we need to store the "alternate patient id" aka Account No. that comes in on PID.4 in the ChartNumber field so we can pass it back in PID.2 of the DFT charge message.  However, if not using tight integration (isStandalone=true), the ChartNumber field is already occupied by the eCW patient ID, and we do not want to overwrite it.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwSegmentPID.ProcessGT1(OpenDentBusiness.Patient,OpenDentBusiness.HL7.SegmentHL7,System.Boolean)">
            <summary>If relationship is self, this loop does nothing.  A new pat will later change guarantor to be same as patnum. </summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwSegmentPID.DateParse(System.String)">
            <summary>yyyyMMdd.  If not in that format, it returns minVal.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwSegmentPID.PhoneParse(System.String)">
            <summary>If it's exactly 10 digits, it will be formatted like this: (###)###-####.  Otherwise, no change.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwSegmentPID.GenderParse(System.String)">
            <summary>M,F,U</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwSegmentPID.RaceParse(System.String)">
            <summary>Returns the depricated PatientRaceOld enum.  Converting the old enum to patientrace entries needs to happen after this function is called.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwSegmentPID.ProvProcess(OpenDentBusiness.HL7.FieldHL7)">
            <summary>Supply in format UPIN^LastName^FirstName^MI.  If UPIN(abbr) does not exist, provider gets created.  If name has changed, provider gets updated.  ProvNum is returned.  If blank, then returns 0.  If field is NULL, returns 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwSegmentPID.FeeScheduleParse(System.String)">
            <summary>Will return 0 if string cannot be parsed to a number.  Will return 0 if the fee schedule passed in does not exactly match the description of a regular fee schedule.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7.EcwSIU.DateTimeParse(System.String)">
            <summary>yyyyMMddHHmmss.  If not in that format, it returns minVal.</summary>
        </member>
        <member name="T:OpenDentBusiness.PhoneAsterisks">
            <summary>This entire class is only used at Open Dental, Inc HQ.  So for that special environment, many things are hard-coded.</summary>
        </member>
        <member name="P:OpenDentBusiness.PhoneAsterisks.AsteriskServerIp">
            <summary>The asterisk server ip setting can change at any time via the phone tracking server application.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneAsterisks.SetToDefaultQueue(System.Int64)">
            <summary>Sets the phone to the default queue for the employee passed in in regards to the phoneempdefault table.
            Will correctly put the phone into the Triage ring group if the PhoneEmpDefault has been flagged as IsTriageOperator
            This method does nothing if there is no corresponding phoneempdefault row for the employee passed in.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneAsterisks.SetToDefaultQueue(OpenDentBusiness.PhoneEmpDefault)">
            <summary>Sets the phone to the default queue for the employee passed in in regards to the phoneempdefault table.
            Will correctly put the phone into the Triage ring group if the PhoneEmpDefault has been flagged as IsTriageOperator
            This method does nothing if there is no corresponding phoneempdefault row for the employee passed in.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneAsterisks.SetQueueForClockStatus(OpenDentBusiness.PhoneEmpDefault)">
            <summary>Updates the queue for the phone emp default passed in based on the ClockStatus of the current phone entry.</summary>
        </member>
        <member name="T:OpenDentBusiness.PhoneEmpDefaults">
            <summary>Not a true Cache pattern.  It only loads the cache once on startup and then never again.  No entry in the Cache file.  No InvalidType for PhoneEmpDefault.  Data is almost always pulled from db in realtime, and this cache is only used for default ringgroups.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefaults.listt">
            <summary>A list of all PhoneEmpDefaults.</summary>
        </member>
        <member name="P:OpenDentBusiness.PhoneEmpDefaults.Listt">
            <summary>A list of all PhoneEmpDefaults.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpDefaults.RefreshCache">
            <summary>Not part of the true Cache pattern.  See notes above.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpDefaults.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpDefaults.Refresh">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpDefaults.GetGraphedStatusForEmployeeDate(System.Int64,System.DateTime)">
            <summary>use sparingly as this makes a db call every time. only used for validating user is not modifying "dirty" data</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpDefaults.GetOne(System.Int64)">
            <summary>Gets one PhoneEmpDefault from the db.  Can return null.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpDefaults.GetEmpDefaultFromList(System.Int64,System.Collections.Generic.List{OpenDentBusiness.PhoneEmpDefault})">
            <summary>From local list. Can return null.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpDefaults.GetByExtAndEmp(System.Int32,System.Int64)">
            <summary>Can return null.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpDefaults.IsTriageOperatorForExtension(System.Int32,System.Collections.Generic.List{OpenDentBusiness.PhoneEmpDefault})">
            <summary>Find first employee with this extension and return their IsTriageOperator flag.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpDefaults.SetAvailable(System.Int32,System.Int64,System.String)">
            <summary>The employee passed in will take over the extension passed in.  
            Moves any other employee who currently has this extension set (in phoneempdefault) to extension zero.  
            This prevents duplicate extensions in phoneempdefault.
            If a computer name is passed in, it will do similar logic to what was done for the extension so there aren't duplicate comp names.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpDefaults.Insert(OpenDentBusiness.PhoneEmpDefault)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpDefaults.Update(OpenDentBusiness.PhoneEmpDefault)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpDefaults.UpdateEscalationOrder(System.Collections.Generic.List{OpenDentBusiness.PhoneEmpDefault})">
            <summary>Invalidates all rows' EscalationOrder and updates to the escalation ordering as given in the listPED input argument.</summary>
             <param name="listPED">The new list. EscalationOrder should be 1-based and ordered appropriately. Any employees that should not be included in escalation should have EscalationOrder==-1.</param>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpDefaults.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.PhoneEmpDefaults.PhoneEmpDefaultComparer">
            <summary>sorting class used to sort PhoneEmpDefault in various ways</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefaults.PhoneEmpDefaultComparer.SortBy.ext">
            <summary>0 - By Extension.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefaults.PhoneEmpDefaultComparer.SortBy.empNum">
            <summary>1 - By EmployeeNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefaults.PhoneEmpDefaultComparer.SortBy.name">
            <summary>2 - By Name.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefaults.PhoneEmpDefaultComparer.SortBy.escalation">
            <summary>3 - By Escalation Order.</summary>
        </member>
        <member name="T:OpenDentBusiness.PhoneEmpSubGroups">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpSubGroups.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpSubGroups.GetOne(System.Int64)">
            <summary>Gets one PhoneEmpSubGroup from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpSubGroups.GetAll">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpSubGroups.Insert(OpenDentBusiness.PhoneEmpSubGroup)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpSubGroups.Update(OpenDentBusiness.PhoneEmpSubGroup)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpSubGroups.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpSubGroups.Sync(System.Collections.Generic.List{OpenDentBusiness.PhoneEmpSubGroup},System.Collections.Generic.List{OpenDentBusiness.PhoneEmpSubGroup})">
            <summary>Inserts, updates, or deletes db rows to match listNew.  No need to pass in userNum, it's set before remoting role check and passed to
            the server if necessary.  Doesn't create ApptComm items, but will delete them.  If you use Sync, you must create new Apptcomm items.</summary>
        </member>
        <member name="T:OpenDentBusiness.PhoneMapJSON">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.MapAreaContainer">
            <summary>DO NOT EDIT THE VARIABLE NAMES OF THIS TABLE.  
            The variable names are hard-coded into JSON and serialized/deserialized into the DB and the program.</summary>
        </member>
        <member name="F:OpenDentBusiness.MapAreaContainer.MapAreaContainerNum">
            <summary>Essentially the PK to this "table."  Room Number.</summary>
        </member>
        <member name="T:OpenDentBusiness.PhoneGraphs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneGraphs.Refresh">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneGraphs.GetOne(System.Int64)">
            <summary>Gets one PhoneGraph from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneGraphs.GetAllForEmployeeNum(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneGraphs.Insert(OpenDentBusiness.PhoneGraph)">
            <summary>external callers should use InsertOrUpdate</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneGraphs.Update(OpenDentBusiness.PhoneGraph)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneGraphs.InsertOrUpdate(OpenDentBusiness.PhoneGraph)">
            <summary>user may have modified an existing PhoneGraph to look like a different existing so delete duplicates before inserting the new one</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneGraphs.AddMissingEntriesForToday(System.Collections.Generic.List{OpenDentBusiness.PhoneEmpDefault})">
            <summary>Each date should have one (and only 1) PhoneGraph entry per employee. Some may already be entered as exceptions to the default. We will fill in the gaps here. This will only be done for today's date (once Today has passed the opportunity to fill the gaps has passed). We don't want to presume that if it was missing on a past date then we should add it. This assumption would fill in gaps on past dates for employees that may not even have worked here on that date.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneGraphs.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneGraphs.DeleteDate(System.DateTime)">
            <summary>Delete all entries for this date. Used by internal 'Shared Projects Subversion' project which back-fills PhoneGraph entries for past dates.</summary>
        </member>
        <member name="T:OpenDentBusiness.PhoneMetrics">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneMetrics.Insert(OpenDentBusiness.PhoneMetric)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneMetrics.AverageMinutesBehind(System.DateTime)">
            <summary>Returns the average number of minutes behind rounded down for each half hour from 5:00 AM - 7:00 PM.</summary>
        </member>
        <member name="T:OpenDentBusiness.PhoneNumbers">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneNumbers.Insert(OpenDentBusiness.PhoneNumber)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneNumbers.Update(OpenDentBusiness.PhoneNumber)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Phones">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Phones.PhoneColorScheme">
            <summary>Define a color scheme for a phone. FormMapHQ uses DUAL while PhoneTile uses SINGLE.</summary>
        </member>
        <member name="M:OpenDentBusiness.Phones.PhoneColorScheme.#ctor(System.Boolean)">
            <summary>Switch between single and dual color schemes</summary>
        </member>
        <member name="M:OpenDentBusiness.Phones.PhoneColorScheme.SetColorScheme(System.Boolean)">
            <summary>Set public available colors according to user preference</summary>
        </member>
        <member name="M:OpenDentBusiness.Phones.GetPhoneList">
            <summary>Gets every phone entry in the database.  By default the list of phones returned will not include the correspnond web cam images.
            Set hasWebCamImages to true if the web cam images are needed which is only for the phone tile and phone control small (right now).
            Set the extensionsNum to an extension other than 0 to only get the web cam image for that extensions.</summary>
        </member>
        <member name="M:OpenDentBusiness.Phones.GetClockStatusFromEmp(System.String)">
            <summary>Converts from string to enum and also handles conversion of Working to Available</summary>
        </member>
        <member name="M:OpenDentBusiness.Phones.SetPhoneStatus(OpenDentBusiness.ClockStatusEnum,System.Int32,System.Int64)">
            <summary>this code is similar to code in the phone tracking server.  But here, we frequently only change clockStatus and ColorBar by setting employeeNum=-1.  If employeeNum is not -1, then EmployeeName also gets set.  If employeeNum==0, then clears employee from that row.</summary>
        </member>
        <member name="M:OpenDentBusiness.Phones.UpdatePhoneToEmpty(System.Int64,System.Int32)">
            <summary>Zero out any duplicate phone table rows for this employee. This is possible if a user logged off and another employee logs into their computer. This would cause duplicate entries in the big phones window. If ignoreExtension less than 1 (inavlid) then zero out all entries for this employeeNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Phones.GetPhoneColor(OpenDentBusiness.Phone,OpenDentBusiness.PhoneEmpDefault,System.Boolean,System.Drawing.Color@,System.Drawing.Color@,System.Drawing.Color@,System.Boolean@)">
            <summary>Consider all scenarios for a employee/phone/cubicle and return color and triage information</summary>
        </member>
        <member name="M:OpenDentBusiness.Phones.GetExtensionForEmp(System.Int64)">
            <summary>Gets the extension for the employee.  Returns 0 if employee cannot be found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Phones.SetPhoneForEmp(System.Int64,System.String,System.Int64)">
            <summary>Sets the employeeName and employeeNum for when someone else logs into another persons computer.</summary>
        </member>
        <member name="M:OpenDentBusiness.Phones.SetWebCamImage(System.Drawing.Bitmap,System.String)">
            <summary>Bitmap can be null.  Computername will override ipAddress.</summary>
        </member>
        <member name="M:OpenDentBusiness.Phones.SetProximity(System.Boolean,System.String)">
            <summary>Use by the proximity sensors in WebcamOD/ProximityOD</summary>
        </member>
        <member name="M:OpenDentBusiness.Phones.GetPhoneExtension(System.String)">
            <summary>Returns the extension from the phoneempdefault table that is associated to the computer name passed in.
            Returns 0 if no match was found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Phones.GetTriageTaskNums">
            <summary>Gets list of TaskNums for new and viewed tasks within the Triage task list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Phones.GetTriageTime">
            <summary>Returns the time of the oldest task within the Triage task list.  Returns 0 if there is no tasks in the list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Phones.GetTriageMetrics">
            <summary>Get triage metrics to be displayed in phone panels</summary>
        </member>
        <member name="T:OpenDentBusiness.Phones.PhoneComparer">
            <summary>sorting class used to sort Phone in various ways</summary>
        </member>
        <member name="F:OpenDentBusiness.Phones.PhoneComparer.SortBy.ext">
            <summary>0 - By Extension.</summary>
        </member>
        <member name="F:OpenDentBusiness.Phones.PhoneComparer.SortBy.empNum">
            <summary>1 - By EmployeeNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Phones.PhoneComparer.SortBy.name">
            <summary>2 - By Name.</summary>
        </member>
        <member name="T:OpenDentBusiness.PhoneConf">
            <summary>This table is not part of the general release.  User would have to add it manually.  All schema changes are done directly on our live database as needed.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneConf.PhoneConfNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneConf.ButtonIndex">
            <summary>0 to 19.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneConf.Occupants">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneConf.Extension">
            <summary>Acts like a FKey to Asterisk phone extentions. Manually manipulated to change behavior.</summary>
        </member>
        <member name="T:OpenDentBusiness.Phone">
            <summary>This table is not part of the general release.  User would have to add it manually.  All schema changes are done directly on our live database as needed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.PhoneNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.Extension">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.EmployeeName">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.ClockStatus">
            <summary>This enum is stored in the db as a string, so it needs special handling.  In phoneTrackingServer initialize, this value is pulled from employee.ClockStatus as Home, Lunch, Break, or Working(which gets converted to Available).  After that, the phone server uses those 4 in addition to WrapUp, Off, Training, TeamAssist, OfflineAssist, Backup, and None(which is displayed as an empty string).  The main program sets Unavailable sometimes, and pulls from employee.ClockStatus sometimes.</summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.Description">
            <summary>Either blank or 'In use'</summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.ColorBar">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.ColorText">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.EmployeeNum">
            <summary>FK to employee.EmployeeNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.CustomerNumber">
            <summary>The phone number or name of customer.</summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.InOrOut">
            <summary>Blank or 'in' or 'out'.</summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.PatNum">
            <summary>FK to patient.PatNum.  The customer.</summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.DateTimeStart">
            <summary>The date/time that the phonecall started.  Used to calculate how long user has been on phone.</summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.CustomerNumberRaw">
            <summary>Always set to the phone number of the caller.</summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.LastCallTimeStart">
            <summary>A copy of DateTimeStart made when a call has ended.  Gets set to 0001-01-01 after the 30 second wrap up thread has run.</summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.RingGroups">
            <summary>Enum:AsteriskRingGroups 0=all, 1=none, 2=backup.  This represents the active ring group for this extension.
            This is different (and will often times differ) from the phoneempdefault.RingGroups which is just a default value for the extension.</summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.IsProximal">
            <summary>Used with proximity sensors. Set from ProximityOD/WebcamOD.</summary>
        </member>
        <member name="F:OpenDentBusiness.Phone.DateTProximal">
            <summary>.</summary>
        </member>
        <member name="P:OpenDentBusiness.Phone.IsProxVisible">
            <summary>Used with proximity sensors. Set from ProximityOD/WebcamOD.</summary>
        </member>
        <member name="P:OpenDentBusiness.Phone.ColorBarXml">
            <summary>Only used for serialization purposes.</summary>
        </member>
        <member name="P:OpenDentBusiness.Phone.ColorTextXml">
            <summary>Only used for serialization purposes.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClockStatusEnum">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClockStatusEnum.None">
            <summary>This shows in the UI as blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockStatusEnum.Home">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClockStatusEnum.Lunch">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClockStatusEnum.Break">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClockStatusEnum.Available">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClockStatusEnum.WrapUp">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClockStatusEnum.Off">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClockStatusEnum.Training">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClockStatusEnum.TeamAssist">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClockStatusEnum.OfflineAssist">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClockStatusEnum.Backup">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClockStatusEnum.Unavailable">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClockStatusEnum.NeedsHelp">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.PhoneEmpDefault">
            <summary>This table is not part of the general release.  User would have to add it manually.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefault.EmployeeNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefault.IsGraphed">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefault.HasColor">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefault.RingGroups">
            <summary>Enum:AsteriskRingGroups 0=all, 1=none, 2=backup</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefault.EmpName">
            <summary>Just makes management easier.  Not used by the program.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefault.PhoneExt">
            <summary>The phone extension for the employee.  e.g. 101,102,etc.  Used to be in the employee table.  This can be changed daily by staff who float from workstation to workstation.  Can be 0 in order to keep two rows from sharing the same extension.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefault.StatusOverride">
            <summary>Enum:PhoneEmpStatusOverride </summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefault.Notes">
            <summary>Used to be stored as phoneoverride.Explanation.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefault.ComputerName">
            <summary>This is used by the webcam and phone system.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefault.IsPrivateScreen">
            <summary>Deprecated.  Always set to true because we no longer capture screen shots.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefault.IsTriageOperator">
            <summary>Used to launch a task window instead of a commlog window when user clicks on name/phone number on the bottom left.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpDefault.EscalationOrder">
            <summary>DEPRECATED. Order of escalation importantance. Employees are ranked 1-n in order of importance. 1 is most important, 'n' is least important. -1 means employee is not included in escalation.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpDefault.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.AsteriskQueues">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AsteriskQueues.Tech">
            <summary>0 - Adds ext into ODQueueReception and then removes ext from ODQueueTriage and ODQueueBackup.</summary>
        </member>
        <member name="F:OpenDentBusiness.AsteriskQueues.None">
            <summary>1 - Removes ext from ODQueueReception, ODQueueTriage, and ODQueueBackup.</summary>
        </member>
        <member name="F:OpenDentBusiness.AsteriskQueues.Backup">
            <summary>2 - Adds ext into ODQueueBackup and then removes ext from ODQueueReception and ODQueueTriage.</summary>
        </member>
        <member name="F:OpenDentBusiness.AsteriskQueues.Triage">
            <summary>3 - Adds ext into ODQueueTriage and ODQueueBackup then removes ext from ODQueueReception.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpStatusOverride.None">
            <summary>0 - None.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpStatusOverride.Unavailable">
            <summary>1 </summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpStatusOverride.OfflineAssist">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.PhoneEmpSubGroup">
            <summary>Used in the accounting section in chart of accounts.  Not related to patient accounts in any way.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpSubGroup.PhoneEmpSubGroupNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpSubGroup.EmployeeNum">
            <summary>FK to PhoneEmpDefault.EmployeeNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpSubGroup.SubGroupType">
            <summary>Enum:PhoneEmpSubGroupType </summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpSubGroup.EscalationOrder">
            <summary>Order of escalation importantance. Employees are ranked 1-n in order of importance. 1 is most important, 'n' is least important.</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneEmpSubGroup.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.PhoneEmpSubGroupType">
            <summary>Enum representing different escalation groups.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpSubGroupType.Escal">
            <summary>Default view. Should always be first value if we ever need to change this enum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpSubGroupType.Eserv">
            <summary>Eservices.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpSubGroupType.Conv">
            <summary>Conversions.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneEmpSubGroupType.Mgmt">
            <summary>Management.</summary>
        </member>
        <member name="T:OpenDentBusiness.PhoneGraph">
            <summary>This table is not part of the general release.  User would have to add it manually.  All schema changes are done directly on our live database as needed.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneGraph.PhoneGraphNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneGraph.EmployeeNum">
            <summary>FK to employee.EmployeeNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneGraph.IsGraphed">
            <summary>Ammends PhoneEmpDefault.IsGraphed for the given DateEntry</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneGraph.DateEntry">
            <summary>Date pertaining to this entry.</summary>
        </member>
        <member name="T:OpenDentBusiness.PhoneMetric">
            <summary>This table is not part of the general release.  User would have to add it manually.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneMetric.PhoneMetricNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneMetric.DateTimeEntry">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneMetric.VoiceMails">
            <summary>Smallint -32768 to 32767. -1 means was unable to reach the server.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneMetric.Triages">
            <summary>Smallint -32768 to 32767</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneMetric.MinutesBehind">
            <summary>Smallint -32768 to 32767</summary>
        </member>
        <member name="M:OpenDentBusiness.PhoneMetric.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.PhoneNumber">
            <summary>Only used internally by OpenDental, Inc.  Not used by anyone else.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneNumber.PhoneNumberNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneNumber.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PhoneNumber.PhoneNumberVal">
            <summary>The actual phone number for the patient.  Includes any punctuation.  No leading 1 or plus, so almost always 10 digits.</summary>
        </member>
        <member name="M:OpenDentBusiness.KPIActiveRecall.GetActiveRecall(System.DateTime,System.DateTime)">
            <summary>If not using clinics then supply an empty list of clinicNums. dateStart and dateEnd can be MinVal/MaxVal to indicate "forever".</summary>
        </member>
        <member name="T:OpenDentBusiness.ConvertDatabases">
            <summary></summary>
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.Encrypt(System.String)">
            <summary>Encrypts signature text and returns a base 64 string so that it can go directly into the database.
            Copied from MiscUtils.Encrypt() so that the data conversion will never change historically.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.IndexExists(System.String,System.String)">
            <summary>Helper method to determine if an index already exists.  Returns true if colNames matches the concatenation of all COLUMN_NAME(s) for the column(s) referenced by an index on the corresponding tableName.  If the index references multiple columns, colNames must have the column names in the exact order in which the index was created separated by commas, without spaces.  Example: the claimproc table has the multi-column index on columns ClaimPaymentNum, Status, and InsPayAmt.  To see if that index already exists, the parameters would be tableName="claimproc" and colNames="ClaimPaymentNum,Status,InsPayAmt".  Not case sensitive.  This will always return false for Oracle.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To13_2_1">
            <summary>Oracle compatible: 07/11/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To13_2_2">
            <summary>Oracle compatible: 07/11/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To13_3_6">
            <summary>Oracle compatible: 12/26/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To14_2_1">
            <summary>Oracle compatible: 05/13/2014</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To14_2_20">
            <summary>Oracle compatible: 07/07/2014</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To14_3_9">
            <summary>Oracle compatible: 10/08/2014</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To14_3_12">
            <summary>Oracle compatible: 10/10/2014</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To14_3_24">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To14_3_30">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To14_3_35">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To14_3_37">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To15_1_3">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To15_1_13">
            <summary>Oracle compatible: 02/25/2015</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To15_1_14">
            <summary>Oracle compatible: 03/02/2015</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To15_1_16">
            <summary>Oracle compatible: 03/18/2015</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To15_1_17">
            <summary>Oracle compatible: 03/24/2015</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To15_1_20">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To15_1_22">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To15_2_1">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To15_2_12">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To15_2_16">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To15_2_20">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To15_3_1">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To15_4_4">
            <summary>Oracle compatible: 11/25/2015</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To16_1_13">
            <summary>Oracle compatible: 03/30/2016</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To16_1_16">
            <summary>Oracle compatible: 04/25/2016</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To16_1_20">
            <summary>This conversion script run in versions 15.4.50, and 16.1.20</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To16_2_1">
            <summary>Oracle compatible: 05/17/2016</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To16_3_4">
            <summary>This conversion script run in versions 15.4.50, and 16.1.20</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.Set_7_5_17_AutoMerge(OpenDentBusiness.YN)">
            <summary>Does nothing if this pref is already present</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To7_9_8">
            <summary>Oracle compatible: 5/24/2011</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To7_9_10">
            <summary>Oracle compatible: 7/7/2011</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To11_0_1">
            <summary>Oracle compatible: 7/8/2011</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To11_0_9">
            <summary>Oracle compatible: 10/13/2011</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To11_0_10">
            <summary>Oracle compatible: 10/13/2011</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To11_0_11">
            <summary>Oracle compatible: 10/13/2011</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To11_0_13">
            <summary>Oracle compatible: 10/13/2011</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To11_0_15">
            <summary>Oracle compatible: 10/13/2011</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To11_0_24">
            <summary>Oracle compatible: 10/13/2011</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To11_1_1">
            <summary>Oracle compatible: 10/13/2011</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To11_1_9">
            <summary>Oracle compatible: 11/17/2011</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_0_1">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.GetClaimFormItemNum">
            <summary>This is a helper method for the 12.0.1 and 12.4.12 conversions.  Without it, there would be an additional 1200 lines of code.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_0_2">
            <summary>Oracle compatible: 01/04/2012</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_0_5">
            <summary>Oracle compatible: 02/02/2012</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_0_6">
            <summary>Oracle compatible: 01/08/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_1_0">
            <summary>Oracle compatible: 01/08/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_1_7">
            <summary>Oracle compatible: 01/08/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_2_1">
            <summary>Oracle compatible: 01/08/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_2_17">
            <summary>Oracle compatible: 01/08/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_2_28">
            <summary>Oracle compatible: 01/08/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_3_1">
            <summary>Oracle compatible: 01/09/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_3_3">
            <summary>Oracle compatible: 01/09/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_3_6">
            <summary>Also in 12.2.34</summary>
            <summary>Oracle compatible: 01/09/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_3_12">
            <summary>Oracle compatible: 01/09/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_3_20">
            <summary>Oracle compatible: 01/09/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_4_1">
            <summary>Oracle compatible: 01/09/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_4_12">
            <summary>Oracle compatible: 01/09/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_4_14">
            <summary>Oracle compatible: 01/09/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_4_22">
            <summary>Oracle compatible: 01/09/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_4_28">
            <summary>Oracle compatible: 01/09/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_4_30">
            <summary>Oracle compatible: 01/09/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_4_32">
            <summary>Oracle compatible: 01/09/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To12_4_38">
            <summary>Oracle compatible: 02/23/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To13_1_1">
            <summary>Oracle compatible: 02/23/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To13_1_3">
            <summary>Oracle compatible: 02/23/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To13_1_14">
            <summary>Oracle compatible: 05/16/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To13_1_19">
            <summary>Oracle compatible: 05/16/2013</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.ExecuteFile(System.String)">
            <summary>Takes a text file with a series of SQL commands, and sends them as queries to the database.  Used in version upgrades until version 4.4.  But the ConversionFiles folder was a constant source of frustration for new programmers, so it was decided to deprecate the use of the "ConversionFiles" folder.  Since then, all SQL commands needed for upgrades have been included in the source code instead.  The filename is always relative to the application directory.  Throws an exception if it fails.  Due to spotty support for batch commands in the MySQL connector, this function is no longer used.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.GetPercent(System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>Used by To3_0_1. IMPORTANT: remember that this method alters TableQ.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConvertDatabases.removeNotNullFieldCommands">
            <summary> The following string is used to upgrade MySQL databases into a compatible format for conversion to Oracle. A similar table will also used for the database maintinence tool in order to ensure that the columns below do not contain null data. The array below is composed of groups of 3 strings, following the format: tablename columnname type.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To4_6_12">
            <summary>The following changes are to remove the NOT NULL from string fields for all tables in the database in order to become compatible with Oracle, since in Oracle null is the same as the empty string.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To4_6_13">
            <summary>Support for Oracle began with this version.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To4_6_19">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To4_6_22">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To4_7_1">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To4_7_4">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To4_8_1">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To4_8_3">
            <summary>First version where individual computer preferences were introduced.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To4_8_8">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To4_8_9">
            <summary>This conversion converts all medium ints in the database to simple signed ints, because the medium int size restriction is causing some key duplication in random primary key generations, and because we want the integers in the database to be complatible with c# ints. Also, using the syntax with regular ints works for both MySQL and Oracle, whereas the mediumint keyword is invalid in Oracle.</summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To4_9_1">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To4_9_2">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To4_9_5">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To5_0_0">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To5_0_2">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To5_0_4">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ConvertDatabases.To5_0_5">
            <summary>Just ensures that the SensorType column in the computerpref table has length of 255 (since older code used a length of 256, which is invalid in MySQL version 4.1).</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemSnomed">
            <summary>OID: 2.16.840.1.113883.6.96</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemNameSnomed">
            <summary>SNOMED CT</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemRxNorm">
            <summary>OID: 2.16.840.1.113883.6.88</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemNameRxNorm">
            <summary>RxNorm</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemLoinc">
            <summary>OID: 2.16.840.1.113883.6.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemNameLoinc">
            <summary>LOINC</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemCvx">
            <summary>OID: 2.16.840.1.113883.12.292</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemNameCvx">
            <summary>CVX</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemCpt4">
            <summary>OID: 2.16.840.1.113883.6.12</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemNameCpt4">
            <summary>CPT-4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemIcd9">
            <summary>OID: 2.16.840.1.113883.6.104</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemNameIcd9">
            <summary>ICD9</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemIcd10">
            <summary>OID: 2.16.840.1.113883.6.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemNameIcd10">
            <summary>ICD10</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemNucc">
            <summary>OID: 2.16.840.1.113883.6.101</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemNameNucc">
            <summary>NUCC</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemUnii">
            <summary>OID: 2.16.840.1.113883.4.9</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemNameUnii">
            <summary>UNII</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemCdt">
            <summary>OID: 2.16.840.1.113883.6.13</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD.strCodeSystemNameCdt">
            <summary>CDT codes (ADA codes).</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD._patOutCcd">
            <summary>Set each time GenerateCCD() is called. Used by helper functions to avoid sending the patient as a parameter to each helper function.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD._listAllergiesFiltered">
            <summary>Set each time ValidateAll and ValidateAllergy is called.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD._listEncountersFiltered">
            <summary>Set each time ValidateAll and ValidateEncounter is called.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD._listProblemsFuncFiltered">
            <summary>Set each time ValidateAll and ValidateFunctionalStatus is called.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD._listVaccinePatsFiltered">
            <summary>Set each time ValidateAll and ValidateImmunization is called.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD._listMedPatsFiltered">
            <summary>Set each time ValidateAll and ValidateMedication is called.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD._listEhrCarePlansFiltered">
            <summary>Set each time ValidateAll and ValidatePlanOfCare is called.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD._listProblemsFiltered">
            <summary>Set each time ValidateAll and ValidateProblem is called.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD._listProcsFiltered">
            <summary>Set each time ValidateAll and ValidateProcedure is called.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD._listLabResultFiltered">
            <summary>Set each time ValidateAll and ValidateLabResult is called.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD._listEhrMeasureEventsFiltered">
            <summary>Set each time ValidateAll and ValidateSocialHistory is called.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD._listVitalSignsFiltered">
            <summary>Set each time ValidateAll and ValidateVitalSign is called.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD._w">
            <summary>Instantiated each time GenerateCCD() is called. Used by helper functions to avoid sending the writer as a parameter to each helper function.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD._hashCcdIds">
            <summary>Instantiated each time GenerateCCD() is called. Used to generate unique "id" element "root" attribute identifiers. The Ids in this list are random alpha-numeric and 32 characters in length.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCCD._hashCcdGuids">
            <summary>Instantiated each time GenerateCCD() is called. Used to generate unique "id" element "root" attribute identifiers. The Ids in this list are random GUIDs which are 36 characters in length.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.#ctor">
            <summary>Constructor is private to limit instantiation to internal use only. All access to this class is static, however, there are private member variables which are used by each instance for ease of access.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateClinicalSummary(OpenDentBusiness.Patient,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.DateTime)">
            <summary>Generates a Clinical Summary XML document with an appropriate referral string.  Sections can be included/excluded.  Output is for the date specified, but only applied to specific sections.  Throws an exception if validation fails.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateSummaryOfCare(OpenDentBusiness.Patient)">
            <summary>Generates a Summary of Care XML document with an appropriate referral string. Throws an exception if validation fails.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateElectronicCopy(OpenDentBusiness.Patient)">
            <summary>Generates an Electronic Copy XML document with an appropriate referral string. Throws an exception if validation fails.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GeneratePatientExport(OpenDentBusiness.Patient)">
            <summary>Generates a Patient Export XML document with an appropriate referral string. Throws an exception if validation fails.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateCCD(OpenDentBusiness.Patient,System.String)">
            <summary>Throws an exception if validation fails.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateCCD(OpenDentBusiness.Patient,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String,System.DateTime)">
            <summary>Throws an exception if validation fails.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GetTaxonomy(OpenDentBusiness.Provider)">
            <summary>Helper for GenerateCCD() and GenerateCcdSectionEncounters(). Exactly the same taxonomy codes used for X12 in eclaims.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateCcdSectionAllergies(System.Boolean)">
            <summary>Helper for GenerateCCD().</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateCcdSectionEncounters(System.Boolean)">
            <summary>Helper for GenerateCCD().</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateCcdSectionFunctionalStatus(System.Boolean)">
            <summary>Helper for GenerateCCD().</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateCcdSectionImmunizations(System.Boolean)">
            <summary>Helper for GenerateCCD().</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateCcdSectionInstructions(System.String)">
            <summary>Helper for GenerateCCD().</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateCcdSectionMedications(System.Boolean)">
            <summary>Helper for GenerateCCD().</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateCcdSectionPlanOfCare(System.Boolean)">
            <summary>Helper for GenerateCCD().</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateCcdSectionProblems(System.Boolean)">
            <summary>Helper for GenerateCCD().  Problem section.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateCcdSectionProcedures(System.Boolean)">
            <summary>Helper for GenerateCCD().</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateCcdSectionReasonForReferral(System.Boolean,System.String)">
            <summary>Helper for GenerateCCD().</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateCcdSectionResults(System.Boolean)">
            <summary>Helper for GenerateCCD().  Exports Labs.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateCcdSectionSocialHistory(System.Boolean)">
            <summary>Helper for GenerateCCD().  Exports smoking and pregnancy information.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.CompareEhrMeasureEvents(OpenDentBusiness.EhrMeasureEvent,OpenDentBusiness.EhrMeasureEvent)">
            <summary>Helper for GenerateCcdSectionSocialHistory().  Sort function.  Currently sorts by date ascending.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateCcdSectionVitalSigns(System.Boolean)">
            <summary>Helper for GenerateCCD().</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GenerateCcdVitalSign(System.String,System.DateTime,System.Single,System.String)">
            <summary>Helper for GenerateCcdSectionVitalSigns(). Writes on observation. 
            Allowed vital sign observation template LOINC codes (strLoincObservationCode):
            9279-1		Respiratory Rate
            8867-4		Heart Rate
            2710-2		O2 % BldC Oximetry,
            8480-6		BP Systolic
            8462-4		BP Diastolic
            8310-5		Body Temperature,
            8302-2		Height
            8306-3		Height (Lying)
            8287-5		Head Circumference,
            3141-9		Weight Measured
            39156-5	BMI (Body Mass Index)
            3140-1 BSA (Body Surface Area)</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.Id">
            <summary>Helper for GenerateCCD(). Builds an "id" element and writes a random 32 character alpha-numeric string into the "root" attribute.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.Guid">
            <summary>Helper for GenerateCCD(). Builds an "id" element and writes a 36 character GUID string into the "root" attribute.
            An example of how the uid might look: "20cf14fb-B65c-4c8c-A54d-b0cca834C18c"</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.TemplateId(System.String)">
            <summary>Helper for GenerateCCD().</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.TemplateId(System.String,System.String)">
            <summary>Helper for GenerateCCD().</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.Start(System.String,System.String[])">
            <summary>Helper for GenerateCCD().  Performs a WriteStartElement, followed by any attributes.  Attributes must be in pairs: name, value.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.End(System.String)">
            <summary>Helper for GenerateCCD().  Performs a WriteEndElement.  The specified elementName is for readability only.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.StartAndEnd(System.String,System.String[])">
            <summary>Helper for GenerateCCD().  Performs a WriteStartElement, followed by any attributes, followed by a WriteEndElement.  Attributes must be in pairs: name, value.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.Attribs(System.String[])">
            <summary>Helper for GenerateCCD().  Performs a WriteAttributeString for each attribute.  Attributes must be in pairs: name, value.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.DateText(System.String,System.DateTime)">
            <summary>Use for HTML tables. Writes the element strElement name and writes the dateTime string in the required date format.  Will not write if year is before 1880.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.DateElement(System.String,System.DateTime)">
            <summary>Use for XML. Writes the element strElement name and writes the dateTime in the required date format into the value attribute.
            Will write nullFlavor="UNK" instead of value if year is before 1880.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.TimeElement(System.String,System.DateTime)">
            <summary>Writes the element strElement name and writes the dateTime in the required date format into the value attribute.
            Will write nullFlavor="UNK" instead of value if year is before 1880.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.ValidateAll(OpenDentBusiness.Patient,System.DateTime)">
            <summary>Does validation on the filtered lists. NEEDS TO BE ENHANCED.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.ValidateSettings">
            <summary>Checks data values for preferences and provider information to ensure required data is available for CCD creation.
            Returns empty string if no errors, otherwise returns a string containing error messages.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.ValidatePatient(OpenDentBusiness.Patient)">
            <summary>Checks data values for pat as well as primary provider information to ensure required data is available for CCD creation.
            Returns empty string if no errors, otherwise returns a string containing error messages.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.ValidateAllergy(OpenDentBusiness.Patient)">
            <summary>Does validation on the filtered list. NEEDS TO BE ENHANCED.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.FilterAllergy(OpenDentBusiness.Patient)">
            <summary>Filters list of allergies. Also runs validation.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.ValidateEncounter(OpenDentBusiness.Patient,System.DateTime)">
            <summary>Does validation on the filtered list. NEEDS TO BE ENHANCED.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.FilterEncounter(OpenDentBusiness.Patient,System.DateTime)">
            <summary>Filters list of encounters. Also runs validation.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.ValidateFunctionalStatus(OpenDentBusiness.Patient)">
            <summary>Does validation on the filtered list. NEEDS TO BE ENHANCED.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.FilterFunctionalStatus(OpenDentBusiness.Patient)">
            <summary>Filters list of encounters. Also runs validation.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.ValidateImmunization(OpenDentBusiness.Patient)">
            <summary>Does validation on the filtered list. NEEDS TO BE ENHANCED.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.FilterImmunization(OpenDentBusiness.Patient)">
            <summary>Filters list of vaccines. Also runs validation.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.ValidateMedication(OpenDentBusiness.Patient)">
            <summary>Does validation on the filtered list. NEEDS TO BE ENHANCED.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.FilterMedication(OpenDentBusiness.Patient)">
            <summary>Filters list of medications. Also runs validation.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.ValidatePlanOfCare(OpenDentBusiness.Patient,System.DateTime)">
            <summary>Does validation on the filtered list. NEEDS TO BE ENHANCED.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.FilterPlanOfCare(OpenDentBusiness.Patient,System.DateTime)">
            <summary>Filters list of care plans. Also runs validation.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.ValidateProblem(OpenDentBusiness.Patient)">
            <summary>Does validation on the filtered list. NEEDS TO BE ENHANCED.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.FilterProblem(OpenDentBusiness.Patient)">
            <summary>Filters list of problems. Also runs validation.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.ValidateProcedure(OpenDentBusiness.Patient,System.DateTime)">
            <summary>Does validation on the filtered list. NEEDS TO BE ENHANCED.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.FilterProcedure(OpenDentBusiness.Patient,System.DateTime)">
            <summary>Filters list of procedures. Also runs validation.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.ValidateLabResults(OpenDentBusiness.Patient)">
            <summary>Does validation on the filtered list. NEEDS TO BE ENHANCED.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.FilterLabResults(OpenDentBusiness.Patient)">
            <summary>Filters list of lab results. Also runs validation.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.ValidateSocialHistory(OpenDentBusiness.Patient)">
            <summary>Does validation on the filtered list. NEEDS TO BE ENHANCED.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.FilterSocialHistory(OpenDentBusiness.Patient)">
            <summary>Filters list of procedures. Also runs validation.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.ValidateVitalsSign(OpenDentBusiness.Patient,System.DateTime)">
            <summary>Does validation on the filtered list. NEEDS TO BE ENHANCED.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.FilterVitalSign(OpenDentBusiness.Patient,System.DateTime)">
            <summary>Filters list of procedures. Also runs validation.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GetCCDpat(System.Xml.XmlDocument)">
            <summary>Returns the PatNum for the unique patient who matches the patient name and birthdate within the CCD document xmlDocCcd.
            Returns 0 if there are no patient matches.  Returns the first match if there are multiple matches (unlikely).</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GetNodesByTagNameAndAttributes(System.Xml.XmlNode,System.String,System.String[])">
            <summary>Recursive. Returns all nodes matching the specified tag name (case insensitive) which also have all of the specified attributes (case sensitive names).
            Attributes must be listed in pairs by attribute name then attribute value.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GetNodesByTagNameAndAttributesFromList(System.Collections.Generic.List{System.Xml.XmlNode},System.String,System.String[])">
            <summary>Calls GetNodesByTagNameAndAttributes() for each item in listXmlNode.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GetEffectiveTimeLow(System.Xml.XmlNode)">
            <summary>Gets the start date (aka low node) from the effectiveTime node passed in.  Returns the date time value set in the low node if present.  If low node does not exist, it returns the value within the effectiveTime node.  Returns MinValue if low attribute is "nullflavor" or if parsing fails.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GetListMedicationPats(System.Xml.XmlDocument,System.Collections.Generic.List{OpenDentBusiness.MedicationPat})">
            <summary>Fills listMedicationPats and listMedications using the information found in the CCD document xmlDocCcd.  Does NOT insert any records into the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GetListDiseases(System.Xml.XmlDocument,System.Collections.Generic.List{OpenDentBusiness.Disease},System.Collections.Generic.List{OpenDentBusiness.DiseaseDef})">
            <summary>Fills listDiseases and listDiseaseDef using the information found in the CCD document xmlDocCcd.  Does NOT insert any records into the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCCD.GetListAllergies(System.Xml.XmlDocument,System.Collections.Generic.List{OpenDentBusiness.Allergy},System.Collections.Generic.List{OpenDentBusiness.AllergyDef})">
            <summary>Fills listAllergies and listAllergyDefs using the information found in the CCD document xmlDocCcd.  Inserts a medication in the db corresponding to the allergy.</summary>
        </member>
        <member name="M:OpenDentBusiness.InnoDb.GetDefaultEngine">
            <summary>Returns the default storage engine.</summary>
        </member>
        <member name="M:OpenDentBusiness.InnoDb.GetEngineCount">
            <summary>Returns the number of MyISAM tables and the number of InnoDB tables in the current database.</summary>
        </member>
        <member name="M:OpenDentBusiness.InnoDb.GetInnodbTableNames">
            <summary>Gets the names of tables in InnoDB format, comma delimited (excluding the 'phone' table).  Returns empty string if none.</summary>
        </member>
        <member name="M:OpenDentBusiness.InnoDb.ConvertTables(System.String,System.String)">
            <summary>The only allowed parameters are "InnoDB" or "MyISAM".  Converts tables to toEngine type and returns the number of tables converted.</summary>
        </member>
        <member name="T:OpenDentBusiness.Mime">
            <summary>Extract a mime file type from a file/extension. Found this solution here after an exhaustive search. http://stackoverflow.com/a/20011250 .</summary>
        </member>
        <member name="M:OpenDentBusiness.Mime.GetMimeType(System.String)">
            <summary>Returns mime type for given file/extension. If no match is found then returns default application/octet-stream.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mime.GetWindowsMimeType(System.String,System.String@)">
            <summary>Search registry for a known mime type. Returns false if no match found in registry.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mime.GetMimeTypeForEmail(System.String)">
            <summary>Returns mime type for given file/extension. If no match is found then returns default text/plain.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mime._mappings">
            <summary>Known mime types mappings.
            Taken from Windows 7 Registry and from C:\Windows\System32\inetsrv\config\applicationHost.config. 
            Some added, including .7z and .dat.</summary>
        </member>
        <member name="M:OpenDentBusiness.NTPv4.getTime(System.String)">
            <summary>Sends an NTPv4 request to the passed url and returns the offset from DateTime.Now.  Returns double.MaxValue if request timed out.  Will throw exception if nistServerUrl is invalid.</summary>
        </member>
        <member name="M:OpenDentBusiness.NTPv4.RawToDateTime(System.Byte[],System.Int32)">
            <summary>Convert byte array to a DateTime.</summary>
        </member>
        <member name="M:OpenDentBusiness.NTPv4.MakePacket">
            <summary>Create request packet for sending.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQProxy.GetWebServiceMainHQInstance(System.String)">
            <summary>Get an instance of the WebServicesHQ web service which includes the URL (pulled from PrefC). 
            Optionally, you can provide the URL. This option should only be used by web apps which don't want to cause a call to PrefC.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQProxy.CreateWebServiceHQPayload(System.String,OpenDentBusiness.eServiceCode)">
            <summary>Any calls to WebServiceMainHQ must go through this method. The payload created here will be digested and extracted to OpenDentalWebServiceHQ.PayloadArgs.</summary>
             <param name="payloadContentxAsXml">Use CreateXmlWriterSettings(true) to create your payload xml. Outer-most xml element MUST be labeled 'Payload'.</param>
             <param name="serviceCode">Used on case by case basis to validate that customer is registered for the given service.</param>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AllergyDefmCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one AllergyDefm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AllergyDefmCrud.SelectOne(System.String)">
            <summary>Gets one AllergyDefm object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AllergyDefmCrud.SelectMany(System.String)">
            <summary>Gets a list of AllergyDefm objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AllergyDefmCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AllergyDefmCrud.Insert(OpenDentBusiness.Mobile.AllergyDefm,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one AllergyDefm into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AllergyDefmCrud.Update(OpenDentBusiness.Mobile.AllergyDefm)">
            <summary>Updates one AllergyDefm in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AllergyDefmCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one AllergyDefm from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AllergyDefmCrud.ConvertToM(OpenDentBusiness.AllergyDef)">
            <summary>Converts one AllergyDef object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AllergymCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one Allergym object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AllergymCrud.SelectOne(System.String)">
            <summary>Gets one Allergym object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AllergymCrud.SelectMany(System.String)">
            <summary>Gets a list of Allergym objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AllergymCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AllergymCrud.Insert(OpenDentBusiness.Mobile.Allergym,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one Allergym into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AllergymCrud.Update(OpenDentBusiness.Mobile.Allergym)">
            <summary>Updates one Allergym in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AllergymCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one Allergym from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AllergymCrud.ConvertToM(OpenDentBusiness.Allergy)">
            <summary>Converts one Allergy object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DiseaseDefmCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one DiseaseDefm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DiseaseDefmCrud.SelectOne(System.String)">
            <summary>Gets one DiseaseDefm object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DiseaseDefmCrud.SelectMany(System.String)">
            <summary>Gets a list of DiseaseDefm objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DiseaseDefmCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DiseaseDefmCrud.Insert(OpenDentBusiness.Mobile.DiseaseDefm,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one DiseaseDefm into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DiseaseDefmCrud.Update(OpenDentBusiness.Mobile.DiseaseDefm)">
            <summary>Updates one DiseaseDefm in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DiseaseDefmCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one DiseaseDefm from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DiseaseDefmCrud.ConvertToM(OpenDentBusiness.DiseaseDef)">
            <summary>Converts one DiseaseDef object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DiseasemCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one Diseasem object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DiseasemCrud.SelectOne(System.String)">
            <summary>Gets one Diseasem object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DiseasemCrud.SelectMany(System.String)">
            <summary>Gets a list of Diseasem objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DiseasemCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DiseasemCrud.Insert(OpenDentBusiness.Mobile.Diseasem,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one Diseasem into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DiseasemCrud.Update(OpenDentBusiness.Mobile.Diseasem)">
            <summary>Updates one Diseasem in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DiseasemCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one Diseasem from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DiseasemCrud.ConvertToM(OpenDentBusiness.Disease)">
            <summary>Converts one Disease object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DocumentmCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one Documentm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DocumentmCrud.SelectOne(System.String)">
            <summary>Gets one Documentm object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DocumentmCrud.SelectMany(System.String)">
            <summary>Gets a list of Documentm objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DocumentmCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DocumentmCrud.Insert(OpenDentBusiness.Mobile.Documentm,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one Documentm into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DocumentmCrud.Update(OpenDentBusiness.Mobile.Documentm)">
            <summary>Updates one Documentm in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DocumentmCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one Documentm from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.DocumentmCrud.ConvertToM(OpenDentBusiness.Document)">
            <summary>Converts one Document object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.ICD9mCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one ICD9m object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.ICD9mCrud.SelectOne(System.String)">
            <summary>Gets one ICD9m object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.ICD9mCrud.SelectMany(System.String)">
            <summary>Gets a list of ICD9m objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.ICD9mCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.ICD9mCrud.Insert(OpenDentBusiness.Mobile.ICD9m,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one ICD9m into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.ICD9mCrud.Update(OpenDentBusiness.Mobile.ICD9m)">
            <summary>Updates one ICD9m in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.ICD9mCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one ICD9m from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.ICD9mCrud.ConvertToM(OpenDentBusiness.ICD9)">
            <summary>Converts one ICD9 object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.LabPanelmCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one LabPanelm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.LabPanelmCrud.SelectOne(System.String)">
            <summary>Gets one LabPanelm object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.LabPanelmCrud.SelectMany(System.String)">
            <summary>Gets a list of LabPanelm objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.LabPanelmCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.LabPanelmCrud.Insert(OpenDentBusiness.Mobile.LabPanelm,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one LabPanelm into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.LabPanelmCrud.Update(OpenDentBusiness.Mobile.LabPanelm)">
            <summary>Updates one LabPanelm in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.LabPanelmCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one LabPanelm from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.LabPanelmCrud.ConvertToM(OpenDentBusiness.LabPanel)">
            <summary>Converts one LabPanel object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.LabResultmCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one LabResultm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.LabResultmCrud.SelectOne(System.String)">
            <summary>Gets one LabResultm object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.LabResultmCrud.SelectMany(System.String)">
            <summary>Gets a list of LabResultm objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.LabResultmCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.LabResultmCrud.Insert(OpenDentBusiness.Mobile.LabResultm,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one LabResultm into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.LabResultmCrud.Update(OpenDentBusiness.Mobile.LabResultm)">
            <summary>Updates one LabResultm in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.LabResultmCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one LabResultm from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.LabResultmCrud.ConvertToM(OpenDentBusiness.LabResult)">
            <summary>Converts one LabResult object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.MedicationmCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one Medicationm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.MedicationmCrud.SelectOne(System.String)">
            <summary>Gets one Medicationm object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.MedicationmCrud.SelectMany(System.String)">
            <summary>Gets a list of Medicationm objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.MedicationmCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.MedicationmCrud.Insert(OpenDentBusiness.Mobile.Medicationm,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one Medicationm into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.MedicationmCrud.Update(OpenDentBusiness.Mobile.Medicationm)">
            <summary>Updates one Medicationm in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.MedicationmCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one Medicationm from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.MedicationmCrud.ConvertToM(OpenDentBusiness.Medication)">
            <summary>Converts one Medication object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.MedicationPatmCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one MedicationPatm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.MedicationPatmCrud.SelectOne(System.String)">
            <summary>Gets one MedicationPatm object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.MedicationPatmCrud.SelectMany(System.String)">
            <summary>Gets a list of MedicationPatm objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.MedicationPatmCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.MedicationPatmCrud.Insert(OpenDentBusiness.Mobile.MedicationPatm,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one MedicationPatm into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.MedicationPatmCrud.Update(OpenDentBusiness.Mobile.MedicationPatm)">
            <summary>Updates one MedicationPatm in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.MedicationPatmCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one MedicationPatm from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.MedicationPatmCrud.ConvertToM(OpenDentBusiness.MedicationPat)">
            <summary>Converts one MedicationPat object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.PharmacymCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one Pharmacym object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.PharmacymCrud.SelectOne(System.String)">
            <summary>Gets one Pharmacym object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.PharmacymCrud.SelectMany(System.String)">
            <summary>Gets a list of Pharmacym objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.PharmacymCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.PharmacymCrud.Insert(OpenDentBusiness.Mobile.Pharmacym,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one Pharmacym into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.PharmacymCrud.Update(OpenDentBusiness.Mobile.Pharmacym)">
            <summary>Updates one Pharmacym in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.PharmacymCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one Pharmacym from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.PharmacymCrud.ConvertToM(OpenDentBusiness.Pharmacy)">
            <summary>Converts one Pharmacy object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.ProvidermCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one Providerm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.ProvidermCrud.SelectOne(System.String)">
            <summary>Gets one Providerm object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.ProvidermCrud.SelectMany(System.String)">
            <summary>Gets a list of Providerm objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.ProvidermCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.ProvidermCrud.Insert(OpenDentBusiness.Mobile.Providerm,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one Providerm into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.ProvidermCrud.Update(OpenDentBusiness.Mobile.Providerm)">
            <summary>Updates one Providerm in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.ProvidermCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one Providerm from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.ProvidermCrud.ConvertToM(OpenDentBusiness.Provider)">
            <summary>Converts one Provider object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.RecallmCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one Recallm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.RecallmCrud.SelectOne(System.String)">
            <summary>Gets one Recallm object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.RecallmCrud.SelectMany(System.String)">
            <summary>Gets a list of Recallm objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.RecallmCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.RecallmCrud.Insert(OpenDentBusiness.Mobile.Recallm,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one Recallm into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.RecallmCrud.Update(OpenDentBusiness.Mobile.Recallm)">
            <summary>Updates one Recallm in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.RecallmCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one Recallm from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.RecallmCrud.ConvertToM(OpenDentBusiness.Recall)">
            <summary>Converts one Recall object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.RxPatmCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one RxPatm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.RxPatmCrud.SelectOne(System.String)">
            <summary>Gets one RxPatm object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.RxPatmCrud.SelectMany(System.String)">
            <summary>Gets a list of RxPatm objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.RxPatmCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.RxPatmCrud.Insert(OpenDentBusiness.Mobile.RxPatm,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one RxPatm into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.RxPatmCrud.Update(OpenDentBusiness.Mobile.RxPatm)">
            <summary>Updates one RxPatm in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.RxPatmCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one RxPatm from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.RxPatmCrud.ConvertToM(OpenDentBusiness.RxPat)">
            <summary>Converts one RxPat object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.StatementmCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one Statementm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.StatementmCrud.SelectOne(System.String)">
            <summary>Gets one Statementm object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.StatementmCrud.SelectMany(System.String)">
            <summary>Gets a list of Statementm objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.StatementmCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.StatementmCrud.Insert(OpenDentBusiness.Mobile.Statementm,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one Statementm into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.StatementmCrud.Update(OpenDentBusiness.Mobile.Statementm)">
            <summary>Updates one Statementm in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.StatementmCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one Statementm from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.StatementmCrud.ConvertToM(OpenDentBusiness.Statement)">
            <summary>Converts one Statement object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.UsermCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one Userm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.UsermCrud.SelectOne(System.String)">
            <summary>Gets one Userm object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.UsermCrud.SelectMany(System.String)">
            <summary>Gets a list of Userm objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.UsermCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.UsermCrud.Insert(OpenDentBusiness.Mobile.Userm,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one Userm into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.UsermCrud.Update(OpenDentBusiness.Mobile.Userm)">
            <summary>Updates one Userm in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.UsermCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one Userm from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AppointmentmCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one Appointmentm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AppointmentmCrud.SelectOne(System.String)">
            <summary>Gets one Appointmentm object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AppointmentmCrud.SelectMany(System.String)">
            <summary>Gets a list of Appointmentm objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AppointmentmCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AppointmentmCrud.Insert(OpenDentBusiness.Mobile.Appointmentm,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one Appointmentm into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AppointmentmCrud.Update(OpenDentBusiness.Mobile.Appointmentm)">
            <summary>Updates one Appointmentm in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AppointmentmCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one Appointmentm from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.AppointmentmCrud.ConvertToM(OpenDentBusiness.Appointment)">
            <summary>Converts one Appointment object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.PatientmCrud.SelectOne(System.Int64,System.Int64)">
            <summary>Gets one Patientm object from the database using primaryKey1(CustomerNum) and primaryKey2.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.PatientmCrud.SelectOne(System.String)">
            <summary>Gets one Patientm object from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.PatientmCrud.SelectMany(System.String)">
            <summary>Gets a list of Patientm objects from the database using a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.PatientmCrud.TableToList(System.Data.DataTable)">
            <summary>Converts a DataTable to a list of objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.PatientmCrud.Insert(OpenDentBusiness.Mobile.Patientm,System.Boolean)">
            <summary>Usually set useExistingPK=true.  Inserts one Patientm into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.PatientmCrud.Update(OpenDentBusiness.Mobile.Patientm)">
            <summary>Updates one Patientm in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.PatientmCrud.Delete(System.Int64,System.Int64)">
            <summary>Deletes one Patientm from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Crud.PatientmCrud.ConvertToM(OpenDentBusiness.Patient)">
            <summary>Converts one Patient object to its mobile equivalent.  Warning! CustomerNum will always be 0.</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.AllergyDefms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.AllergyDefms.GetOne(System.Int64,System.Int64)">
            <summary>Gets one Medicationm from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.AllergyDefms.GetChangedSinceAllergyDefNums(System.DateTime)">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.AllergyDefms.GetMultAllergyDefms(System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.AllergyDefms.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.AllergyDef})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.AllergyDefms.UpdateFromChangeList(System.Collections.Generic.List{OpenDentBusiness.Mobile.AllergyDefm},System.Int64)">
            <summary>Only run on server for mobile.  Takes the list of changes from the dental office and makes updates to those items in the mobile server db.  Also, make sure to run DeletedObjects.DeleteForMobile().</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.AllergyDefms.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Allergyms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Allergyms.GetAllergyms(System.Int64,System.Int64)">
            <summary>Gets all Allergym for a single patient </summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Allergyms.GetChangedSinceAllergyNums(System.DateTime)">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Allergyms.GetMultAllergyms(System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Allergyms.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.Allergy})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Allergyms.UpdateFromChangeList(System.Collections.Generic.List{OpenDentBusiness.Mobile.Allergym},System.Int64)">
            <summary>Only run on server for mobile.  Takes the list of changes from the dental office and makes updates to those items in the mobile server db.  Also, make sure to run DeletedObjects.DeleteForMobile().</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Allergyms.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Allergyms.Delete(System.Int64,System.Int64)">
            <summary>Delete all allergies of a particular patient</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.DiseaseDefms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.DiseaseDefms.GetOne(System.Int64,System.Int64)">
            <summary>Gets one Medicationm from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.DiseaseDefms.GetChangedSinceDiseaseDefNums(System.DateTime)">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.DiseaseDefms.GetMultDiseaseDefms(System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.DiseaseDefms.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.DiseaseDef})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.DiseaseDefms.UpdateFromChangeList(System.Collections.Generic.List{OpenDentBusiness.Mobile.DiseaseDefm},System.Int64)">
            <summary>Only run on server for mobile.  Takes the list of changes from the dental office and makes updates to those items in the mobile server db.  Also, make sure to run DeletedObjects.DeleteForMobile().</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.DiseaseDefms.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Diseasems">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Diseasems.GetDiseasems(System.Int64,System.Int64)">
            <summary>Gets all Diseasem for a single patient </summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Diseasems.GetChangedSinceDiseaseNums(System.DateTime,System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Diseasems.GetMultDiseasems(System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Diseasems.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.Disease})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Diseasems.UpdateFromChangeList(System.Collections.Generic.List{OpenDentBusiness.Mobile.Diseasem},System.Int64)">
            <summary>Only run on server for mobile.  Takes the list of changes from the dental office and makes updates to those items in the mobile server db.  Also, make sure to run DeletedObjects.DeleteForMobile().</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Diseasems.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Diseasems.Delete(System.Int64,System.Int64)">
            <summary>Delete all diseases of a particular patient</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Documentms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Documentms.GetOne(System.Int64,System.Int64)">
            <summary>Gets one Documentm from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Documentms.GetDocumentms(System.Int64,System.Int64)">
            <summary>Gets all Documentm for a single patient </summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Documentms.LimitDocumentmsPerPatient(System.Int64)">
            <summary>Limits the number of documents in the database for a single patient </summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Documentms.GetChangedSinceDocumentNums(System.DateTime,System.Collections.Generic.List{System.Int64})">
            <summary>Only documents listed in the corresponding rows of the statement table are uploaded</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Documentms.GetMultDocumentms(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Documentms.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.Document})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Documentms.UpdateFromChangeList(System.Collections.Generic.List{OpenDentBusiness.Mobile.Documentm},System.Int64)">
            <summary>Only run on server for mobile.  Takes the list of changes from the dental office and makes updates to those items in the mobile server db.  Also, make sure to run DeletedObjects.DeleteForMobile().</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Documentms.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Documentms.Delete(System.Int64,System.Int64)">
            <summary>Delete all documents of a particular patient</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.ICD9ms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.ICD9ms.GetOne(System.Int64,System.Int64)">
            <summary>Gets one Medicationm from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.ICD9ms.GetChangedSinceICD9Nums(System.DateTime)">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.ICD9ms.GetMultICD9ms(System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.ICD9ms.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.ICD9})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.ICD9ms.UpdateFromChangeList(System.Collections.Generic.List{OpenDentBusiness.Mobile.ICD9m},System.Int64)">
            <summary>Only run on server for mobile.  Takes the list of changes from the dental office and makes updates to those items in the mobile server db.  Also, make sure to run DeletedObjects.DeleteForMobile().</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.ICD9ms.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.LabPanelms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.LabPanelms.GetLabPanelms(System.Int64,System.Int64)">
            <summary>Gets all LabPanelm for a single patient </summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.LabPanelms.GetChangedSinceLabPanelNums(System.DateTime,System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.LabPanelms.GetMultLabPanelms(System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.LabPanelms.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.LabPanel})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.LabPanelms.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.LabPanelms.Delete(System.Int64,System.Int64)">
            <summary>Delete all labpanels of a particular patient</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.LabResultms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.LabResultms.GetOne(System.Int64,System.Int64)">
            <summary>Gets one LabResultm from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.LabResultms.GetLabResultms(System.Int64,System.Int64)">
            <summary>Gets one LabResultm from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.LabResultms.GetChangedSinceLabResultNums(System.DateTime)">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.LabResultms.GetMultLabResultms(System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.LabResultms.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.LabResult})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.LabResultms.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Medicationms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Medicationms.GetOne(System.Int64,System.Int64)">
            <summary>Gets one Medicationm from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Medicationms.GetChangedSinceMedicationNums(System.DateTime)">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Medicationms.GetMultMedicationms(System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Medicationms.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.Medication})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Medicationms.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.MedicationPatms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.MedicationPatms.GetMedicationPatms(System.Int64,System.Int64)">
            <summary>Gets all MedicationPatm for a single patient </summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.MedicationPatms.GetChangedSinceMedicationPatNums(System.DateTime,System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.MedicationPatms.GetMultMedicationPatms(System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.MedicationPatms.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.MedicationPat})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.MedicationPatms.UpdateFromChangeList(System.Collections.Generic.List{OpenDentBusiness.Mobile.MedicationPatm},System.Int64)">
            <summary>Only run on server for mobile.  Takes the list of changes from the dental office and makes updates to those items in the mobile server db.  Also, make sure to run DeletedObjects.DeleteForMobile().</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.MedicationPatms.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.MedicationPatms.Delete(System.Int64,System.Int64)">
            <summary>Delete all medicationpats of a particular patient</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Pharmacyms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Pharmacyms.GetOne(System.Int64,System.Int64)">
            <summary>Gets one Pharmacym from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Pharmacyms.GetPharmacyms(System.Int64)">
            <summary>Gets all Appointmentm for a single patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Pharmacyms.GetChangedSincePharmacyNums(System.DateTime)">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Pharmacyms.GetMultPharmacyms(System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Pharmacyms.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.Pharmacy})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Pharmacyms.UpdateFromChangeList(System.Collections.Generic.List{OpenDentBusiness.Mobile.Pharmacym},System.Int64)">
            <summary>Only run on server for mobile.  Takes the list of changes from the dental office and makes updates to those items in the mobile server db.  Also, make sure to run DeletedObjects.DeleteForMobile().</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Pharmacyms.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.PrefmC.GetString(OpenDentBusiness.Mobile.PrefmName)">
            <summary>Gets a pref of type string.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Prefms.LoadPreferences">
            <summary>Load the preferences from the session. If it is not found in the session it's loaded from the database</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Prefms.ConvertToM(OpenDentBusiness.Pref)">
            <summary>converts a Pref to a Prefm object</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Prefms.GetPrefm(System.String)">
            <summary>Returns a Prefm object when provided with the PrefName. Note that the CustomerNum field of the return object is not populated. </summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Prefms.UpdateString(System.Int64,OpenDentBusiness.Mobile.PrefmName,System.String)">
            <summary>Returns true if a change was required, or false if no change needed. This method is no longer used and may be deleted later. Dennis Mathew: Dec 24, 2011</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Providerms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Providerms.GetOne(System.Int64,System.Int64)">
            <summary>Gets one Providerm from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Providerms.GetChangedSinceProvNums(System.DateTime)">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Providerms.GetMultProviderms(System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Providerms.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.Provider})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Providerms.UpdateFromChangeList(System.Collections.Generic.List{OpenDentBusiness.Mobile.Providerm},System.Int64)">
            <summary>Only run on server for mobile.  Takes the list of changes from the dental office and makes updates to those items in the mobile server db.  Also, make sure to run DeletedObjects.DeleteForMobile().</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Providerms.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Recallms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Recallms.GetRecallms(System.Int64,System.Int64)">
            <summary>Gets all Recallm for a single patient </summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Recallms.GetChangedSinceRecallNums(System.DateTime)">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Recallms.GetMultRecallms(System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Recallms.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.Recall})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Recallms.UpdateFromChangeList(System.Collections.Generic.List{OpenDentBusiness.Mobile.Recallm},System.Int64)">
            <summary>Only run on server for mobile.  Takes the list of changes from the dental office and makes updates to those items in the mobile server db.  Also, make sure to run DeletedObjects.DeleteForMobile().</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Recallms.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.RxPatms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.RxPatms.GetRxPatms(System.Int64,System.Int64)">
            <summary>Gets all RxPatm for a single patient </summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.RxPatms.GetChangedSinceRxNums(System.DateTime)">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.RxPatms.GetMultRxPats(System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.RxPatms.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.RxPat})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.RxPatms.UpdateFromChangeList(System.Collections.Generic.List{OpenDentBusiness.Mobile.RxPatm},System.Int64)">
            <summary>Takes the list of changes from the dental office and makes updates to those items in the mobile server db.  Also, make sure to run DeletedObjects.DeleteForMobile().</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.RxPatms.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Statementms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Statementms.GetStatementms(System.Int64,System.Int64)">
            <summary>Gets all Statementm for a single patient </summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Statementms.LimitStatementmsPerPatient(System.Collections.Generic.List{System.Int64},System.Int64,System.Int32)">
            <summary>Limits the number of statements and documents in the database for a single patient </summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Statementms.GetChangedSinceStatementNums(System.DateTime,System.Collections.Generic.List{System.Int64},System.Int32)">
            <summary>Fetches StatementNums restricted by the DateTStamp, PatNums and a limit of records per patient. If limitPerPatient is zero all StatementNums of a patient are fetched</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Statementms.GetMultStatementms(System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Statementms.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.Statement})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Statementms.UpdateFromChangeList(System.Collections.Generic.List{OpenDentBusiness.Mobile.Statementm},System.Int64)">
            <summary>Only run on server for mobile.  Takes the list of changes from the dental office and makes updates to those items in the mobile server db.  Also, make sure to run DeletedObjects.DeleteForMobile().</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Statementms.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Statementms.Delete(System.Int64,System.Int64)">
            <summary>Delete all statements of a particular patient</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Userms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Userms.GetOne(System.Int64,System.Int64)">
            <summary>Gets one Userm from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Userms.Insert(OpenDentBusiness.Mobile.Userm)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Userms.Update(OpenDentBusiness.Mobile.Userm)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.AllergyDefm">
            <summary>A list of diseases that can be assigned to patients.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.AllergyDefm.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.AllergyDefm.AllergyDefNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.AllergyDefm.Description">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.AllergyDefm.Snomed">
            <summary>Enum:SnomedAllergy SNOMED Allergy Type Code.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.AllergyDefm.MedicationNum">
            <summary>FK to Medication.MedicationNum. Optional.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.AllergyDefm.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Allergym">
            <summary>Links allergies to patients. Patient portal version</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Allergym.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Allergym.AllergyNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Allergym.AllergyDefNum">
            <summary>FK to allergydef.AllergyDefNum</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Allergym.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Allergym.Reaction">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Allergym.StatusIsActive">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Allergym.DateAdverseReaction">
            <summary>The historical date that the patient had the adverse reaction to this agent.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Allergym.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.DiseaseDefm">
            <summary>A list of diseases that can be assigned to patients.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.DiseaseDefm.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.DiseaseDefm.DiseaseDefNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.DiseaseDefm.DiseaseName">
            <summary>.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.DiseaseDefm.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Diseasem">
            <summary>Links medications to patients. Patient portal version</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Diseasem.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Diseasem.DiseaseNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Diseasem.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Diseasem.DiseaseDefNum">
            <summary>FK to diseasedef.DiseaseDefNum.  The disease description is in that table.  Will be zero if ICD9Num has a value.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Diseasem.PatNote">
            <summary>Any note about this disease that is specific to this patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Diseasem.ICD9Num">
            <summary>FK to icd9.ICD9Num.  Will be zero if DiseaseDefNum has a value.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Diseasem.ProbStatus">
            <summary>Enum: ProblemStatus: Active=0, Resolved=1, Inactive=2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Diseasem.DateStart">
            <summary>Date that the disease was diagnosed.  Can be minval if unknown.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Diseasem.DateStop">
            <summary>Date that the disease was set resolved or inactive.  Will be minval if still active.  ProbStatus should be used to determine if it is active or not.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Diseasem.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Documentm">
            <summary>Links allergies to patients. Patient portal version</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Documentm.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Documentm.DocNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Documentm.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Documentm.RawBase64">
            <summary>The raw file data encoded as base64.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Documentm.Copy">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.ICD9m.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.ICD9m.ICD9Num">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.ICD9m.ICD9Code">
            <summary>Not allowed to edit this column once saved in the database.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.ICD9m.Description">
            <summary>Description.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.ICD9m.Copy">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabPanelm.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabPanelm.LabPanelNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabPanelm.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabPanelm.LabNameAddress">
            <summary>Both name and address in a single field.  OBR-20</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabPanelm.SpecimenCondition">
            <summary>OBR-13.  Usually blank.  Example: hemolyzed.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OpenDentBusiness.Mobile.LabPanelm.SpecimenSource" -->
        <member name="F:OpenDentBusiness.Mobile.LabPanelm.ServiceId">
            <summary>OBR-4-0, Service performed, id portion, LOINC.  For example, 24331-1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabPanelm.ServiceName">
            <summary>OBR-4-1, Service performed description.  Example, Lipid Panel.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabPanelm.MedicalOrderNum">
            <summary>FK to medicalorder.MedicalOrderNum.  Used to attach in imported lab panel to a lab order.  Multiple panels may be attached to an order.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.LabPanelm.Copy">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabResultm.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabResultm.LabResultNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabResultm.LabPanelNum">
            <summary>FK to labpanel.LabPanelNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabResultm.DateTimeTest">
            <summary>OBX-14.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabResultm.TestName">
            <summary>OBX-3, text portion.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabResultm.TestID">
            <summary>OBX-3 id portion, LOINC.  For example, 10676-5.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabResultm.ObsValue">
            <summary>Value always stored as a string because the type can vary.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabResultm.ObsUnits">
            <summary>OBX-6  For example, mL.  Was FK to drugunit.DrugUnitNum, but that would make reliable import problematic, so now it's just text.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabResultm.ObsRange">
            <summary>OBX-7  For example, &lt;200 or &gt;=40.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.LabResultm.AbnormalFlag">
            <summary>Enum:LabAbnormalFlag 0-No value, 1-Below normal, 2-Normal, 3-Above high normal.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.LabResultm.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Medicationm">
            <summary>A list of medications, not attached to any particular patient. Patient portal version </summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Medicationm.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Medicationm.MedicationNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Medicationm.MedName">
            <summary>Name of the medication.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Medicationm.GenericNum">
            <summary>FK to medication.MedicationNum.  If this is a generic drug, then the GenericNum will be the same as the MedicationNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Medicationm.RxCui">
            <summary>RxNorm Code identifier.  FK to an in-memory dictionary of RxCui/RxNorm mappings.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Medicationm.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.MedicationPatm">
            <summary>Links medications to patients. Patient portal version</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.MedicationPatm.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.MedicationPatm.MedicationPatNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.MedicationPatm.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.MedicationPatm.MedicationNum">
            <summary>FK to medication.MedicationNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.MedicationPatm.PatNote">
            <summary>Medication notes specific to this patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.MedicationPatm.DateStart">
            <summary>Date that the medication was started.  Can be minval if unknown.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.MedicationPatm.DateStop">
            <summary>Date that the medication was stopped.  Can be minval if unknown.  If not minval, then this medication is "discontinued".</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.MedicationPatm.Copy">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Pharmacym.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Pharmacym.PharmacyNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Pharmacym.StoreName">
            <summary>For now, it can just be a common description.  Later, it might have to be an official designation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Pharmacym.Phone">
            <summary>Includes all punctuation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Pharmacym.Fax">
            <summary>Includes all punctuation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Pharmacym.Address">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Pharmacym.Address2">
            <summary>Optional.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Pharmacym.City">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Pharmacym.State">
            <summary>Two char, uppercase.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Pharmacym.Zip">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Pharmacym.Note">
            <summary>A freeform note for any info that is needed about the pharmacy, such as hours.</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Providerm">
            <summary>One username/password for one customer.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Providerm.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Providerm.ProvNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Providerm.Abbr">
            <summary>Abbreviation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Providerm.IsSecondary">
            <summary>True if hygienist.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Providerm.ProvColor">
            <summary>Color that shows in appointments</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Providerm.Copy">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.Mobile.Providerm.ProvColorXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Recallm.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Recallm.RecallNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Recallm.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Recallm.DateDue">
            <summary>This is the date that is actually used when doing reports for recall. It will usually be the same as DateDueCalc unless user has changed it. System will only update this field if it is the same as DateDueCalc.  Otherwise, it will be left alone.  Gets cleared along with DateDueCalc when resetting recall.  When setting disabled, this field will also be cleared.  This is the field to use if converting from another software.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Recallm.DatePrevious">
            <summary>Not editable. Previous date that procedures were done to trigger this recall. It is calculated and enforced automatically.  If you want to affect this date, add a procedure to the chart with a status of C, EC, or EO.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Recallm.RecallStatus">
            <summary>FK to definition.DefNum, or 0 for none.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Recallm.Note">
            <summary>An administrative note for staff use.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Recallm.IsDisabled">
            <summary>If true, this recall type will be disabled (there's only one type right now). This is usually used rather than deleting the recall type from the patient because the program must enforce the trigger conditions for all patients.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Recallm.DisableUntilBalance">
            <summary>Default is 0.  If a positive number is entered, then the family balance must be less in order for this recall to show in the recall list.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Recallm.DisableUntilDate">
            <summary>If a date is entered, then this recall will be disabled until that date.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Recallm.Clone">
            <summary>Returns a copy of the Recallm.</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Statementm">
            <summary>Links allergies to patients. Patient portal version</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Statementm.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Statementm.StatementNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Statementm.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Statementm.DateSent">
            <summary>This will always be a valid and reasonable date regardless of whether it's actually been sent yet.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Statementm.DocNum">
            <summary>FK to document.DocNum when a pdf has been archived.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Statementm.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Userm">
            <summary>One username/password for one customer.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Userm.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Userm.UsermNum">
            <summary>Primary key 2.  Just here for compatibility with existing crud.  Always set to 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Userm.UserName">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Userm.Password">
            <summary>Hashed in the same manner as the main program.  UTF-8, md5, base64.  See userods.EncryptPassword().</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Userm.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.RxPatm">
            <summary>One Rx for one patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.RxPatm.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.RxPatm.RxNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.RxPatm.PatNum">
            <summary>FK to patientm.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.RxPatm.RxDate">
            <summary>Date of Rx.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.RxPatm.Drug">
            <summary>Drug name.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.RxPatm.Sig">
            <summary>Directions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.RxPatm.Disp">
            <summary>Amount to dispense.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.RxPatm.Refills">
            <summary>Number of refills.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.RxPatm.ProvNum">
            <summary>FK to providerm.ProvNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.RxPatm.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.ConvertDatabasem">
            <summary>This file contains some useful queries, although it is not automated like the main program.  It is expected that these queries will need to be run manually, and that there will be additional management and tuning.  As we get nearer to the production version, we may decide to automate these queries.</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Appointmentms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Appointmentms.GetOne(System.Int64,System.Int64)">
            <summary>Gets one Appointmentm from the db. </summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Appointmentms.GetAppointmentms(System.Int64,System.Int64,System.DateTime,System.DateTime)">
            <summary>Gets Appointmentm from the db as specified by the date range and provider.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Appointmentms.GetAppointmentms(System.Int64,System.DateTime,System.DateTime)">
            <summary>Gets Appointmentm from the db as specified by the date range.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Appointmentms.GetAppointmentms(System.Int64,System.Int64)">
            <summary>Gets all Appointmentm for a single patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Appointmentms.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.Appointment})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Appointmentms.GetChangedSinceAptNums(System.DateTime,System.DateTime)">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Appointmentms.GetMultApts(System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Appointmentms.UpdateFromChangeList(System.Collections.Generic.List{OpenDentBusiness.Mobile.Appointmentm},System.Int64)">
            <summary>Only run on server for mobile.  Takes the list of changes from the dental office and makes updates to those items in the mobile server db.  Also, make sure to run DeletedObjects.DeleteForMobile().</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Appointmentms.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Patientms">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientms.GetOne(System.Int64,System.Int64)">
            <summary>Gets one Patientm from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientms.GetPatientms(System.Int64,System.String)">
            <summary>Gets Patientms from the db as specified by the search string. Limit to 20 </summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientms.GetPatientmsOfFamily(System.Int64,System.Int64)">
            <summary>Gets Family Members who are patients</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientms.DateToAge(System.DateTime)">
            <summary>Converts a date to an age. If age is over 115, then returns 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientms.GetMultPats(System.Collections.Generic.List{System.Int64})">
            <summary>The values returned are sent to the webserver. Used if GetChanged returns large recordsets.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientms.ConvertListToM(System.Collections.Generic.List{OpenDentBusiness.Patient})">
            <summary>First use GetChangedSince.  Then, use this to convert the list a list of 'm' objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientms.GetPatNumsForDeletion">
            <summary>Gets PatNums of patients whose online password is blank</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientms.UpdateFromChangeList(System.Collections.Generic.List{OpenDentBusiness.Mobile.Patientm},System.Int64)">
            <summary>Takes the list of changes from the dental office and makes updates to those items in the mobile server db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientms.DeleteAll(System.Int64)">
            <summary>used in tandem with Full synch</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Appointmentm">
            <summary>Appointments can show in the Appointments module, or they can be on the unscheduled list.  An appointment object is also used to store the Planned appointment.  The planned appointment never gets scheduled, but instead gets copied.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Appointmentm.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Appointmentm.AptNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Appointmentm.PatNum">
            <summary>FK to patient.PatNum.  The patient that the appointment is for.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Appointmentm.AptStatus">
            <summary>Enum:ApptStatus .</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Appointmentm.Pattern">
            <summary>Time pattern, X for Dr time, / for assist time. Stored in 5 minute increments.  Converted as needed to 10 or 15 minute representations for display.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Appointmentm.Confirmed">
            <summary>FK to definition.DefNum.  This field can also be used to show patient arrived, in chair, etc.  The Category column in the definition table is DefCat.ApptConfirmed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Appointmentm.Op">
            <summary>FK to operatory.OperatoryNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Appointmentm.Note">
            <summary>Note.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Appointmentm.ProvNum">
            <summary>FK to provider.ProvNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Appointmentm.ProvHyg">
            <summary>FK to provider.ProvNum.  Optional.  Only used if a hygienist is assigned to this appt.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Appointmentm.AptDateTime">
            <summary>Appointment Date and time.  If you need just the date or time for an SQL query, you can use DATE(AptDateTime) and TIME(AptDateTime) in your query.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Appointmentm.IsNewPatient">
            <summary>This is the first appoinment this patient has had at this office.  Somewhat automated.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Appointmentm.ProcDescript">
            <summary>A one line summary of all procedures.  Can be used in various reports, Unscheduled list, and Planned appointment tracker.  Not user editable right now, so it doesn't show on the screen.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Appointmentm.ClinicNum">
            <summary>FK to clinic.ClinicNum.  0 if no clinic.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Appointmentm.IsHygiene">
            <summary>Set true if this is a hygiene appt.  The hygiene provider's color will show.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Appointmentm.Clone">
            <summary>Returns a copy of the appointment.</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.Patientm">
            <summary>One row for each patient.  Unlike main program, this does not include deleted patients.  Primary key is first two fields combined.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.PatNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.LName">
            <summary>Last name.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.FName">
            <summary>First name.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.MiddleI">
            <summary>Middle initial or name.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.Preferred">
            <summary>Preferred name, aka nickname.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.PatStatus">
            <summary>Enum:PatientStatus</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.Gender">
            <summary>Enum:PatientGender</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.Position">
            <summary>Enum:PatientPosition Marital status would probably be a better name for this column.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.Birthdate">
            <summary>Age is not stored in the database.  Age is always calculated as needed from birthdate.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.Address">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.Address2">
            <summary>Optional second address line.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.City">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.State">
            <summary>2 Char in USA</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.Zip">
            <summary>Postal code.  For Canadian claims, it must be ANANAN.  No validation gets done except there.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.HmPhone">
            <summary>Home phone. Includes any punctuation</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.WkPhone">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.WirelessPhone">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.Guarantor">
            <summary>FK to patientm.PatNum.  Head of household.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.Age">
            <summary>Derived from Birthdate.  Not in the database table.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.Email">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.AddrNote">
            <summary>Address or phone note.  Will probably limit to first 255 characters of patient.AddrNote.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.ClinicNum">
            <summary>FK to clinic.ClinicNum. Can be zero if not attached to a clinic or no clinics set up.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.InsEst">
            <summary>Insurance Estimate for entire family.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.BalTotal">
            <summary>Total balance for entire family before insurance estimate.  Not the same as the sum of the 4 aging balances because this can be negative.  Only stored with guarantor.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.PreferContactMethod">
            <summary>Enum:ContactMethod</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Patientm.OnlinePassword">
            <summary>If this is blank, then the chart info for this patient will not be uploaded.  If this has a value, then this is the password that a patient must use to access their info online.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientm.Copy">
            <summary>Returns a copy of this Patientm.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientm.GetNameLF">
            <summary>LName, 'Preferred' FName M</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientm.GetNameFL">
            <summary>FName 'Preferred' M LName</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientm.GetNameFLnoPref">
            <summary>FName M LName</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientm.GetNameFirstOrPrefL">
            <summary>FName/Preferred LName</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientm.GetNameFirstOrPrefML">
            <summary>FName/Preferred M. LName</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientm.GetNameFirst">
            <summary>Includes preferred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mobile.Patientm.GetNameFirstOrPreferred">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Prefm.CustomerNum">
            <summary>Primary key 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Prefm.PrefNum">
            <summary>Primary key 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Prefm.PrefmName">
            <summary>The text 'key' in the key/value pairing.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mobile.Prefm.ValueString">
            <summary>The stored value.</summary>
        </member>
        <member name="T:OpenDentBusiness.Mobile.PrefmName">
            <summary>Because this enum is stored in the database as strings rather than as numbers, we can do the order alphabetically and we can change it whenever we want.</summary>
        </member>
        <member name="T:OpenDentBusiness.EmailSaveEvent">
            <summary>Specific ODEvent for when communication to the database is unavailable.</summary>
        </member>
        <member name="E:OpenDentBusiness.EmailSaveEvent.Fired">
            <summary>This event will get fired whenever communication to the database is attempted and fails.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailSaveEvent.Fire(CodeBase.ODEventArgs)">
            <summary>Call this method only when communication to the database is not possible.</summary>
        </member>
        <member name="T:OpenDentBusiness.CommItemSaveEvent">
            <summary>Specific ODEvent for when communication to the database is unavailable.</summary>
        </member>
        <member name="E:OpenDentBusiness.CommItemSaveEvent.Fired">
            <summary>This event will get fired whenever communication to the database is attempted and fails.</summary>
        </member>
        <member name="M:OpenDentBusiness.CommItemSaveEvent.Fire(CodeBase.ODEventArgs)">
            <summary>Call this method only when communication to the database is not possible.</summary>
        </member>
        <member name="T:OpenDentBusiness.BillingEvent">
            <summary></summary>
        </member>
        <member name="E:OpenDentBusiness.BillingEvent.Fired">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.BillingEvent.Fire(CodeBase.ODEventArgs)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ReportComplexEvent">
            <summary></summary>
        </member>
        <member name="E:OpenDentBusiness.ReportComplexEvent.Fired">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ReportComplexEvent.Fire(CodeBase.ODEventArgs)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.WikiSaveEvent">
            <summary>Specific ODEvent for when communication to the database is unavailable.</summary>
        </member>
        <member name="E:OpenDentBusiness.WikiSaveEvent.Fired">
            <summary>This event will get fired whenever communication to the database is attempted and fails.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiSaveEvent.Fire(CodeBase.ODEventArgs)">
            <summary>Call this method only when communication to the database is not possible.</summary>
        </member>
        <member name="T:OpenDentBusiness.DataConnectionEvent">
            <summary>Specific ODEvent for when communication to the database is unavailable.</summary>
        </member>
        <member name="E:OpenDentBusiness.DataConnectionEvent.Fired">
            <summary>This event will get fired whenever communication to the database is attempted and fails.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnectionEvent.Fire(CodeBase.ODEventArgs)">
            <summary>Call this method only when communication to the database is not possible.</summary>
        </member>
        <member name="T:OpenDentBusiness.AccountingAutoPays">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AccountingAutoPays.listt">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AccountingAutoPays.RefreshCache">
            <summary>Gets a list of all AccountingAutoPays.</summary>
        </member>
        <member name="M:OpenDentBusiness.AccountingAutoPays.ClearCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AccountingAutoPays.Insert(OpenDentBusiness.AccountingAutoPay)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AccountingAutoPays.GetPickListDesc(OpenDentBusiness.AccountingAutoPay)">
            <summary>Converts the comma delimited list of AccountNums into full descriptions separated by carriage returns.</summary>
        </member>
        <member name="M:OpenDentBusiness.AccountingAutoPays.GetPickListAccounts(OpenDentBusiness.AccountingAutoPay)">
            <summary>Converts the comma delimited list of AccountNums into an array of AccountNums.</summary>
        </member>
        <member name="M:OpenDentBusiness.AccountingAutoPays.GetForPayType(System.Int64)">
            <summary>Loops through the AList to find one with the specified payType (defNum).  If none is found, then it returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.AccountingAutoPays.SaveList(System.Collections.Generic.List{OpenDentBusiness.AccountingAutoPay})">
            <summary>Saves the list of accountingAutoPays to the database.  Deletes all existing ones first.</summary>
        </member>
        <member name="P:OpenDentBusiness.Accounts.ListLong">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.Accounts.ListShort">
            <summary>Used for display. Does not include inactive</summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.Insert(OpenDentBusiness.Account)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.Update(OpenDentBusiness.Account)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.GetDescript(System.Int64)">
            <summary>Loops through listLong to find a description for the specified account.  0 returns an empty string.</summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.GetAccount(System.Int64)">
            <summary>Loops through listLong to find an account.  Will return null if accountNum is 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.Delete(OpenDentBusiness.Account)">
            <summary>Throws exception if account is in use.</summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.DebitIsPos(OpenDentBusiness.AccountType)">
            <summary>Used to test the sign on debits and credits for the five different account types</summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.GetBalance(System.Int64,OpenDentBusiness.AccountType)">
            <summary>Gets the balance of an account directly from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.DepositsLinked">
            <summary>Checks the loaded prefs to see if user has setup deposit linking.  Returns true if so.</summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.PaymentsLinked">
            <summary>Checks the loaded prefs and accountingAutoPays to see if user has setup auto pay linking.  Returns true if so.</summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.GetDepositAccounts">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.GetDepositAccountsQB">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.GetIncomeAccountsQB">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.GetFullList(System.DateTime,System.Boolean)">
            <summary>Gets the full list to display in the Chart of Accounts, including balances.</summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.GetGeneralLedger(System.DateTime,System.DateTime)">
            <summary>Gets the full GeneralLedger list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.GetAssetTable(System.DateTime)">
            <summary>Gets the full list to display in the Chart of Accounts, including balances.</summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.GetLiabilityTable(System.DateTime)">
            <summary>Gets the full list to display in the Chart of Accounts, including balances.</summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.GetEquityTable(System.DateTime)">
            <summary>Gets the full list to display in the Chart of Accounts, including balances.</summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.RetainedEarningsAuto(System.Object)">
            <Summary>Gets sum of all income-expenses for all previous years. asOfDate could be any date</Summary>
        </member>
        <member name="M:OpenDentBusiness.Accounts.NetIncomeThisYear(System.Object)">
            <Summary>asOfDate is typically 12/31/...  </Summary>
        </member>
        <member name="T:OpenDentBusiness.Adjustments">
            <summary>Handles database commands related to the adjustment table in the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Adjustments.Refresh(System.Int64)">
            <summary>Gets all adjustments for a single patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Adjustments.GetOne(System.Int64)">
            <summary>Gets one adjustment from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Adjustments.GetAdjustForPats(System.Collections.Generic.List{System.Int64})">
            <summary>Gets all negative or positive adjustments for a patient depending on how isPositive is set.</summary>
        </member>
        <member name="M:OpenDentBusiness.Adjustments.Update(OpenDentBusiness.Adjustment)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Adjustments.Insert(OpenDentBusiness.Adjustment)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Adjustments.Delete(OpenDentBusiness.Adjustment)">
            <summary>This will soon be eliminated or changed to only allow deleting on same day as EntryDate.</summary>
        </member>
        <member name="M:OpenDentBusiness.Adjustments.GetForProc(System.Int64,OpenDentBusiness.Adjustment[])">
            <summary>Loops through the supplied list of adjustments and returns an ArrayList of adjustments for the given proc.</summary>
        </member>
        <member name="M:OpenDentBusiness.Adjustments.GetTotForProc(System.Int64)">
            <summary>Sums all adjustments for a proc then returns that sum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Adjustments.CreateAdjustmentForDiscount(OpenDentBusiness.Procedure)">
            <summary>Creates a new discount adjustment for the given procedure.</summary>
        </member>
        <member name="M:OpenDentBusiness.Adjustments.DeleteForProcedure(System.Int64)">
            <summary>Deletes all adjustments for a procedure</summary>
        </member>
        <member name="M:OpenDentBusiness.Adjustments.GetAdjustForPatByType(System.Int64,System.Int64)">
            <summary>Returns a DataTable of adjustments of a given adjustment type and for a given pat</summary>
        </member>
        <member name="M:OpenDentBusiness.Adjustments.GetTotForProc(System.Int64,OpenDentBusiness.Adjustment[],System.Int64)">
            <summary>Used from ContrAccount and ProcEdit to display and calculate adjustments attached to procs.</summary>
        </member>
        <member name="M:OpenDentBusiness.Adjustments.UndoFinanceOrBillingCharges(System.DateTime,System.Boolean)">
            <summary>Returns the number of finance or billing charges deleted.</summary>
        </member>
        <member name="T:OpenDentBusiness.AppointmentRules">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentRules.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentRules.Insert(OpenDentBusiness.AppointmentRule)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentRules.Update(OpenDentBusiness.AppointmentRule)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentRules.Delete(OpenDentBusiness.AppointmentRule)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentRules.IsBlocked(System.Collections.ArrayList)">
            <summary>Whenever an appointment is scheduled, the procedures which would be double booked are calculated.  In this method, those procedures are checked to see if the double booking should be blocked.  If double booking is indeed blocked, then a separate function will tell the user which category.</summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentRules.GetBlockedDescription(System.Collections.ArrayList)">
            <summary>Whenever an appointment is blocked from being double booked, this method will tell the user which category.</summary>
        </member>
        <member name="T:OpenDentBusiness.ApptViewItems">
            <summary>Handles database commands related to the apptviewitem table in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptViewItems.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptViewItems.Insert(OpenDentBusiness.ApptViewItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptViewItems.Update(OpenDentBusiness.ApptViewItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptViewItems.Delete(OpenDentBusiness.ApptViewItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptViewItems.DeleteAllForView(OpenDentBusiness.ApptView)">
            <summary>Deletes all apptviewitems for the current apptView.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptViewItems.GetOpsForView(System.Int64)">
            <summary>Gets all operatories for the appointment view passed in.  Pass 0 to get all ops associated with the 'none' view.
            Only returns operatories that are associated to the currently selected clinic.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptViewItems.GetProvsForView(System.Int64)">
            <summary>Gets all providers for the appointment view passed in.  Pass 0 to get all provs associated with the 'none' view.</summary>
        </member>
        <member name="T:OpenDentBusiness.ApptViews">
            <summary>Handles database commands related to the apptview table in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptViews.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptViews.Insert(OpenDentBusiness.ApptView)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptViews.Update(OpenDentBusiness.ApptView)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptViews.Delete(OpenDentBusiness.ApptView)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ApptViews.GetApptView(System.Int64)">
            <summary>Gets an ApptView from the cache.  If apptviewnum is not valid, then it returns null.</summary>
        </member>
        <member name="T:OpenDentBusiness.AutoCodeConds">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeConds.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeConds.ClearCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeConds.Insert(OpenDentBusiness.AutoCodeCond)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeConds.Update(OpenDentBusiness.AutoCodeCond)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeConds.Delete(OpenDentBusiness.AutoCodeCond)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeConds.DeleteForItemNum(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeConds.GetListForItem(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeConds.IsSurf(OpenDentBusiness.AutoCondition)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeConds.ConditionIsMet(OpenDentBusiness.AutoCondition,System.String,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.AutoCodeItems">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeItems.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeItems.ClearCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeItems.Insert(OpenDentBusiness.AutoCodeItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeItems.Update(OpenDentBusiness.AutoCodeItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeItems.Delete(OpenDentBusiness.AutoCodeItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeItems.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeItems.GetListForCode(System.Int64)">
            <summary>Gets from cache.  No call to db.</summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeItems.GetCodeNum(System.Int64,System.String,System.String,System.Boolean,System.Int64,System.Int32)">
            <summary>Only called from ContrChart.listProcButtons_Click.  Called once for each tooth selected and for each autocode item attached to the button.</summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeItems.VerifyCode(System.Int64,System.String,System.String,System.Boolean,System.Int64,System.Int32,OpenDentBusiness.AutoCode@)">
            <summary>Only called when closing the procedure edit window. Usually returns the supplied CodeNum, unless a better match is found.</summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodeItems.ShouldPromptForCodeChange(OpenDentBusiness.Procedure,OpenDentBusiness.ProcedureCode,OpenDentBusiness.Patient,System.Int32,System.Collections.Generic.List{OpenDentBusiness.ClaimProc},System.Int64@)">
            <summary>Checks inputs and determines if user should be prompted to pick a more applicable procedure code.</summary>
            <param name="verifyCode">This is the recommended code based on input. If it matches procCode return value will be false.</param>
        </member>
        <member name="T:OpenDentBusiness.AutoCodes">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodes.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodes.ClearCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodes.Insert(OpenDentBusiness.AutoCode)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodes.Update(OpenDentBusiness.AutoCode)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodes.Delete(OpenDentBusiness.AutoCode)">
            <summary>Surround with try/catch.  Currently only called from FormAutoCode and FormAutoCodeEdit.</summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodes.GetNumFromDescript(System.String)">
            <summary>Used in ProcButtons.SetToDefault.  Returns 0 if the given autocode does not exist.</summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodes.SetToDefault">
            <summary>Deletes all current autocodes and then adds the default autocodes.  Procedure codes must have already been entered or they cannot be added as an autocode.</summary>
        </member>
        <member name="M:OpenDentBusiness.AutoCodes.SetToDefaultCanada">
            <summary>Deletes all current autocodes and then adds the default autocodes.  Procedure codes must have already been entered or they cannot be added as an autocode.</summary>
        </member>
        <member name="P:OpenDentBusiness.AutoNoteControls.Listt">
            <summary>A list of all the Prompts.  Caching could be handled better for fewer refreshes.</summary>
        </member>
        <member name="M:OpenDentBusiness.AutoNoteControls.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoNoteControls.GetByDescript(System.String)">
            <summary>Will return null if can't match.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoNotes.Listt">
            <summary>A list of all Auto Notes.  Caching could be handled better for fewer refreshes.</summary>
        </member>
        <member name="M:OpenDentBusiness.AutoNotes.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoNotes.Insert(OpenDentBusiness.AutoNote)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoNotes.Update(OpenDentBusiness.AutoNote)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AutoNotes.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Benefits">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.Refresh(System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Collections.Generic.List{OpenDentBusiness.InsSub})">
            <summary>Gets a list of all benefits for a given list of patplans for one patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.RefreshForPlan(System.Int64,System.Int64)">
            <summary>Used in the PlanEdit and FormClaimProc to get a list of benefits for specified plan and patPlan.  patPlanNum can be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.Update(OpenDentBusiness.Benefit)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.Insert(OpenDentBusiness.Benefit)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.Delete(OpenDentBusiness.Benefit)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.GetAnnualMaxDisplay(System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Int64,System.Int64,System.Boolean)">
            <summary>Only for display purposes rather than any calculations.  Gets an annual max from the supplied list of benefits.  Ignores benefits that do not match either the planNum or the patPlanNum.  Because it starts at the top of the benefit list, it will get the most general limitation first.  Returns -1 if none found.  Usually, set isFam to false unless we are specifically interested in that value.</summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.GetDeductGeneralDisplay(System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Int64,System.Int64,OpenDentBusiness.BenefitCoverageLevel)">
            <summary>Only for display purposes rather than any calculations.  Gets a general deductible from the supplied list of benefits.  Ignores benefits that do not match either the planNum or the patPlanNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.GetDeductibleByCode(System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Int64,System.Int64,System.DateTime,System.String,System.Collections.Generic.List{OpenDentBusiness.ClaimProcHist},System.Collections.Generic.List{OpenDentBusiness.ClaimProcHist},OpenDentBusiness.InsPlan,System.Int64)">
            <summary>Used only in ClaimProcs.ComputeBaseEst.  Gets a deductible amount from the supplied list of benefits.  Ignores benefits that do not match either the planNum or the patPlanNum.  It figures out how much was already used and reduces the returned value by that amount.  Both individual and family deductibles will reduce the returned value independently.  Works for individual procs, categories, and general.</summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.GetLimitationByCode(System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Int64,System.Int64,System.DateTime,System.String,System.Collections.Generic.List{OpenDentBusiness.ClaimProcHist},System.Collections.Generic.List{OpenDentBusiness.ClaimProcHist},OpenDentBusiness.InsPlan,System.Int64,System.String@,System.Double,System.Int32,System.Int64,System.Double)">
            <summary>Used only in ClaimProcs.ComputeBaseEst.  Calculates the most specific limitation for the specified code.  
            This is usually an annual max, ortho max, or fluoride limitation (only if age match).  
            Ignores benefits that do not match either the planNum or the patPlanNum.  
            It figures out how much was already used and reduces the returned value by that amount.  
            Both individual and family limitations will reduce the returned value independently.  
            Works for individual procs, categories, and general.  Also outputs a string description of the limitation.  
            There don't seem to be any situations where multiple limitations would each partially reduce coverage for a single code, other than ind/fam.  
            The returned value will be the original insEstTotal passed in unless there was some limitation that reduced it.
            Considers InsEstTotalOverride when dynamically writing the EstimateNote.</summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.IsCodeInGeneralSpan(System.String)">
            <summary>Returns true if the passed in code is within the "General" insurance coverage category.</summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.LimitationExistsNotGeneral(System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Int64,System.Int64,System.String)">
            <summary>Only used from InsPlans.GetInsUsedDisplay.  If a procedure is handled by some limitation other than a general annual max, then we don't want it to count towards the annual max.</summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.GetPercent(System.String,System.String,System.Int64,System.Int64,System.Collections.Generic.List{OpenDentBusiness.Benefit})">
            <summary>Used from ClaimProc.ComputeBaseEst and in sheet output. This is a low level function to get the percent to store in a claimproc.  It does not consider any percentOverride.  Always returns a number between 0 and 100.  Handles general, category, or procedure level.  Does not handle pat vs family coveragelevel.  Does handle patient override by using patplan.  Does not need to be aware of procedure history or loop history.</summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.IsExcluded(System.String,System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Int64,System.Int64)">
            <summary>Only used from ClaimProc.ComputeBaseEst. This is a low level function to determine if a given procedure is completely excluded from coverage.  It does not consider any dates of service or history.</summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.UpdateList(System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Collections.Generic.List{OpenDentBusiness.Benefit})">
            <summary>Used in FormInsPlan to sych database with changes user made to the benefit list for a plan.  Must supply an old list for comparison.  Only the differences are saved.</summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.GetDisplayMatrix(System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Collections.Generic.List{OpenDentBusiness.InsSub})">
            <summary>Used in family module display to get a list of benefits.  The main purpose of this function is to group similar benefits for each plan on the same row, making it easier to display in a simple grid.  Supply a list of all benefits for the patient, and the patPlans for the patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.DeleteForPlan(System.Int64)">
            <summary>Deletes all benefits for a plan from the database.  Only used in FormInsPlan when picking a plan from the list.  Need to clear out benefits so that they won't be picked up when choosing benefits for all.</summary>
        </member>
        <member name="M:OpenDentBusiness.Benefits.GetFrequencyDisplay(OpenDentBusiness.FrequencyType,System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Int64)">
            <summary>Get the string for displaying the frequence for the specified type for the specified plan (primary, secondary).</summary>
        </member>
        <member name="T:OpenDentBusiness.CanadianNetworks">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CanadianNetworks.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CanadianNetworks.Insert(OpenDentBusiness.CanadianNetwork)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CanadianNetworks.Update(OpenDentBusiness.CanadianNetwork)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CanadianNetworks.Delete(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CanadianNetworks.GetNetwork(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Carriers">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.Carriers.HList">
            <summary>A hashtable of all carriers.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.RefreshCache">
            <summary>Carriers are not refreshed as local data, but are refreshed as needed. A full refresh is frequently triggered if a carrierNum cannot be found in the HList.  Important retrieval is done directly from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.GetBigList(System.Boolean,System.Boolean,System.String,System.String)">
            <summary>Used to get a list of carriers to display in the FormCarriers window.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.Update(OpenDentBusiness.Carrier)">
            <summary>Surround with try/catch.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.Insert(OpenDentBusiness.Carrier)">
            <summary>Surround with try/catch if possibly adding a Canadian carrier.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.Delete(OpenDentBusiness.Carrier)">
            <summary>Surround with try/catch.  If there are any dependencies, then this will throw an exception.  This is currently only called from FormCarrierEdit.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.DependentPlans(OpenDentBusiness.Carrier)">
            <summary>Returns a list of insplans that are dependent on the Cur carrier. Used to display in carrier edit.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.GetName(System.Int64)">
            <summary>Gets the name of a carrier based on the carrierNum.  This also refreshes the list if necessary, so it will work even if the list has not been refreshed recently.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.GetCarrier(System.Int64)">
            <summary>Gets the specified carrier from Cache. This also refreshes the list if necessary, so it will work even if the list has not been refreshed recently.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.GetIndentical(OpenDentBusiness.Carrier,System.Int64)">
            <summary>Primarily used when user clicks OK from the InsPlan window.  Gets a carrierNum from the database based on the other supplied carrier
            data.  Sets the CarrierNum accordingly. If there is no matching carrier, then a new carrier is created.  The end result is a valid carrierNum
            to use.  No need to pass in userNum, it's set before remoting role check and passed to the server if necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.Compare(OpenDentBusiness.Carrier,OpenDentBusiness.Carrier)">
            <summary>Returns true if all fields for one carrier match all fields for another carrier.  Returns false if one of the carriers is null or any of the fields don't match.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.GetSimilarNames(System.String)">
            <summary>Returns an arraylist of Carriers with names similar to the supplied string.  Used in dropdown list from carrier field for faster entry.  There is a small chance that the list will not be completely refreshed when this is run, but it won't really matter if one carrier doesn't show in dropdown.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.Combine(System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>Surround with try/catch Combines all the given carriers into one. The carrier that will be used as the basis of the combination is specified in the pickedCarrier argument. Updates insplan, then deletes all the other carriers.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.GetCarriers(System.Collections.Generic.List{System.Int64})">
            <summary>Used in the FormCarrierCombine window.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.ElectIdInUse(System.String)">
            <summary>Used in FormInsPlan to check whether another carrier is already using this id.  That way, it won't tell the user that this might be an invalid id.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.GetByElectId(System.String)">
            <summary>Used from insplan window when requesting benefits.  Gets carrier based on electID.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.GetByNameAndPhone(System.String,System.String,System.Boolean)">
            <summary>If carrierName is blank (empty string) this will throw an ApplicationException.  If a carrier is not found with the exact name,
            including capitalization, a new carrier is created, inserted in the database, and returned.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.GetByNameAndPhoneNoInsert(System.String,System.String)">
            <summary>Returns null if no match is found. You are allowed to pass in nulls.</summary>
        </member>
        <member name="M:OpenDentBusiness.Carriers.GetByNameAndTin(System.String,System.String)">
            <summary>The carrierName is case insensitive.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimAttaches">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimCondCodeLogs.GetByClaimNum(System.Int64)">
            <summary>Will be null if this claim has no condition codes.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimFormItems">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimFormItems.RefreshCache">
            <summary>Gets all claimformitems for all claimforms.  Items for individual claimforms can later be extracted as needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimFormItems.Insert(OpenDentBusiness.ClaimFormItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimFormItems.Update(OpenDentBusiness.ClaimFormItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimFormItems.Delete(OpenDentBusiness.ClaimFormItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimFormItems.GetListForForm(System.Int64)">
            <summary>Gets all claimformitems for the specified claimform from the preloaded List.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimForms">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.ClaimForms.ListLong">
            <summary>List of all claim forms.</summary>
        </member>
        <member name="P:OpenDentBusiness.ClaimForms.ListShort">
            <summary>List of all claim forms except those marked as hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimForms.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimForms.Insert(OpenDentBusiness.ClaimForm)">
            <summary>Inserts this claimform into database and retrieves the new primary key.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimForms.Update(OpenDentBusiness.ClaimForm)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimForms.Delete(OpenDentBusiness.ClaimForm)">
            <summary> Called when cancelling out of creating a new claimform, and from the claimform window when clicking delete. Returns true if successful or false if dependencies found.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimForms.UpdateByUniqueID(OpenDentBusiness.ClaimForm)">
            <summary>Updates all claimforms with this unique id including all attached items.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimForms.GetClaimForm(System.Int64)">
            <summary>Returns the claim form specified by the given claimFormNum</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimForms.GetClaimFormByUniqueId(System.String)">
            <summary>Returns the claim form specified by the given claimFormNum</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimForms.Reassign(System.Int64,System.Int64)">
            <summary>Returns number of insplans affected.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimPayments">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimPayments.GetForClaim(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimPayments.GetForDateRange(System.DateTime,System.DateTime,System.Int64,System.Int64)">
            <summary>Gets all claimpayments of the specified claimpayment type, within the specified date range and from the specified clinic. 
            0 for clinics means all clinics, 0 for claimpaytype means all types.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimPayments.GetForDeposit(System.DateTime,System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>Gets all unattached claimpayments for display in a new deposit.  Excludes payments before dateStart and partials.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimPayments.GetForDeposit(System.Int64)">
            <summary>Gets all claimpayments for one specific deposit.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimPayments.GetOne(System.Int64)">
            <summary>Gets one claimpayment directly from database.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimPayments.HasPartialPayments">
            <summary>Returns true if there is a partial batch insurance payment or if there are any claimprocs with status Received that have InsPayAmts but are not associated to a claim payment.  Used to warn users that reports will be inaccurate until insurance payments are finalized.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimPayments.Insert(OpenDentBusiness.ClaimPayment)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimPayments.Update(OpenDentBusiness.ClaimPayment)">
            <summary>If trying to change the amount and attached to a deposit, it will throw an error, so surround with try catch.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimPayments.Delete(OpenDentBusiness.ClaimPayment)">
            <summary>Surround by try catch, because it will throw an exception if trying to delete a claimpayment attached to a deposit or if there are eobs attached.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimPayments.GetCountAttachedToDeposit(System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>Returns the number of payments from the passed in claimpaymentnums that are attached to a deposit other than IgnoreDepositNum.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimProcs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.RefreshFam(System.Int64)">
            <summary>When using family deduct or max, this gets all claimprocs for the given plan.  This info is needed to compute used and pending insurance.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.RefreshForClaim(System.Int64)">
            <summary>Gets a list of ClaimProcs for one claim.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.RefreshForTP(System.Int64)">
            <summary>Gets a list of ClaimProcs with status of estimate.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.RefreshForProc(System.Int64)">
            <summary>Gets a list of ClaimProcs for one proc.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.Insert(OpenDentBusiness.ClaimProc)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.Update(OpenDentBusiness.ClaimProc)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.UpdateProcDate(System.Collections.Generic.List{System.Int64},System.DateTime)">
            <summary>Updates the ProcDate on the ClaimProcs for a given list of ProcNums.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.Delete(OpenDentBusiness.ClaimProc)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.DeleteAfterValidating(OpenDentBusiness.ClaimProc)">
            <summary>Surround with try/catch.  If there are any dependencies, then this will throw an exception.  This is currently only called from FormClaimProc.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.CreateEst(OpenDentBusiness.ClaimProc,OpenDentBusiness.Procedure,OpenDentBusiness.InsPlan,OpenDentBusiness.InsSub)">
            <summary>Used when creating a claim to create any missing claimProcs. Also used in FormProcEdit if click button to add Estimate.  Inserts it into db. It will still be altered after this to fill in the fields that actually attach it to the claim.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.Synch(System.Collections.Generic.List{OpenDentBusiness.ClaimProc}@,System.Collections.Generic.List{OpenDentBusiness.ClaimProc})">
            <summary>This compares the two lists and saves all the changes to the database.  It also removes all the items marked doDelete.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetByTotForPats(System.Collections.Generic.List{System.Int64})">
            <summary>Gets all as total insurance payments for a family.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetPatPortion(OpenDentBusiness.Procedure,System.Collections.Generic.List{OpenDentBusiness.ClaimProc},System.Collections.Generic.List{OpenDentBusiness.Adjustment})">
            <summary>Gets the patient portion due of this procedure.  It is many times different than the proc fee.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetBundlesForPayPlan(System.Int64)">
            <summary>Gets all ClaimProc bundles for the given PayPlanNum. Bundles claimprocs by Date and then by ClaimPaymentNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetForSendClaim(System.Collections.Generic.List{OpenDentBusiness.ClaimProc},System.Int64)">
            <summary>When sending or printing a claim, this converts the supplied list into a list of ClaimProcs that need to be sent.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetForProc(System.Collections.Generic.List{OpenDentBusiness.ClaimProc},System.Int64)">
            <summary>Gets all ClaimProcs for the current Procedure. The List must be all ClaimProcs for this patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetForProcs(System.Collections.Generic.List{System.Int64})">
            <summary>Gets all ClaimProcs for the current procedure.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetForProcsWithOrdinal(System.Collections.Generic.List{System.Int64},System.Int32)">
            <summary> </summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetEstimate(System.Collections.Generic.List{OpenDentBusiness.ClaimProc},System.Int64,System.Int64,System.Int64)">
            <summary>Used in TP module to get one estimate. The List must be all ClaimProcs for this patient. If estimate can't be found, then return null.  The procedure is always status TP, so there shouldn't be more than one estimate for one plan.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.ProcDisplayInsEst(OpenDentBusiness.ClaimProc[],System.Int64)">
            <summary>Used once in Account.  The insurance estimate based on all claimprocs with this procNum that are attached to claims. Includes status of NotReceived,Received, and Supplemental. The list can be all ClaimProcs for patient, or just those for this procedure.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.ProcEstNotReceived(System.Collections.Generic.List{OpenDentBusiness.ClaimProc},System.Int64)">
            <summary>Used in Account and in PaySplitEdit. The insurance estimate based on all claimprocs with this procNum, but only for those claimprocs that are not received yet. The list can be all ClaimProcs for patient, or just those for this procedure.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.ProcInsPay(System.Collections.Generic.List{OpenDentBusiness.ClaimProc},System.Int64)">
            <summary>Used in PaySplitEdit. The insurance amount paid based on all claimprocs with this procNum. The list can be all ClaimProcs for patient, or just those for this procedure.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.ProcWriteoff(System.Collections.Generic.List{OpenDentBusiness.ClaimProc},System.Int64)">
            <summary>Used in PaySplitEdit. The insurance writeoff based on all claimprocs with this procNum. The list can be all ClaimProcs for patient, or just those for this procedure.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.ProcInsPayPri(System.Collections.Generic.List{OpenDentBusiness.ClaimProc},System.Int64,System.Int64)">
            <summary>Used in E-claims to get the amount paid by primary. The insurance amount paid by other subNums based on all claimprocs with this procNum. The list can be all ClaimProcs for patient, or just those for this procedure.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetDatePaid(System.Collections.Generic.List{OpenDentBusiness.ClaimProc},System.Int64,System.Int64)">
            <summary>Used in E-claims to get the most recent date paid (by primary?). The insurance amount paid by the planNum based on all claimprocs with this procNum. The list can be all ClaimProcs for patient, or just those for this procedure.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.ClaimByTotalOnly(OpenDentBusiness.ClaimProc[],System.Int64)">
            <summary>Used once in Account on the Claim line.  The amount paid on a claim only by total, not including by procedure.  The list can be all ClaimProcs for patient, or just those for this claim.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.ClaimWriteoffByTotalOnly(OpenDentBusiness.ClaimProc[],System.Int64)">
            <summary>Used once in Account on the Claim line.  The writeoff amount on a claim only by total, not including by procedure.  The list can be all ClaimProcs for patient, or just those for this claim.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.SetForClaimOld(System.Int64,System.Int64,System.DateTime,System.Boolean)">
            <summary>Attaches or detaches claimprocs from the specified claimPayment. Updates all claimprocs on a claim with one query.  It also updates their DateCP's to match the claimpayment date.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.AttachToPayment(System.Int64,System.Int64,System.DateTime,System.Int32)">
            <summary>Attaches claimprocs to the specified claimPayment. Updates all claimprocs on a claim with one query.  It also updates their DateCP's to match the claimpayment date.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.DetachFromPayment(System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>Detaches claimprocs from the specified claimPayment. Updates all claimprocs on a list of claims with one query.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.SynchDateCP(System.Int64,System.DateTime)">
            <summary>Synchs all claimproc DateCP's attached to the claim payment.  Used when an insurance check's date is changed.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.SetInsEstTotalOverride(System.Int64,System.Int64,System.Double,System.Collections.Generic.List{OpenDentBusiness.ClaimProc})">
            <summary>After entering estimates from a preauth, this routine is called for each proc to override the ins est.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.ComputeBaseEst(OpenDentBusiness.ClaimProc,OpenDentBusiness.Procedure,OpenDentBusiness.InsPlan,System.Int64,System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Collections.Generic.List{OpenDentBusiness.ClaimProcHist},System.Collections.Generic.List{OpenDentBusiness.ClaimProcHist},System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Double,System.Double,System.Int32,System.Double)">
            <summary>Calculates the Base estimate, InsEstTotal, and all the other insurance numbers for a single claimproc.  This is is not done on the fly.  Use Procedure.GetEst to later retrieve the estimate. This function replaces all of the upper estimating logic that was within FormClaimProc.  BaseEst=((fee or allowedOverride)-Copay) x (percentage or percentOverride).  The calling class must have already created the claimProc, and this function simply updates the BaseEst field of that claimproc. pst.Tot not used.  For Estimate and CapEstimate, all the estimate fields will be recalculated except the overrides.  histList and loopList can be null.  If so, then deductible and annual max will not be recalculated.  histList and loopList may only make sense in TP module and claimEdit.  loopList contains all claimprocs in the current list (TP or claim) that come before this procedure.  PaidOtherInsTot should only contain sum of InsEstTotal/Override, or paid, depending on the status.  PaidOtherInsBase also includes actual payments.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetPaidOtherInsTotal(OpenDentBusiness.ClaimProc,System.Collections.Generic.List{OpenDentBusiness.PatPlan})">
            <summary>Only useful if secondary ins or greater.  For one procedure, it gets the sum of InsEstTotal/Override for other insurances with lower ordinals.  Either estimates or actual payments.  Will return 0 if ordinal of this claimproc is 1.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetPaidOtherInsBaseEst(OpenDentBusiness.ClaimProc,System.Collections.Generic.List{OpenDentBusiness.PatPlan})">
            <summary>Only useful if secondary ins or greater.  For one procedure, it gets the sum of BaseEst for other insurances with lower ordinals.  Either estimates or actual payments.  Will return 0 if ordinal of this claimproc is 1.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetWriteOffOtherIns(OpenDentBusiness.ClaimProc,System.Collections.Generic.List{OpenDentBusiness.PatPlan})">
            <summary>Only useful if secondary ins or greater.  For one procedure, it gets the sum of WriteOffEstimates/Override for other insurances with lower ordinals.  Either estimates or actual writeoffs.  Will return 0 if ordinal of this claimproc is 1.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetInsEstTotal(OpenDentBusiness.ClaimProc)">
            <summary>Simply gets insEstTotal or its override if applicable.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetDedEst(OpenDentBusiness.ClaimProc)">
            <summary>Simply gets dedEst or its override if applicable.  Can return 0, but never -1.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetWriteOffEstimate(OpenDentBusiness.ClaimProc)">
            <summary>Gets either the override or the calculated writeoff estimate.  Or zero if neither.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetWriteOffEstimateDisplay(OpenDentBusiness.ClaimProc)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetDeductibleDisplay(OpenDentBusiness.ClaimProc)">
            <summary>Returns 0 or -1 if no deduct.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetEstimateNotes(System.Int64,System.Collections.Generic.List{OpenDentBusiness.ClaimProc})">
            <summary>Used in TP module.  Gets all estimate notes for this proc.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetHistList(System.Int64,System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Collections.Generic.List{OpenDentBusiness.InsPlan},System.Int64,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.InsSub})">
            <summary>We pass in the benefit list so that we know whether to include family.  We are getting a simplified list of claimprocs.  History of payments and pending payments.  If the patient has multiple insurance, then this info will be for all of their insurance plans.  It runs a separate query for each plan because that's the only way to handle family history.  For some plans, the benefits will indicate entire family, but not for other plans.  And the date ranges can be different as well.   When this list is processed later, it is again filtered, but it can't have missing information.  Use excludeClaimNum=-1 to not exclude a claim.  A claim is excluded if editing from inside that claim.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.GetHistForProc(System.Collections.Generic.List{OpenDentBusiness.ClaimProc},System.Int64,System.Int64)">
            <summary>Used in creation of the loopList.  Used in TP list estimation and in claim creation.  Some of the items in the claimProcList passed in will not have been saved to the database yet.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.SetProvForProc(OpenDentBusiness.Procedure,System.Collections.Generic.List{OpenDentBusiness.ClaimProc})">
            <summary>Does not make call to db unless necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.SetPaymentRow(System.Int64,System.Int64,System.Int32)">
            <summary>For moving rows up and down the batch insurance window.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.SetPaymentRow(System.Collections.Generic.List{System.Int64},System.Int64,System.Collections.Generic.List{System.Int32})">
            <summary>For moving rows up and down the batch insurance window. For each ClaimNum in listClaimNums, the value at the corresponding index in
            listPaymentRows will be set as the PaymentRow. Be sure that listClaimNums and listPaymentRows have the same number of items.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.AttachAllOutstandingToPayment(System.Int64)">
            <summary>Attaches all claimprocs that have an InsPayAmt entered to the specified ClaimPayment, and then returns the sum amount of all the attached payments.  The claimprocs must be currently unattached.  Used from FormClaimEdit when user is not doing the batch entry.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProcs.IsAttachedToDifferentClaim(System.Int64,System.Collections.Generic.List{OpenDentBusiness.ClaimProc})">
            <summary>Pass in a cached or potentially "stale" list of claim procs and this method will check the ClaimNum against the num stored in the database to make sure they still match.  Returns true if any of the claim procs are not pointing to the same claim.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimProcHist">
            <summary>During the ClaimProc.ComputeBaseEst() and related sections, this holds historical payment information for one procedure or an adjustment to insurance benefits from patplan.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcHist.Amount">
            <summary>Insurance paid or est, depending on the status.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcHist.Deduct">
            <summary>Deductible paid or est.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcHist.PatNum">
            <summary>Because a list can store info for an entire family.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcHist.PlanNum">
            <summary>Because a list can store info about multiple plans.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcHist.ClaimNum">
            <summary>So that we can exclude history from the claim that we are in.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcHist.Status">
            <summary>Only 4 statuses get used anyway.  This helps us filter the pending items sometimes.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcHist.InsSubNum">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcHist.ProcNum">
            <summary>This is needed to filter out primary histList entries on secondary claims.</summary>
        </member>
        <member name="T:OpenDentBusiness.Claims">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.RefreshByCheckOld(System.Int64,System.Boolean)">
            <summary>Gets claimpaysplits attached to a claimpayment with the associated patient, insplan, and carrier. If showUnattached it also shows all claimpaysplits that have not been attached to a claimpayment. Pass (0,true) to just get all unattached (outstanding) claimpaysplits.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.GetClaimsByCheck(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.GetOutstandingClaims(System.String,System.String,System.String)">
            <summary>Gets all outstanding claims for the batch payment window.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.GetAttachedToPayment(System.Int64)">
            <summary>Gets all 'claims' attached to the claimpayment.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.GetSecondaryClaims(System.Collections.Generic.List{OpenDentBusiness.ClaimPaySplit})">
            <summary>Gets all secondary claims for the related ClaimPaySplits. Called after a payment has been received.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.GetInsPayNotAttachedForFixTool">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.ClaimPaySplitTableToList(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.GetClaim(System.Int64)">
            <summary>Gets the specified claim from the database.  Can be null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.Refresh(System.Int64)">
            <summary>Gets all claims for the specified patient. But without any attachments.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.Insert(OpenDentBusiness.Claim)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.Update(OpenDentBusiness.Claim)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.Delete(OpenDentBusiness.Claim)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.DetachProcsFromClaim(OpenDentBusiness.Claim)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.GetQueueList(System.Int64,System.Int64,System.Int64)">
            <summary>Called from claimsend window and from Claim edit window.  Use 0 to get all waiting claims, or an actual claimnum to get just one claim.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.GetQueueList(System.Collections.Generic.List{System.Int64},System.Int64,System.Int64)">
            <summary>Called from claimsend window and from Claim edit window.  Use an empty listClaimNums to get all waiting claims.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.GetX12TransactionInfo(System.Int64)">
            <summary>Supply claimnums. Called from X12 to begin the sorting process on claims going to one clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.GetX12TransactionInfo(System.Collections.Generic.List{System.Int64})">
            <summary>Supply claimnums. Called from X12 to begin the sorting process on claims going to one clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.SetCanadianClaimSent(System.Int64)">
            <summary>Also sets the DateSent to today.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.GetClaimFromX12(System.String,System.Double,System.DateTime,System.DateTime,System.String,System.String,System.String)">
            <summary>Returns the claim with the specified fee and dates of service.  The returned claim will also either begin with the specified claimIdentifier, or
            will be for the patient name and subscriber ID specified.  If no match was found, or multiple matches were found, then null is returned.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.GetCountReceived(System.Int64)">
            <summary>Returns the number of received claims attached to specified insplan.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.GetCountReceived(System.Int64,System.Int64)">
            <summary>Returns the number of received claims attached to specified subscriber with specified insplan.  Set insSubNum to zero to check all claims for all patients for the plan.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.GetClaimStatusString(System.String)">
            <summary>Returns a human readable ClaimStatus string.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.UpdateClaimIdentifier(System.Int64,System.String)">
            <summary>Updates ClaimIdentifier for specified claim.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.CalculateAndUpdate(System.Collections.Generic.List{OpenDentBusiness.Procedure},System.Collections.Generic.List{OpenDentBusiness.InsPlan},OpenDentBusiness.Claim,System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Int32,System.Collections.Generic.List{OpenDentBusiness.InsSub})">
            <summary>Updates all claimproc estimates and also updates claim totals to db. Must supply procList which includes all procedures that this 
            claim is linked to.  Will also need to refresh afterwards to see the results</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.CreateClaimForRepeatCharge(System.String,System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Collections.Generic.List{OpenDentBusiness.InsPlan},System.Collections.Generic.List{OpenDentBusiness.ClaimProc},OpenDentBusiness.Procedure,System.Collections.Generic.List{OpenDentBusiness.InsSub})">
            <summary>Creates a claim for a newly created repeat charge procedure.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.ClearFkey(System.Int64)">
            <summary>Zeros securitylog FKey column for rows that are using the matching claimNum as FKey and are related to Claim.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Claim table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claims.ClearFkey(System.Collections.Generic.List{System.Int64})">
            <summary>Zeros securitylog FKey column for rows that are using the matching claimNums as FKey and are related to Claim.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Claim table type.</summary>
        </member>
        <member name="T:OpenDentBusiness.X12TransactionItem">
            <summary>This is an odd class.  It holds data for the X12 (4010 only) generation process.  It replaces an older multi-dimensional array, so the names are funny, but helpful to prevent bugs.  Not an actual database table.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimSendQueueItem">
            <summary>Holds a list of claims to show in the claims 'queue' waiting to be sent.  Not an actual database table.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSendQueueItem.ClaimNum">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSendQueueItem.NoSendElect">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSendQueueItem.PatName">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSendQueueItem.ClaimStatus">
            <summary>Single char: U,H,W,P,S,or R.</summary>
            <remarks>U=Unsent, H=Hold until pri received, W=Waiting in queue, P=Probably sent, S=Sent, R=Received.  A(adj) is no longer used.</remarks>
        </member>
        <member name="F:OpenDentBusiness.ClaimSendQueueItem.Carrier">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSendQueueItem.PatNum">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSendQueueItem.ClearinghouseNum">
            <summary>ClearinghouseNum of HQ.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSendQueueItem.ClinicNum">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSendQueueItem.MedType">
            <summary>Enum:EnumClaimMedType 0=Dental, 1=Medical, 2=Institutional</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSendQueueItem.MissingData">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSendQueueItem.Warnings">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSendQueueItem.DateService">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSendQueueItem.IsValid">
            <summary>False by default.  For speed purposes, claims should only be validated once, which is just before they are sent.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSendQueueItem.CustomTracking">
            <summary>Used to save what tracking is used for filtering.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimPaySplit">
            <summary>Holds a list of claims to show in the Claim Pay Edit window.  Not an actual database table.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPaySplit.ClaimNum">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPaySplit.PatName">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPaySplit.PatNum">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPaySplit.Carrier">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPaySplit.DateClaim">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPaySplit.ProvAbbr">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPaySplit.FeeBilled">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPaySplit.InsPayAmt">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPaySplit.ClaimPaymentNum">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPaySplit.PaymentRow">
            <summary>1-based</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPaySplit.ClinicDesc">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Clearinghouses">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouses._hqListt">
            <summary>List of all HQ-level clearinghouses.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouses._hqHList">
            <summary>Key=PayorID. Value=ClearingHouseNum.</summary>
        </member>
        <member name="P:OpenDentBusiness.Clearinghouses.HqHList">
            <summary>key:PayorID, value:ClearingHouseNum</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.GetHqListt">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.GetHqHList">
            <summary>key:PayorID, value:ClearingHouseNum</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.GetAllNonHq">
            <summary>Gets all clearinghouses for the specified clinic.  Returns an empty list if clinicNum=0.  
            Use the cache if you want all HQ Clearinghouses.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.RefreshCacheHq">
            <summary>Refreshes the cache, which only contains HQ-level clearinghouses.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.FillCacheHq(System.Data.DataTable)">
            <summary>Fills the cache, which only contains HQ-level clearinghouses.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.GetHqListShort">
            <summary>Returns a list of clearinghouses that filter out clearinghouses we no longer want to display.
            Only includes HQ-level clearinghouses.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.GetDefaultEligibility">
            <summary>Returns the HQ-level default clearinghouse.  You must manually override using OverrideFields if needed.  If no default present, returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.Insert(OpenDentBusiness.Clearinghouse)">
            <summary>Inserts one clearinghouse into the database.  Use this if you know that your clearinghouse will be inserted at the HQ-level.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.Update(OpenDentBusiness.Clearinghouse)">
            <summary>Updates the clearinghouse in the database that has the same primary key as the passed-in clearinghouse.   
            Use this if you know that your clearinghouse will be updated at the HQ-level, 
            or if you already have a well-defined clinic-level clearinghouse.  For lists of clearinghouses, use the Sync method instead.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.Delete(OpenDentBusiness.Clearinghouse)">
            <summary>Deletes the passed-in Hq clearinghouse for all clinics.  Only pass in clearinghouses with ClinicNum==0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.GetNextBatchNumber(OpenDentBusiness.Clearinghouse)">
            <summary>Gets the last batch number from db for the HQ version of this clearinghouseClin and increments it by one.
            Then saves the new value to db and returns it.  So even if the new value is not used for some reason, it will have already been incremented.
            Remember that LastBatchNumber is never accurate with local data in memory.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.AutomateClearinghouseHqSelection(System.String,OpenDentBusiness.EnumClaimMedType)">
            <summary>Returns the clearinghouseNum for claims for the supplied payorID.  If the payorID was not entered or if no default was set, then 0 is returned.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.GetDefaultDental">
            <summary>Returns the HQ-level default clearinghouse.  You must manually override using OverrideFields if needed.  If no default present, returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.GetClearinghouse(System.Int64)">
            <summary>Gets an HQ clearinghouse from cache.  Will return null if invalid.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.GetForClinic(OpenDentBusiness.Clearinghouse,System.Int64)">
            <summary>Returns the clinic-level clearinghouse for the passed in Clearinghouse.  Usually used in conjunction with ReplaceFields().
            Can return null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.OverrideFields(OpenDentBusiness.Clearinghouse,System.Int64)">
            <summary>Replaces all clinic-level fields in ClearinghouseHq with non-blank fields 
            from the clinic-level clearinghouse for the passed-in clinicNum. Non clinic-level fields are not replaced.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.OverrideFields(OpenDentBusiness.Clearinghouse,OpenDentBusiness.Clearinghouse)">
            <summary>Replaces all clinic-level fields in ClearinghouseHq with non-blank fields in clearinghouseClin.
            Non clinic-level fields are commented out and not replaced.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouses.Sync(System.Collections.Generic.List{OpenDentBusiness.Clearinghouse},System.Collections.Generic.List{OpenDentBusiness.Clearinghouse})">
            <summary>Syncs a given list of clinic-level clearinghouses to a list of old clinic-level clearinghouses.</summary>
        </member>
        <member name="T:OpenDentBusiness.Clinics">
            <summary>There is no cache for clinics.  We assume they will almost never change.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinics._list">
            <summary>Clinics cannot be hidden or deleted, so there is only one list.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinics._clinicNum">
            <summary>Currently active clinic within OpenDental.  Reflects FormOpenDental.ClinicNum</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.LoadClinicNumForUser">
            <summary>Sets Clinics.ClinicNum. Used when logging on to determines what clinic to start with based on user and workstation preferences.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.LogOff">
            <summary>Called when logging user off or closing opendental.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.RefreshCache">
            <summary>Refresh the entire clinics cache.  Orders the clinics by ItemOrder or by Abbr if the pref ClinicListIsAlphabetical is true.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.Insert(OpenDentBusiness.Clinic)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.Update(OpenDentBusiness.Clinic)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.Delete(OpenDentBusiness.Clinic)">
            <summary>Checks dependencies first.  Throws exception if can't delete.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.GetListByRegion(System.Int64)">
            <summary>Returns a list of clinicNums with the specified region's DefNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.GetClinic(System.Int64)">
            <summary>Returns null if clinic not found.  Pulls from cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.GetClinics(System.Collections.Generic.List{System.Int64})">
            <summary>Pulls from cache.  Can contain a null clinic if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.GetClinics">
            <summary>Pulls all clinics from cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.Sync(System.Collections.Generic.List{OpenDentBusiness.Clinic},System.Collections.Generic.List{OpenDentBusiness.Clinic})">
            <summary>Syncs two supplied lists of Clinics.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.GetClinicForRecall(System.Int64)">
            <summary>Returns the patient's clinic based on the recall passed in.
            If the patient is no longer associated to a clinic, 
              returns the clinic associated to the appointment (scheduled or completed) with the largest date.
            Returns null if the patient doesn't have a clinic or if the clinics feature is not activate.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.GetClinicsNoCache">
            <summary>Gets a list of all clinics.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.GetDesc(System.Int64)">
            <summary>Returns an empty string for invalid clinicNums.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.GetAbbr(System.Int64)">
            <summary>Returns an empty string for invalid clinicNums.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.GetPlaceService(System.Int64)">
            <summary>Returns practice default for invalid clinicNums.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.GetIndex(System.Int64)">
            <summary>Clinics cannot be hidden, so if clinicNum=0, this will return -1.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.GetByDesc(System.String)">
            <summary>Used by HL7 when parsing incoming messages.  Returns the ClinicNum of the clinic with Description matching exactly (not case sensitive) the description provided.  Returns 0 if no clinic is found with this exact description.  There may be more than one clinic with the same description, but this will return the first one in the list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.GetForUserod(OpenDentBusiness.Userod)">
            <summary>Returns a list of clinics the curUser has permission to access.  If the user is not restricted, the list will contain all of the clinics.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.IsDefaultClinicProvider(System.Int64)">
            <summary>This method returns true if the given provider is set as the default clinic provider for any clinic.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.IsInsBillingProvider(System.Int64)">
            <summary>This method returns true if the given provider is set as the default ins billing provider for any clinic.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.IsMedicalPracticeOrClinic(System.Int64)">
            <summary>Provide the currently selected clinic num (FormOpenDental.ClinicNum).  If clinics are not enabled, this will return true if the pref
            PracticeIsMedicalOnly is true.  If clinics are enabled, this will return true if either the headquarters 'clinic' is selected
            (FormOpenDental.ClinicNum=0) and the pref PracticeIsMedicalOnly is true OR if the currently selected clinic's IsMedicalOnly flag is true.
            Otherwise returns false.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinics.GetPracticeAsClinicZero">
            <summary>Returns a clinic object with ClinicNum=0, and values filled using practice level preferences. 
             Caution: do not attempt to save the clinic back to the DB. This should be used for read only purposes.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClockEvents">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.Refresh(System.Int64,System.DateTime,System.DateTime,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.GetValidList(System.Int64,System.DateTime,System.DateTime,System.Boolean)">
            <summary>Validates list and throws exceptions.  Returns a list of clock events within the date range for employee.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.GetListForTimeCardManage(System.Int64,System.Int64,System.DateTime,System.DateTime,System.Boolean)">
            <summary>Validates list and throws exceptions.  Returns a list of clock events (not breaks) within the date range for employee. No option for breaks because this is just used in summing for time card report; use GetTimeCardRule instead.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.GetOne(System.Int64)">
            <summary>Gets one ClockEvent from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.Insert(OpenDentBusiness.ClockEvent)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.Update(OpenDentBusiness.ClockEvent)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.GetLastEvent(System.Int64)">
            <summary>Gets directly from the database.  If the last event is a completed break, then it instead grabs the half-finished clock in.  Other possibilities include half-finished clock in which truly was the last event, a finished clock in/out, a half-finished clock out for break, or null for a new employee.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.IsClockedIn(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.ClockIn(System.Int64)">
            <summary>Will throw an exception if already clocked in.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.ClockOut(System.Int64,OpenDentBusiness.TimeClockStatus)">
            <summary>Will throw an exception if already clocked out.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.ClockOutForHQ(System.Int64)">
            <summary>Special logic needs to be run for the phone system when users clock out.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.GetWeekTotal(System.Int64,System.DateTime)">
            <summary>Used in the timecard to track hours worked per week when the week started in a previous time period.  This gets all the hours of the first week before the date listed.  Also adds in any adjustments for that week.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.Format(System.TimeSpan)">
            <summary>-hh:mm or -hh.mm.ss or -hh.mm, depending on the pref.TimeCardsUseDecimalInsteadOfColon and pref.TimeCardShowSeconds.  Blank if zero.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.ParseHours(System.String)">
            <summary>Avoids some funky behavior from TimeSpan.Parse(). Surround in try/catch.
            Valid formats: 
            			hh:mm
            			hh:mm:ss
            			hh:mm:ss.fff 
            TimeSpan.Parse("23:00:00") returns 23 hours.
            TimeSpan.Parse("25:00:00") returns 25 days.
            In this method, '25:00:00' is treated as 25 hours.
             </summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.GetTimeCardManage(System.DateTime,System.DateTime,System.Int64,System.Boolean)">
            <summary>Returns clockevent information for all non-hidden employees.  Used only in the time card manage window.  Set isAll to true to return all employee time cards (used for clinics).</summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.prevWeekRegHoursHelper(System.Int64,System.DateTime,System.DateTime)">
            <summary>Used to sum a partial weeks worth of regular hours from clock events and time spans.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.prevWeekOTHoursHelper(System.Int64,System.DateTime,System.DateTime)">
            <summary>Used to sum a partial weeks worth of OT hours from clock events and time spans.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.prevWeekDiffHoursHelper(System.Int64,System.DateTime,System.DateTime)">
            <summary>Used to sum a partial weeks worth of rate2 hours from clock events.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.weekStartHelper(System.DateTime,System.DateTime)">
            <summary>Returns number of work weeks spanned by dates.  Example: "11-01-2013"(Friday), to "11-14-2013"(Thursday) spans 3 weeks, if the workweek starts on Sunday it would
            return a list containing "10-27-2013"(Sunday),"11-03-2013"(Sunday),and"11-10-2013"(Sunday).  Used to determine which week time adjustments and clock events belong to when totalling timespans.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.GetTimeCardManageCommand(System.DateTime,System.DateTime,System.Boolean)">
            <param name="isPrintReport">Only applicable to ODHQ. If true, will add ADP pay numer and note. The query takes about 9 seconds if this is set top true vs. about 2 seconds if set to false.</param>
        </member>
        <member name="M:OpenDentBusiness.ClockEvents.GetSimpleList(System.Int64,System.DateTime,System.DateTime)">
            <summary>Returns all clock events, of all statuses, for a given employee between the date range (inclusive).</summary>
        </member>
        <member name="T:OpenDentBusiness.Commlogs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Commlogs.Refresh(System.Int64)">
            <summary>Gets all items for the current patient ordered by date.</summary>
        </member>
        <member name="M:OpenDentBusiness.Commlogs.GetOne(System.Int64)">
            <summary>Gets one commlog item from database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Commlogs.GetIncompleteEntry(System.Int64,System.Int64)">
            <summary>If a commlog exists with today's date for the current user and has no stop time, then that commlog is returned so it can be reopened.  Otherwise, return null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Commlogs.Insert(OpenDentBusiness.Commlog)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Commlogs.Update(OpenDentBusiness.Commlog)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Commlogs.Update(OpenDentBusiness.Commlog,OpenDentBusiness.Commlog)">
            <summary>Updates only the changed fields (if any).</summary>
        </member>
        <member name="M:OpenDentBusiness.Commlogs.Delete(OpenDentBusiness.Commlog)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Commlogs.InsertForRecall(System.Int64,OpenDentBusiness.CommItemMode,System.Int32,System.Int64)">
            <summary>Used when printing or emailing recall to make a commlog entry without any display.</summary>
        </member>
        <member name="M:OpenDentBusiness.Commlogs.InsertForRecall(System.Int64,OpenDentBusiness.CommItemMode,System.Int32,System.Int64,OpenDentBusiness.CommItemSource,System.Int64)">
            <summary>Used when printing or emailing recall to make a commlog entry without any display.  
            Set commSource to the corresponding entity that is making this recall.  E.g. Web Sched.
            If the commSource is a 3rd party, set it to ProgramLink and make an overload that accepts the ProgramNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Commlogs.GetTypeAuto(OpenDentBusiness.CommItemTypeAuto)">
            <Summary>Returns a defnum.  If no match, then it returns the first one in the list in that category.</Summary>
        </member>
        <member name="M:OpenDentBusiness.Commlogs.GetDeleteApptCommlogMessage(System.String,OpenDentBusiness.ApptStatus)">
            <summary>Returns the message used to ask if the user would like to save the appointment/patient note as a commlog when deleting an appointment/patient note.  Only returns up to the first 30 characters of the note.</summary>
        </member>
        <member name="M:OpenDentBusiness.Commlogs.GetTimedCommlogsForPat(System.Int64)">
            <summary>Gets all commlogs for family that contain a DateTimeEnd entry.  Used internally to keep track of how long calls lasted.</summary>
        </member>
        <member name="T:OpenDentBusiness.CommItemTypeAuto">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPrefs._localComputer">
            <summary>Only used by the client.</summary>
        </member>
        <member name="M:OpenDentBusiness.ComputerPrefs.GetForLocalComputer">
            <summary>Returns the computer preferences for the computer which this instance of Open Dental is running on.</summary>
        </member>
        <member name="M:OpenDentBusiness.ComputerPrefs.GetForComputer(System.String)">
            <summary>Returns the computer preferences for the computer with the passed in computer name.</summary>
        </member>
        <member name="M:OpenDentBusiness.ComputerPrefs.GetPrefsForComputer(System.String)">
            <summary>Should not be called by external classes.</summary>
        </member>
        <member name="M:OpenDentBusiness.ComputerPrefs.Insert(OpenDentBusiness.ComputerPref)">
            <summary>Should not be called by external classes.</summary>
        </member>
        <member name="M:OpenDentBusiness.ComputerPrefs.Update(OpenDentBusiness.ComputerPref)">
            <summary>Any time this is called, ComputerPrefs.LocalComputer will be passed in.  It will have already been changed for local use, and this saves it for next time.</summary>
        </member>
        <member name="M:OpenDentBusiness.ComputerPrefs.SetToSimpleGraphics(System.String)">
            <summary>Sets the GraphicsSimple column to 1.  Added to fix machines (lately tablets) that are having graphics problems and cannot start OpenDental.</summary>
        </member>
        <member name="T:OpenDentBusiness.Computers">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Computers.list">
            <summary>A list of all computers that have logged into the database in the past.  Might be some extra computer names in the list unless user has cleaned it up.</summary>
        </member>
        <member name="M:OpenDentBusiness.Computers.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Computers.Insert(OpenDentBusiness.Computer)">
            <summary>ONLY use this if compname is not already present</summary>
        </member>
        <member name="M:OpenDentBusiness.Computers.Delete(OpenDentBusiness.Computer)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Computers.GetCur">
            <summary>Only called from Printers.GetForSit</summary>
        </member>
        <member name="M:OpenDentBusiness.Computers.UpdateHeartBeat(System.String,System.Boolean)">
            <summary>When starting up, in an attempt to be fast, it will not add a new computer to the list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Computers.GetServiceInfo">
            <summary>Returns a list of strings in a specific order.  
            The strings are as follows; socket (service name), version_comment (service comment), hostname (server name), and MySQL version
            Oracle is not supported and will throw an exception to have the customer call us to add support.</summary>
        </member>
        <member name="T:OpenDentBusiness.Contacts">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Contacts.Refresh(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Contacts.Insert(OpenDentBusiness.Contact)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Contacts.Update(OpenDentBusiness.Contact)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Contacts.Delete(OpenDentBusiness.Contact)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Counties">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Counties.Refresh(System.String)">
            <summary>Gets county names similar to the one provided.</summary>
        </member>
        <member name="M:OpenDentBusiness.Counties.Refresh">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Counties.GetListNames">
            <summary>Gets an array of strings containing all the counties in alphabetical order.  Used for the screening interface which must be simpler than the usual interface.</summary>
        </member>
        <member name="M:OpenDentBusiness.Counties.Insert(OpenDentBusiness.County)">
            <summary>Need to make sure Countyname not already in db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Counties.Update(OpenDentBusiness.County)">
            <summary>Updates the Countyname and code in the County table, and also updates all patients that were using the oldCounty name.</summary>
        </member>
        <member name="M:OpenDentBusiness.Counties.Delete(OpenDentBusiness.County)">
            <summary>Must run UsedBy before running this.</summary>
        </member>
        <member name="M:OpenDentBusiness.Counties.UsedBy(System.String)">
            <summary>Use before DeleteCur to determine if this County name is in use. Returns a formatted string that can be used to quickly display the names of all patients using the Countyname.</summary>
        </member>
        <member name="M:OpenDentBusiness.Counties.DoesExist(System.String)">
            <summary>Use before Insert to determine if this County name already exists. Also used when closing patient edit window to validate that the Countyname exists.</summary>
        </member>
        <member name="T:OpenDentBusiness.Deposits">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Deposits.Refresh">
            <summary>Gets all Deposits, ordered by DateDeposit, DepositNum.  </summary>
        </member>
        <member name="M:OpenDentBusiness.Deposits.GetUnattached">
            <summary>Gets only Deposits which are not attached to transactions.</summary>
        </member>
        <member name="M:OpenDentBusiness.Deposits.GetOne(System.Int64)">
            <summary>Gets a single deposit directly from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Deposits.Update(OpenDentBusiness.Deposit)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Deposits.Update(OpenDentBusiness.Deposit,OpenDentBusiness.Deposit)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Deposits.Insert(OpenDentBusiness.Deposit)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Deposits.Delete(OpenDentBusiness.Deposit)">
            <summary>Also handles detaching all payments and claimpayments.  Throws exception if deposit is attached as a source document to a transaction.  The program should have detached the deposit from the transaction ahead of time, so I would never expect the program to throw this exception unless there was a bug.</summary>
        </member>
        <member name="M:OpenDentBusiness.Deposits.DetachFromDeposit(System.Int64,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>Detach specific payments and claimpayments from passed in deposit.</summary>
        </member>
        <member name="T:OpenDentBusiness.DiseaseDefs">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.DiseaseDefs.ListLong">
            <summary>A list of all DiseaseDefs.</summary>
        </member>
        <member name="P:OpenDentBusiness.DiseaseDefs.List">
            <summary>The list that is typically used. Does not include hidden diseases.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.FixItemOrders">
            <summary>Fixes item orders in DB if needed. Returns true if changes were made.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.Update(OpenDentBusiness.DiseaseDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.Insert(OpenDentBusiness.DiseaseDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.ValidateDeleteList(System.Collections.Generic.List{System.Int64})">
            <summary>Returns a list of valid diseasedefnums to delete from the passed in list.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.AlphabetizeDB">
            <summary>Irreversibly alphabetizes diseasedefs in the DB. Up to 5 seconds first time it is run on large DB on large databases, surround with Cursors.Wait.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.MoveUp(System.Int32)">
            <summary>Moves the selected item up in the listLong.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.MoveDown(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.SetOrder(System.Int32,System.Int32)">
            <summary>Used by MoveUp and MoveDown.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.GetOrder(System.Int64)">
            <summary>Returns the order in ListLong, whether hidden or not.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.GetName(System.Int64)">
            <summary>Returns the name of the disease, whether hidden or not.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.GetNameByCode(System.String)">
            <summary>Returns the name of the disease based on SNOMEDCode, then if no match tries ICD9Code, then if no match returns empty string. Used in EHR Patient Lists.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.GetNumFromCode(System.String)">
            <summary>Returns the DiseaseDefNum based on SNOMEDCode, then if no match tries ICD9Code, then if no match tries ICD10Code, then if no match returns 0. Used in EHR Patient Lists and when automatically inserting pregnancy Dx from FormVitalsignEdit2014.  Will match hidden diseases.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.GetNumFromSnomed(System.String)">
            <summary>Returns the DiseaseDefNum based on SNOMEDCode.  If no match or if SnomedCode is an empty string returns 0.  Only matches SNOMEDCode, not ICD9 or ICD10.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.GetItem(System.Int64)">
            <summary>Returns the diseaseDef with the specified num.  Will match hidden diseasedefs.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.GetNumFromName(System.String)">
            <summary>Returns the diseaseDefNum that exactly matches the specified string.  Used in import functions when you only have the name to work with.  Can return 0 if no match.  Does not match hidden diseases.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.GetNumFromName(System.String,System.Boolean)">
            <summary>Returns the diseaseDefNum that exactly matches the specified string.  Will return 0 if no match.  Set matchHidden to true to match hidden diseasedefs as well.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.GetFromName(System.String)">
            <summary>Returns the diseasedef that has a name exactly matching the specified string. Returns null if no match.  Does not match hidden diseases.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.GetMultDiseaseDefs(System.Collections.Generic.List{System.Int64})">
            <summary>Used along with GetChangedSinceDiseaseDefNums</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.Sync(System.Collections.Generic.List{OpenDentBusiness.DiseaseDef},System.Collections.Generic.List{OpenDentBusiness.DiseaseDef})">
            <summary>Sync pattern, must sync entire table. Probably only to be used in the master problem list window.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.GetAllPregDiseaseDefs">
            <summary>Get all diseasedefs that have a pregnancy code that applies to the three CQM measures with pregnancy as an exclusion condition.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDefs.SortAlphabetically(OpenDentBusiness.DiseaseDef,OpenDentBusiness.DiseaseDef)">
            <summary>Sorts alphabetically by DiseaseName, then by PK.</summary>
        </member>
        <member name="T:OpenDentBusiness.Diseases">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Diseases.GetSpecificDiseaseForPatient(System.Int64,System.Int64)">
            <summary>This returns a single disease, but a patient may have multiple instances of the same disease.  For example, they may have multiple pregnancy instances with the same DiseaseDefNum.  This will return a single instance of the disease, chosen at random by MySQL.  Would be better to use GetDiseasesForPatient below which returns a list of diseases with this DiseaseDefNum for the patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Diseases.GetDiseasesForPatient(System.Int64,System.Int64,System.Boolean)">
            <summary>Gets a list of every disease for the patient that has the specified DiseaseDefNum.  Set showActiveOnly true to only show active Diseases based on status (i.e. it could have a stop date but still be active, or marked inactive with no stop date).</summary>
        </member>
        <member name="M:OpenDentBusiness.Diseases.GetPatientsWithDisease(System.Collections.Generic.List{System.Int64})">
            <summary>Returns a list of PatNums that have a disease from the PatNums that are passed in.</summary>
        </member>
        <member name="M:OpenDentBusiness.Diseases.GetOne(System.Int64)">
            <summary>Gets one disease by DiseaseNum from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Diseases.Refresh(System.Int64)">
            <summary>Gets a list of all Diseases for a given patient.  Includes hidden. Sorted by diseasedef.ItemOrder.</summary>
        </member>
        <member name="M:OpenDentBusiness.Diseases.Refresh(System.Int64,System.Boolean)">
            <summary>Gets a list of all Diseases for a given patient. Set showActive true to only show active Diseases.</summary>
        </member>
        <member name="M:OpenDentBusiness.Diseases.Refresh(System.Boolean,System.Int64)">
            <summary>Gets a list of all Diseases for a given patient. Show innactive returns all, otherwise only resolved and active problems.</summary>
        </member>
        <member name="M:OpenDentBusiness.Diseases.Update(OpenDentBusiness.Disease)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Diseases.Update(OpenDentBusiness.Disease,OpenDentBusiness.Disease)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Diseases.Insert(OpenDentBusiness.Disease)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Diseases.Delete(OpenDentBusiness.Disease)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Diseases.DeleteAllForPt(System.Int64)">
            <summary>Deletes all diseases for one patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Diseases.GetMultDiseases(System.Collections.Generic.List{System.Int64})">
            <summary>Used along with GetChangedSinceDiseaseNums</summary>
        </member>
        <member name="M:OpenDentBusiness.Diseases.ResetTimeStamps(System.Int64)">
            <summary>Changes the value of the DateTStamp column to the current time stamp for all diseases of a patient</summary>
        </member>
        <member name="M:OpenDentBusiness.Diseases.ResetTimeStamps(System.Int64,OpenDentBusiness.ProblemStatus)">
            <summary>Changes the value of the DateTStamp column to the current time stamp for all diseases of a patient that are the status specified.</summary>
        </member>
        <member name="T:OpenDentBusiness.Dunnings">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Dunnings.Refresh">
            <summary>Gets a list of all dunnings.  Ordered by BillingType, then by AgeAccount-DaysInAdvance, then by InsIsPending, then by DunningNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Dunnings.Insert(OpenDentBusiness.Dunning)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Dunnings.Update(OpenDentBusiness.Dunning)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Dunnings.Delete(OpenDentBusiness.Dunning)">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.ElectIDs.List">
            <summary>This is the list of all electronic IDs.</summary>
        </member>
        <member name="M:OpenDentBusiness.ElectIDs.GetRequiredIdents(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ElectIDs.GetID(System.String)">
            <summary>Gets ONE ElectID that uses the supplied payorID. Even if there are multiple payors using that ID.  So use this carefully.</summary>
        </member>
        <member name="M:OpenDentBusiness.ElectIDs.GetIDs(System.String)">
            <summary>Gets an arrayList of ElectID objects based on a supplied payorID. If no matches found, then returns array of 0 length. Used to display payors in FormInsPlan and also to get required idents.  This means that all payors with the same ID should have the same required idents and notes.</summary>
        </member>
        <member name="M:OpenDentBusiness.ElectIDs.GetDescripts(System.String)">
            <summary>Gets the names of the payors to display based on the payorID.  Since carriers sometimes share payorIDs, there will often be multiple payor names returned.</summary>
        </member>
        <member name="T:OpenDentBusiness.EmailAttaches">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAttaches.GetOne(System.Int64)">
            <summary>Gets one EmailAttach from the db. Used by Patient Portal.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAttaches.CreateAttach(System.String,System.Byte[])">
            <summary>Throws exceptions.  Creates a new file within the Out subfolder of the email attachment path (inside OpenDentImages) and returns an EmailAttach object referencing the new file.  The displayFileName will always contain valid file name characters, because it is either a hard coded value or is based on an existing valid file name.  The actual file name will end with the displayFileName, so that the actual files are easier to locate and have the same file extension as the displayedFileName.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAttaches.CreateAttach(System.String,System.String,System.Byte[],System.Boolean)">
            <summary>Throws exceptions.  Creates a new file inside of the email attachment path (inside OpenDentImages) and returns an EmailAttach object referencing the new file.  If isOutbound is true, then the file will be saved to the "Out" subfolder, otherwise the file will be saved to the "In" subfolder.  The displayFileName will always contain valid file name characters, because it is either a hard coded value or is based on an existing valid file name.  If a file already exists matching the actualFileName, then an exception will occur.  Set actualFileName to empty string to generate a unique actual file name.  If the actual file name is generated, then actual file name will end with the displayFileName, so that the actual files are easier to locate and have the same file extension as the displayedFileName.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAttaches.GetAttachPath">
            <summary>Returns patient's AtoZ path if local AtoZ is used.  Returns Dropbox AtoZ path if Dropbox is used.  Returns temp path if in database.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAttaches.GetForTemplate(System.Int64)">
            <summary>Returns all EmailAttaches assocaited to a specific EmailTemplateNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAttaches.Sync(System.Int64,System.Collections.Generic.List{OpenDentBusiness.EmailAttach},System.Collections.Generic.List{OpenDentBusiness.EmailAttach})">
            <summary>Syncs a given list of EmailAttaches to a list of old EmailAttaches.
            If emailAttachOld is not provided, it will use the emailMessageNum passed in to get the "old" attachments from the database.</summary>
        </member>
        <member name="T:OpenDentBusiness.EmailMessages">
            <summary>An email message is always attached to a patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessages.HashDirectAgents">
            <summary>Used to cache DirectAgent objects, because creating a new DirectAgent object takes up to 10 seconds. If we did not cache, then inbox load would be slow and so would Direct message sending.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.GetOne(System.Int64)">
            <summary>Gets one email message from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.GetInboxForAddress(System.String,System.Int64)">
            <summary>Gets all inbox email messages where EmailMessage.RecipientAddress==emailAddressInbox, or returns webmail messages instead.  
            Pass in 0 for provNum to get email messages, pass in the current user's provNum to get webmail messages.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.Update(OpenDentBusiness.EmailMessage)">
            <summary>OD will call this version. It will automatically delete and restore attachments.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.Update(OpenDentBusiness.EmailMessage,System.Boolean)">
            <summary>Patient Portal will call this version. It allows attachments to be left in-tact. The Patient Portal will pass in an object with an empty attachment list, but that does not mean that the attachments should be deleted.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.UpdateSentOrReceivedRead(OpenDentBusiness.EmailMessage)">
            <summary>Updates SentOrReceived and saves changes to db.  Better than using Update(), because does not delete and add attachments back into db.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.UpdateSentOrReceivedUnread(OpenDentBusiness.EmailMessage)">
            <summary>Updates SentOrReceived and saves changes to db.  Better than using Update(), because does not delete and add attachments back into db.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.UpdatePatNum(OpenDentBusiness.EmailMessage)">
            <summary>Updates SentOrReceived and saves changes to db.  Better than using Update(), because does not delete and add attachments back into db.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.Insert(OpenDentBusiness.EmailMessage)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.Delete(OpenDentBusiness.EmailMessage)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.SendEmailDirect(OpenDentBusiness.EmailMessage,OpenDentBusiness.EmailAddress)">
            <summary>Encrypts the message, verifies trust, locates the public encryption key for the To address (if already stored locally), etc.
            Use this polymorphism when the attachments have already been saved to the email attachments folder in file form.  patNum can be 0.
            Returns an empty string upon success, or an error string if there were errors.
            It is possible that the email was sent to some trusted recipients and not sent to untrusted recipients (in which case there would be errors but some recipients would receive successfully).
            Trust cannot be automatically added for the recipient addresses inside this function, because the patient portal uses this function and as soon as an address is trusted
            all patients can then forward their personal information to the recipient address.
            Surround with a try catch.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.RefreshCertStoreExternal(OpenDentBusiness.EmailAddress)">
            <summary>Refreshes our cached copy of the public key certificate store and the anchor certificate store from the Windows certificate store.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.SendEmailDirect(Health.Direct.Agent.OutgoingMessage,OpenDentBusiness.EmailAddress)">
            <summary>outMsgDirect must be unencrypted, because this function will encrypt.  Encrypts the message, verifies trust, locates the public encryption key for the To address (if already stored locally), etc.
            Returns an empty string upon success, or an error string if there were errors.  It is possible that the email was sent to some trusted recipients and not sent to untrusted recipients (in which case there would be errors but some recipients would receive successfully).</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.SendAckDirect(Health.Direct.Agent.IncomingMessage,OpenDentBusiness.EmailAddress,System.Int64)">
            <summary>Used for creating encrypted Message Disposition Notification (MDN) ack messages for Direct.
            An ack must be sent when a message is received/processed, and other acks are supposed be sent when other events occur (but are not required).
            For example, when the user reads a decrypted message we must send an ack with notification type of Displayed (not required).</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.SendOldestUnsentAck(OpenDentBusiness.EmailAddress)">
            <summary>Gets the oldest Direct Ack (MDN) from the db which has not been sent yet and attempts to send it.
            If the Ack fails to send, then it remains in the database with status AckDirectNotSent, so that another attempt will be made when this function is called again.
            This function throttles the Ack responses to prevent the email host from flagging the emailAddressFrom as a spam account.  The throttle speed is one Ack per 60 seconds (to mimic human behavior).
            Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.BodyTidy(System.String)">
            <summary>Call to cleanup newlines within a string before including in an email. The RFC 822 guide states that every single line in a raw email message must end with \r\n, also known as CRLF.
            Certain email providers will reject outgoing email from us if we have any lines ending with \n or \r. Email providers that we know care: Prosites. Other email providers seem to handle
            all different types of newlines, even though \r or \n by itself is not standard. This function replaces all \r and \n with \r\n.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.SubjectTidy(System.String)">
            <summary>Replaces new lines with a space. Emails with new line characters in the subject won't send.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.WireEmailUnsecure(Health.Direct.Agent.OutgoingMessage,OpenDentBusiness.EmailAddress,System.Int64)">
            <summary>Throws exceptions.  Attempts to physically send the message over the network wire.
            Perfect for signed or encrypted email, because the MIME Content-Type is strictly defined for these types of emails.
            Does not work for implicit SSL, but works for all other email settings, including explicit SSL.
            If a message must be encrypted, then encrypt it before calling this function.
            The patNum can be 0, but should be included if known, for auditing purposes.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.WireEmailUnsecure(OpenDentBusiness.EmailMessage,OpenDentBusiness.EmailAddress,System.Collections.Specialized.NameValueCollection,System.Net.Mail.AlternateView[])">
            <summary>Throws exceptions.  Attempts to physically send the message over the network wire.
            This is used from wherever email needs to be sent throughout the program.
            If a message must be encrypted, then encrypt it before calling this function.
            nameValueCollectionHeaders can be null.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.SendEmailUnsecureWithSig(OpenDentBusiness.EmailMessage,OpenDentBusiness.EmailAddress,System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>Throws exceptions.  Uses the Direct library to sign the message, so that our unencrypted/signed messages are built the same way as our encrypted/signed messages.
            The provided certificate must contain a private key, or else the signing will fail (exception) when computing the signature digest.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.SendEmailUnsecure(OpenDentBusiness.EmailMessage,OpenDentBusiness.EmailAddress)">
             <summary>This is used from wherever unencrypted email needs to be sent throughout the program.  If a message must be encrypted, then encrypt it before calling this function.
            Surround with a try catch.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.ReceiveFromInbox(System.Int32,OpenDentBusiness.EmailAddress)">
            <summary>Fetches up to fetchCount number of messages from a POP3 server.  Set fetchCount=0 for all messages.  Typically, fetchCount is 0 or 1.
            Example host name, pop3.live.com. Port is Normally 110 for plain POP3, 995 for SSL POP3.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.ReceiveFromInboxThreadSafe(System.Int32,OpenDentBusiness.EmailAddress)">
            <summary>Fetches up to fetchCount number of messages from a POP3 server.  Set fetchCount=0 for all messages.  Typically, fetchCount is 0 or 1.
            Example host name, pop3.live.com. Port is Normally 110 for plain POP3, 995 for SSL POP3.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.RawEmailToIncomingMessage(System.String,OpenDentBusiness.EmailAddress)">
            <summary>Parses a raw email into a usable object.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.DecryptIncomingMessage(Health.Direct.Agent.IncomingMessage)">
            <summary>Throws various exceptions if decryption fails.  Decryption will fail if the sender is not yet trusted by the recipient.  Decrypts and valudates trust.  If decrypted successfully, removes the sender signature from the decrypted attachments and moves them into inMsg.Signatures.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.ProcessRawEmailMessageIn(System.String,System.Int64,OpenDentBusiness.EmailAddress,System.Boolean,OpenDentBusiness.EmailSentOrReceived)">
            <summary>Converts any raw email message (encrypted or not) into an EmailMessage object, and saves any email attachments to the emailattach table in the db.
            The emailMessageNum will be used to set EmailMessage.EmailMessageNum.  If emailMessageNum is 0, then the EmailMessage will be inserted into the db, otherwise the EmailMessage will be updated in the db.
            If the raw message is encrypted, then will attempt to decrypt.  If decryption fails, then the EmailMessage SentOrReceived will be ReceivedEncrypted and the EmailMessage body will be set to the entire contents of the raw email.
            If decryption succeeds, then EmailMessage SentOrReceived will be set to ReceivedDirect, the EmailMessage body will contain the decrypted body text, and a Direct Ack "processed" message will be sent back to the sender using the email settings from emailAddressReceiver.
            Set isAck to true if decrypting a direct message, false otherwise.
            Setting sentOrReceivedUnencrypted only works for unencrypted emails.  Currently used by DBM so that it doesn't force the status to received.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.GetMimePartsForMimeTypes(System.String,OpenDentBusiness.EmailAddress,System.String[])">
            <summary>Email bodies can have multiple parts.  Usually, for HTML email, there will be one HTML mime part plus one mime part for each image (in base64) which is part of the email message.  HTML messages usually also have one mime part for the text version of the email message, in case the email client does not have html capabilities.  This function extracts the text for all mime body parts which fully or partially match the specified mime content types.  For example, you could specify a mime content of "image/" to find images of all types, or you could specify a mime content type of "image/jpeg" to find only jpeg images.  Always returns one valid list for each specified mime content types, where the individual lists are always present but may be zero length.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.SaveMimeImageToFile(Health.Direct.Common.Mime.MimeEntity,System.String)">
            <summary>Generates the image and returns the path to where the file was saved.  Returns null if the image could not be created.
            Used to save images for received html messages.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.CreateCertificateStoresIfNeeded">
            <summary>Throws an exception if there is a permission issue.  Creates all of the necessary certificate stores for email encryption (Direct and Standard) if they do not already exist.
            There is no way for the user to create these stores manually through Microsoft Management Console (mmc.exe) and they are needed to import certificates.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.DissolveAttachmentsFromIncomingMessage(Health.Direct.Agent.IncomingMessage)">
            <summary>Annuls the attachment text in the body section of all attachment mime parts (the Base64 content).
            Returns the entire incoming message as raw text which is meant to be stored in the RawEmailIn column as to save space in the database.
            Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.GetDirectAgentForEmailAddress(System.String)">
            <summary>Throws exceptions if there are permission issues.  Creates the 3 necessary certificate stores if they do not already exist.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.TryAddTrustDirect(System.String)">
            <summary>Returns true if trust already exists or has just been established for the given email address.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.GetEmailSignatureFromSmimeP7sFile(System.String)">
            <summary>Throws exceptions.  The smimeP7sFilePath must point to a smime.p7s file.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.GetCertFromPrivateStore(System.String)">
            <summary>Returns the encryption/decryption certificate for the specified emailAddress from the store of private certificates, or returns null if none found.
            Used for creating a signing signature in email encryption, which requires the private key (the public key alone is not enough, we tried it and an exception is thrown by Dot NET).
            IMPORTANT: Be careful what you do with the private certificate.  It must never be shared with another party.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.GetSubjectEmailNameFromSignature(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>Returns the subject name intended for email security from the given signed certificate.
            Returns empty string if a subject name was not found for email security, which would imply that the certificate is not for email encryption use.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.TryAddTrustForSignature(System.Security.Cryptography.X509Certificates.X509Certificate2)">
            <summary>Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.GetAddressSimple(System.String)">
            <summary>Sometimes an email From address will contain the person's name along with their email address.  This function strips out the person's name if present.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.GetDomainForAddress(System.String)">
            <summary>The specified emailAddress must be a properly formatted email address or properly formatted domain name.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.GetValidCertForAddressFromStore(Health.Direct.Common.Certificates.SystemX509Store,System.String,System.Boolean)">
            <summary>The specified certificate store must be open with read permissions (write permissions are not required, but are allowed).
            The strAddressTest can be either a full email address or a domain name.
            Set isDomainIncluded to true if you would like to include domain level certificates in addition to the certificates which match the exact test address.  Exact address matches will be preferred over domain matches.
            Otherwise, if isDomainIncluded is false, then only certificates which exactly match the test address will be included.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.FindPublicCertForAddress(System.String)">
            <summary>First attemtps to find the public certificate for the provided address in the public certificate store and returns the located certificate if found.
            If the public certificate could not be found from the public certificate store, then this function will search the internet for the hosted public certificate.
            If a public certificate is discovered from the Internet, then it will be added to the public certificate store, but the trust for any certificate must be added separately.
            Returns the number of new public certificates discovered (0,1,or 2 (if one for the address and domain separately)), or -1 if the certificate is already in the local store of public certificates.
            Throws exceptions when no certificates were found or if there was a network failure.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.DnsQueryForCert(System.Net.IPAddress,System.Net.Mail.MailAddress,System.Collections.Generic.List{System.Security.Cryptography.X509Certificates.X509Certificate2},System.Collections.Generic.List{System.Security.Cryptography.X509Certificates.X509Certificate2})">
            <summary>Send certificate DNS query to DNS server IP address to look for an email encryption certificate for the given emailAddress.
            Adds the discovered certificates (if any) to the two X509Certificate2 lists given.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.ExistsActiveCertInDns(System.String,System.String)">
            <summary>Called by Broadcaster service to determine if the OD DNS certificate service is up and running.  Checks for a specific email address
            which we have registered.  May not be able to find the reference using the Find All Refrences tool.  Assume the head version of this function
            is always the live version.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.GetMimeLeafNodes(Health.Direct.Common.Mail.Message)">
            <summary>Gets all mime parts in the message which do not have child mime parts.  Returns null on error.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.ConvertMessageToEmailMessage(Health.Direct.Common.Mail.Message,System.Boolean,System.Boolean)">
            <summary>Throws exceptions.  Converts the Health.Direct.Common.Mail.Message into an OD EmailMessage.  The Direct library is used for both encrypted and unencrypted email.  Set hasAttachments to false to exclude attachments.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.ConvertEmailMessageToMessage(OpenDentBusiness.EmailMessage,System.Boolean)">
            <summary>Converts our internal EmailMessage object to a Direct message object.  Used for outgoing email.  Wraps the message.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.IsMimeEntityText(Health.Direct.Common.Mime.MimeEntity)">
            <summary>Returns true if plain text, xml, html, etc...</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.IsMimeEntityTextPlain(Health.Direct.Common.Mime.MimeEntity)">
            <summary>Returns true if plain text, xml, html, etc...</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.SendTestUnsecure(System.String,System.String,System.String)">
            <summary>This method is only for ehr testing purposes, and it always uses the hidden pref EHREmailToAddress to send to.  For privacy reasons, this cannot be used with production patient info.  AttachName should include extension.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.SendTestUnsecure(System.String,System.String,System.String,System.String,System.String)">
            <summary>This method is only for ehr testing purposes, and it always uses the hidden pref EHREmailToAddress to send to.  For privacy reasons, this cannot be used with production patient info.  AttachName should include extension.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessages.ReceiveOneForEhrTest">
            <summary>Receives one email from the inbox, and returns the contents of the attachment as a string.  Will throw an exception if anything goes wrong, so surround with a try-catch.</summary>
        </member>
        <member name="T:OpenDentBusiness.EmailTemplates">
            <summary>emailtemplates are refreshed as local data.</summary>
        </member>
        <member name="P:OpenDentBusiness.EmailTemplates.List">
            <summary>List of all email templates</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailTemplates.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EmailTemplates.Insert(OpenDentBusiness.EmailTemplate)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EmailTemplates.Update(OpenDentBusiness.EmailTemplate)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EmailTemplates.Delete(OpenDentBusiness.EmailTemplate)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Employees">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.Employees.ListShort">
            <summary>Does not include hidden employees</summary>
        </member>
        <member name="M:OpenDentBusiness.Employees.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Employees.GetListShort">
            <summary>Does not include hidden employees</summary>
        </member>
        <member name="M:OpenDentBusiness.Employees.GetForTimeCard">
            <summary>Instead of using the cache, which sorts by FName, LName.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employees.Update(OpenDentBusiness.Employee)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Employees.Insert(OpenDentBusiness.Employee)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Employees.Delete(System.Int64)">
            <summary>Surround with try-catch</summary>
        </member>
        <member name="M:OpenDentBusiness.Employees.GetNameFL(OpenDentBusiness.Employee)">
            <summary>Returns FName MiddleI LName for the provided employee.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employees.GetNameFL(System.Int64)">
            <summary>Loops through List to find matching employee, and returns FName MiddleI LName.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employees.GetAbbr(System.Int64)">
            <summary>Loops through List to find matching employee, and returns first 2 letters of first name.  Will later be improved with abbr field.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employees.GetEmp(System.Int64)">
            <summary>From cache</summary>
        </member>
        <member name="M:OpenDentBusiness.Employees.GetEmp(System.String,System.Collections.Generic.List{OpenDentBusiness.Employee})">
            <summary>Find formatted name in list.  Takes in a name that was previously formatted by Employees.GetNameFL and finds a match in the list.  If no match is found then returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employees.GetEmpsForClinic(System.Int64)">
            <summary>Gets all employees associated to users that have a clinic set to the clinic passed in.  Passing in 0 will get a list of employees not assigned to any clinic.  Gets employees from the cache which is sorted by FName, LastName.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employees.GetEmpsForClinic(System.Int64,System.Boolean,System.Boolean)">
            <summary>Gets all the employees for a specific clinicNum, according to their associated user.  Pass in a clinicNum of 0 to get the list of unassigned or "all" employees (depending on isAll flag).  In addition to setting clinicNum to 0, set isAll true to get a list of all employees or false to get a list of employees that are not associated to any clinics.  Always gets the list of employees from the cache which is sorted by FName, LastName.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employees.IsHidden(System.Int64)">
            <summary> Returns -1 if employeeNum is not found.  0 if not hidden and 1 if hidden.</summary>		
        </member>
        <member name="M:OpenDentBusiness.Employees.GetEmpNumAtExtension(System.Int32)">
            <summary>Loops through List to find the given extension and returns the employeeNum if found.  Otherwise, returns -1;</summary>
        </member>
        <member name="T:OpenDentBusiness.Employees.EmployeeComparer">
            <summary>sorting class used to sort Employee in various ways</summary>
        </member>
        <member name="F:OpenDentBusiness.Employees.EmployeeComparer.SortBy.ext">
            <summary>0 - By Extension.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employees.EmployeeComparer.SortBy.empNum">
            <summary>1 - By EmployeeNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employees.EmployeeComparer.SortBy.firstName">
            <summary>2 - By FName.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employees.EmployeeComparer.SortBy.lastName">
            <summary>3 - By LName.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employees.EmployeeComparer.SortBy.LFName">
            <summary>4 - By LName, then FName.</summary>
        </member>
        <member name="T:OpenDentBusiness.Employers">
            <summary>Employers are refreshed as needed. A full refresh is frequently triggered if an employerNum cannot be found in the HList.  Important retrieval is done directly from the db.</summary>
        </member>
        <member name="P:OpenDentBusiness.Employers.HList">
            <summary>A hashtable of all employers.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employers.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Employers.Update(OpenDentBusiness.Employer)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Employers.Insert(OpenDentBusiness.Employer)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Employers.Delete(OpenDentBusiness.Employer)">
            <summary>There MUST not be any dependencies before calling this or there will be invalid foreign keys.  This is only called from FormEmployers after proper validation.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employers.DependentPatients(OpenDentBusiness.Employer)">
            <summary>Returns a list of patients that are dependent on the Cur employer. The list includes carriage returns for easy display.  Used before deleting an employer to make sure employer is not in use.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employers.DependentInsPlans(OpenDentBusiness.Employer)">
            <summary>Returns a list of insplans that are dependent on the Cur employer. The list includes carriage returns for easy display.  Used before deleting an employer to make sure employer is not in use.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employers.GetName(System.Int64)">
            <summary>Gets the name of an employer based on the employerNum.  This also refreshes the list if necessary, so it will work even if the list has not been refreshed recently.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employers.GetEmployer(System.Int64)">
            <summary>Gets an employer based on the employerNum. This will work even if the list has not been refreshed recently, but if you are going to need a lot of names all at once, then it is faster to refresh first.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employers.GetEmployerNum(System.String)">
            <summary>Gets an employerNum from the database based on the supplied name.  If that empName does not exist, then a new employer is created, and the employerNum for the new employer is returned.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employers.GetByName(System.String)">
            <summary>Returns an employer if an exact match is found for the text supplied in the database.  Returns null if nothing found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employers.GetSimilarNames(System.String)">
            <summary>Returns an arraylist of Employers with names similar to the supplied string.  Used in dropdown list from employer field for faster entry.  There is a small chance that the list will not be completely refreshed when this is run, but it won't really matter if one employer doesn't show in dropdown.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employers.Combine(System.Collections.Generic.List{System.Int64})">
            <summary>Combines all the given employers into one. Updates patient and insplan. Then deletes all the others.</summary>
        </member>
        <member name="T:OpenDentBusiness.Etranss">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Etranss.RefreshHistory(System.DateTime,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.EtransType})">
            <summary>Gets data for the history grid in the SendClaims window.  The listEtransType must contain as least one item.</summary>
        </member>
        <member name="M:OpenDentBusiness.Etranss.GetHistoryOneClaim(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Etranss.GetAllForOneClaim(System.Int64)">
            <summary>Gets all types of transactions for the given claim number.</summary>
        </member>
        <member name="M:OpenDentBusiness.Etranss.GetEtrans(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Etranss.GetErasOneClaim(System.String,System.DateTime)">
            <summary>Gets all X12 835 etrans entries relating to a specific claim.</summary>
        </member>
        <member name="M:OpenDentBusiness.Etranss.GetList270ForPlan(System.Int64)">
            <summary>Gets a list of all 270's and Canadian eligibilities for this plan.</summary>
        </member>
        <member name="M:OpenDentBusiness.Etranss.GetForSequenceNumberCanada(System.String)">
            <summary>Use for Canadian claims only. Finds the most recent etrans record which matches the unique officeSequenceNumber specified. The officeSequenceNumber corresponds to field A02.</summary>
        </member>
        <member name="M:OpenDentBusiness.Etranss.Insert(OpenDentBusiness.Etrans)">
            <summary>DateTimeTrans handled automatically here.</summary>
        </member>
        <member name="M:OpenDentBusiness.Etranss.Update(OpenDentBusiness.Etrans)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Etranss.CreateCanadianOutput(System.Int64,System.Int64,System.Int64,System.Int64,OpenDentBusiness.EtransType,System.Int64,System.Int64)">
            <summary>Not for claim types, just other types, including Eligibility. This function gets run first.  Then, the messagetext is created and an attempt is made to send the message.  Finally, the messagetext is added to the etrans.  This is necessary because the transaction numbers must be incremented and assigned to each message before creating the message and attempting to send.  If it fails, we will need to roll back.  Provide EITHER a carrierNum OR a canadianNetworkNum.  Many transactions can be sent to a carrier or to a network.</summary>
        </member>
        <member name="M:OpenDentBusiness.Etranss.SetMessage(System.Int64,System.String)">
            <summary>Only used by Canadian code right now.  CAUTION!  This does not update the EtransMessageTextNum field of an object in memory without a refresh.</summary>
        </member>
        <member name="M:OpenDentBusiness.Etranss.Undo(System.Int64)">
            <summary>Deletes the etrans entry and changes the status of the claim back to W.  If it encounters an entry that's not a claim, it skips it for now.  Later, it will handle all types of undo.  It will also check Canadian claims to prevent alteration if an ack or EOB has been received.</summary>
        </member>
        <member name="M:OpenDentBusiness.Etranss.Delete(System.Int64)">
            <summary>Deletes the etrans entry.  Mostly used when the etrans entry was created, but then the communication with the clearinghouse failed.  So this is just a rollback function.  Will not delete the message associated with the etrans.  That must be done separately.  Will throw exception if the etrans does not exist.</summary>
        </member>
        <member name="M:OpenDentBusiness.Etranss.SetClaimSentOrPrinted(System.Int64,System.Int64,System.Int64,OpenDentBusiness.EtransType,System.Int32)">
            <summary>Sets the status of the claim to sent, usually as part of printing.  Also makes an entry in etrans.  If this is Canadian eclaims, then this function gets run first.  If the claim is to be sent elecronically, then the messagetext is created after this method and an attempt is made to send the claim.  Finally, the messagetext is added to the etrans.  This is necessary because the transaction numbers must be incremented and assigned to each claim before creating the message and attempting to send.  For Canadians, it will always record the attempt as an etrans even if claim is not set to status of sent.</summary>
        </member>
        <member name="M:OpenDentBusiness.Etranss.ProcessIncomingReport(System.DateTime,System.Int64,System.String)">
            <summary>Etrans type will be figured out by this class.  Either TextReport, Acknowledge_997, Acknowledge_999, or StatusNotify_277.</summary>
        </member>
        <member name="M:OpenDentBusiness.Etranss.GetLastDate270(System.Int64)">
            <summary>Or Canadian elig.</summary>
        </member>
        <member name="T:OpenDentBusiness.Fees">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Fees.IsFilledByThread">
            <summary>When the fee cache is going to be filled for the first time by a thread, make everyone wait until _cache has been filled the first time.</summary>
        </member>
        <member name="F:OpenDentBusiness.Fees._lockObj">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Fees._cache">
            <summary>Access _Cache instead. This is a unique cache class used for caching and manipulating fees.</summary>
        </member>
        <member name="P:OpenDentBusiness.Fees._Cache">
            <summary>This is a very unique cache class. Not generally available for use, instead either get a copy of the cache for local use or use some of the 
            functions in the S class.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.GetByFeeSchedNum(System.Int64)">
            <summary>Returns all fees for the provided FeeSchedNum in a dictionary. The key of the dictionary is the CodeNum and the value is a list of
            fees for that CodeNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.FillCacheOrWait">
            <summary>Waits for the cache to fill if it is being filled by another thread, otherwise fills the cache itself.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.GetByFeeSchedNumDB(System.Int64)">
            <summary>Returns all fees for the provided FeeSchedNum in one big unsorted list. Used to fill itemized cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.GetByFeeSchedNumsDB(System.Collections.Generic.List{System.Int64})">
            <summary>Returns all fees for the provided FeeSchedNums in one big unsorted list. 
            Used to fill itemized cache, should not be called directly from anything other than cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.GetCache">
            <summary>Gets a copy of the cache for local use. Pass fee sched nums to reduce the size of the cache, otherwise returns copy of entire cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.GetFeesForCode(System.Int64)">
            <summary>Returns all fees associated to the procedure code passed in.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.Update(OpenDentBusiness.Fee)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.Insert(OpenDentBusiness.Fee)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.Delete(OpenDentBusiness.Fee)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.DeleteNonHQFeesForSched(System.Int64)">
            <summary>Deletes all fees for the supplied FeeSched that aren't for the HQ clinic.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.GetFee(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Returns null if no fee exists, returns a fee based on feeSched and fee localization settings.
            Attempts to find the most accurate fee based on the clinic and provider passed in.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.GetAmount(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Returns an amount if a fee has been entered.  Prefers local clinic fees over HQ fees.  Otherwise returns -1.  Not usually used directly.
            Uses the list of fees passed in instead of the cached list of fees.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.GetAmount0(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Almost the same as GetAmount.  But never returns -1;  Returns an amount if a fee has been entered.  
            Prefers local clinic fees over HQ fees.  
            Returns 0 if code can't be found.
            Uses the list of fees passed in instead of the cached list of fees.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.GetFeeSched(OpenDentBusiness.Patient,System.Collections.Generic.List{OpenDentBusiness.InsPlan},System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Collections.Generic.List{OpenDentBusiness.InsSub},System.Int64)">
            <summary>Gets the fee sched from the first insplan, the patient, or the provider in that order.  Uses procProvNum if>0, otherwise pat.PriProv.
            Either returns a fee schedule (fk to definition.DefNum) or 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.GetFeeSched(System.Int64,System.Int64,System.Int64)">
            <summary>A simpler version of the same function above.  The required numbers can be obtained in a fairly simple query.
            Might return a 0 if the primary provider does not have a fee schedule set.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.GetMedFeeSched(OpenDentBusiness.Patient,System.Collections.Generic.List{OpenDentBusiness.InsPlan},System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Collections.Generic.List{OpenDentBusiness.InsSub},System.Int64)">
            <summary>Gets the fee schedule from the primary MEDICAL insurance plan, the first insurance plan, the patient, or the provider in that order.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.Increase(System.Int64,System.Int32,System.Int32,System.Collections.Generic.List{OpenDentBusiness.Fee},System.Int64,System.Int64)">
            <summary>Increases the fee schedule by percent.  Round should be the number of decimal places, either 0,1,or 2.
            Returns listFees back after increasing the fees from the passed in fee schedule information.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.Import(System.String,System.Double,System.Int64,System.Int64,System.Int64,System.Collections.Generic.List{OpenDentBusiness.Fee})">
            <summary>This method will remove and/or add a fee for the fee information passed in.
            codeText will typically be one valid procedure code.  E.g. D1240
            If an amt of -1 is passed in, then it indicates a "blank" entry which will cause deletion of any existing fee.
            Returns listFees back after importing the passed in fee information.
            Does not make any database calls.  This is left up to the user to take action on the list of fees returned.
            Also, makes security log entries based on how the fee changed.  Does not make a log for codes that were removed (user already warned)</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.Sync(System.Collections.Generic.List{OpenDentBusiness.Fee},System.Collections.Generic.List{OpenDentBusiness.Fee})">
            <summary>Inserts, updates, or deletes the passed in listNew against the stale listOld.  Returns true if db changes were made.
            This does not call the normal crud.Sync due to the special case of making sure we do not insert a duplicate fee.</summary>
             <returns>List of feeSchedNums for any fee that might have been changed. Returns empty list if nothing changed.</returns>
        </member>
        <member name="M:OpenDentBusiness.Fees.SyncToDbHelper(System.Collections.Generic.List{OpenDentBusiness.Fee},System.Collections.Generic.List{OpenDentBusiness.Fee},System.Collections.Generic.List{OpenDentBusiness.Fee},System.Collections.Generic.List{OpenDentBusiness.Fee},System.Int64)">
            <summary>Inserts, updates, or deletes database rows sepcified in the supplied lists.  Returns true if db changes were made.
            Supply Security.CurUser.UserNum, used to set the SecUserNumEntry field for Inserts.
            This was split from the list building logic to limit the payload that needed to be sent over middle tier.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fees.GetFeeFromDict(System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.List{OpenDentBusiness.Fee}},System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Gets the appropriate fee from the passed-in dictionary.</summary>
        </member>
        <member name="T:OpenDentBusiness.FeeCache">
            <summary>Extreamely a-typical cache pattern.
            Contains a Dictionary in the format: Dictionary&lt;long,Dictionary&lt;long,&lt;List&lt;Fee>>> where the long keys are FeeSchedNum and code num respectively.</summary>
        </member>
        <member name="P:OpenDentBusiness.FeeCache.Dict">
            <summary>All Fees organized by FeeSchedNum, CodeNum, followed by a list of Fees including the default fee, provider overrides, clinic overrides, etc.</summary>
        </member>
        <member name="M:OpenDentBusiness.FeeCache.#ctor(System.Collections.Generic.List{OpenDentBusiness.Fee})">
            <summary>Construct a cache from the list of provided fees.</summary>
        </member>
        <member name="M:OpenDentBusiness.FeeCache.Initialize">
            <summary>Fill Dictionary with ALL Fees from DB.</summary>
        </member>
        <member name="M:OpenDentBusiness.FeeCache.RefreshCache">
            <summary>Only refreshes cache items that have been invalidated. Can be called as frequently as one would like.</summary>
        </member>
        <member name="M:OpenDentBusiness.FeeCache.GetCopy">
            <summary>Creates copy of fee cache.</summary>
            <returns>A copy of the entire cache object which contains a dictionary of fees.</returns>
        </member>
        <member name="M:OpenDentBusiness.FeeCache.GetCopyByFeeSchedNum(System.Int64)">
            <summary>Gets a dictionary that contains the the fees for a fee schedule. The key of the dictionary is the CodeNum and the value is a list of
            fees for that CodeNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.FeeCache.GetAmount(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Returns an amount if a fee has been entered.  Prefers local clinic fees over HQ fees.  Otherwise returns -1.  Not usually used directly.
            Uses the list of fees passed in instead of the cached list of fees.</summary>
        </member>
        <member name="M:OpenDentBusiness.FeeCache.GetAmount0(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Almost the same as GetAmount.  But never returns -1;  Returns an amount if a fee has been entered.  
            Prefers local clinic fees over HQ fees.  
            Returns 0 if code can't be found.
            Uses the list of fees passed in instead of the cached list of fees.</summary>
        </member>
        <member name="T:OpenDentBusiness.FormPats">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.FormPats.Insert(OpenDentBusiness.FormPat)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.FormPats.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.HL7Msgs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Msgs.GetOne(System.Int64)">
            <summary>This will retrieve the hl7msg object from the database using the primary key Hl7MsgNum.  Used primarily for getting the MsgText of the referenced message, since we do not want to get that potentially large data unless we specifically need it.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Msgs.GetHL7Msgs(System.DateTime,System.DateTime,System.Int64,System.Int32)">
            <summary>When called we will make sure to send a startDate and endDate.  Status parameter 0:All, 1:OutPending, 2:OutSent, 3:OutFailed, 4:InProcessed, 5:InFailed.  This will not return hl7msg.MsgText due to large size of text of many messages.  To see the message text of one of the returned rows, use GetOne(long hl7MsgNum) above.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Msgs.GetControlId(OpenDentBusiness.HL7Msg)">
            <summary>Gets the message control ID of the message we are attempting to send, for TCP/IP acknowledgment.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Msgs.Insert(OpenDentBusiness.HL7Msg)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Msgs.Update(OpenDentBusiness.HL7Msg)">
            <summary></summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:OpenDentBusiness.HL7Msgs.MessageWasSent(System.Int64)" -->
        <member name="M:OpenDentBusiness.HL7Msgs.DeleteOldMsgText">
            <summary>Doesn't delete the old messages, but just the text of the message.  This avoids breaking MessageWasSent().  Only affects messages that are at least four months old, regardless of status.  The hl7msg rows should not be deleted because we do not want the "complete" button to show up again for old appointments.</summary>
        </member>
        <member name="T:OpenDentBusiness.FeeScheds">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.FeeScheds.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.FeeScheds.Insert(OpenDentBusiness.FeeSched)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.FeeScheds.Update(OpenDentBusiness.FeeSched)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.FeeScheds.Sync(System.Collections.Generic.List{OpenDentBusiness.FeeSched},System.Collections.Generic.List{OpenDentBusiness.FeeSched},System.Int64)">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  No need to pass in userNum, it's set before remoting role check
            and passed to the server if necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.FeeScheds.GetOne(System.Int64,System.Collections.Generic.List{OpenDentBusiness.FeeSched})">
            <summary>Gets one fee sched from the cache.  Will return null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.FeeScheds.GetDescription(System.Int64)">
            <summary>Returns the description of the fee schedule.  Appends (hidden) if the fee schedule has been hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.FeeScheds.GetByExactName(System.String)">
            <summary>Will return null if exact name not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.FeeScheds.GetByExactName(System.String,OpenDentBusiness.FeeScheduleType)">
            <summary>Will return null if exact name not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.FeeScheds.GetListForType(OpenDentBusiness.FeeScheduleType,System.Boolean)">
            <summary>Only used in FormInsPlan and FormFeeScheds.</summary>
        </member>
        <member name="M:OpenDentBusiness.FeeScheds.GetListForType(OpenDentBusiness.FeeScheduleType,System.Boolean,System.Collections.Generic.List{OpenDentBusiness.FeeSched})">
            <summary>Used to find FeeScheds of a certain type from within a given list.</summary>
        </member>
        <member name="M:OpenDentBusiness.FeeScheds.CleanupAllowedScheds">
            <summary>Deletes FeeScheds that are hidden and not attached to any insurance plans.  Returns the number of deleted fee scheds.</summary>
        </member>
        <member name="T:OpenDentBusiness.InsPlans">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.Insert(OpenDentBusiness.InsPlan)">
            <summary>Also fills PlanNum from db.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.Insert(OpenDentBusiness.InsPlan,System.Boolean)">
            <summary>Also fills PlanNum from db.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.Update(OpenDentBusiness.InsPlan)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.GetPlan(System.Int64,System.Collections.Generic.List{OpenDentBusiness.InsPlan})">
            <summary>It's fastest if you supply a plan list that contains the plan, but it also works just fine if it can't initally locate the plan in the
            list.  You can supply a list of length 0 or null.  If not in the list, retrieves from db.  Returns null if planNum is 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.RefreshOne(System.Int64)">
            <summary>Only loads one plan from db. Can return null.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.RefreshForSubList(System.Collections.Generic.List{OpenDentBusiness.InsSub})">
            <summary>Gets List of plans based on the subList.  The list won't be in the same order.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.AreEqualValue(OpenDentBusiness.InsPlan,OpenDentBusiness.InsPlan)">
            <summary>Tests all fields for equality.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.GetDescript(System.Int64,OpenDentBusiness.Family,System.Collections.Generic.List{OpenDentBusiness.InsPlan},System.Int64,System.Collections.Generic.List{OpenDentBusiness.InsSub})">
            <summary>Gets a description of the specified plan, including carrier name and subscriber. It's fastest if you supply a plan list that contains the plan, but it also works just fine if it can't initally locate the plan in the list.  You can supply an array of length 0 for both family and planlist.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.GetCarrierName(System.Int64,System.Collections.Generic.List{OpenDentBusiness.InsPlan})">
            <summary>Used in Ins lines in Account module and in Family module.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.GetCarrierNames(System.Collections.Generic.List{System.Int64})">
            <summary>Returns a DataTable containing the PlanNum, CarrierNum, and CarrierName for a list of PlanNums.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.GetInsRem(System.Collections.Generic.List{OpenDentBusiness.ClaimProcHist},System.DateTime,System.Int64,System.Int64,System.Int64,System.Collections.Generic.List{OpenDentBusiness.InsPlan},System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Int64,System.Int64)">
            <summary>Only used once in Claims.cs.  Gets insurance benefits remaining for one benefit year.  Returns actual remaining insurance based on ClaimProc data, taking into account inspaid and ins pending. Must supply all claimprocs for the patient.  Date used to determine which benefit year to calc.  Usually today's date.  The insplan.PlanNum is the plan to get value for.  ExcludeClaim is the ClaimNum to exclude, or enter -1 to include all.  This does not yet handle calculations where ortho max is different from regular max.  Just takes the most general annual max, and subtracts all benefits used from all categories.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.GetPendingDisplay(System.Collections.Generic.List{OpenDentBusiness.ClaimProcHist},System.DateTime,OpenDentBusiness.InsPlan,System.Int64,System.Int64,System.Int64,System.Int64,System.Collections.Generic.List{OpenDentBusiness.Benefit})">
            <summary>Only for display purposes rather than for calculations.  Get pending insurance for a given plan for one benefit year. Include a history list for the patient/family.  asofDate used to determine which benefit year to calc.  Usually the date of service for a claim.  The planNum is the plan to get value for.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.GetInsUsedDisplay(System.Collections.Generic.List{OpenDentBusiness.ClaimProcHist},System.DateTime,System.Int64,System.Int64,System.Int64,System.Collections.Generic.List{OpenDentBusiness.InsPlan},System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Int64,System.Int64)">
            <summary>Only for display purposes rather than for calculations.  Get insurance benefits used for one benefit year.  Must supply all relevant hist for the patient.  asofDate is used to determine which benefit year to calc.  Usually date of service for a claim.  The insplan.PlanNum is the plan to get value for.  ExcludeClaim is the ClaimNum to exclude, or enter -1 to include all.  The behavior of this changed in 7.1.  It now only includes values that apply towards annual max.  So if there is a limitation override for a category like ortho or preventive, then completed procedures in those categories will be excluded.  The benefitList passed in might very well have benefits from other insurance plans included.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.GetDedUsedDisplay(System.Collections.Generic.List{OpenDentBusiness.ClaimProcHist},System.DateTime,System.Int64,System.Int64,System.Int64,System.Collections.Generic.List{OpenDentBusiness.InsPlan},OpenDentBusiness.BenefitCoverageLevel,System.Int64)">
            <summary>Only for display purposes rather than for calculations.  Get insurance deductible used for one benefit year.  Must supply a history list for the patient/family.  asofDate is used to determine which benefit year to calc.  Usually date of service for a claim.  The planNum is the plan to get value for.  ExcludeClaim is the ClaimNum to exclude, or enter -1 to include all.  It includes pending deductibles in the result.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.GetDedRemainDisplay(System.Collections.Generic.List{OpenDentBusiness.ClaimProcHist},System.DateTime,System.Int64,System.Int64,System.Int64,System.Collections.Generic.List{OpenDentBusiness.InsPlan},System.Int64,System.Double,System.Double)">
            <summary>Only for display purposes rather than for calculations.  Get insurance deductible used for one benefit year.  Must supply a history list for the patient/family.  asofDate is used to determine which benefit year to calc.  Usually date of service for a claim.  The planNum is the plan to get value for.  ExcludeClaim is the ClaimNum to exclude, or enter -1 to include all.  It includes pending deductibles in the result. The ded and dedFam variables are the individual and family deductibles respectively. This function assumes that the individual deductible 'ded' is always available, but that the family deductible 'dedFam' is optional (set to -1 if not available).</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.GetHListAll">
            <summary>This is used in FormQuery.SubmitQuery to allow display of carrier names.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.GetBigList(System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Used from FormInsPlans to get a big list of many plans, organized by carrier name or by employer.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.GetListFeeCheck(System.String,System.String,System.Int64,System.Int64,OpenDentBusiness.FeeScheduleType)">
            <summary>Used in FormFeesForIns</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.SetFeeSched(System.Int64,System.String,System.String,System.String,System.Int64,OpenDentBusiness.FeeScheduleType)">
            <summary>Based on the four supplied parameters, it updates all similar plans.  Used in a specific tool: FormFeesForIns.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.ConvertToNewClaimform(System.Int64,System.Int64)">
            <summary>Returns number of rows affected.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.GenerateAllowedFeeSchedules(System.Int64)">
            <summary>Returns the number of fee schedules added.  It doesn't inform the user of how many plans were affected, but there will obviously be a
            certain number of plans for every new fee schedule.  No need to pass in userNum, it's set before remoting role check and passed to the server
            if necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.GetCopay(System.Int64,System.Int64,System.Int64,System.Boolean,System.String,System.Int64,System.Int64)">
            <summary>Returns -1 if no copay feeschedule.  Can return -1 if copay amount is blank.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.GetAllowed(System.String,System.Int64,System.Int64,System.Boolean,System.String,System.String,System.Int64,System.Int64)">
            <summary>Returns -1 if no allowed feeschedule or fee unknown for this procCode. Otherwise, returns the allowed fee including 0. Can handle a planNum of 0.  Tooth num is used for posterior composites.  It can be left blank in some situations.  Provider must be supplied in case plan has no assigned fee schedule.  Then it will use the fee schedule for the provider.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.ComputeEstimatesForTrojanPlan(System.Int64)">
            <summary>Used when closing the edit plan window to find all patients using this plan and to update all claimProcs for each patient.  This keeps estimates correct.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.ComputeEstimatesForSubscriber(System.Int64)">
            <summary>Used when closing the edit plan window to find all patients using this plan and to update all claimProcs for each patient.  This keeps estimates correct.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.Delete(OpenDentBusiness.InsPlan)">
            <summary>Only used from FormInsPlan. Throws ApplicationException if any dependencies. This is quite complex, because it also must update all claimprocs for all patients affected by the deletion.  Also deletes patplans, benefits, claimprocs, and possibly inssubs.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.Delete(System.Int64)">
            <summary>Used from FormInsPlan and InsPlans.Merge. Does not check any dependencies.  Used when a new plan is created and then is no longer needed.  Also used if all dependencies have already been fixed.  Does not affect any other objects.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.ChangeReferences(System.Int64,System.Int64)">
            <summary>This changes PlanNum in every place in database where it's used.  It also deletes benefits for the old planNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.SetAllPlansToShowUCR">
            <summary>Returns the number of plans affected.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.GetByCarrierName(System.String,System.Int64)">
            <summary>No need to pass in userNum, it's set before remoting role check and passed to the server if necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.ClearFkey(System.Int64)">
            <summary>Zeros securitylog FKey column for rows that are using the matching planNum as FKey and are related to InsPlan.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the InsPlan table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlans.ClearFkey(System.Collections.Generic.List{System.Int64})">
            <summary>Zeros securitylog FKey column for rows that are using the matching planNums as FKey and are related to InsPlan.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the InsPlan table type.</summary>
        </member>
        <member name="T:OpenDentBusiness.JournalEntries">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JournalEntries.GetForTrans(System.Int64)">
            <summary>Used when displaying the splits for a transaction.</summary>
        </member>
        <member name="M:OpenDentBusiness.JournalEntries.GetForAccount(System.Int64)">
            <summary>Used to display a list of entries for one account.</summary>
        </member>
        <member name="M:OpenDentBusiness.JournalEntries.GetForReconcile(System.Int64,System.Boolean,System.Int64)">
            <summary>Used in reconcile window.</summary>
        </member>
        <member name="M:OpenDentBusiness.JournalEntries.Insert(OpenDentBusiness.JournalEntry)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JournalEntries.Update(OpenDentBusiness.JournalEntry)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JournalEntries.Delete(OpenDentBusiness.JournalEntry)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.JournalEntries.UpdateList(System.Collections.Generic.List{OpenDentBusiness.JournalEntry},System.Collections.Generic.List{OpenDentBusiness.JournalEntry})">
            <summary>Used in FormTransactionEdit to synch database with changes user made to the journalEntry list for a transaction.  Must supply an old list for comparison.  Only the differences are saved.  Surround with try/catch, because it will thrown an exception if any entries are negative.</summary>
        </member>
        <member name="M:OpenDentBusiness.JournalEntries.AttachedToReconcile(System.Collections.Generic.List{OpenDentBusiness.JournalEntry})">
            <summary>Called from FormTransactionEdit.</summary>
        </member>
        <member name="M:OpenDentBusiness.JournalEntries.GetReconcileDate(System.Collections.Generic.List{OpenDentBusiness.JournalEntry})">
            <summary>Called from FormTransactionEdit.</summary>
        </member>
        <member name="M:OpenDentBusiness.JournalEntries.SaveList(System.Collections.Generic.List{OpenDentBusiness.JournalEntry},System.Int64)">
            <summary>Called once from FormReconcileEdit when closing.  Saves the reconcileNum for every item in the list.</summary>
        </member>
        <member name="T:OpenDentBusiness.LabCases">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LabCases.Refresh(System.DateTime,System.DateTime,System.Boolean,System.Boolean)">
            <summary>Gets a filtered list of all labcases.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabCases.GetForPeriod(System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64})">
            <summary>Used when drawing the appointments for a day. Send in operatory nums to limit selection, null for all, useful for clinic filtering.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabCases.GetForPlanned(System.Int64)">
            <summary>Used when drawing the planned appointment.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabCases.GetOne(System.Int64)">
            <summary>Gets one labcase from database.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabCases.GetForPat(System.Int64,System.Boolean)">
            <summary>Gets all labcases for a patient which have not been attached to an appointment.  Usually one or none.  Only used when attaching a labcase from within an appointment.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabCases.Insert(OpenDentBusiness.LabCase)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LabCases.Update(OpenDentBusiness.LabCase)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LabCases.Delete(System.Int64)">
            <summary>Surround with try/catch.  Checks dependencies first.  Throws exception if can't delete.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabCases.AttachToAppt(System.Int64,System.Int64)">
            <summary>Attaches a labcase to an appointment.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabCases.AttachToPlannedAppt(System.Int64,System.Int64)">
            <summary>Attaches a labcase to a planned appointment.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabCases.GetOneFromList(System.Collections.Generic.List{OpenDentBusiness.LabCase},System.Int64)">
            <summary>Frequently returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabCases.GetForApt(System.Int64)">
            <summary>Gets the labcase for an appointment. Used when creating routing slips.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabCases.GetForApt(OpenDentBusiness.Appointment)">
            <summary>Gets the labcase for an appointment.  Used in the Appointment Edit window.</summary>
        </member>
        <member name="T:OpenDentBusiness.LabCaseComparer">
            <summary>The supplied DataRows must include the following columns: AptDateTime,patient</summary>
        </member>
        <member name="M:OpenDentBusiness.LabCaseComparer.Compare(System.Data.DataRow,System.Data.DataRow)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Laboratories">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Laboratories.Refresh">
            <summary>Refresh all Laboratories</summary>
        </member>
        <member name="M:OpenDentBusiness.Laboratories.GetOne(System.Int64)">
            <summary>Gets one laboratory from database</summary>
        </member>
        <member name="M:OpenDentBusiness.Laboratories.Insert(OpenDentBusiness.Laboratory)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Laboratories.Update(OpenDentBusiness.Laboratory)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Laboratories.Delete(System.Int64)">
            <summary>Checks dependencies first.  Throws exception if can't delete.</summary>
        </member>
        <member name="T:OpenDentBusiness.LabTurnarounds">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LabTurnarounds.GetForLab(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LabTurnarounds.SetForLab(System.Int64,System.Collections.Generic.List{OpenDentBusiness.LabTurnaround})">
            <summary>This is used when saving a laboratory.  All labturnarounds for the lab are deleted and recreated.  So the list that's passed in will not have the correct keys set.  The key columns will be ignored.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabTurnarounds.Insert(OpenDentBusiness.LabTurnaround)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LabTurnarounds.ComputeDueDate(System.DateTime,System.Int32)">
            <summary>Calculates the due date by adding the number of business days listed.  Adds an additional day for each office holiday.</summary>
        </member>
        <member name="T:OpenDentBusiness.LanguageForeigns">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.LanguageForeigns.hList">
            <summary>just translations for the culture currently being used.  If a translation is missing, it tries to use a translation from another culture with the same language. Key=ClassType+English. Value =LanguageForeign object.  When support for multiple simultaneous languages is added, there will still be a current culture, but then we will add a supplemental way to extract translations for alternate cultures.</summary>
        </member>
        <member name="M:OpenDentBusiness.LanguageForeigns.Refresh(System.String,System.String)">
            <summary>Haven't moved this over to the cache pattern because of the parameters.  But when called, it behaves exactly like the cache pattern, refreshing on both client and server.</summary>
        </member>
        <member name="M:OpenDentBusiness.LanguageForeigns.Insert(OpenDentBusiness.LanguageForeign)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LanguageForeigns.Update(OpenDentBusiness.LanguageForeign)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LanguageForeigns.Delete(OpenDentBusiness.LanguageForeign)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LanguageForeigns.GetListForCulture(System.Globalization.CultureInfo)">
            <summary>Only used during export to get a list of all translations for specified culture only.</summary>
        </member>
        <member name="M:OpenDentBusiness.LanguageForeigns.GetListForType(System.String)">
            <summary>Used in FormTranslation to get all translations for all cultures for one classtype</summary>
        </member>
        <member name="M:OpenDentBusiness.LanguageForeigns.GetForCulture(OpenDentBusiness.LanguageForeign[],System.String,System.String)">
            <summary>Used in FormTranslation to get a single entry for the specified culture.  The culture match must be extact.  If no translation entries, then it returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.LanguageForeigns.GetOther(OpenDentBusiness.LanguageForeign[],System.String,System.String)">
            <summary>Used in FormTranslation to get a single entry with the same language as the specified culture, but only for a different culture.  For instance, if culture is es-PR (Spanish-PuertoRico), then it will return any spanish translation that is NOT from Puerto Rico.  If no other translation entries, then it returns null.</summary>
        </member>
        <member name="T:OpenDentBusiness.LetterMergeFields">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.LetterMergeFields.list">
            <summary>List of all lettermergeFields.</summary>
        </member>
        <member name="M:OpenDentBusiness.LetterMergeFields.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LetterMergeFields.Insert(OpenDentBusiness.LetterMergeField)">
            <summary>Inserts this lettermergefield into database.</summary>
        </member>
        <member name="M:OpenDentBusiness.LetterMergeFields.GetForLetter(System.Int64)">
            <summary>Called from LetterMerge.Refresh() to get all field names for a given letter.  The result is a collection of strings representing field names.</summary>
        </member>
        <member name="M:OpenDentBusiness.LetterMergeFields.DeleteForLetter(System.Int64)">
            <summary>Deletes all lettermergefields for the given letter.  This is then followed by adding them all back, which is simpler than just updating.</summary>
        </member>
        <member name="T:OpenDentBusiness.LetterMerges">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.LetterMerges.list">
            <summary>List of all lettermerges.</summary>
        </member>
        <member name="P:OpenDentBusiness.LetterMerges.WordApp">
            <summary>This is a static reference to a word application.  That way, we can reuse it instead of having to reopen Word each time.</summary>
        </member>
        <member name="M:OpenDentBusiness.LetterMerges.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LetterMerges.Insert(OpenDentBusiness.LetterMerge)">
            <summary>Inserts this lettermerge into database.</summary>
        </member>
        <member name="M:OpenDentBusiness.LetterMerges.Update(OpenDentBusiness.LetterMerge)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LetterMerges.Delete(OpenDentBusiness.LetterMerge)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.LetterMerges.GetListForCat(System.Int32)">
            <summary>Supply the index of the cat within DefC.Short.</summary>
        </member>
        <member name="T:OpenDentBusiness.Letters">
            <summary>Letters are refreshed as local data.</summary>
        </member>
        <member name="F:OpenDentBusiness.Letters.list">
            <summary>List of</summary>
        </member>
        <member name="M:OpenDentBusiness.Letters.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Letters.Update(OpenDentBusiness.Letter)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Letters.Insert(OpenDentBusiness.Letter)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Letters.Delete(OpenDentBusiness.Letter)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.MedicationPats">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedicationPats.Refresh(System.Int64,System.Boolean)">
            <summary>Normally, includeDiscontinued is false.  User needs to check a box to include discontinued.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedicationPats.GetMedPatsForReconcile(System.Int64)">
            <summary>Gets all active medications for the patient.  Exactly like Refresh() except this does not return medications when DateStop has today's date.  Currently only called from FormReconcileMedication.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedicationPats.GetOne(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedicationPats.Update(OpenDentBusiness.MedicationPat)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedicationPats.Insert(OpenDentBusiness.MedicationPat)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedicationPats.InsertOrUpdateMedOrderForRx(OpenDentBusiness.RxPat,System.Int64,System.Boolean)">
            <summary>For CPOE.  Used for both manual rx and eRx through NewCrop.  Creates or updates a medical order using the given prescription information.
            Since rxCui is not part of the prescription, it must be passed in as a separate parameter.
            If isProvOrder is true, then the medical order provNum will be set to the prescription provNum.  If isProvOrder is false, then the medical order provNum will be set to 0.
            The MedDescript and NewCropGuid will always be copied from the prescription to the medical order and the medical order MedicationNum will be set to 0.
            This method return the medOrderNum for the new/updated medicationPat. Unlike most medical orders this does not create an entry in the medical order table.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedicationPats.Delete(OpenDentBusiness.MedicationPat)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MedicationPats.GetMultMedicationPats(System.Collections.Generic.List{System.Int64})">
            <summary>Used along with GetChangedSinceMedicationPatNums</summary>
        </member>
        <member name="M:OpenDentBusiness.MedicationPats.GetMedicationPatsByMedicationNum(System.Int64,System.Int64)">
            <summary>Get list of MedicationPats by MedicationNum for a particular patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedicationPats.ResetTimeStamps(System.Int64)">
            <summary>Changes the value of the DateTStamp column to the current time stamp for all medicationpats of a patient</summary>
        </member>
        <member name="M:OpenDentBusiness.MedicationPats.ResetTimeStamps(System.Int64,System.Boolean)">
            <summary>Changes the value of the DateTStamp column to the current time stamp for all medicationpats of a patient that are the status specified.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedicationPats.GetMedicationOrderByNewCropGuid(System.String)">
            <summary>Used for NewCrop medication orders only.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedicationPats.UpdateRxCuiForMedication(System.Int64,System.Int64)">
            <summary>Used to synch medication.RxCui with medicationpat.RxCui.  Updates all medicationpat.RxCui to the given value for those medication pats linked to the given medication num.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedicationPats.GetAllForRxCuis(System.Collections.Generic.List{System.String})">
            <summary>Gets list of RxCui code strings for medications with RxCui in the supplied list ordered for patients in the last year.
            "Ordered" is based on there being a DateStart.  Result list is grouped by RxCui.</summary>
        </member>
        <member name="T:OpenDentBusiness.Medications">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Medications._listt">
            <summary>All medications.  Not refreshed with local data.  Only refreshed as needed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Medications._hList">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.Medications.Listt">
            <summary>All medications.  Not refreshed with local data.  Only refreshed as needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.GetListt">
            <summary>All medications.  Not refreshed with local data.  Only refreshed as needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.Refresh">
            <summary>This must refresh Listt on client, not on server.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.HasMedicationInCache(System.Int64)">
            <summary>Checks to see if the medication exists in the current cache.  If not, the local cache will get refreshed and then searched again.  If med is still not found, false is returned because the med does not exist.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.GetListFromDb">
            <summary>Only public so that the remoting works.  Do not call this from anywhere except in this class.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.GetList(System.String)">
            <summary>Returns medications that contain the passed in string.  Blank for all.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.Update(OpenDentBusiness.Medication)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.Insert(OpenDentBusiness.Medication)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.Delete(OpenDentBusiness.Medication)">
            <summary>Dependent brands and patients will already be checked.  Be sure to surround with try-catch.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.IsInUse(OpenDentBusiness.Medication)">
            <summary>Returns a string if medication is in use in medicationpat, allergydef, eduresources, or preference.MedicationsIndicateNone. The string will explain where the medication is in use.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.GetPatNamesForMed(System.Int64)">
            <summary>Returns an array of all patient names who are using this medication.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.GetBrands(System.Int64)">
            <summary>Returns a list of all brands dependend on this generic. Only gets run if this is a generic.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.GetMedication(System.Int64)">
            <summary>Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.GetMedicationFromDb(System.Int64)">
            <summary>Deprecated.  Use GetMedication instead.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.GetMedicationFromDbByName(System.String)">
            <summary>//Returns first medication with matching MedName, if not found returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.GetGeneric(System.Int64)">
            <summary>Gets the generic medication for the specified medication Num. Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.GetDescription(System.Int64)">
            <summary>Gets the medication name.  Also, generic in () if applicable.  Returns empty string if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.GetNameOnly(System.Int64)">
            <summary>Gets the medication name. Copied from GetDescription.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.GetGenericName(System.Int64)">
            <summary>Gets the generic medication name, given it's generic Num.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.GetGenericName(System.Int64,System.Collections.Hashtable)">
            <summary>Gets the generic medication name, given it's generic Num.  Will search through the passed in list before resorting to cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.GetMultMedications(System.Collections.Generic.List{System.Int64})">
            <summary>Used along with GetChangedSinceMedicationNums</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.GetMedicationsByPat(System.Int64)">
            <summary>Deprecated.  Use MedicationPat.Refresh() instead.  Returns medication list for a specific patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.CountPats(System.Int64)">
            <summary>Returns the number of patients associated with the passed-in medicationNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medications.Merge(System.Int64,System.Int64)">
            <summary>Medication merge tool.  Returns the number of rows changed.  Deletes the medication associated with medNumInto.</summary>
        </member>
        <member name="T:OpenDentBusiness.PatFieldDefs">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.PatFieldDefs.ListLong">
            <summary>A list of all allowable patFields.</summary>
        </member>
        <member name="P:OpenDentBusiness.PatFieldDefs.ListShort">
            <summary>A list of patFields that are not hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatFieldDefs.GetListShort">
            <summary>Gets a deep copy of patFields that are not hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatFieldDefs.GetListLong">
            <summary>Gets a deep copy of all allowable patFields.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatFieldDefs.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PatFieldDefs.Update(OpenDentBusiness.PatFieldDef,System.String)">
            <summary>Must supply the old field name so that the patient lists can be updated.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatFieldDefs.Insert(OpenDentBusiness.PatFieldDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PatFieldDefs.Delete(OpenDentBusiness.PatFieldDef)">
            <summary>Surround with try/catch, because it will throw an exception if any patient is using this def.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatFieldDefs.GetFieldName(System.Int64)">
            <summary>GetFieldName returns the field name identified by the field definition number passed as a parameter.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatFieldDefs.GetPickListByFieldName(System.String)">
            <summary>GetPickListByFieldName returns the pick list identified by the field name passed as a parameter.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatFieldDefs.Sync(System.Collections.Generic.List{OpenDentBusiness.PatFieldDef},System.Collections.Generic.List{OpenDentBusiness.PatFieldDef})">
            <summary>Sync pattern, must sync entire table. Probably only to be used in the master problem list window.</summary>
        </member>
        <member name="T:OpenDentBusiness.PatFields">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PatFields.Refresh(System.Int64)">
            <summary>Gets a list of all PatFields for a given patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatFields.GetPatFieldsWithRegKeys(System.String)">
            <summary>Get all PatFields for the given fieldName which belong to patients who have a corresponding entry in the RegistrationKey table. DO NOT REMOVE! Used by OD WebApps solution.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatFields.Update(OpenDentBusiness.PatField)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PatFields.Insert(OpenDentBusiness.PatField)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PatFields.Delete(OpenDentBusiness.PatField)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PatFields.GetByName(System.String,OpenDentBusiness.PatField[])">
            <summary>Frequently returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatFields.MakeDeleteLogEntry(OpenDentBusiness.PatField)">
            <summary>A helper method to make a security log entry for deletion.  Because we have several patient field edit windows, this will allow us to change them all at once.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatFields.MakeEditLogEntry(OpenDentBusiness.PatField,OpenDentBusiness.PatField)">
            <summary>A helper method to make a security log entry for an edit.  Because we have several patient field edit windows, this will allow us to change them all at once.</summary>
        </member>
        <member name="T:OpenDentBusiness.PatPlans">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlans.Refresh(System.Int64)">
            <summary>Gets a list of all patplans for a given patient</summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlans.Update(OpenDentBusiness.PatPlan)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlans.Insert(OpenDentBusiness.PatPlan)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlans.GetInsSubNum(System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Int32)">
            <summary>Supply a PatPlan list.  This function loops through the list and returns the insSubNum of the specified ordinal.  If ordinal not valid, then it returns 0.  The main purpose of this function is so we don't have to check the length of the list.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlans.GetRelat(System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Int32)">
            <summary>Supply a PatPlan list.  This function loops through the list and returns the relationship of the specified ordinal.  If ordinal not valid, then it returns self (0).</summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlans.GetOrdinal(System.Int64,System.Collections.Generic.List{OpenDentBusiness.PatPlan})">
            <summary>Will return 1 for primary insurance, etc.  Will return 0 if planNum not found in the list.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlans.GetOrdinal(OpenDentBusiness.PriSecMed,System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Collections.Generic.List{OpenDentBusiness.InsPlan},System.Collections.Generic.List{OpenDentBusiness.InsSub})">
            <summary>Returns the ordinal (1-based) for the patplan matching the given PriSecMed. Returns 0 if no match.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlans.GetFromList(System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Int64)">
            <summary>Will return null if subNum not found in the list.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlans.SetOrdinal(System.Int64,System.Int32)">
            <summary>Sets the ordinal of the specified patPlan.  Rearranges the other patplans for the patient to keep the ordinal sequence contiguous.  Estimates must be recomputed after this.  FormInsPlan currently updates estimates every time it closes.  Only used in one place.  Returns the new ordinal.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlans.GetFromList(OpenDentBusiness.PatPlan[],System.Int64)">
            <summary>Loops through the supplied list to find the one patplan needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlans.GetPatPlanNum(System.Int64,System.Collections.Generic.List{OpenDentBusiness.PatPlan})">
            <summary>Loops through the supplied list to find the one patplanNum needed based on the planNum.  Returns 0 if patient is not currently covered by the planNum supplied.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlans.GetByPlanNum(System.Int64)">
            <summary>Gets directly from database.  Used by Trojan.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlans.GetCountBySubNum(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlans.GetPatPlan(System.Int64,System.Int32)">
            <summary>Will return null if none exists.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlans.Delete(System.Int64)">
            <summary>Deletes the patplan with the specified patPlanNum.  Rearranges the other patplans for the patient to keep the ordinal sequence contiguous.  Then, recomputes all estimates for this patient because their coverage is now different.  Also sets patient.HasIns to the correct value.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlans.DeleteNonContiguous(System.Int64)">
            <summary>Deletes the patplan and benefits with the specified patPlanNum.  Does not rearrange the other patplans for the patient.  A patplan must be inserted after this function is called to take the place of the patplan being deleted.</summary>
        </member>
        <member name="T:OpenDentBusiness.PriSecMed">
            <summary>This is only used in the GetOrdinal method above.</summary>
        </member>
        <member name="F:OpenDentBusiness.PriSecMed.Primary">
            <summary>Lowest dental ordinal.</summary>
        </member>
        <member name="F:OpenDentBusiness.PriSecMed.Secondary">
            <summary>Second lowest dental ordinal</summary>
        </member>
        <member name="F:OpenDentBusiness.PriSecMed.Medical">
            <summary>Lowest medical ordinal</summary>
        </member>
        <member name="T:OpenDentBusiness.Payments">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.Refresh(System.Int64)">
            <summary>Gets all payments for the specified patient. This has NOTHING to do with pay splits.  Must use pay splits for accounting.  This is only for display in Account module.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.GetPayment(System.Int64)">
            <summary>Get one specific payment from db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.GetPayments(System.Collections.Generic.List{System.Int64})">
            <summary>Get all specified payments.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.GetNonSplitForPats(System.Collections.Generic.List{System.Int64})">
            <summary>Gets all payments for a family.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.GetForDeposit(System.Int64)">
            <summary>Gets all payments attached to a single deposit.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.GetForDeposit(System.DateTime,System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>Gets all unattached payments for a new deposit slip.  Excludes payments before dateStart.  There is a chance payTypes might be of length 1 or even 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.GetNeedingProcessed(System.Collections.Generic.List{System.Int64})">
            <summary>Gets all payments that have a ProcessStatus of OnlinePending. Pass in an empty list to get payments for all clinics.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.CountNeedingProcessed(System.Int64)">
            <summary>Gets all payments that have a ProcessStatus of OnlinePending for the clinic. Pass in a clinicNum of 0 to see all payments.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.Update(OpenDentBusiness.Payment,System.Boolean)">
            <summary>Updates this payment.  Must make sure to update the datePay of all attached paysplits so that they are always in synch.  Also need to manually set IsSplit before here.  Will throw an exception if bad date, so surround by try-catch.  Set excludeDepositNum to true from FormPayment to prevent collision from another worksation that just deleted a deposit.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.Insert(OpenDentBusiness.Payment)">
            <summary>There's only one place in the program where this is called from.  Date is today, so no need to validate the date.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.Insert(OpenDentBusiness.Payment,System.Boolean)">
            <summary>There's only one place in the program where this is called from.  Date is today, so no need to validate the date.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.InsertFromXWeb(System.Int64,System.Int64,System.Int64,System.Double,System.String,System.String)">
            <summary>Insert Payment and PaySplit. Returns newly inserted Payment.PayNum.  Throws exceptions if XWeb Program Properties are invalid.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.Delete(OpenDentBusiness.Payment)">
            <summary>Deletes the payment as well as all splits.  Surround by try catch, because it will throw an exception if trying to delete a payment attached to a deposit.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.AllocationRequired(System.Double,System.Int64)">
            <summary>Called just before Allocate in FormPayment.butOK click.  If true, then it will prompt the user before allocating.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.Allocate(OpenDentBusiness.Payment)">
            <summary>Only Called only from FormPayment.butOK click.  Only called if the user did not enter any splits.  Usually just adds one split for the current patient.  But if that would take the balance negative, then it loops through all other family members and creates splits for them.  It might still take the current patient negative once all other family members are zeroed out.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.ValidateLinkedEntries(System.Double,System.Double,System.Boolean,System.Int64,System.Int64)">
            <summary>This does all the validation before calling AlterLinkedEntries.  It had to be separated like this because of the complexity of saving a payment.  Surround with try-catch.  Will throw an exception if user is trying to change, but not allowed.  Will return false if no synch with accounting is needed.  Use -1 for newAcct to indicate no change.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.AlterLinkedEntries(System.Double,System.Double,System.Boolean,System.Int64,System.Int64,System.DateTime,System.String)">
            <summary>Only called once from FormPayment when trying to change an amount or an account on a payment that's already linked to the Accounting section or when trying to create a new link.  This automates updating the Accounting section.  Do not surround with try-catch, because it was already validated in ValidateLinkedEntries above.  Use -1 for newAcct to indicate no changed. The name is required to give descriptions to new entries.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.GetFromList(System.Int64,System.Collections.Generic.List{OpenDentBusiness.Payment})">
            <summary>Used for display in ProcEdit. List MUST include the requested payment. Use GetPayments to get the list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Payments.GetCountAttachedToDeposit(System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>Returns the number of payments from the passed in paynums that are attached to a deposit other than IgnoreDepositNum.</summary>
        </member>
        <member name="T:OpenDentBusiness.PayPeriods">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PayPeriods.list">
            <summary>A list of all payperiods.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPeriods.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayPeriods.Insert(OpenDentBusiness.PayPeriod)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayPeriods.Update(OpenDentBusiness.PayPeriod)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayPeriods.Delete(OpenDentBusiness.PayPeriod)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayPeriods.GetForDate(System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayPeriods.HasPayPeriodForDate(System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayPeriods.GetMostRecent">
            <summary>Returns the most recent payperiod object or null if none were found.</summary>
        </member>
        <member name="T:OpenDentBusiness.PayPlanCharges">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlanCharges.Refresh(System.Int64)">
            <summary>Gets all PayPlanCharges for a guarantor or patient, ordered by date.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlanCharges.GetForPayPlan(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlanCharges.GetForPayPlans(System.Collections.Generic.List{System.Int64})">
            <summary>Returns a list of payplancharges associated to the passed in payplannums.  Will return a blank list if none.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlanCharges.GetDueForPayPlans(System.Collections.Generic.List{OpenDentBusiness.PayPlan},System.Int64)">
            <summary>Gets all payplan charges for the payplans passed in where the specified patient is the Guarantor.  Based on today's date.  
            Will return both credits and debits.  Does not return insurance payment plan charges.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlanCharges.UpdateAttachedPayPlanCharges(OpenDentBusiness.Procedure)">
            <summary>Takes a procNum and updates all of the dates of the payment plan charge credits associated to it.
            If a completed procedure is passed in, it will update all of the payment plan charges associated to it to the ProcDate. 
            If a non-complete procedure is passed in, it will update the charges associated to MaxValue.
            Does nothing if there are no charges attached to the passed-in procedure.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlanCharges.GetFromProc(System.Int64)">
            <summary>Takes a procNum and returns a list of all payment plan charge credits associated to the procedure.
            Returns an empty list if there are none.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlanCharges.GetOne(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlanCharges.Update(OpenDentBusiness.PayPlanCharge)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlanCharges.Insert(OpenDentBusiness.PayPlanCharge)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlanCharges.DeleteForProc(System.Int64)">
            <summary>Will delete all PayPlanCharges associated to the passed-in procNum from the database.  Does nothing if the procNum = 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlanCharges.Delete(OpenDentBusiness.PayPlanCharge)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlanCharges.Sync(System.Collections.Generic.List{OpenDentBusiness.PayPlanCharge},System.Int64)">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Must always pass in payPlanNum.</summary>
        </member>
        <member name="T:OpenDentBusiness.PayPlans">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.GetDependencyCount(System.Int64)">
            <summary>Gets a list of all payplans for a given patient, whether they are the patient or the guarantor.  This is only used in one place, when deleting a patient to check dependencies.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.GetForPats(System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>Returns a list of payment plans where the patient of the payment plan matches ANY in listPatNums OR the guarantor matches patNum.
            patNum will typically be the current patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.GetForPatNum(System.Int64)">
            <summary>Gets all payment plans that this patient is associated to.  
            Will return payment plans that this pat is the patient or guarantor of.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.GetValidPlansNoIns(System.Int64)">
            <summary>Determines if there are any valid plans with that patient as the guarantor.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.HasOutstandingPayPlansNoIns(System.Int64)">
            <summary>Returns true if the patient passed in has any outstanding non-ins payment plans with them as the guarantor.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.GetValidInsPayPlans(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>Get all payment plans for this patient with the insurance plan identified by PlanNum and InsSubNum attached (marked used for tracking expected insurance payments) that have not been paid in full.  Only returns plans with no claimprocs currently attached or claimprocs from the claim identified by the claimNum sent in attached.  If claimNum is 0 all payment plans with planNum, insSubNum, and patNum not paid in full will be returned.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.UpdateTreatmentCompletedAmt(System.Collections.Generic.List{OpenDentBusiness.PayPlan})">
            <summary>Updates the TreatmentCompletedAmt field of the passed in payplans in the database.  
            Used when a procedure attached to a payment plan charge is set complete or deleted.
            The treatment completed amount only takes into account payplancharge credits that have already occured
            (no charges attached to TP'd procs).</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.GetTxTotalAmt(System.Collections.Generic.List{OpenDentBusiness.PayPlanCharge})">
            <summary>Executes a LINQ statement that returns the total amount of tx that is both completed and planned for the passed in payment plan.
            Only used for payplans v2.  Different from the TxCompletedAmt, which looks ONLY at PayPlanCharge credits that have already occurred. 
            Does not update or make any calls to the database, as TxTotalAmt is not a db column.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.Insert(OpenDentBusiness.PayPlan)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.Update(OpenDentBusiness.PayPlan)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.Delete(OpenDentBusiness.PayPlan)">
            <summary>Called from FormPayPlan.  Also deletes all attached payplancharges.  Throws exception if there are any paysplits attached.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.GetAmtPaid(System.Int64)">
            <summary>Gets info directly from database. Used from PayPlan and Account windows to get the amount paid so far on one payment plan.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.PlanIsPaidOff(System.Int64)">
            <summary>Gets info directly from database. Used when adding a payment.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.GetAccumDue(System.Int64,System.Collections.Generic.List{OpenDentBusiness.PayPlanCharge})">
            <summary>Used from FormPayPlan, Account, and ComputeBal to get the accumulated amount due for a payment plan based on today's date.  
            Includes interest, but does not include payments made so far.  The chargelist must include all charges for this payplan, 
            but it can include more as well.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.GetPrincPaid(System.Double,System.Int64,System.Collections.Generic.List{OpenDentBusiness.PayPlanCharge})">
            <summary>Used from Account window to get the amount paid so far on one payment plan.  
            Must pass in the total amount paid and the returned value will not be more than this.  
            The chargelist must include all charges for this payplan, but it can include more as well.  
            It will loop sequentially through the charges to get just the principal portion.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.GetTotalPrinc(System.Int64,System.Collections.Generic.List{OpenDentBusiness.PayPlanCharge})">
            <summary>Used from Account and ComputeBal to get the total amount of the original principal for one payment plan.
            Does not include any interest. The chargelist must include all charges for this payplan, but it can include more as well.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.ComputeBal(System.Int64,OpenDentBusiness.PayPlan[],System.Collections.Generic.List{OpenDentBusiness.PayPlanCharge})">
            <summary>Returns the sum of all payment plan entries for guarantor and/or patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.AutoClose">
            <summary>Automatically closes all payment plans that have no future charges and that are paid off.
            Not really a problem if it fails because the UPDATE statement happens all at once, so at worst, no changes are made to their database.
            Returns the number of payment plans that were closed.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlans.GetHashStringForSignature(System.String)">
            <summary>Gets the hashstring from the provided string that is typically generated from GetStringForSignatureHash().
            This is done seperate of building the string so that new line replacements can be done when validating signatures before hashing.</summary>
        </member>
        <member name="T:OpenDentBusiness.PaySplits">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.Refresh(System.Int64)">
            <summary>Returns all paySplits for the given patNum, organized by procDate.  WARNING! Also includes related paysplits that aren't actually attached to patient.  Includes any split where payment is for this patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.GetForPayment(System.Int64)">
            <summary>Used from payment window to get all paysplits for the payment.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.Update(OpenDentBusiness.PaySplit)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.Update(OpenDentBusiness.PaySplit,OpenDentBusiness.PaySplit)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.Insert(OpenDentBusiness.PaySplit)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.Delete(OpenDentBusiness.PaySplit)">
            <summary>Deletes the paysplit.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.DeleteForPayment(System.Int64)">
            <summary>Used from payment window AutoSplit button to delete paysplits when clicking AutoSplit more than once.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.GetOne(System.Int64)">
            <summary>Gets one paysplit using the specified SplitNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.GetTotForProc(System.Int64)">
            <summary>Used from FormPayment to return the total payments for a procedure without requiring a supplied list.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.GetForProc(System.Int64,OpenDentBusiness.PaySplit[])">
            <summary>Returns all paySplits for the given procNum. Must supply a list of all paysplits for the patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.GetTotForProc(System.Int64,OpenDentBusiness.PaySplit[])">
            <summary>Used from ContrAccount and ProcEdit to display and calculate payments attached to procs. Used once in FormProcEdit</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.GetTotForProc(System.Int64,OpenDentBusiness.PaySplit[],System.Int64)">
            <summary>Used from FormPaySplitEdit.  Returns total payments for a procedure for all paysplits other than the supplied excluded paysplit.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.GetGroupedForPayment(System.Int64,OpenDentBusiness.PaySplit[])">
            <summary>Used once in ContrAccount.  WARNING!  The returned list of 'paysplits' are not real paysplits.  They are actually grouped by patient and date.  Only the ProcDate, SplitAmt, PatNum, and ProcNum(one of many) are filled. Must supply a list which would include all paysplits for this payment.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.GetAmountForPayment(System.Int64,System.DateTime,System.Int64,OpenDentBusiness.PaySplit[])">
            <summary>Only those amounts that have the same paynum, procDate, and patNum as the payment, and are not attached to procedures.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.GetForPats(System.Collections.Generic.List{System.Int64})">
            <summary>Used in Payment window to get all paysplits for a single patient without using a supplied list.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.GetForPatient(System.Int64,OpenDentBusiness.PaySplit[])">
            <summary>Used once in ContrAccount to just get the splits for a single patient.  The supplied list also contains splits that are not necessarily for this one patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.GetForPayPlan(System.Int64)">
            <summary>For a given PayPlan, returns a table of PaySplits with additional payment information.
            The additional information from the payment table will be columns titled "CheckNum", "PayAmt", and "PayType"</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.GetFromBundled(System.Data.DataTable)">
            <summary>Gets paysplits from a provided datatable.  This was originally part of GetForPayPlan but can't be because it's passed through the Middle Tier.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.GetPayPlanNum(System.Int64,System.Int64,OpenDentBusiness.PaySplit[])">
            <summary>Used once in ContrAccount.  Usually returns 0 unless there is a payplan for this payment and patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.GetPrepayForFam(OpenDentBusiness.Family)">
            <summary>Gets all paysplits that have are designated as prepayments for the patient's family.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.GetSplitsForPrepay(System.Collections.Generic.List{OpenDentBusiness.PaySplit})">
            <summary>Gets all paysplits that are attached to the prepayment paysplits specified.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.GetUnearnedForFam(OpenDentBusiness.Family)">
            <summary>Returns the total amount of prepayments for the entire family.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplits.Sync(System.Collections.Generic.List{OpenDentBusiness.PaySplit},System.Collections.Generic.List{OpenDentBusiness.PaySplit},System.Int64)">
            <summary>Inserts, updates, or deletes db rows to match listNew.  No need to pass in userNum, it's set before remoting role check and passed to
            the server if necessary.</summary>
        </member>
        <member name="F:OpenDentBusiness.SplitManagerPromptType.DoNotUse">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.SplitManagerPromptType.Prompt">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.SplitManagerPromptType.Force">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.PerioExams">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PerioExams.ListExams">
            <summary>This is public static because it would be hard to pass it into ContrPerio.  Only used by UI.</summary>
        </member>
        <member name="M:OpenDentBusiness.PerioExams.Refresh(System.Int64)">
            <summary>Most recent date last.  All exams loaded, even if not displayed.</summary>
        </member>
        <member name="M:OpenDentBusiness.PerioExams.Update(OpenDentBusiness.PerioExam)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PerioExams.Insert(OpenDentBusiness.PerioExam)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PerioExams.Delete(OpenDentBusiness.PerioExam)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PerioExams.GetExamIndex(System.Collections.Generic.List{OpenDentBusiness.PerioExam},System.Int64)">
            <summary>Used by PerioMeasures when refreshing to organize array.</summary>
        </member>
        <member name="T:OpenDentBusiness.PerioMeasures">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PerioMeasures.List">
            <summary>List of all perio measures for the current patient. Dim 1 is exams. Dim 2 is Sequences. Dim 3 is Measurements, always 33 per sequence(0 is not used).  This public static variable is only used by the UI.  It's here because it would be complicated to put it in ContrPerio.</summary>
        </member>
        <member name="M:OpenDentBusiness.PerioMeasures.Update(OpenDentBusiness.PerioMeasure)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PerioMeasures.Insert(OpenDentBusiness.PerioMeasure)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PerioMeasures.Delete(OpenDentBusiness.PerioMeasure)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PerioMeasures.SetSkipped(System.Int64,System.Collections.Generic.List{System.Int32})">
            <summary>For the current exam, clears existing skipped teeth and resets them to the specified skipped teeth. The ArrayList valid values are 1-32 int.</summary>
        </member>
        <member name="M:OpenDentBusiness.PerioMeasures.GetSkipped(System.Int64)">
            <summary>Used in FormPerio.Add_Click. For the specified exam, gets a list of all skipped teeth. The ArrayList valid values are 1-32 int.</summary>
        </member>
        <member name="M:OpenDentBusiness.PerioMeasures.Refresh(System.Int64,System.Collections.Generic.List{OpenDentBusiness.PerioExam})">
            <summary>Gets all measurements for the current patient, then organizes them by exam and sequence.</summary>
        </member>
        <member name="M:OpenDentBusiness.PerioMeasures.AdjustGMVal(System.Int32)">
            <summary>A -1 will be changed to a 0. Measures over 100 are changed to 100-measure. i.e. 100-104=-4 for hyperplasiac GM.</summary>
        </member>
        <member name="T:OpenDentBusiness.PlannedAppts">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PlannedAppts.Refresh(System.Int64)">
            <summary>Gets all planned appt objects for a patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.PlannedAppts.GetOne(System.Int64)">
            <Summary>Gets one plannedAppt from the database.</Summary>
        </member>
        <member name="M:OpenDentBusiness.PlannedAppts.GetOneOrderedByItemOrder(System.Int64)">
            <summary>Gets one plannedAppt by patient, ordered by ItemOrder</summary>
        </member>
        <member name="M:OpenDentBusiness.PlannedAppts.Insert(OpenDentBusiness.PlannedAppt)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PlannedAppts.Update(OpenDentBusiness.PlannedAppt)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PlannedAppts.Update(OpenDentBusiness.PlannedAppt,OpenDentBusiness.PlannedAppt)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Popups">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Popups.GetForPatient(System.Int64)">
            <summary>Gets all active popups that should be displayed for a single patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Popups.GetForFamily(OpenDentBusiness.Patient)">
            <summary>Gets current and disabled popups for a single family.  If patient is part of a superfamily, it will get all popups for the entire superfamily.</summary>
        </member>
        <member name="M:OpenDentBusiness.Popups.GetDeletedForFamily(OpenDentBusiness.Patient)">
            <summary>Gets the most recent deleted popups for a single family.  If patient is part of a superfamily, it will get all popups for the entire superfamily. </summary>
        </member>
        <member name="M:OpenDentBusiness.Popups.GetArchivesForPopup(System.Int64)">
            <summary>Gets all archived popups for a single popup.</summary>
        </member>
        <member name="M:OpenDentBusiness.Popups.GetLastEditDateTimeForPopup(System.Int64)">
            <summary>Gets the most recent date and time that the popup was last edited.  Returns min value if no archive was found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Popups.CopyForMovingFamilyMember(OpenDentBusiness.Patient)">
            <summary>Copies all family level popups when a family member leaves a family. Copies from other family members to patient, and from patient to guarantor.</summary>
        </member>
        <member name="M:OpenDentBusiness.Popups.CopyForMovingSuperFamily(OpenDentBusiness.Patient,System.Int64)">
            <summary>When a patient leaves a superfamily, this copies the superfamily level popups to be in both places. Takes pat leaving, and new superfamily. If newSuperFamily is 0, superfamily popups will not be copied from the old superfamily.</summary>
        </member>
        <member name="M:OpenDentBusiness.Popups.MoveForDeletePat(OpenDentBusiness.Patient)">
            <summary>Moves all family and superfamily level popups for a patient being deleted so that those popups stay in the family/superfamily.</summary>
        </member>
        <member name="M:OpenDentBusiness.Popups.EditPopupDate(System.DateTime,System.Int64)">
            <summary>Popup dates are not normally changed.  This only occurs when creating exact copies of popups and their archives when moving a patient from a family or superfamily.</summary>
        </member>
        <member name="M:OpenDentBusiness.Popups.RemoveForDisbandingSuperFamily(OpenDentBusiness.Patient)">
            <summary>Brings all superfamily level popups for a superfamily being disbanded to the family level.</summary>
        </member>
        <member name="M:OpenDentBusiness.Popups.Insert(OpenDentBusiness.Popup)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Popups.Update(OpenDentBusiness.Popup)">
            <summary>Create an archive of the pop up before updating.</summary>
        </member>
        <member name="M:OpenDentBusiness.Popups.DeleteObject(OpenDentBusiness.Popup)">
            <summary>Only called when moving popups for a patient that is leaving a superfamily but not going to another superfamily.</summary>
        </member>
        <member name="T:OpenDentBusiness.Printers">
            <summary>Handles all the business logic for printers.  Used heavily by the UI.  Every single function that makes changes to the database must be completely autonomous and do ALL validation itself.</summary>
        </member>
        <member name="F:OpenDentBusiness.Printers.list">
            <summary>List of all printers.  Because of cache refresh, this gets properly refreshed on both ends.</summary>
        </member>
        <member name="M:OpenDentBusiness.Printers.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Printers.GetOnePrinter(OpenDentBusiness.PrintSituation,System.Int64)">
            <summary>Gets directly from database</summary>
        </member>
        <member name="M:OpenDentBusiness.Printers.Insert(OpenDentBusiness.Printer)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Printers.Update(OpenDentBusiness.Printer)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Printers.Delete(OpenDentBusiness.Printer)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Printers.GetForSit(OpenDentBusiness.PrintSituation)">
            <summary>Gets the set printer whether or not it is valid.</summary>
        </member>
        <member name="M:OpenDentBusiness.Printers.PutForSit(OpenDentBusiness.PrintSituation,System.String,System.String,System.Boolean)">
            <summary>Either does an insert or an update to the database if need to create a Printer object.  Or it also deletes a printer object if needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Printers.ClearAll">
            <summary>Called from FormPrinterSetup if user selects the easy option.  Since the other options will be hidden, we have to clear them.  User should be sternly warned before this happens.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcButtonItems">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButtonItems.list">
            <summary>All procbuttonitems for all buttons.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtonItems.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtonItems.Insert(OpenDentBusiness.ProcButtonItem)">
            <summary>Must have already checked procCode for nonduplicate.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtonItems.Update(OpenDentBusiness.ProcButtonItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtonItems.Delete(OpenDentBusiness.ProcButtonItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtonItems.GetCodeNumListForButton(System.Int64)">
            <summary>Sorted by Item Order.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtonItems.GetAutoListForButton(System.Int64)">
            <summary>Sorted by Item Order.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtonItems.DeleteAllForButton(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ProcButtons">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButtons.list">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtons.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtons.Insert(OpenDentBusiness.ProcButton)">
            <summary>must have already checked procCode for nonduplicate.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtons.Update(OpenDentBusiness.ProcButton)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtons.Delete(OpenDentBusiness.ProcButton)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtons.GetForCat(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtons.SetToDefault">
            <summary>Deletes all current ProcButtons from the Chart module, and then adds the default ProcButtons.  Procedure codes must have already been entered or they cannot be added as a ProcButton.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcCodeNotes">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ProcCodeNotes.list">
            <summary>All notes for all procedurecodes.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcCodeNotes.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcCodeNotes.GetList(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcCodeNotes.Insert(OpenDentBusiness.ProcCodeNote)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcCodeNotes.Update(OpenDentBusiness.ProcCodeNote)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcCodeNotes.GetNote(System.Int64,System.Int64)">
            <summary>Gets the note for the given provider, if one exists.  Otherwise, gets the proccode.defaultnote.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcCodeNotes.GetTimePattern(System.Int64,System.Int64,System.Collections.Generic.List{OpenDentBusiness.ProcedureCode})">
            <summary>Gets the time pattern for the given provider, if one exists.  Otherwise, gets the proccode.ProcTime.
            Optionally pass in a copy of the procedure code cache to save time from making another deep copy of it.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcedureCodes">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.Insert(OpenDentBusiness.ProcedureCode)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.Update(OpenDentBusiness.ProcedureCode)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.Update(OpenDentBusiness.ProcedureCode,OpenDentBusiness.ProcedureCode)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.GetCodeCount">
            <summary>Counts all procedure codes, including hidden codes.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.GetProcCode(System.String)">
            <summary>Returns the ProcedureCode for the supplied procCode such as such as D####.  If no ProcedureCode is found, returns a new ProcedureCode.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.GetProcCodes(System.Collections.Generic.List{System.String})">
            <summary>Returns a list of ProcedureCodes for the supplied procCodes such as such as D####.  Returns an empty list if no matches.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.GetProcCode(System.Collections.Generic.List{OpenDentBusiness.ProcedureCode},System.Int64)">
            <summary>Uses the primary key.  Searches a provided list to avoid cache locking slowness.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.GetProcCode(System.Int64,System.Collections.Generic.List{OpenDentBusiness.ProcedureCode})">
            <summary>The new way of getting a procCode. Uses the primary key instead of string code.
            Pass in a list of all codes to save from making deep copies of the cache if you are going to call this method repeatedly.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.GetProcCodeFromDb(System.Int64)">
            <summary>Gets code from db to avoid having to constantly refresh in FormProcCodes</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.GetCodeNum(System.String)">
            <summary>Supply the human readable proc code such as D####</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.GetSubstituteCodeNum(System.String,System.String)">
            <summary>If a substitute exists for the given proc code, then it will give the CodeNum of that code.  Otherwise, it will return the codeNum for the given procCode.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.IsValidCode(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.GetProcList">
            <summary>Grouped by Category.  Used only in FormRpProcCodes.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.GetProcTable(System.String,System.String,System.String,System.Collections.Generic.List{System.Int64},System.Int64,System.Int64,System.Int64)">
            <summary>Gets a list of procedure codes directly from the database.  If categories.length==0, then we will get for all categories.  Categories are defnums.  FeeScheds are, for now, defnums.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.GetLaymanTerm(System.Int64)">
            <summary>Returns the LaymanTerm for the supplied codeNum, or the description if none present.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.TcodesClear">
            <summary>Used to check whether codes starting with T exist and are in a visible category.  If so, it moves them to the Obsolete category.  If the T code has never been used, then it deletes it.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.ResetADAdescriptions">
            <summary>Resets the descriptions for all ADA codes to the official wording.  Required by the license.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.ResetADAdescriptions(System.Collections.Generic.List{OpenDentBusiness.ProcedureCode})">
            <summary>Resets the descriptions for all ADA codes to the official wording.  Required by the license.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.HasBrokenApptCode">
            <summary>Returns true if the ADA broken appointment procedure code is in the database to identify how to track broken appointments.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.GetFromCommaDelimitedList(System.String)">
            <summary>Gets a list of procedureCodes from the cache using a comma-delimited list of ProcCodes.
            Returns a new list is the passed in string is empty.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.ClearFkey(System.Int64)">
            <summary>Zeros securitylog FKey column for rows that are using the matching codeNum as FKey and are related to ProcedureCode.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the ProcedureCode table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCodes.ClearFkey(System.Collections.Generic.List{System.Int64})">
            <summary>Zeros securitylog FKey column for rows that are using the matching codeNums as FKey and are related to ProcedureCode.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the ProcedureCode table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.Refresh(System.Int64)">
            <summary>Gets all procedures for a single patient, without notes.  Does not include deleted procedures.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.RefreshForProcCodeNums(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>Gets all procedures with a code num in listProcCodeNums for a single patient, without notes.  Does not include deleted procedures.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetCompleteForPats(System.Collections.Generic.List{System.Int64})">
            <summary>Gets all completed procedures without notes for a list of patients.  Used when making auto splits.
            Also returns any procedures attached to payplans that the current patient is responsible for.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetCompAndTpForPats(System.Collections.Generic.List{System.Int64})">
            <summary>Gets all completed and TP procedures for a family.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.Insert(OpenDentBusiness.Procedure)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.Update(OpenDentBusiness.Procedure,OpenDentBusiness.Procedure)">
            <summary>Updates only the changed columns.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.ValidateDelete(System.Int64)">
            <summary>Throws an exception if the given procedure cannot be deleted safely.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.Delete(System.Int64,System.Boolean)">
            <summary>If not allowed to delete, then it throws an exception, so surround it with a try catch. 
            Also deletes any claimProcs, adjustments, and payplancharge credits.  
            This does not actually delete the procedure, but just changes the status to deleted.</summary>
            <param name="forceDelete">If true, forcefully deletes all objects attached to the procedure.</param>
        </member>
        <member name="M:OpenDentBusiness.Procedures.CreateProcForPat(System.Int64,System.Int64,System.String,System.String,OpenDentBusiness.ProcStat,System.Int64)">
            <summary>Creates a new procedure with the patient, surface, toothnum, and status for the specified procedure code.
            Make sure to make a security log after calling this method.  This method requires that Security.CurUser be set prior to invoking.
            Returns null procedure if one was not created for the patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.CreateProcForPat(OpenDentBusiness.Patient,System.Int64,System.String,System.String,OpenDentBusiness.ProcStat,System.Int64,System.Int64,System.Collections.Generic.List{OpenDentBusiness.InsSub},System.Collections.Generic.List{OpenDentBusiness.InsPlan},System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Collections.Generic.List{OpenDentBusiness.Benefit})">
            <summary>Creates a new procedure with the patient, surface, toothnum, and status for the specified procedure code.
            Make sure to make a security log after calling this method.  This method requires that Security.CurUser be set prior to invoking.
            Returns null procedure if one was not created for the patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.CreateProcsForPat(System.Int64,System.Collections.Generic.List{System.Int64},System.String,System.String,OpenDentBusiness.ProcStat,System.Int64,System.Int64)">
            <summary>Creates a new procedure for every proc code passed in.  Make sure to make a security log after calling this method.
            This method requires that Security.CurUser be set prior to invoking.  Returns an empty list if none were created for the patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.UpdateCpoeForProc(System.Int64,System.Boolean)">
            <summary>Updates IsCpoe column in the procedurelog table with the passed in value for the corresponding procedure.
            This method explicitly used instead of the generic Update method because this (and only this) field can get updated when a user cancels out
            of the Procedure Edit window and no other changes should accidentally make their way to the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.UpdateCpoeForProcs(System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>Updates IsCpoe column in the procedurelog table with the passed in value for the corresponding procedures.
            This method explicitly used instead of the generic Update method because this (and only this) field can get updated when a user cancels out
            of the Procedure Edit window and no other changes should accidentally make their way to the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetOneProc(System.Int64,System.Boolean)">
            <summary>Gets one procedure directly from the db.  Always includes the note regardless of includeNote value (since 2010 at least).
            If the procNum is 0 or if the procNum does not exist in the database, this will return a new Procedure object with uninitialized fields.  
            If, for example, a new Procedure object is sent through the middle tier with an uninitialized ProcStatus=0, 
              this will fail validation since the ProcStatus enum starts with 1.  
            Make sure to handle a new Procedure object with uninitialized fields.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetManyProc(System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>Gets one procedure directly from the db.  Option to include the note.  If the procNum is 0 or if the procNum does not exist in the database, this will return a new Procedure object with uninitialized fields.  If, for example, a new Procedure object is sent through the middle tier with an uninitialized ProcStatus=0, this will fail validation since the ProcStatus enum starts with 1.  Make sure to handle a new Procedure object with uninitialized fields.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetProcsForSingle(System.Int64,System.Boolean)">
            <summary>Gets Procedures for a single appointment directly from the database</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetProcsForApptEdit(OpenDentBusiness.Appointment)">
            <summary>Gets all Procedures that need to be displayed in FormApptEdit.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetProcsForPatByDate(System.Int64,System.DateTime)">
            <summary>Gets all Procedures for a single date for the specified patient directly from the database.  Excludes deleted procs.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetProcsFromClaimProcs(System.Collections.Generic.List{OpenDentBusiness.ClaimProc})">
            <summary>Gets all procedures associated with corresponding claimprocs. Returns empty procedure list if an empty list was passed in.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetProcsNonCpoeAttachedToApptsForProv(System.Int64)">
            <summary>Gets a list of TP procedures that are attached to scheduled appointments that are not flagged as CPOE.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetProcsRadiologyCpoeForPat(System.Int64)">
            <summary>Gets a list of TP or C procedures starting a year into the past that are flagged as IsRadiology and IsCpoe for the specified patient.
            Primarily used for showing patient specific MU data in the EHR dashboard.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetRecentProcDateString(System.Int64,System.DateTime,System.String)">
            <summary>Gets a string in M/yy format for the most recent completed procedure in the specified code range.  Gets directly from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetFirstCompletedProcForFamily(System.Int64)">
            <summary>Gets the first completed procedure within the family.  Used to determine the earliest date the family became a customer.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetProcsMultApts(System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>Gets a list (procsMultApts is a struct of type ProcDesc(aptNum, string[], and production) of all the procedures attached to the specified appointments.  Then, use GetProcsOneApt to pull procedures for one appointment from this list or GetProductionOneApt.  This process requires only one call to the database.  "myAptNums" is the list of appointments to get procedures for.  isForNext gets procedures for a list of next appointments rather than regular appointments.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetProcsOneApt(System.Int64,System.Collections.Generic.List{OpenDentBusiness.Procedure})">
            <summary>Gets procedures for one appointment by looping through the procsMultApts which was filled previously from GetProcsMultApts.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetProcFromList(System.Collections.Generic.List{OpenDentBusiness.Procedure},System.Int64)">
            <summary>Used in FormClaimEdit,FormClaimPrint,FormClaimPayTotal,ContrAccount etc to get description of procedure. Procedure list needs to include the procedure we are looking for.  If procNum could be 0 (e.g. total payment claimprocs) or if the list does not contain the procNum, this will return a new Procedure with uninitialized fields.  If, for example, a new Procedure object is sent through the middle tier with an uninitialized ProcStatus=0, this will fail validation since the ProcStatus enum starts with 1.  Make sure to handle a new Procedure object with uninitialized fields.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.SetDateFirstVisit(System.DateTime,System.Int32,OpenDentBusiness.Patient)">
            <summary>Sets the patient.DateFirstVisit if necessary. A visitDate is required to be passed in because it may not be today's date. This is triggered by:
            1. When any procedure is inserted regardless of status. From Chart or appointment. If no C procs and date blank, changes date.
            2. When updating a procedure to status C. If no C procs, update visit date. Ask user first?
              #2 was recently changed to only happen if date is blank or less than 7 days old.
            3. When an appointment is deleted. If no C procs, clear visit date.
              #3 was recently changed to not occur at all unless appt is of type IsNewPatient
            4. Changing an appt date of type IsNewPatient. If no C procs, change visit date.
            Old: when setting a procedure complete in the Chart module or the ProcEdit window.  Also when saving an appointment that is marked IsNewPat.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetCompletedForDateRange(System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>Gets all completed procedures within a date range with optional ProcCodeNum and PatientNum filters. Date range is inclusive.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetCompletedByDateCompleteForDateRange(System.DateTime,System.DateTime)">
            <summary>Gets all completed procedures having procedurelog.DateComplete within the date range. Date range is inclusive.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.AreAnyComplete(System.Int64)">
            <summary>Called from FormApptsOther when creating a new appointment.  Returns true if there are any procedures marked complete for this patient.  The result is that the NewPt box on the appointment won't be checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.WillBeMissing(System.String,System.Int64)">
            <summary>Called from AutoCodeItems.  Makes a call to the database to determine whether the specified tooth has been extracted or will be extracted. This could then trigger a pontic code.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.NoBillIns(OpenDentBusiness.Procedure,System.Collections.Generic.List{OpenDentBusiness.ClaimProc},System.Int64)">
            <summary>Used in ContrAccount.CreateClaim when validating selected procedures. Returns true if there is any claimproc for this procedure and plan which is marked NoBillIns.  The claimProcList can be all claimProcs for the patient or only those attached to this proc. Will be true if any claimProcs attached to this procedure are set NoBillIns.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.IsAttachedToClaim(OpenDentBusiness.Procedure,System.Collections.Generic.List{OpenDentBusiness.ClaimProc},System.Boolean)">
            <summary>Called from FormProcEdit to signal when to disable much of the editing in that form.  If the procedure is 'AttachedToClaim' then user
            should not change it very much.  Also prevents user from Invalidating a locked procedure if attached to a claim.  The claimProcList can be all
            claimProcs for the patient or only those attached to this proc.  Ignore preauth claims by setting isPreauthIncluded to false.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetOldestClaimDate(System.Collections.Generic.List{OpenDentBusiness.ClaimProc})">
            <summary>Only called from FormProcEdit.  When attached  to a claim and user clicks Edit Anyway, we need to know the oldest claim date for security reasons.  The claimProcsForProc should only be claimprocs for this procedure.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.IsAttachedToClaim(System.Collections.Generic.List{OpenDentBusiness.Procedure},System.Collections.Generic.List{OpenDentBusiness.ClaimProc})">
            <summary>Only called from FormProcEditAll to signal when to disable much of the editing in that form. If the procedure is 'AttachedToClaim' then user should not change it very much.  The claimProcList can be all claimProcs for the patient or only those attached to this proc.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.IsAttachedToClaim(System.Int64)">
            <summary>Queries the database to determine if this procedure is attached to a claim already.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.IsAlreadyAttachedToClaim(OpenDentBusiness.Procedure,System.Collections.Generic.List{OpenDentBusiness.ClaimProc},System.Int64)">
            <summary>Used in ContrAccount.CreateClaim to validate that procedure is not already attached to a claim for this specific insPlan.  The claimProcList can be all claimProcs for the patient or only those attached to this proc.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.NeedsSent(System.Int64,System.Int64,System.Collections.Generic.List{OpenDentBusiness.ClaimProc})">
            <summary>Only used in ContrAccount.OnInsClick to automate selection of procedures.  Returns true if this procedure should be selected.  This happens if there is at least one claimproc attached for this inssub that is an estimate, and it is not set to NoBillIns.  The list can be all ClaimProcs for patient, or just those for this procedure. The plan is the primary plan.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetClaimProcEstimate(System.Int64,System.Collections.Generic.List{OpenDentBusiness.ClaimProc},OpenDentBusiness.InsPlan,System.Int64)">
            <summary>Only used in ContrAccount.CreateClaim and FormRepeatChargeUpdate.CreateClaim to decide whether a given procedure has an estimate that can be used to attach to a claim for the specified plan.  Returns a valid claimProc if this procedure has an estimate attached that is not set to NoBillIns.  The list can be all ClaimProcs for patient, or just those for this procedure. Returns null if there are no claimprocs that would work.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.ConvertProcToString(System.Int64,System.String,System.String,System.Boolean)">
            <summary>Used by GetProcsForSingle and GetProcsMultApts to generate a short string description of a procedure.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetDescription(OpenDentBusiness.Procedure)">
            <summary>Used to display procedure descriptions on appointments. The returned string also includes surf and toothNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.SetProvidersInAppointment(OpenDentBusiness.Appointment,System.Collections.Generic.List{OpenDentBusiness.Procedure})">
            <Summary>Supply the list of procedures attached to the appointment.  It will loop through each and assign the correct provider.
            Also sets clinic.  Also sets procDate for TP procs.  js 7/24/12 This is not supposed to be called if the appointment is complete.</Summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.UpdateProcInAppointment(OpenDentBusiness.Appointment,OpenDentBusiness.Procedure)">
            <summary>Sets the provider and clinic for a proc based on the appt to which it is attached.  Also sets ProcDate for TP procs.  Changes are
            reflected in proc returned, but not saved to the db (for synch later).</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetCanadianExtractedTeeth(System.Collections.Generic.List{OpenDentBusiness.Procedure})">
            <summary>Gets a list of procedures representing extracted teeth.  Status of C,EC,orEO. Includes procs with toothNum "1"-"32".  Will not include procs with procdate before 1880.  Used for Canadian e-claims instead of the usual ToothInitials.GetMissingOrHiddenTeeth, because Canada requires dates on the extracted teeth.  Supply all procedures for the patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetCanadianLabFees(System.Int64,System.Collections.Generic.List{OpenDentBusiness.Procedure})">
            <summary>Takes the list of all procedures for the patient, and finds any that are attached as lab procs to that proc.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetCanadianLabFees(System.Collections.Generic.List{System.Int64})">
            <summary>Pulls the lab fees for the given procnums directly from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetCanadianLabFees(System.Int64)">
            <summary>Pulls the lab fees for the given procnum directly from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GlobalUpdateFees(System.Collections.Generic.List{OpenDentBusiness.Fee})">
            <summary>Only fees, not estimates.  Returns number of fees changed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetListTPandTPi(System.Collections.Generic.List{OpenDentBusiness.Procedure},System.Collections.Generic.List{OpenDentBusiness.TreatPlanAttach})">
            <summary>Used from TP to get a list of all TP procs, ordered by their treatment plan's priority, (conditionally) toothnum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.SortListByTreatPlanPriority(System.Collections.Generic.List{OpenDentBusiness.Procedure},System.Collections.Generic.List{OpenDentBusiness.TreatPlanAttach})">
            <summary>Sorts the given list based on the procedure's priority, tooth, date, and procnum.
            SortListByTreatPlanPriority() should be the only method of sorting procedures that need to emulate the treatment plan module.
            This is to prevent recurring bugs due to different sort methodology.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.ComputeEstimates(OpenDentBusiness.Procedure,System.Int64,System.Collections.Generic.List{OpenDentBusiness.ClaimProc}@,System.Boolean,System.Collections.Generic.List{OpenDentBusiness.InsPlan},System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Collections.Generic.List{OpenDentBusiness.ClaimProcHist},System.Collections.Generic.List{OpenDentBusiness.ClaimProcHist},System.Boolean,System.Int32,System.Collections.Generic.List{OpenDentBusiness.InsSub})">
            <summary>Used whenever a procedure changes or a plan changes.  All estimates for a given procedure must be updated. This frequently includes adding claimprocs, but can also just edit the appropriate existing claimprocs. Skips status=Adjustment,CapClaim,Preauth,Supplemental.  Also fixes date,status,and provnum if appropriate.  The claimProc list only needs to include claimprocs for this proc, although it can include more.  Only set isInitialEntry true from Chart module; it is for cap procs.  loopList only contains information about procedures that come before this one in a list such as TP or claim.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.ComputeForOrdinal(System.Int32,System.Collections.Generic.List{OpenDentBusiness.ClaimProc},OpenDentBusiness.Procedure,System.Collections.Generic.List{OpenDentBusiness.InsPlan},System.Boolean,System.Double@,System.Double@,System.Double@,System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Collections.Generic.List{OpenDentBusiness.ClaimProcHist},System.Collections.Generic.List{OpenDentBusiness.ClaimProcHist},System.Boolean,System.Int32)">
            <summary>Passing in 4 will compute for 4 as well as any other situation such as dropped plan.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.ComputeEstimatesForAll(System.Int64,System.Collections.Generic.List{OpenDentBusiness.ClaimProc},System.Collections.Generic.List{OpenDentBusiness.Procedure},System.Collections.Generic.List{OpenDentBusiness.InsPlan},System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Collections.Generic.List{OpenDentBusiness.Benefit},System.Int32,System.Collections.Generic.List{OpenDentBusiness.InsSub})">
            <summary>After changing important coverage plan info, this is called to recompute estimates for all procedures for this patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.SetCompleteInAppt(OpenDentBusiness.Appointment,System.Collections.Generic.List{OpenDentBusiness.InsPlan},System.Collections.Generic.List{OpenDentBusiness.PatPlan},System.Int64,System.Int32,System.Collections.Generic.List{OpenDentBusiness.Procedure},System.Collections.Generic.List{OpenDentBusiness.InsSub},OpenDentBusiness.Userod)">
            <summary>Loops through each proc in the dictionary.  Dictionary key is the index in the list of procs for appointment edit, only used if called
            from FormApptEdit.  Does not add notes to a procedure that already has notes. Only called from ProcedureL.SetCompleteInAppt, security checked
            before calling this.  Also sets provider for each proc and claimproc.  Returns dictIndexInListForProc with changes made to the procs.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetUniqueDiagnosticCodes(System.Collections.Generic.List{OpenDentBusiness.Procedure},System.Boolean)">
            <summary>Returns all the unique diagnostic codes in the list.  If there is less than 12 unique codes then it will pad the list with empty
            entries if isPadded is true.  Will always place the principal diagnosis as the first item in the list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetUniqueDiagnosticCodes(System.Collections.Generic.List{OpenDentBusiness.Procedure},System.Boolean,System.Collections.Generic.List{System.Byte})">
            <summary>Returns all the unique diagnostic codes in the list.  If there is less than 12 unique codes then it will pad the list with empty
            entries if isPadded is true.  Will always place the principal diagnosis as the first item in the list.  The returned list and
            listDiagnosticVersions will be the same length upon return.  When returning, listDiagnosticVersions will contain the diagnostic code versions
            of each code in the returned list, used for allowing the user to mix diagnostic code versions on a single claim.  The listDiagnosticVersions
            must be a valid list (not null).</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.ExistsDiagnosticCode(System.Collections.Generic.List{System.String},System.Collections.Generic.List{System.Byte},System.String,System.Byte)">
            <summary>Both listDiagCodes and listDiagVersions must be the same length and not null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetClinicNum(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.GetReferred(System.DateTime,System.DateTime,System.Boolean)">
            <summary>Gets a list of procedures for </summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.Lock(System.DateTime,System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Procedures.Sync(System.Collections.Generic.List{OpenDentBusiness.Procedure},System.Collections.Generic.List{OpenDentBusiness.Procedure},System.Int64)">
            <summary>Inserts, updates, or deletes database rows to match supplied list.  Must always pass in two lists.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcedureComparer">
            <summary>This sorts procedures based on priority, then tooth number, then code (but if Canadian lab code, uses proc code here instead of lab code).  Finally, if comparing a proc and its Canadian lab code, it puts the lab code after the proc.  It does not care about dates or status.  Currently used in TP module only.  The Chart module, Account module, and appointments use Procedurelog.CompareProcedures().</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary>This sorts procedures based on priority, then tooth number.  It does not care about dates or status.  Currently used in TP module and Chart module sorting.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcTPs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcTPs.Refresh(System.Int64)">
            <summary>Gets all ProcTPs for a given Patient ordered by ItemOrder.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcTPs.RefreshForTP(System.Int64)">
            <summary>Only used when obtaining the signature data.  Ordered by ItemOrder.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcTPs.Update(OpenDentBusiness.ProcTP)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcTPs.Insert(OpenDentBusiness.ProcTP)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcTPs.InsertOrUpdate(OpenDentBusiness.ProcTP,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcTPs.Delete(OpenDentBusiness.ProcTP)">
            <summary>There are no dependencies.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcTPs.GetListForTP(System.Int64,OpenDentBusiness.ProcTP[])">
            <summary>Gets a list for just one tp.  Used in TP module.  Supply a list of all ProcTPs for pt.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcTPs.DeleteForTP(System.Int64)">
            <summary>No dependencies to worry about.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProgramProperties">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.Update(OpenDentBusiness.ProgramProperty)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.UpdateProgramPropertyWithValue(OpenDentBusiness.ProgramProperty,System.String)">
            <summary>Returns true if the program property was updated.  False if no change needed.  Callers need to invalidate cache as needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.Insert(OpenDentBusiness.ProgramProperty)">
            <summary>This is called from FormClinicEdit and from InsertOrUpdateLocalOverridePath.  PayConnect can have clinic specific login credentials,
            so the ProgramProperties for PayConnect are duplicated for each clinic.  The properties duplicated are Username, Password, and PaymentType.
            There's also a 'Headquarters' or no clinic set of these props with ClinicNum 0, which is the set of props inserted with each new clinic.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.InsertForClinic(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>Copies rows for a given programNum for each clinic in listClinicNums.  Returns true if changes were made to the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.IsAdvertisingDisabled(OpenDentBusiness.ProgramName)">
            <summary>Safe to call on any program. Only returns true if the program is not enabled AND the program has a property of "Disable Advertising" = 1.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.GetListForProgram(System.Int64)">
            <summary>Returns a List of ProgramProperties attached to the specified programNum.  Does not include path overrides.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.GetListForProgramAndClinic(System.Int64,System.Int64)">
            <summary>Returns a list of ProgramProperties with the specified programNum and the specified clinicNum from the cache.
            To get properties when clinics are not enabled or properties for 'Headquarters' use clinicNum 0.
            Does not include path overrides.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.GetListForProgramAndClinicWithDefault(System.Int64,System.Int64)">
            <summary>Returns a List of ProgramProperties attached to the specified programNum with the given clinicnum.  
            Includes the default program properties as well (ClinicNum==0).</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.GetPropValForClinicOrDefault(System.Int64,System.String,System.Int64)">
            <summary>Returns the property value of the clinic override or default program property if no clinic override is found.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.GetForProgram(System.Int64)">
            <summary>Returns an ArrayList of ProgramProperties attached to the specified programNum.  Does not include path overrides.
            Uses thread-safe caching pattern.  Each call to this method creates an copy of the entire ProgramProperty cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.GetCur(System.Collections.Generic.List{OpenDentBusiness.ProgramProperty},System.String)">
            <summary>After GetForProgram has been run, this gets one of those properties.  DO NOT MODIFY the returned property.  Read only.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.GetPropVal(System.Int64,System.String,System.Int64)">
            <summary>Returns the PropertyVal for programNum and clinicNum specified with the description specified.  If the property doesn't exist,
            returns an empty string.  For the PropertyVal for 'Headquarters' or clincs not enabled, use clinicNum 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.GetPropValFromList(System.Collections.Generic.List{OpenDentBusiness.ProgramProperty},System.String,System.Int64)">
            <summary>Returns the PropertyVal from the list by PropertyDesc and ClinicNum.
            For the 'Headquarters' or for clinics not enabled, omit clinicNum or send clinicNum 0.  If not found returns an empty string.
            Primarily used when a local list has been copied from the cache and may differ from what's in the database.  Also possibly useful if dealing with a filtered list </summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.GetPropByDesc(System.String,System.Collections.Generic.List{OpenDentBusiness.ProgramProperty})">
            <summary>Returns the property with the matching description from the provided list.  Null if the property cannot be found by the description.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.GetValFromDb(System.Int64,System.String)">
            <summary>Used in FormUAppoint to get frequent and current data.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.GetLocalPathOverrideForProgram(System.Int64)">
            <summary>Returns the path override for the current computer and the specified programNum.  Returns empty string if no override found.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.InsertOrUpdateLocalOverridePath(System.Int64,System.String)">
            <summary>This will insert or update a local path override property for the specified programNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.Sync(System.Collections.Generic.List{OpenDentBusiness.ProgramProperty},System.Int64)">
            <summary>Syncs list against cache copy of program properties.  listProgPropsNew should never include local path overrides (PropertyDesc=="").
            This sync uses the cache copy of program properties rather than a stale list because we want to make sure we never have duplicate properties
            and concurrency isn't really an issue.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperties.GetXWebCreds(System.Int64,System.Boolean@,System.String@,System.String@,System.String@,System.Int64@)">
            <summary>Exception means failed. Return means success. paymentsAllowed should be check after return. If false then assume payments cannot be made for this clinic.</summary>
        </member>
        <member name="T:OpenDentBusiness.Programs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.Update(OpenDentBusiness.Program)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.Insert(OpenDentBusiness.Program)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.Delete(OpenDentBusiness.Program)">
            <summary>This can only be called by the user if it is a program link that they created. Included program links cannot be deleted.  If calling this from ClassConversion, must delete any dependent ProgramProperties first.  It will delete ToolButItems for you.</summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.IsEnabled(OpenDentBusiness.ProgramName)">
            <summary>Returns true if a Program link with the given name or number exists and is enabled.</summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.IsEnabled(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.GetProgram(System.Int64)">
            <summary>Returns the Program of the passed in ProgramNum.  Will be null if a Program is not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.GetCur(OpenDentBusiness.ProgramName)">
            <summary>Supply a valid program Name, and this will set Cur to be the corresponding Program object.</summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.GetProgramNum(OpenDentBusiness.ProgramName)">
            <summary>Supply a valid program Name.  Will return 0 if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.UsingEcwTightMode">
            <summary>Using eClinicalWorks tight integration.</summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.UsingEcwFullMode">
            <summary>Using eClinicalWorks full mode.</summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.UsingEcwTightOrFullMode">
            <summary>Returns true if using eCW in tight or full mode.  In these modes, appointments ARE allowed to overlap because we block users from seeing them.</summary>
        </member>
        <member name="P:OpenDentBusiness.Programs.UsingOrion">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.GetProgramPath(OpenDentBusiness.Program)">
            <summary>Returns the local override path if available or returns original program path.  Always returns a valid path.</summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.IsStatic(OpenDentBusiness.Program)">
            <summary>Returns true if input program is a static program. Static programs are ones we do not want the user to be able to modify in some way.</summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.ScrubExportedPatientData">
            <summary>For each enabled bridge, if the bridge uses a file to transmit patient data to the other software, then we need to remove the files or clear the files when OD is exiting.
            Required for EHR 2014 module d.7 (as stated by proctor).</summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.GetPrivateProfileStringFromIni(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>Needed for Sirona bridge data scrub in ScrubExportedPatientData().</summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.ReadValueFromIni(System.String,System.String,System.String)">
            <summary>Needed for Sirona bridge data scrub in ScrubExportedPatientData().</summary>
        </member>
        <member name="M:OpenDentBusiness.Programs.ScrubFileForProperty(OpenDentBusiness.ProgramName,System.String,System.String,System.Boolean)">
            <summary>If isRemovable is false, then the file referenced in the program property will be cleared.
            If isRemovable is true, then the file referenced in the program property will be deleted.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProviderIdents">
            <summary>Refreshed with local data.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderIdents.list">
            <summary>This is the list of all id's for all providers. They are extracted as needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderIdents.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderIdents.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderIdents.Update(OpenDentBusiness.ProviderIdent)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderIdents.Insert(OpenDentBusiness.ProviderIdent)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderIdents.Delete(OpenDentBusiness.ProviderIdent)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderIdents.GetForProv(System.Int64)">
            <summary>Gets all supplemental identifiers that have been attached to this provider. Used in the provider edit window.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderIdents.GetForPayor(System.Int64,System.String)">
            <summary>Gets all supplemental identifiers that have been attached to this provider and for this particular payorID.  Called from X12 when creating a claim file.  Also used now on printed claims.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderIdents.DeleteAllForProv(System.Int64)">
            <summary>Called from FormProvEdit if cancel on a new provider.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderIdents.IdentExists(OpenDentBusiness.ProviderSupplementalID,System.Int64,System.String)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.QuestionDefs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.QuestionDefs.Refresh">
            <summary>Gets a list of all QuestionDefs.</summary>
        </member>
        <member name="M:OpenDentBusiness.QuestionDefs.Update(OpenDentBusiness.QuestionDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.QuestionDefs.Insert(OpenDentBusiness.QuestionDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.QuestionDefs.Delete(OpenDentBusiness.QuestionDef)">
            <summary>Ok to delete whenever, because no patients are tied to this table by any dependencies.</summary>
        </member>
        <member name="M:OpenDentBusiness.QuestionDefs.MoveUp(System.Int32,OpenDentBusiness.QuestionDef[])">
            <summary>Moves the selected item up in the list.</summary>
        </member>
        <member name="M:OpenDentBusiness.QuestionDefs.MoveDown(System.Int32,OpenDentBusiness.QuestionDef[])">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.QuestionDefs.SetOrder(System.Int32,System.Int32,OpenDentBusiness.QuestionDef[])">
            <summary>Used by MoveUp and MoveDown.</summary>
        </member>
        <member name="T:OpenDentBusiness.Questions">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Questions.Refresh(System.Int64)">
            <summary>Gets a list of all Questions for a given patient.  Sorted by ItemOrder.</summary>
        </member>
        <member name="M:OpenDentBusiness.Questions.Update(OpenDentBusiness.Question)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Questions.Insert(OpenDentBusiness.Question)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.QuickPasteCats">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteCats.list">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.QuickPasteCats.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.QuickPasteCats.Insert(OpenDentBusiness.QuickPasteCat)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.QuickPasteCats.Update(OpenDentBusiness.QuickPasteCat)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.QuickPasteCats.Delete(OpenDentBusiness.QuickPasteCat)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.QuickPasteCats.GetAll">
            <summary>Gets all categories.</summary>
        </member>
        <member name="M:OpenDentBusiness.QuickPasteCats.GetDefaultType(OpenDentBusiness.QuickPasteType)">
            <summary>Called from FormQuickPaste and from QuickPasteNotes.Substitute(). Returns the index of the default category for the specified type. If user has entered more than one, only one is returned.</summary>
        </member>
        <member name="M:OpenDentBusiness.QuickPasteCats.Sync(System.Collections.Generic.List{OpenDentBusiness.QuickPasteCat},System.Collections.Generic.List{OpenDentBusiness.QuickPasteCat})">
            <summary>This should not be passing in two lists. Consider rewriting to only pass in one list and an identifier to get list from DB.</summary>
        </member>
        <member name="T:OpenDentBusiness.QuickPasteNotes">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteNotes.List">
            <summary>list of all notes for all categories. Not very useful.</summary>
        </member>
        <member name="M:OpenDentBusiness.QuickPasteNotes.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.QuickPasteNotes.Insert(OpenDentBusiness.QuickPasteNote)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.QuickPasteNotes.Update(OpenDentBusiness.QuickPasteNote)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.QuickPasteNotes.Delete(OpenDentBusiness.QuickPasteNote)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.QuickPasteNotes.AbbrAlreadyInUse(OpenDentBusiness.QuickPasteNote)">
            <summary>When saving an abbrev, this makes sure that the abbreviation is not already in use.</summary>
        </member>
        <member name="M:OpenDentBusiness.QuickPasteNotes.GetForCat(System.Int64)">
            <summary>Only used from FormQuickPaste to get all notes for the selected cat.</summary>
        </member>
        <member name="M:OpenDentBusiness.QuickPasteNotes.GetAll">
            <summary>Only used from FormQuickPaste to get all notes.</summary>
        </member>
        <member name="M:OpenDentBusiness.QuickPasteNotes.Substitute(System.String,OpenDentBusiness.QuickPasteType)">
            <summary>Called on KeyUp from various textBoxes in the program to look for a ?abbrev and attempt to substitute.  Substitutes the text if found.</summary>
        </member>
        <member name="M:OpenDentBusiness.QuickPasteNotes.Sync(System.Collections.Generic.List{OpenDentBusiness.QuickPasteNote},System.Collections.Generic.List{OpenDentBusiness.QuickPasteNote})">
            <summary>This should not be passing in two lists. Consider rewriting to only pass in one list and an identifier to get list from DB.</summary>
        </member>
        <member name="T:OpenDentBusiness.Recalls">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.GetWebSchedPromoURL">
            <summary>http://www.patientviewer.com/WebSchedSignUp.html</summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.GetList(System.Collections.Generic.List{System.Int64})">
            <summary>Gets all recalls for the supplied patients, usually a family or single pat.  Result might have a length of zero.  
            Each recall will also have the DateScheduled filled by pulling that info from other tables.</summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.GetList(System.Collections.Generic.List{OpenDentBusiness.Patient})">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.GetRecallProphyOrPerio(System.Int64)">
            <summary>Will return a recall or null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.GetRecallTimePattern(OpenDentBusiness.Recall,System.Collections.Generic.List{OpenDentBusiness.Recall},OpenDentBusiness.Patient,System.Collections.Generic.List{System.String})">
            <summary>Returns the recall time pattern for the patient and the specific recall passed in.
            Loops through all recalls passed in and adds any due recall procedures to the time pattern if recallCur is a special recall type.
            Also, this method will manipulate listProcStrs if any additional procedures are added.</summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.GetRecallList(System.DateTime,System.DateTime,System.Boolean,System.Int64,System.Int64,System.Int64,OpenDentBusiness.RecallListSort,OpenDentBusiness.RecallListShowNumberReminders,System.Collections.Generic.List{System.Int64})">
            <summary>Only used in FormRecallList and recall automation to get a list of patients with recall.  
            Supply a date range, using min and max values if user left blank.  If provNum=0, then it will get all provnums.  
            It looks for both provider match in either PriProv or SecProv.</summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.Insert(OpenDentBusiness.Recall)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.Update(OpenDentBusiness.Recall)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.Delete(OpenDentBusiness.Recall)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.SynchPatient(System.Int64,System.Collections.Generic.List{System.Data.DataRow},System.Collections.Generic.List{OpenDentBusiness.Recall})">
            <summary>Helper method for Updating and Inserting recalls for active patients.  Used primarily in the FullSynch from FormRecallTypes</summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.GetMaxSpecialTypeDate(System.Collections.Generic.List{System.Data.DataRow})">
            <summary>Helper method to get the most recent proc date for either of the special recall types.
            Returns DateTime.MinValue if the patient does not have any procedures.</summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.Synch(System.Int64)">
            <summary>Synchronizes all recalls for one patient. 
            If datePrevious has changed, then it completely deletes the old status and note information and sets a new DatePrevious and dateDueCalc.  
            Also updates dateDue to match dateDueCalc if not disabled.  Creates any recalls as necessary.  
            Recalls will never get automatically deleted except when all triggers are removed.  Otherwise, the dateDueCalc just gets cleared.</summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.SynchScheduledApptFull(System.Int64)">
            <summary>Synchronizes DateScheduled column in recall table for one patient.  
            This must be used instead of lazy synch in RecallsForPatient, when deleting an appointment, when sending to unscheduled list, setting an appointment complete, etc.  
            This is fast, but it would be inefficient to call it too much.</summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.UpdateDefaultIntervalForPatients(System.Int64,OpenDentBusiness.Interval,OpenDentBusiness.Interval)">
            <summary>Updates RecallInterval and DueDate for all patients that have the recallTypeNum and defaultIntervalOld to use the defaultIntervalNew.</summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.SynchAllPatients">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.GetAddrTable(System.Collections.Generic.List{System.Int64},System.Boolean,OpenDentBusiness.RecallListSort)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.GetAddrTableForWebSched(System.Collections.Generic.List{System.Int64},System.Boolean,OpenDentBusiness.RecallListSort)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.GetAddrTableRaw(System.Collections.Generic.List{System.Int64})">
            <summary>Gets a base table used for creating </summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.UpdateStatus(System.Int64,System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.GetChangedSinceRecallNums(System.DateTime)">
            <summary>Return RecallNums that have changed since a paticular time. </summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.GetMultRecalls(System.Collections.Generic.List{System.Int64})">
            <summary>Returns recalls with given list of RecallNums. Used along with GetChangedSinceRecallNums.</summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.ValidateWebSched">
            <summary>Makes a web service call to WebServiceCustomerUpdates to make sure this customer is signed up for Web Sched.
            Throws exceptions if the user is not valid.
            An ODException will have an error code; 0=no errors. 110=No Web Sched repeating charge. 120=Invalid web service response. 190=All other errors.</summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.ValidateWebSchedResponse(System.String)">
            <summary>Validates the results of our ValidateWebSched web service call.
            Returns true if they are valid otherwise throws an exception if the office is not allowed to use the Web Sched or other errors.
            An ODException will have an error code; 0=no errors. 110=No Web Sched repeating charge. 120=Invalid web service response. 190=All other errors.</summary>
            <param name="response">This should be the result string that was received from WebServiceCustomerUpdates.ValidateWebSched()</param>
            <returns>True if user is an active customer and they have an active WebSched repeating charge.</returns>
        </member>
        <member name="M:OpenDentBusiness.Recalls.SendAutomaticWebSchedNotifications">
            <summary>Used in the eConnector service.  Honors the preferences for Web Sched automation.
            Returns a list of errors that the eConnector needs to log.  Returns an empty list if no errors or automatic sending is off.</summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.SendWebSchedNotifications(System.Collections.Generic.List{System.Int64},System.Boolean,OpenDentBusiness.RecallListSort,OpenDentBusiness.EmailAddress)">
            <summary>Makes several web service calls to WebServiceCustomersUpdates in order to get Web Sched URLs.
            Returns a list of errors to display to the user if anything went wrong otherwise returns empty list if everything was successful.</summary>
        </member>
        <member name="M:OpenDentBusiness.Recalls.CreateRecallApptForWebSched(System.Int64,System.DateTime,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.WebTypes.WebSched.TimeSlot.TimeSlot})">
            <summary>Creates and inserts an appointment for the recall passed in using the dateStart hour as the beginning of the appointment.
            It will be scheduled in the first available operatory.
            <para>The first available operatory is determined by the order in which they are stored in the database (operatory.ItemOrder).</para>
            <para>This means that (visually to the user) we will be filling up their appointment schedule from the left to the right.</para>
            <para>Surround with a try catch.  Throws exceptions if anything goes wrong.</para>
            <para>Returns the list of procedures that were scheduled on the appointment created.</para></summary>
        </member>
        <member name="T:OpenDentBusiness.RecallComparer">
            <summary>The supplied DataRows must include the following columns: 
            Guarantor, PatNum, guarLName, guarFName, LName, FName, DateDue, maxDateDue, billingType.  
            maxDateDue is the most recent DateDue for all family members in the list and needs to be the same for all family members.  
            This date will be used for better grouping.</summary>
        </member>
        <member name="F:OpenDentBusiness.RecallComparer.SortBy">
            <summary>rather than by the ordinary DueDate.</summary>
        </member>
        <member name="M:OpenDentBusiness.RecallComparer.Compare(System.Data.DataRow,System.Data.DataRow)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.RecallTriggers">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RecallTriggers.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RecallTriggers.Insert(OpenDentBusiness.RecallTrigger)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.RecallTypes">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RecallTypes.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RecallTypes.Insert(OpenDentBusiness.RecallType)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RecallTypes.Update(OpenDentBusiness.RecallType)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RecallTypes.GetProcs(System.Int64)">
            <summary>Returns a collection of proccodes (D####).  Count could be zero.</summary>
        </member>
        <member name="M:OpenDentBusiness.RecallTypes.PerioAndProphyBothHaveTriggers">
            <summary>Also makes sure both types are defined as special types.</summary>
        </member>
        <member name="M:OpenDentBusiness.RecallTypes.ConvertTimePattern(System.String)">
            <summary>Converts the passed in time pattern into 5 minute increments.
            The time pattern returned is altered based on the AppointmentTimeIncrement preference.
            E.g. "/XX/" passed in with 10 minute increments set will return "//XXXX//"
            If an empty timePattern is passed in, a default pattern of //XX// will be returned (unless using 15 min inc, then ///XXX///)</summary>
        </member>
        <member name="M:OpenDentBusiness.RecallTypes.GetActive">
            <summary>Gets a list of all active recall types.  Those without triggers are excluded.  Perio and Prophy are both included.  One of them should later be removed from the collection.</summary>
        </member>
        <member name="P:OpenDentBusiness.RecallTypes.ProphyType">
            <summary>Gets the pref table RecallTypeSpecialProphy RecallTypeNum.</summary>
        </member>
        <member name="P:OpenDentBusiness.RecallTypes.PerioType">
            <summary>Gets the pref table RecallTypeSpecialPerio RecallTypeNum.</summary>
        </member>
        <member name="P:OpenDentBusiness.RecallTypes.ChildProphyType">
            <summary>Gets the pref table RecallTypeSpecialChildProphy RecallTypeNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.RecallTypes.SetToDefault">
            <summary>Deletes the current recalltype and recalltrigger tables and fills them with our default.  Typically ran to switch T codes to D codes.</summary>
        </member>
        <member name="M:OpenDentBusiness.RecallTypes.IsUsingManuallyAddedTypes">
            <summary>Returns true if any recall types that are not the default types are in use in patient recalls.</summary>
        </member>
        <member name="T:OpenDentBusiness.DeletedObjects">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DeletedObjects.SetDeleted(OpenDentBusiness.DeletedObjectType,System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DeletedObjects.GetChangedSinceDeletedObjectNums(System.DateTime)">
            <summary>The values returned are sent to the webserver.</summary>
        </member>
        <member name="M:OpenDentBusiness.DeletedObjects.DeleteForMobile(System.Collections.Generic.List{OpenDentBusiness.DeletedObject},System.Int64)">
            <summary>This is only run at the server for the mobile db. Deleted patients are not handled here because patients never get deleted.</summary>
        </member>
        <member name="T:OpenDentBusiness.Reconciles">
            <summary>The two lists get refreshed the first time they are needed rather than at startup.</summary>
        </member>
        <member name="M:OpenDentBusiness.Reconciles.GetList(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Reconciles.GetOne(System.Int64)">
            <summary>Gets one reconcile directly from the database.  Program will crash if reconcile not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Reconciles.Insert(OpenDentBusiness.Reconcile)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Reconciles.Update(OpenDentBusiness.Reconcile)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Reconciles.Delete(OpenDentBusiness.Reconcile)">
            <summary>Throws exception if Reconcile is in use.</summary>
        </member>
        <member name="T:OpenDentBusiness.RefAttaches">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RefAttaches.Refresh(System.Int64)">
            <summary>For one patient</summary>
        </member>
        <member name="M:OpenDentBusiness.RefAttaches.RefreshFiltered(System.Int64,System.Boolean,System.Int64)">
            <summary>For the ReferralsPatient window.  showAll is only used for the referred procs view.</summary>
        </member>
        <member name="M:OpenDentBusiness.RefAttaches.RefreshForReferralProcTrack(System.DateTime,System.DateTime,System.Boolean)">
            <summary>For FormReferralProckTrack.</summary>
        </member>
        <member name="M:OpenDentBusiness.RefAttaches.Update(OpenDentBusiness.RefAttach)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RefAttaches.Update(OpenDentBusiness.RefAttach,OpenDentBusiness.RefAttach)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RefAttaches.Insert(OpenDentBusiness.RefAttach)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RefAttaches.Delete(OpenDentBusiness.RefAttach)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RefAttaches.IsReferralAttached(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RefAttaches.GetPats(System.Int64,System.Boolean)">
            <summary>Returns a list of patient names that are attached to this referral. Used to display in the referral edit window.</summary>
        </member>
        <member name="M:OpenDentBusiness.RefAttaches.GetReferralNum(System.Int64)">
            <summary>Gets the referral number for this patient.  If multiple, it returns the first one.  If none, it returns 0.  Does not consider referred To.</summary>
        </member>
        <member name="M:OpenDentBusiness.RefAttaches.GetRefAttaches(System.Collections.Generic.List{System.Int64})">
            <summary>Gets all RefAttaches for the patients in the list of PatNums.  Returns an empty list if no matches.</summary>
        </member>
        <member name="M:OpenDentBusiness.RefAttaches.GetRefAttachesForSummaryOfCareForPat(System.Int64)">
            <summary>Gets all the possible RefAttaches, for the patient, that are in the denominator of the summary of care measure.</summary>
        </member>
        <member name="T:OpenDentBusiness.Referrals">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Referrals.list">
            <summary>All referrals for all patients.  Just as needed.  Cache refresh could be more intelligent and faster.</summary>
        </member>
        <member name="M:OpenDentBusiness.Referrals.RefreshCache">
            <summary>Refreshes all referrals for all patients.  Need to rework at some point so less memory is consumed.  Also refreshes dynamically, so no need to invalidate local data.</summary>
        </member>
        <member name="M:OpenDentBusiness.Referrals.Update(OpenDentBusiness.Referral)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Referrals.Insert(OpenDentBusiness.Referral)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Referrals.Delete(OpenDentBusiness.Referral)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Referrals.GetEmailMatch(System.String)">
            <summary>Get all matching rows where input email is found in the Email column.</summary>
        </member>
        <member name="M:OpenDentBusiness.Referrals.GetNameLF(System.Int64)">
            <summary>Includes title like DMD on the end.</summary>
        </member>
        <member name="M:OpenDentBusiness.Referrals.GetNameFL(System.Int64)">
            <summary>Includes title, such as DMD.</summary>
        </member>
        <member name="M:OpenDentBusiness.Referrals.GetPhone(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Referrals.GetSimilarNames(System.String)">
            <summary>Returns a list of Referrals with names similar to the supplied string.  Used in dropdown list from referral field in FormPatientAddAll for faster entry.</summary>
        </member>
        <member name="M:OpenDentBusiness.Referrals.GetReferral(System.Int64)">
            <summary>Gets Referral info from memory. Does not make a call to the database unless needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Referrals.GetReferralForPat(System.Int64)">
            <summary>Gets the first referral "from" for the given patient.  Will return null if no "from" found for patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Referrals.GetReferrals(System.Collections.Generic.List{System.Int64})">
            <summary>Gets all referrals by RefNum.  Returns an empty list if no matches.</summary>
        </member>
        <member name="M:OpenDentBusiness.Referrals.MergeReferrals(System.Int64,System.Int64)">
            <summary>Merges two referrals into a single referral. Returns false if both referrals are the same.</summary>
        </member>
        <member name="M:OpenDentBusiness.Referrals.CountReferralAttach(System.Int64)">
            <summary>Returns the number of refattaches that this referral has.</summary>
        </member>
        <member name="M:OpenDentBusiness.Referrals.IsSpecialtyInUse(System.Int64)">
            <summary>Used to check if a specialty is in use when user is trying to hide it.</summary>
        </member>
        <member name="T:OpenDentBusiness.RegistrationKeys">
            <summary>Used to keep track of which product keys have been assigned to which customers. This class is only used if the program is being run from a distributor installation.</summary>
        </member>
        <member name="M:OpenDentBusiness.RegistrationKeys.GetForPatient(System.Int64)">
            <summary>Retrieves all registration keys for a particular customer's family. There can be multiple keys assigned to a single customer, or keys assigned to individual family members, since the customer may have multiple physical locations of business.</summary>
        </member>
        <member name="M:OpenDentBusiness.RegistrationKeys.Update(OpenDentBusiness.RegistrationKey)">
            <summary>Updates the given key data to the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.RegistrationKeys.Insert(OpenDentBusiness.RegistrationKey)">
            <summary>Inserts a new and unique registration key into the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.RegistrationKeys.KeyIsInUse(System.String)">
            <summary>Returns true if the given registration key is currently in use by a customer, false otherwise.</summary>
        </member>
        <member name="M:OpenDentBusiness.RegistrationKeys.GetAllWithoutCharges">
            <Summary>Returns any active registration keys that have no repeating charges on any corresponding family members.  Columns include PatNum, LName, FName, and RegKey.</Summary>
        </member>
        <member name="M:OpenDentBusiness.RegistrationKeys.GetAll">
            <summary>Get the list of all RegistrationKey rows. DO NOT REMOVE! Used by OD WebApps solution.</summary>
        </member>
        <member name="T:OpenDentBusiness.RepeatCharges">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RepeatCharges.Refresh(System.Int64)">
            <summary>Gets a list of all RepeatCharges for a given patient.  Supply 0 to get a list for all patients.</summary>
        </member>
        <member name="M:OpenDentBusiness.RepeatCharges.Update(OpenDentBusiness.RepeatCharge)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RepeatCharges.EnableRepeatCharge(System.Int64,System.Single,System.String,System.DateTime,System.Boolean,System.Boolean)">
            <summary>Inserts a new RepeatCharge if none found for patNum/procCode. Otherwise updates existing.
            If dateStart is not explicitly provided, then it will default to DateTime.Today.
            If RepeatCharge already exists then chargeAmt, dateStart, createsClaim, copyNoteToProc inputs will be ignored and RepeatCharge will simply be re-enabled.
            Use RepeatCharges.Update() if you want to specify new input values.</summary>
        </member>
        <member name="M:OpenDentBusiness.RepeatCharges.Insert(OpenDentBusiness.RepeatCharge)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RepeatCharges.Delete(OpenDentBusiness.RepeatCharge)">
            <summary>Called from FormRepeatCharge.</summary>
        </member>
        <member name="M:OpenDentBusiness.RepeatCharges.GetForErx">
            <summary>For internal use only.  Returns all eRx repeating charges for all customers.</summary>
        </member>
        <member name="M:OpenDentBusiness.RepeatCharges.GetAll">
            <summary>Get the list of all RepeatCharge rows. DO NOT REMOVE! Used by OD WebApps solution.</summary>
        </member>
        <member name="M:OpenDentBusiness.RepeatCharges.ActiveRepeatChargeExists(System.Int64)">
            <summary>Returns true if there are any active repeating charges on the patient's account, false if there are not.</summary>
        </member>
        <member name="M:OpenDentBusiness.RepeatCharges.RunRepeatingCharges(System.DateTime)">
            <summary>Runs repeating charges for the date passed in, usually today. Can't use 'out' variables because this runs over Middle Tier.</summary>
        </member>
        <member name="M:OpenDentBusiness.RepeatCharges.AddClaimsHelper(OpenDentBusiness.RepeatCharge,OpenDentBusiness.Procedure)">
            <summary>Do not call this until after determining if the repeate charge might generate a claim.  This function checks current insurance and 
            may not add claims if no insurance is found.</summary>
        </member>
        <member name="M:OpenDentBusiness.RepeatCharges.GetBillingDatesHelper(System.DateTime,System.DateTime,System.DateTime,System.Int32)">
            <summary>Returns 1 or 2 dates to be billed given the date range. Only filtering based on date range has been performed.</summary>
        </member>
        <member name="M:OpenDentBusiness.RepeatCharges.AddSmsRepeatingChargesHelper(System.DateTime)">
            <summary>Should only be called if ODHQ.</summary>
        </member>
        <member name="M:OpenDentBusiness.RepeatCharges.IsRepeatDateHelper(OpenDentBusiness.RepeatCharge,System.DateTime,System.DateTime)">
            <summary>Returns true if the existing procedure was for the possibleBillingDate.</summary>
        </member>
        <member name="T:OpenDentBusiness.ReqNeededs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ReqNeededs.Update(OpenDentBusiness.ReqNeeded)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ReqNeededs.Insert(OpenDentBusiness.ReqNeeded)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ReqNeededs.Delete(System.Int64)">
            <summary>Surround with try/catch.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReqNeededs.GetListFromDb">
            <summary>Returns a list with all reqneeded entries in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReqNeededs.Sync(System.Collections.Generic.List{OpenDentBusiness.ReqNeeded},System.Collections.Generic.List{OpenDentBusiness.ReqNeeded})">
            <summary>Inserts, updates, or deletes rows to reflect changes between listNew and stale listOld.</summary>
        </member>
        <member name="T:OpenDentBusiness.ReqStudents">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ReqStudents.Update(OpenDentBusiness.ReqStudent)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ReqStudents.Insert(OpenDentBusiness.ReqStudent)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ReqStudents.Delete(System.Int64)">
            <summary>Surround with try/catch.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReqStudents.GetForCourseClass(System.Int64,System.Int64)">
            <summary>Provider(student) is required.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReqStudents.SynchApt(System.Collections.Generic.List{OpenDentBusiness.ReqStudent},System.Collections.Generic.List{OpenDentBusiness.ReqStudent},System.Int64)">
            <summary>All fields for all reqs will have already been set.  All except for reqstudent.ReqStudentNum if new.  Now, they just have to be persisted to the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReqStudents.InUseBy(System.Int64)">
            <summary>Before reqneeded.Delete, this checks to make sure that req is not in use by students.  Used to prompt user.</summary>
        </member>
        <member name="T:OpenDentBusiness.RxAlerts">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxAlerts.Refresh(System.Int64)">
            <summary>Gets a list of all RxAlerts for one RxDef.</summary>
        </member>
        <member name="M:OpenDentBusiness.RxAlerts.TableToList(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxAlerts.Update(OpenDentBusiness.RxAlert)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxAlerts.Insert(OpenDentBusiness.RxAlert)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxAlerts.Delete(OpenDentBusiness.RxAlert)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.RxDefs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxDefs.Refresh">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxDefs.Update(OpenDentBusiness.RxDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxDefs.Insert(OpenDentBusiness.RxDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxDefs.TableToList(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxDefs.Delete(OpenDentBusiness.RxDef)">
            <summary>Also deletes all RxAlerts that were attached.</summary>
        </member>
        <member name="T:OpenDentBusiness.RxPats">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxPats.GetAllForPat(System.Int64)">
            <summary>Returns a list of RxPats containing the passed in PatNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.RxPats.GetPermissableForDateRange(System.Int64,System.DateTime,System.DateTime)">
            <summary>Used in Ehr.  Excludes controlled substances.</summary>
        </member>
        <member name="M:OpenDentBusiness.RxPats.GetRx(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxPats.Update(OpenDentBusiness.RxPat)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxPats.Insert(OpenDentBusiness.RxPat)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxPats.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxPats.GetMultRxPats(System.Collections.Generic.List{System.Int64})">
            <summary>Used along with GetChangedSinceRxNums</summary>
        </member>
        <member name="M:OpenDentBusiness.RxPats.GetQueue">
            <summary>Used in FormRxSend to fill electronic queue.</summary>
        </member>
        <member name="M:OpenDentBusiness.RxPats.GetRxNewCrop(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RxPats.ClearFkey(System.Int64)">
            <summary>Zeros securitylog FKey column for rows that are using the matching rxNum as FKey and are related to RxPat.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the RxPat table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.RxPats.ClearFkey(System.Collections.Generic.List{System.Int64})">
            <summary>Zeros securitylog FKey column for rows that are using the matching rxNums as FKey and are related to RxPat.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the RxPat table type.</summary>
        </member>
        <member name="T:OpenDentBusiness.ScheduleOps">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ScheduleOps.Insert(OpenDentBusiness.ScheduleOp)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ScheduleOps.GetForSched(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ScheduleOps.GetForSchedList(System.Collections.Generic.List{OpenDentBusiness.Schedule})">
            <summary>Gets all the ScheduleOps for the list of schedules.</summary>
        </member>
        <member name="T:OpenDentBusiness.Schedules">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.GetDayList(System.DateTime)">
            <summary>Gets a list of Schedule items for one date.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.RefreshPeriod(System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Boolean,System.Boolean,System.Int64)">
            <summary>Used in the Schedules edit window to get a filtered list of schedule items in preparation for paste or repeat.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.RefreshPeriodBlockouts(System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64})">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.RefreshDayEdit(System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.RefreshDayEditForPracticeProvsEmps(System.DateTime,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>Gets a list of Schedule items for one date filtered by providers and employees.
            Also option to include practice and clinic holidays and practice notes.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.GetTwoYearPeriod(System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.RefreshAll">
            <summary>Used in the check database integrity tool.  Does NOT fill the list of operatories per schedule.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.RefreshAndFill(System.String,System.Boolean)">
            <summary>This is only allowed because it's PRIVATE.  Retrieves all schedules from the db using command, then retrieves all scheduleops for the
            schedules and fills the schedule.Ops list with OperatoryNums for the schedule.  Does NOT use GROUP_CONCAT since there is a max length for
            GROUP_CONCAT and data may be incorrect or truncated, especially with random primary keys.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.Update(OpenDentBusiness.Schedule)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.Update(OpenDentBusiness.Schedule,OpenDentBusiness.Schedule,System.Boolean)">
            <summary>Similar to Crud.ScheduleCrud.Update except this also handles ScheduleOps.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.Insert(OpenDentBusiness.Schedule,System.Boolean)">
            <summary>Set validate to true to throw an exception if start and stop times need to be validated.  If validate is set to false, then the calling code is responsible for the validation.  Also inserts necessary scheduleop enteries.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.Validate(OpenDentBusiness.Schedule)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.Overlaps(OpenDentBusiness.Schedule)">
            <summary>Goes to the db to look for overlaps.  Implemented for blockouts, but should work for other types, too.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.Delete(OpenDentBusiness.Schedule)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.GetForType(System.Collections.Generic.List{OpenDentBusiness.Schedule},OpenDentBusiness.ScheduleType,System.Int64)">
            <summary>Supply a list of all Schedule for one day. Then, this filters out for one type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.GetForEmployee(System.Collections.Generic.List{OpenDentBusiness.Schedule},System.Int64)">
            <summary>Supply a list of Schedule . Then, this filters out for an employee.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.GetSchedsForOp(System.Collections.Generic.List{OpenDentBusiness.Schedule},System.DayOfWeek,OpenDentBusiness.Operatory)">
            <summary>Returns schedules with SchedType.Provider for a specific op.  This overload is for when the listForPeriod includes multiple days.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.GetSchedsForOp(System.Collections.Generic.List{OpenDentBusiness.Schedule},OpenDentBusiness.Operatory)">
            <summary>Returns schedules with SchedType.Provider for a specific op.  This overload is for when the listForPeriod includes only one day.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.GetAssignedProvNumForSpot(System.Collections.Generic.List{OpenDentBusiness.Schedule},OpenDentBusiness.Operatory,System.Boolean,System.DateTime)">
            <summary>If no provider is found for spot then the operatory provider is returned.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.GetCommaDelimStringForScheds(System.Collections.Generic.List{OpenDentBusiness.Schedule})">
            <summary>Comma delimits multiple schedules and creates a nice clean sting for screen ledgibility</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.ClearBlockoutsForDay(System.DateTime)">
            <summary>Clears all blockouts for day.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.DeleteOrphanedBlockouts">
            <summary>Delete any blockout schedules that don't have any scheduleop rows.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.GetForDate(System.DateTime)">
            <summary>Similar to GetDayList but uses Crud pattern and classes.  No need to call RefreshAndFill since this is only used for the ScheduleNums</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.GetPeriod(System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Boolean,System.Boolean,System.Int64,System.Boolean)">
            <summary>Returns a 7 column data table in a calendar layout so all you have to do is draw it on the screen.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.GetSchedulesAndBlockoutsForWebSched(System.Collections.Generic.List{System.Int64},System.DateTime,System.DateTime,System.Boolean)">
            <summary>Gets all schedules and blockouts that meet the Web Sched requirements.  Set isRecall to false to get New Pat Appt ops.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.GetRowCal(System.DateTime,System.DateTime)">
            <summary>Returns the 0-based row where endDate will fall in a calendar grid.  It is not necessary to have a function to retrieve the column,
            because that is simply (int)myDate.DayOfWeek</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.GetDateCal(System.DateTime,System.Int32,System.Int32)">
            <summary>When click on a calendar grid, this is used to calculate the date clicked on.  StartDate is the first date in the Calendar, which does
            not have to be Sun.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.SetForDay(System.Collections.Generic.List{OpenDentBusiness.Schedule},System.Collections.Generic.List{OpenDentBusiness.Schedule})">
            <summary>Surround with try/catch.  Uses Sync to update the database with the changes made to listScheds from the stale listSchedsOld.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.Sync(System.Collections.Generic.List{OpenDentBusiness.Schedule},System.Collections.Generic.List{OpenDentBusiness.Schedule})">
            <summary>Inserts, updates, or deletes the passed in listNew against the stale listOld.  Returns true if db changes were made.
            This does not call the normal crud.Sync due to the special cases of DeletedObject and ScheduleOps.
            This sends less data across middle teir for update logic, which is why remoting role occurs after we have filtered both lists.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.SyncToDbHelper(System.Collections.Generic.List{OpenDentBusiness.Schedule},System.Collections.Generic.List{OpenDentBusiness.Schedule},System.Collections.Generic.List{OpenDentBusiness.Schedule},System.Collections.Generic.List{OpenDentBusiness.Schedule})">
            <summary>Inserts, updates, or deletes database rows sepcified in the supplied lists.  Returns true if db changes were made.
            This was split from the list building logic to limit the payload that needed to be sent over middle tier.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.Clear(System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Boolean,System.Boolean,System.Int64)">
            <summary>Clears all schedule entries for the given date range and the given providers, employees, and practice.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.ClearBlockouts(System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64})">
            <summary>Clears all Blockout schedule entries for the given date range and the given ops.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.ClearDuplicates">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.GetPeriodEmployeeSchedTable(System.DateTime,System.DateTime,System.Int64)">
            <summary>Set clinicNum to 0 to return 'unassigned' clinics.  Otherwise, filters the data set on the clinic num passed in.
            Added to the DataSet in Appointments.RefreshPeriod.</summary>
        </member>
        <member name="M:OpenDentBusiness.Schedules.GetPeriodProviderSchedTable(System.DateTime,System.DateTime,System.Int64)">
            <summary>Set clinicNum to 0 to return 'unassigned' clinics.  Otherwise, filters the data set on the clinic num passed in.
            Added to the DataSet in Appointments.RefreshPeriod.</summary>
        </member>
        <member name="T:OpenDentBusiness.SchoolClasses">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.SchoolClasses.list">
            <summary>A list of all classes, ordered by year and descript.</summary>
        </member>
        <member name="M:OpenDentBusiness.SchoolClasses.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SchoolClasses.Update(OpenDentBusiness.SchoolClass)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SchoolClasses.Insert(OpenDentBusiness.SchoolClass)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SchoolClasses.InsertOrUpdate(OpenDentBusiness.SchoolClass,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SchoolClasses.Delete(System.Int64)">
            <summary>Surround by a try/catch in case there are dependencies.</summary>
        </member>
        <member name="T:OpenDentBusiness.SchoolCourses">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.SchoolCourses.list">
            <summary>A list of all schoolcourses, organized by course ID.</summary>
        </member>
        <member name="M:OpenDentBusiness.SchoolCourses.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SchoolCourses.Update(OpenDentBusiness.SchoolCourse)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SchoolCourses.Insert(OpenDentBusiness.SchoolCourse)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SchoolCourses.InsertOrUpdate(OpenDentBusiness.SchoolCourse,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SchoolCourses.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SchoolCourses.GetDescript(System.Int64)">
            <summary>Description is CourseID Descript.</summary>
        </member>
        <member name="T:OpenDentBusiness.ScreenGroups">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ScreenGroups.Refresh(System.DateTime,System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ScreenGroups.Insert(OpenDentBusiness.ScreenGroup)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ScreenGroups.Update(OpenDentBusiness.ScreenGroup)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ScreenGroups.Delete(OpenDentBusiness.ScreenGroup)">
            <summary>This will also delete all screen items, so may need to ask user first.</summary>
        </member>
        <member name="T:OpenDentBusiness.Screens">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Screens.GetOne(System.Int64)">
            <summary>Gets one Screen from the db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Screens.CreateScreensFromSheets(System.Collections.Generic.List{OpenDentBusiness.Sheet})">
            <summary>After taking multiple screenings using a sheets, this method will import all sheets as screens and insert them into the db.
            The goal of this method is that the office will fill out a bunch of sheets (in the web?).
            Then after they get back to their office (with connection to their db) they will push a button to upload / insert a batch.</summary>
        </member>
        <member name="M:OpenDentBusiness.Screens.CreateScreenFromSheet(OpenDentBusiness.Sheet,OpenDentBusiness.Screen)">
            <summary>After taking a screening using a sheet, this method will import the sheet as a screen and insert it into the db.
            Returns null if the sheet passed in is not a Screening sheet type or if the sheet is missing the required ScreenGroupNum param.
            Optionally supply a screen if you want to preset some values.  E.g. ScreenGroupOrder is often preset before calling this method.</summary>
        </member>
        <member name="M:OpenDentBusiness.Screens.ProcessScreenChart(OpenDentBusiness.Sheet,OpenDentBusiness.ScreenChartType,System.Int64,System.Int64,System.Collections.Generic.List{OpenDentBusiness.SheetField},System.Collections.Generic.List{OpenDentBusiness.SheetField})">
            <summary>Takes a screening sheet that is associated to a patient and processes any corresponding ScreenCharts found.
            Processing will create treatment planned or completed procedures for the patient.
            Supply the sheet and then a bitwise enum of screen chart types to digest.
            procOrigVals MUST be two items long, nulls are allowed, the first represents the fluoride field, second is assessment field.</summary>
        </member>
        <member name="M:OpenDentBusiness.Screens.ProcessScreenChartHelper(System.Int64,System.Collections.Generic.List{System.String},OpenDentBusiness.ScreenChartType,System.Int64,System.Int64,System.Collections.Generic.List{System.String})">
            <summary>Helper method so that we do not have to duplicate code.  The length of toothValues must match the length of chartOrigVals.</summary>
        </member>
        <member name="M:OpenDentBusiness.Screens.GetYN(System.String)">
            <summary>Helper method to quickly get the YN value from a string.  Returns Yes if str starts with y, No if n, Unknown by default.</summary>
        </member>
        <member name="M:OpenDentBusiness.Screens.GetScreensForGroup(System.Int64)">
            <summary>Gets all screens associated to the screen group passed in.</summary>
        </member>
        <member name="M:OpenDentBusiness.Screens.Insert(OpenDentBusiness.Screen)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Screens.Update(OpenDentBusiness.Screen)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Screens.Delete(OpenDentBusiness.Screen)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Screens.DeleteForSheet(System.Int64)">
            <summary>Deletes a Screen that has the attached sheetNum.  Deleting screen sheets are the same as deleting the screen itself.</summary>
        </member>
        <member name="T:OpenDentBusiness.Security">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Security.curUser">
            <summary>The current user.  Might be null when first starting the program.  Otherwise, must contain valid user.</summary>
        </member>
        <member name="F:OpenDentBusiness.Security.PasswordTyped">
            <summary>Remember the password that the user typed in.  Do not store it in the database.  We will need it when connecting to the web service.  Probably blank if not connected to the web service.  If eCW, then this is already encrypted.</summary>
        </member>
        <member name="F:OpenDentBusiness.Security.IsUserLoggedIn">
            <summary>Tracks whether or not the user is logged in.  Security.CurUser==null usually is used for this purpose, 
            but in Middle Tier we do not null out CurUser so that queries can continue to be run on the web service.</summary>
        </member>
        <member name="M:OpenDentBusiness.Security.#ctor">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Security.IsAuthorized(OpenDentBusiness.Permissions)">
            <summary>Checks to see if current user is authorized.  It also checks any date restrictions.  If not authorized, it gives a Message box saying so and returns false.</summary>
        </member>
        <member name="M:OpenDentBusiness.Security.IsAuthorized(OpenDentBusiness.Permissions,System.DateTime)">
            <summary>Checks to see if current user is authorized.  It also checks any date restrictions.  If not authorized, it gives a Message box saying so and returns false.</summary>
        </member>
        <member name="M:OpenDentBusiness.Security.IsAuthorized(OpenDentBusiness.Permissions,System.Boolean)">
            <summary>Checks to see if current user is authorized.  It also checks any date restrictions.  If not authorized, it gives a Message box saying so and returns false.</summary>
        </member>
        <member name="M:OpenDentBusiness.Security.IsAuthorized(OpenDentBusiness.Permissions,System.DateTime,System.Boolean)">
            <summary>Checks to see if current user is authorized.  It also checks any date restrictions.  If not authorized, it gives a Message box saying so and returns false.</summary>
        </member>
        <member name="M:OpenDentBusiness.Security.IsAuthorized(OpenDentBusiness.Permissions,System.DateTime,System.Boolean,System.Boolean)">
            <summary>Checks to see if current user is authorized.  It also checks any date restrictions.  If not authorized, it gives a Message box saying so and returns false.</summary>
        </member>
        <member name="M:OpenDentBusiness.Security.IsAuthorized(OpenDentBusiness.Permissions,System.DateTime,System.Boolean,System.Boolean,System.Int64)">
            <summary>Will throw an error if not authorized and message not suppressed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Security.IsGlobalDateLock(OpenDentBusiness.Permissions,System.DateTime,System.Boolean)">
            <summary>Surrond with Try/Catch. Error messages will be thrown to caller.</summary>
        </member>
        <member name="M:OpenDentBusiness.Security.GetModule(System.Int32)">
            <summary>Gets a module that the user has permission to use.  Tries the suggestedI first.  If a -1 is supplied, it tries to find any authorized module.  If no authorization for any module, it returns a -1, causing no module to be selected.</summary>
        </member>
        <member name="M:OpenDentBusiness.Security.LogInWeb(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>RemotingRole has not yet been set to ClientWeb, but it will if this succeeds.  Will throw an exception if server cannot validate username and password.  configPath will be empty from a workstation and filled from the server.  If Ecw, odpass will actually be the hash.</summary>
        </member>
        <member name="M:OpenDentBusiness.Security.IsValidEServicePermission(OpenDentBusiness.Permissions)">
            <summary>Returns false if the currently logged in user is not designated for the eConnector or if the user does not have permission.</summary>
        </member>
        <member name="M:OpenDentBusiness.Security.IsPermAllowedEConnector(OpenDentBusiness.Permissions)">
            <summary>Returns true if the eConnector should be allowed to run methods with the passed in permission.</summary>
        </member>
        <member name="T:OpenDentBusiness.SecurityLogs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogs.Refresh(System.DateTime,System.DateTime,OpenDentBusiness.Permissions,System.Int64,System.Int64,System.Int32)">
            <summary>Used when viewing securityLog from the security admin window.  PermTypes can be length 0 to get all types.</summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogs.Insert(OpenDentBusiness.SecurityLog)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogs.Refresh(System.Int64,System.Collections.Generic.List{OpenDentBusiness.Permissions},System.Int64)">
            <summary>Used when viewing various audit trails of specific types.  Only implemented Appointments,ProcFeeEdit,InsPlanChangeCarrierName so far. patNum only used for Appointments.  The other two are zero.</summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogs.Refresh(System.Int64,System.Collections.Generic.List{OpenDentBusiness.Permissions},System.Collections.Generic.List{System.Int64})">
            <summary>Used when viewing various audit trails of specific types.  This overload will return security logs for multiple objects (or fKeys).  Typically you will only need a specific type audit log for one type.  However, for things like ortho charts, each row (FK) in the database represents just one part of a larger ortho chart "object".  Thus, to get the full experience of a specific type audit trail window, we need to get security logs for multiple objects (FKs) that comprise the larger object (what the user sees).  Only implemented with ortho chart so far.  FKeys can be null.</summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogs.GetOne(System.Int64)">
            <summary>Returns one SecurityLog from the db.  Called from SecurityLogHashs.CreateSecurityLogHash()</summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogs.MakeLogEntry(OpenDentBusiness.Permissions,System.Int64,System.String)">
            <summary>PatNum can be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogs.MakeLogEntry(OpenDentBusiness.Permissions,System.Int64,System.String,OpenDentBusiness.LogSources)">
            <summary>Used when the security log needs to be identified by a particular source.  PatNum can be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogs.MakeLogEntry(OpenDentBusiness.Permissions,System.Int64,System.String,System.Int64)">
            <summary>Takes a foreign key to a table associated with that PermType.  PatNum can be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogs.MakeLogEntry(OpenDentBusiness.Permissions,System.Int64,System.String,System.Int64,OpenDentBusiness.LogSources)">
            <summary>Takes a foreign key to a table associated with that PermType.  PatNum can be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogs.MakeLogEntry(OpenDentBusiness.Permissions,System.Int64,System.String,System.Int64,OpenDentBusiness.LogSources,System.Int64)">
            <summary>Takes a foreign key to a table associated with that PermType.  PatNum can be 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogs.MakeLogEntryNoCache(OpenDentBusiness.Permissions,System.Int64,System.String)">
            <summary>Used when making a security log from a remote server, possibly with multithreaded connections.</summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogs.InsertNoCache(OpenDentBusiness.SecurityLog)">
            <summary>Insertion logic that doesn't use the cache. Has special cases for generating random PK's and handling Oracle insertions.</summary>
        </member>
        <member name="T:OpenDentBusiness.SheetFieldDefs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFieldDefs.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFieldDefs.GetForExamSheet(System.Int64)">
            <summary>Gets all internal SheetFieldDefs from the database for a specific sheet, used in FormSheetFieldExam.</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFieldDefs.GetForSheetDef(System.Int64)">
            <summary>Gets all SheetFieldDefs from the database for a specific sheet, used in FormSheetFieldExam.</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFieldDefs.CreateObject(System.Int64)">
            <Summary>Gets one SheetFieldDef from the database.</Summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFieldDefs.Insert(OpenDentBusiness.SheetFieldDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFieldDefs.Update(OpenDentBusiness.SheetFieldDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFieldDefs.Delete(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFieldDefs.Sync(System.Collections.Generic.List{OpenDentBusiness.SheetFieldDef},System.Int64)">
            <summary>Inserts, updates, or deletes database rows to match supplied list. Must always pass in sheetDefNum.
            This function uses a DB comparison rather than a stale list because we are not worried about concurrency of a single sheet and enhancing the
            functions that call this would take a lot of restructuring.</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFieldDefs.SortDrawingOrderLayers(OpenDentBusiness.SheetFieldDef,OpenDentBusiness.SheetFieldDef)">
            <summary>Sorts fields in the order that they shoudl be drawn on top of eachother. First Images, then Drawings, Lines, Rectangles, Text, Check Boxes, and SigBoxes. In that order.</summary>
        </member>
        <member name="T:OpenDentBusiness.SheetDefs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SheetDefs.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SheetDefs.GetSheetDef(System.Int64)">
            <Summary>Gets one SheetDef from the cache.  Also includes the fields and parameters for the sheetdef.</Summary>
        </member>
        <member name="M:OpenDentBusiness.SheetDefs.InsertOrUpdate(OpenDentBusiness.SheetDef)">
            <summary>Includes all attached fields.  Intelligently inserts, updates, or deletes old fields.</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetDefs.DeleteObject(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SheetDefs.GetFieldsAndParameters(OpenDentBusiness.SheetDef)">
            <summary>Sheetdefs and sheetfielddefs are archived separately.  So when we need to use a sheetdef, we must run this method to pull all the associated fields from the archive.  Then it will be ready for printing, copying, etc.</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetDefs.GetCustomForType(OpenDentBusiness.SheetTypeEnum)">
            <summary>Gets all custom sheetdefs(without fields or parameters) for a particular type.</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetDefs.GetDescription(System.Int64)">
            <summary>Gets the description from the cache.</summary>
        </member>
        <member name="T:OpenDentBusiness.SheetFields">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFields.CreateObject(System.Int64)">
            <Summary>Gets one SheetField from the database.</Summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFields.GetFieldsAndParameters(OpenDentBusiness.Sheet)">
            <summary>When we need to use a sheet, we must run this method to pull all the associated fields and parameters from the database.  Then it will be ready for printing, copying, etc.</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFields.GetFieldFromExamSheet(System.Int64,System.String,System.String)">
            <summary>Used in SheetFiller to fill patient letter with exam sheet information.  Will return null if no exam sheet matching the description exists for the patient.  Usually just returns one field, but will return a list of fields if it's for a RadioButtonGroup.</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFields.Insert(OpenDentBusiness.SheetField)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFields.Update(OpenDentBusiness.SheetField)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFields.DeleteObject(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFields.SetDrawings(System.Collections.Generic.List{OpenDentBusiness.SheetField},System.Int64)">
            <summary>Deletes all existing drawing fields for a sheet from the database and then adds back the list supplied.</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFields.SortDrawingOrderLayers(OpenDentBusiness.SheetField,OpenDentBusiness.SheetField)">
            <summary>Sorts fields in the order that they shoudl be drawn on top of eachother. First Images, then Drawings, Lines, Rectangles, Text, Check Boxes, and SigBoxes. In that order.</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFields.FieldTypeSortOrder(OpenDentBusiness.SheetFieldType)">
            <summary>Re-orders the SheetFieldType enum to a drawing order. Images should be drawn first, then drawings, then lines, then rectangles, etc...</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFields.SortPrimaryKey(OpenDentBusiness.SheetField,OpenDentBusiness.SheetField)">
            <summary>Sorts the sheet fields by SheetFieldNum.  This is used when creating a signature key and is absolutely critical that it not change.</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFields.Sync(System.Collections.Generic.List{OpenDentBusiness.SheetField},System.Int64,System.Boolean)">
            <summary>SigBoxes must be synced after all other fields have been synced for the keyData to be in the right order.
            So sync must be called first without SigBoxes, then the keyData for the signature(s) can be retrieved, then the SigBoxes can be synced.
            This function uses a DB comparison rather than a stale list because we are not worried about concurrency of a single sheet and enhancing the
            functions that call this would take a lot of restructuring.</summary>
        </member>
        <member name="T:OpenDentBusiness.Sheets">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.GetOne(System.Int64)">
            <Summary>Gets one Sheet from the database.</Summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.GetSheet(System.Int64)">
            <summary>Gets a single sheet from the database.  Then, gets all the fields and parameters for it.  So it returns a fully functional sheet.
            Returns null if the sheet isn't found in the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.SaveNewSheet(OpenDentBusiness.Sheet)">
            <Summary>This is normally done in FormSheetFillEdit, but if we bypass that window for some reason, we can also save a new sheet here.  Does not save any drawings.  Does not save signatures.  Does not save any parameters (PatNum parameters never get saved anyway).</Summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.SaveNewSheetList(System.Collections.Generic.List{OpenDentBusiness.Sheet})">
            <Summary>Saves a list of sheets to the Database. Only saves new sheets, ignores sheets that are not new.</Summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.GetReferralSlips(System.Int64,System.Int64)">
            <summary>Used in FormRefAttachEdit to show all referral slips for the patient/referral combo.  Usually 0 or 1 results.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.GetLabSlip(System.Int64,System.Int64)">
            <summary>Used in FormLabCaseEdit to view an existing lab slip.  Will return null if none exist.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.GetRx(System.Int64,System.Int64)">
            <summary>Used in FormRxEdit to view an existing rx.  Will return null if none exist.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.GetForTerminal(System.Int64)">
            <summary>Gets all sheets for a patient that have the terminal flag set.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.GetForPatientForToday(System.Int64)">
            <summary>Get all sheets for a patient for today.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.GetForPatient(System.Int64)">
            <summary>Get all sheets for a patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.GetForDocument(System.Int64)">
            <summary>Get all sheets that reference a given document. Primarily used to prevent deleting an in use document.</summary>
             <returns>List of sheets that have fields that reference the given DocNum. Returns empty list if document is not referenced.</returns>
        </member>
        <member name="M:OpenDentBusiness.Sheets.GetMostRecentExamSheet(System.Int64,System.String)">
            <summary>Gets the most recent Exam Sheet based on description to fill a patient letter.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.Insert(OpenDentBusiness.Sheet)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.Update(OpenDentBusiness.Sheet)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.Delete(System.Int64)">
            <summary>Deletes all sheetfields related to the sheet passed in and then deletes the sheet itself.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.SaveParameters(OpenDentBusiness.Sheet)">
            <summary>Converts parameters into sheetfield objects, and then saves those objects in the database.  The parameters will never again enjoy full parameter status, but will just be read-only fields from here on out.  It ignores PatNum parameters, since those are already part of the sheet itself.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.GetSignatureKey(OpenDentBusiness.Sheet)">
            <summary>Loops through all the fields in the sheet and appends together all the FieldValues.  It obviously excludes all SigBox fieldtypes.  It does include Drawing fieldtypes, so any change at all to any drawing will invalidate the signature.  It does include Image fieldtypes, although that's just a filename and does not really have any meaningful data about the image itself.  The order is absolutely critical.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.GetExamSheetsTable(System.Int64,System.DateTime,System.DateTime,System.String)">
            <summary>Returns all sheets for the given patient in the given date range which have a description matching the examDescript in a case insensitive manner. If examDescript is blank, then sheets with any description are returned.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.GetWebFormSheetsTable(System.DateTime,System.DateTime)">
            <summary>Used to get sheets filled via the web.</summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.GetBiggestShowInTerminal(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.ClearFromTerminal(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Sheets.CalculatePageCount(OpenDentBusiness.Sheet,System.Drawing.Printing.Margins)">
            <summary>This gives the number of pages required to print all fields. This must be calculated ahead of time when creating multi page pdfs.</summary>
        </member>
        <member name="T:OpenDentBusiness.Pharmacies">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Pharmacies.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Pharmacies.GetOne(System.Int64)">
            <Summary>Gets one Pharmacy from the database.</Summary>
        </member>
        <member name="M:OpenDentBusiness.Pharmacies.Insert(OpenDentBusiness.Pharmacy)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Pharmacies.Update(OpenDentBusiness.Pharmacy)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Pharmacies.DeleteObject(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Pharmacies.GetMultPharmacies(System.Collections.Generic.List{System.Int64})">
            <summary>Used along with GetChangedSincePharmacyNums</summary>
        </member>
        <member name="T:OpenDentBusiness.CovCats">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovCats.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovCats.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovCats.Update(OpenDentBusiness.CovCat)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovCats.Insert(OpenDentBusiness.CovCat)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovCats.MoveUp(OpenDentBusiness.CovCat)">
            <summary>Does not update the cache.  The cache must be manually refreshed after using this method beccause it only updates the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.CovCats.MoveDown(OpenDentBusiness.CovCat)">
            <summary>Does not update the cache.  The cache must be manually refreshed after using this method beccause it only updates the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.CovCats.SetOrder(OpenDentBusiness.CovCat,System.Byte)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovCats.GetCovCat(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovCats.GetDefaultPercent(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovCats.GetDesc(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovCats.GetCovCatNum(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovCats.GetOrderShort(System.Int64)">
            <summary>Returns -1 if not in ListShort.</summary>
        </member>
        <member name="M:OpenDentBusiness.CovCats.GetOrderShort(System.Int64,System.Collections.Generic.List{OpenDentBusiness.CovCat})">
            <summary>Returns -1 if not in the provided list.</summary>
        </member>
        <member name="M:OpenDentBusiness.CovCats.GetForEbenCat(OpenDentBusiness.EbenefitCategory)">
            <summary>Gets a matching benefit category from the short list.  Returns null if not found, which should be tested for.</summary>
        </member>
        <member name="M:OpenDentBusiness.CovCats.GetEbenCat(System.Int64)">
            <summary>If none assigned, it will return None.</summary>
        </member>
        <member name="M:OpenDentBusiness.CovCats.RecreateSpansForCategory(OpenDentBusiness.EbenefitCategory,System.String[])">
            <summary>Deletes the current CovSpans for the given eBenefitCategory, then creates new code ranges from the ranges specified in arrayCodeRanges.  The values in arrayCodeRanges can be a single code such as "D0120" or a code range such as "D9000-D9999".</summary>
        </member>
        <member name="T:OpenDentBusiness.CovSpans">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovSpans.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovSpans.Update(OpenDentBusiness.CovSpan)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovSpans.Insert(OpenDentBusiness.CovSpan)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovSpans.Validate(OpenDentBusiness.CovSpan)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovSpans.Delete(OpenDentBusiness.CovSpan)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovSpans.DeleteForCat(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovSpans.GetCat(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovSpans.GetForCat(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovSpans.GetForCat(System.Int64,OpenDentBusiness.CovSpan[])">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CovSpans.IsCodeInSpans(System.String,OpenDentBusiness.CovSpan[])">
            <summary>If the supplied code falls within any of the supplied spans, then returns true.</summary>
        </member>
        <member name="M:OpenDentBusiness.Defs.RefreshCache">
            <summary>If using remoting, then the calling program is responsible for filling the arrays on the client since the automated part only happens on the server.  So there are TWO sets of arrays in a server situation, but only one in a small office that connects directly to the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Defs.GetForCategory(System.Int32,System.Boolean,System.Collections.Generic.List{OpenDentBusiness.Def})">
            <summary>Used by the refresh method above.</summary>
        </member>
        <member name="M:OpenDentBusiness.Defs.GetCatList(System.Int32)">
            <summary>Only used in FormDefinitions</summary>
        </member>
        <member name="M:OpenDentBusiness.Defs.Update(OpenDentBusiness.Def)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Defs.Insert(OpenDentBusiness.Def)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Defs.Delete(OpenDentBusiness.Def)">
            <summary>CAUTION.  This does not perform all validations.  It only properly validates for three def types right now; SupplyCats, ClaimCustomTracking, and InsurancePaymentType.</summary>
        </member>
        <member name="M:OpenDentBusiness.Defs.HideDef(OpenDentBusiness.Def)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Defs.SetOrder(System.Int32,System.Int32,OpenDentBusiness.Def[])">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Defs.IsHidable(OpenDentBusiness.DefCat)">
            <summary>Returns true if this category has definitions that can be hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.Defs.IsDefinitionInUse(OpenDentBusiness.Def)">
            <summary>Returns true if this definition is in use within the program. Consider enhancing this method if you add a definition category.
            Does not check patient billing type or provider specialty since those are handled in their S-class.</summary>
        </member>
        <member name="T:OpenDentBusiness.GroupPermissions">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermissions.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermissions.Update(OpenDentBusiness.GroupPermission)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermissions.UpdateNoCache(OpenDentBusiness.GroupPermission)">
            <summary>Update that doesnt use the local cache.  Useful for multithreaded connections.</summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermissions.Delete(OpenDentBusiness.GroupPermission)">
            <summary>Deletes GroupPermissions based on primary key.  Do not call this method unless you have checked specific dependencies first.  E.g. after deleting this permission, there will still be a security admin user.  This method is only called from the CEMT sync.  RemovePermission should probably be used instead.</summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermissions.DeleteNoCache(OpenDentBusiness.GroupPermission)">
            <summary>Deletes without using the cache.  Useful for multithreaded connections.</summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermissions.Insert(OpenDentBusiness.GroupPermission)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermissions.InsertNoCache(OpenDentBusiness.GroupPermission)">
            <summary>Insertion logic that doesn't use the cache. Has special cases for generating random PK's and handling Oracle insertions.</summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermissions.RemovePermission(System.Int64,OpenDentBusiness.Permissions)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermissions.GetPerm(System.Int64,OpenDentBusiness.Permissions)">
            <summary>Gets a GroupPermission based on the supplied userGroupNum and permType.  If not found, then it returns null.  Used in FormSecurity when double clicking on a dated permission or when clicking the all button.</summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermissions.GetPerms(System.Int64)">
            <summary>Gets a list of GroupPermissions for the supplied UserGroupNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermissions.GetPermsNoCache(System.Int64)">
            <summary>Gets a list of GroupPermissions for the supplied UserGroupNum without using the local cache.  Useful for multithreaded connections.</summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermissions.HasPermission(System.Int64,OpenDentBusiness.Permissions)">
            <summary>Used in Security.IsAuthorized</summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermissions.HasAuditTrail(OpenDentBusiness.Permissions)">
            <summary>Gets permissions that actually generate audit trail entries.</summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermissions.GetDesc(OpenDentBusiness.Permissions)">
            <summary>Gets the description for the specified permisssion.  Already translated.</summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermissions.PermTakesDates(OpenDentBusiness.Permissions)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermissions.GetPermsFromCrudAuditPerm(OpenDentBusiness.CrudAuditPerm)">
            <summary>Returns a list of permissions that are included in the bitwise enum crudSLFKeyPerms passed in.
            Used in DBM and the crud generator.  Needs to be updated every time a new CrudAuditPerm is added.</summary>
        </member>
        <member name="T:OpenDentBusiness.Operatories">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Operatories.RefreshCache">
            <summary>Refresh all operatories</summary>
        </member>
        <member name="M:OpenDentBusiness.Operatories.Sync(System.Collections.Generic.List{OpenDentBusiness.Operatory},System.Collections.Generic.List{OpenDentBusiness.Operatory})">
            <summary>Inserts, updates, or deletes database rows to match supplied list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Operatories.Insert(OpenDentBusiness.Operatory)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Operatories.Update(OpenDentBusiness.Operatory)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Operatories.GetOrder(System.Int64)">
            <summary>Gets the order of the op within ListShort or -1 if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Operatories.GetOperatory(System.Int64,System.Collections.Generic.List{OpenDentBusiness.Operatory})">
            <summary>Gets operatory from the cache.  Optionally pass in a list of operatories if you don't want to get a deep copy of the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Operatories.GetOpsForClinic(System.Int64)">
            <summary>Get all non-hidden operatories for the clinic passed in.</summary>
        </member>
        <member name="M:OpenDentBusiness.Operatories.HasFutureApts(System.Int64,OpenDentBusiness.ApptStatus[])">
            <summary>Gets a list of all future appointments for a given Operatory.  Ordered by dateTime</summary>
        </member>
        <member name="T:OpenDentBusiness.Prefs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.GetBoolNoCache(OpenDentBusiness.PrefName)">
            <summary>Gets a pref of type bool without using the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.ClearCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.Update(OpenDentBusiness.Pref)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.UpdateInt(OpenDentBusiness.PrefName,System.Int32)">
            <summary>Updates a pref of type int.  Returns true if a change was required, or false if no change needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.UpdateByte(OpenDentBusiness.PrefName,System.Byte)">
            <summary>Updates a pref of type byte.  Returns true if a change was required, or false if no change needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.UpdateIntNoCache(OpenDentBusiness.PrefName,System.Int32)">
            <summary>Updates a pref of type int without using the cache.  Useful for multithreaded connections.</summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.UpdateLong(OpenDentBusiness.PrefName,System.Int64)">
            <summary>Updates a pref of type long.  Returns true if a change was required, or false if no change needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.UpdateDouble(OpenDentBusiness.PrefName,System.Double)">
            <summary>Updates a pref of type double.  Returns true if a change was required, or false if no change needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.UpdateBool(OpenDentBusiness.PrefName,System.Boolean)">
            <summary>Returns true if a change was required, or false if no change needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.UpdateBool(OpenDentBusiness.PrefName,System.Boolean,System.Boolean)">
            <summary>Returns true if a change was required, or false if no change needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.UpdateBoolNoCache(OpenDentBusiness.PrefName,System.Boolean)">
            <summary>Updates a bool without using cache classes.  Useful for multithreaded connections.</summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.UpdateString(OpenDentBusiness.PrefName,System.String)">
            <summary>Returns true if a change was required, or false if no change needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.UpdateStringNoCache(OpenDentBusiness.PrefName,System.String)">
            <summary>Updates a pref string without using the cache classes.  Useful for multithreaded connections.</summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.UpdateRaw(System.String,System.String)">
            <summary>Used for prefs that are non-standard.  Especially by outside programmers. Returns true if a change was required, or false if no change needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.UpdateDateT(OpenDentBusiness.PrefName,System.DateTime)">
            <summary>Returns true if a change was required, or false if no change needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.ConvertToMySqlVersion41">
            <summary>Only run from PrefL.CheckMySqlVersion41().</summary>
        </member>
        <member name="M:OpenDentBusiness.Prefs.GetPref(System.String)">
            <summary>Gets a Pref object when the PrefName is provided</summary>
        </member>
        <member name="T:OpenDentBusiness.SigButDefs">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.SigButDefs.Listt">
            <summary>A list of all SigButDefs.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigButDefs.RefreshCache">
            <summary>Gets a list of all SigButDefs when program first opens.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigButDefs.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SigButDefs.Update(OpenDentBusiness.SigButDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SigButDefs.Insert(OpenDentBusiness.SigButDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SigButDefs.Delete(OpenDentBusiness.SigButDef)">
            <summary>No need to surround with try/catch, because all deletions are allowed.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigButDefs.UpdateButtonIndexIfChanged(OpenDentBusiness.SigButDef[])">
            <summary>Loops through the SigButDefs passed in and updates the database if any of the ButtonIndexes chagned.  Returns true if any changes were made to the database so that the calling class can invalidate the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigButDefs.GetByComputer(System.String)">
            <summary>Used in Setup.  The returned list also includes defaults.  The supplied computer name can be blank for the default setup.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigButDefs.MoveUp(OpenDentBusiness.SigButDef,OpenDentBusiness.SigButDef[])">
            <summary>Moves the selected item up in the supplied sub list.  Does not update the cache because the user could want to potentially move buttons around a lot.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigButDefs.MoveDown(OpenDentBusiness.SigButDef,OpenDentBusiness.SigButDef[])">
            <summary>Moves the selected item down in the supplied sub list.  Does not update the cache because the user could want to potentially move buttons around a lot.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigButDefs.GetByIndex(System.Int32,System.Collections.Generic.List{OpenDentBusiness.SigButDef})">
            <summary>Returns the SigButDef with the specified buttonIndex.  Used from the setup page.  The supplied list will already have been filtered by computername.  Supply buttonIndex in 0-based format.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigButDefs.GetByIndex(System.Int32,OpenDentBusiness.SigButDef[])">
            <summary>Returns the SigButDef with the specified buttonIndex.  Used from the setup page.  The supplied list will already have been filtered by computername.  Supply buttonIndex in 0-based format.</summary>
        </member>
        <member name="T:OpenDentBusiness.SigElementDefs">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.SigElementDefs.list">
            <summary>A list of all SigElementDefs.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigElementDefs.RefreshCache">
            <summary>Gets a list of all SigElementDefs when program first opens.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigElementDefs.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SigElementDefs.Update(OpenDentBusiness.SigElementDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SigElementDefs.Insert(OpenDentBusiness.SigElementDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SigElementDefs.Delete(OpenDentBusiness.SigElementDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SigElementDefs.GetSubList(OpenDentBusiness.SignalElementType)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SigElementDefs.MoveUp(System.Int32,OpenDentBusiness.SigElementDef[])">
            <summary>Moves the selected item up in the supplied sub list.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigElementDefs.MoveDown(System.Int32,OpenDentBusiness.SigElementDef[])">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SigElementDefs.SetOrder(System.Int32,System.Int32,OpenDentBusiness.SigElementDef[])">
            <summary>Used by MoveUp and MoveDown.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigElementDefs.GetElementDef(System.Int64)">
            <summary>Returns the SigElementDef with the specified num from the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigElementDefs.GetElementsForButDef(OpenDentBusiness.SigButDef)">
            <summary>Gets all sigelementdefs for the sigbutdef passed in.  Includes user, extra, and message element defs.</summary>
        </member>
        <member name="M:OpenDentBusiness.SigElementDefs.GetDefsForSigMessage(OpenDentBusiness.SigMessage)">
            <summary>Gets all sigelementdefs for the sigmessage passed in.  Includes user, extra, and message element defs.</summary>
        </member>
        <member name="T:OpenDentBusiness.Sites">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Sites.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Sites.CreateObject(System.Int64)">
            <Summary>Gets one Site from the database.</Summary>
        </member>
        <member name="M:OpenDentBusiness.Sites.Insert(OpenDentBusiness.Site)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Sites.Update(OpenDentBusiness.Site)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Sites.DeleteObject(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Sites.FindMatchSiteNum(System.String)">
            <summary>Will return -1 if no match.</summary>
        </member>
        <member name="T:OpenDentBusiness.Statements">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Statements.GetStatement(System.Int64)">
            <Summary>Gets one statement from the database.</Summary>
        </member>
        <member name="M:OpenDentBusiness.Statements.Insert(OpenDentBusiness.Statement)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Statements.Update(OpenDentBusiness.Statement)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Statements.Delete(OpenDentBusiness.Statement)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Statements.Delete(System.Int64)">
            <summary>For deleting a statement when user clicks Cancel.  No need to make entry in DeletedObject table.</summary>
        </member>
        <member name="M:OpenDentBusiness.Statements.UnsentStatementsExist">
            <summary>Queries the database to determine if there are any unsent statements.</summary>
        </member>
        <member name="M:OpenDentBusiness.Statements.UnsentClinicStatementsExist(System.Int64)">
            <summary>Queries the database to determine if there are any unsent statements for a particular clinic.</summary>
        </member>
        <member name="M:OpenDentBusiness.Statements.GetBilling(System.Boolean,System.Int32,System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64})">
            <summary>For orderBy, use 0 for BillingType and 1 for PatientName.</summary>
        </member>
        <member name="M:OpenDentBusiness.Statements.GetStatementNotesPracticeWeb(System.Int64)">
            <summary>This query is flawed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Statements.GetStatementInfoPracticeWeb(System.Int64)">
            <summary>This query is flawed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Statements.GetChangedSinceStatementNums(System.DateTime,System.Collections.Generic.List{System.Int64},System.Int32)">
            <summary>Fetches StatementNums restricted by the DateTStamp, PatNums and a limit of records per patient. If limitPerPatient is zero all StatementNums of a patient are fetched</summary>
        </member>
        <member name="M:OpenDentBusiness.Statements.GetMultStatements(System.Collections.Generic.List{System.Int64})">
            <summary>Used along with GetChangedSinceStatementNums</summary>
        </member>
        <member name="M:OpenDentBusiness.Statements.ResetTimeStamps(System.Int64)">
            <summary>Changes the value of the DateTStamp column to the current time stamp for all statements of a patient</summary>
        </member>
        <member name="M:OpenDentBusiness.Statements.GetEmailMessageForStatement(OpenDentBusiness.Statement,OpenDentBusiness.Patient)">
            <summary>Returns an email message for the patient based on the statement passed in.</summary>
        </member>
        <member name="M:OpenDentBusiness.Statements.ReplaceVarsForEmail(System.String,OpenDentBusiness.Patient)">
            <summary>Email statements allow variables to be present in the message body and subject, this method replaces those variables with the information from the patient passed in.  Simply pass in the string for the subject or body and the corresponding patient.</summary>
        </member>
        <member name="T:OpenDentBusiness.Documents">
            <summary>Handles documents and images for the Images module</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.GetAllWithPat(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.GetByNum(System.Int64)">
            <summary>Gets the document with the specified document number.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.GetUniqueFileNameForPatient(OpenDentBusiness.Patient,System.Int64,System.String)">
            <summary>Returns a unique filename for a previously inserted doc based on the pat's first and last name and docNum with the given extension.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.Insert(OpenDentBusiness.Document,OpenDentBusiness.Patient)">
            <summary>Usually, set just the extension before passing in the doc.  Inserts a new document into db, creates a filename based on Cur.DocNum, and then updates the db with this filename.  Should always refresh the document after calling this method in order to get the correct filename for RemotingRole.ClientWeb.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.Insert(OpenDentBusiness.Document)">
            <summary>This is a generic insert statement used to insert documents with custom file names.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.Update(OpenDentBusiness.Document)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.Update(OpenDentBusiness.Document,OpenDentBusiness.Document)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.Delete(OpenDentBusiness.Document)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.GetPaths(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>This is used by FormImageViewer to get a list of paths based on supplied list of DocNums. The reason is that later we will allow sharing of documents, so the paths may not be in the current patient folder. Rewritten by Ryan on 10/26/2011 to use List&lt;&gt; instead of ArrayList.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.GetPatPictFromDb(System.Int64)">
            <summary>Will return null if no picture for this patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.GetStatementsForPat(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>Gets all documents within the doc category designated as the "S"tatements directory via definitions.
            Also gets dependents' statements if this patient is a guarantor (needed by the patient portal).</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.GetPatientPortalDocsForPat(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>Get document info for all images linked to this patient.
            Also gets dependents' images if this patient is a guarantor (needed by the patient portal).</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.GetPatPict(System.Int64,System.String,System.Drawing.Bitmap@)">
            <summary>Makes one call to the database to retrieve the document of the patient for the given patNum, then uses that document and the patFolder to load and process the patient picture so it appears the same way it did in the image module.  It first creates a 100x100 thumbnail if needed, then it uses the thumbnail so no scaling needed. Returns false if there is no patient picture, true otherwise. Sets the value of patientPict equal to a new instance of the patient's processed picture, but will be set to null on error. Assumes WithPat will always be same as patnum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.GetThumbnail(OpenDentBusiness.Document,System.String,System.Int32)">
            <summary>Gets the corresponding thumbnail image for the given document object. The document is expected to be an image, and a 'not available' image is returned if the document is not an image. The thumbnail for every document is in a folder named 'thumbnails' within the same directly level.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.GetDocumentsForMountItems(System.Collections.Generic.List{OpenDentBusiness.MountItem})">
            <summary>Returns the documents which correspond to the given mountitems.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.InsertMissing(OpenDentBusiness.Patient,System.Collections.Generic.List{System.String})">
            <summary>Any filenames mentioned in the fileList which are not attached to the given patient are properly attached to that patient. Returns the total number of documents that were newly attached to the patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.GetFileNamesForPatient(System.Int64)">
            <summary>Returns a datatable containing all filenames of the documents for the supplied patnum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.RefreshForPatient(System.String[])">
            <Summary>Parameters: 1:PatNum</Summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.IsAcceptableFileName(System.String)">
            <summary>Returns false if the file is a specific short file name that is not accepted or contains one of the unsupported file exentions.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.IsFileNameInList(System.String,System.String[])">
            <summary>When first opening the image module, this tests to see whether a given filename is in the database. Also used when naming a new document to ensure unique name.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.GetChangedSinceDocumentNums(System.DateTime,System.Collections.Generic.List{System.Int64})">
            <summary>Only documents listed in the corresponding rows of the statement table are uploaded</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.GetMultDocuments(System.Collections.Generic.List{System.Int64},System.String)">
            <summary>Used along with GetChangedSinceDocumentNums</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.ResetTimeStamps(System.Int64)">
            <summary>Changes the value of the DateTStamp column to the current time stamp for all documents of a patient</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.MergePatientDocument(System.Int64,System.Int64,System.String,System.String)">
            <summary>Moves one document from one patient to another and updates the file name accordingly.
            Only call when physically storing images in a folder share and after the physical images have been successfully copied over to the "to patient" folder.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.OpenDoc(System.Int64)">
            <summary>Attempts to open the document using the default program. If not using AtoZfolder saves a local temp file and opens it.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.GetPath(System.Int64)">
            <summary>Returns the filepath of the document if using AtoZfolder. If storing files in DB or third party storage, saves document to local temp file and returns filepath.
             Empty string if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.ClearFkey(System.Int64)">
            <summary>Zeros securitylog FKey column for rows that are using the matching docNum as FKey and are related to Document.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Document table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Documents.ClearFkey(System.Collections.Generic.List{System.Int64})">
            <summary>Zeros securitylog FKey column for rows that are using the matching docNums as FKey and are related to Document.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Document table type.</summary>
        </member>
        <member name="T:OpenDentBusiness.Family">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Family.#ctor">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Family.ListPats">
            <summary>List of patients in the family.</summary>
        </member>
        <member name="M:OpenDentBusiness.Family.GetNameInFamLF(System.Int64)">
            <summary>Tries to get the LastName,FirstName of the patient from this family.  If not found, then gets the name from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Family.GetNameInFamLFI(System.Int32)">
            <summary>Gets last, (preferred) first middle</summary>
        </member>
        <member name="M:OpenDentBusiness.Family.GetNameInFamFL(System.Int64)">
            <summary>Gets a formatted name from the family list.  If the patient is not in the family list, then it gets that info from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Family.GetNameInFamFLnoPref(System.Int64)">
            <summary>Gets a formatted name from the family list.  If the patient is not in the family list, then it gets that info from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Family.GetNameInFamFLI(System.Int32)">
            <summary>Gets (preferred)first middle last</summary>
        </member>
        <member name="M:OpenDentBusiness.Family.GetNameInFamFirst(System.Int64)">
            <summary>Gets first name from the family list.  If the patient is not in the family list, then it gets that info from the database.  Includes preferred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Family.GetNameInFamFirstOrPreferredOrLast(System.Int64)">
            <summary>Gets first name from the family list.  If the patient is not in the family list, then it gets that info from the database.  Includes preferred and last name.</summary>
        </member>
        <member name="M:OpenDentBusiness.Family.GetIndex(System.Int64)">
            <summary>The index of the patient within the family.  Returns -1 if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Family.GetPatient(System.Int64)">
            <summary>Gets a copy of a specific patient from within the family. Does not make a call to the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Family.GetLim(System.Int64)">
            <summary>Duplicate of the same class in Patients.  Gets nine of the most useful fields from the db for the given patnum.</summary>
        </member>
        <member name="T:OpenDentBusiness.Db">
            <summary>Replaces old "General" class.  Used to send queries.  The methods will soon be internal since it is no longer acceptable for the UI to be sending queries.</summary>
        </member>
        <member name="M:OpenDentBusiness.Db.GetTable(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Db.GetListLong(System.String)">
            <summary>Performs PIn.Long on first column of table returned. Surround with try/catch. Returns empty list if nothing found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Db.GetListString(System.String)">
            <summary>Performs PIn.String on first column of table returned. Returns empty list if nothing found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Db.GetTableLow(System.String)">
            <summary>This is used for queries written by the user.  If using direct connection, it gets a table in the ordinary way.  If ServerWeb, it uses the user with lower privileges to prevent injection attack.</summary>
        </member>
        <member name="M:OpenDentBusiness.Db.NonQ(System.String,System.Boolean,OpenDentBusiness.OdSqlParameter[])">
            <summary>This query is run with full privileges.  This is for commands generated by the main program, and the user will not have access for injection attacks.  Result is usually number of rows changed, or can be insert id if requested.  WILL NOT RETURN CORRECT PRIMARY KEY if the query specifies the primary key.</summary>
        </member>
        <member name="M:OpenDentBusiness.Db.NonQ(System.String,OpenDentBusiness.OdSqlParameter[])">
            <summary>This query is run with full privileges.  This is for commands generated by the main program, and the user will not have access for injection attacks.  Result is usually number of rows changed, or can be insert id if requested.</summary>
        </member>
        <member name="M:OpenDentBusiness.Db.NonQ(System.String[])">
            <summary>We need to get away from this due to poor support from databases.  For now, each command will be sent entirely separately.  This never returns number of rows affected.</summary>
        </member>
        <member name="M:OpenDentBusiness.Db.NonQ32(System.String,System.Boolean)">
            <summary>This is used only for historical commands in ConvertDatabase.   WILL NOT RETURN CORRECT PRIMARY KEY if the query specifies the primary key.</summary>
        </member>
        <member name="M:OpenDentBusiness.Db.NonQ32(System.String)">
            <summary>This is used for historical commands in ConvertDatabase.  Seems to also be used in DBmaint when counting rows affected.</summary>
        </member>
        <member name="M:OpenDentBusiness.Db.NonQ32(System.String[])">
            <summary>This is used only for historical commands in ConvertDatabase.</summary>
        </member>
        <member name="M:OpenDentBusiness.Db.GetLong(System.String)">
            <summary>Use this for count(*) queries.  They are always guaranteed to return one and only one value.  Not any faster, just handier.  Can also be used when retrieving prefs manually, since they will also return exactly one value.</summary>
        </member>
        <member name="M:OpenDentBusiness.Db.GetCount(System.String)">
            <summary>Use this for count(*) queries.  They are always guaranteed to return one and only one value.  Not any faster, just handier.  Can also be used when retrieving prefs manually, since they will also return exactly one value.</summary>
        </member>
        <member name="M:OpenDentBusiness.Db.GetScalar(System.String)">
            <summary>Use this only for queries that return one value.</summary>
        </member>
        <member name="M:OpenDentBusiness.Db.GetTableOld(System.String)">
            <summary>Always throws exception.</summary>
        </member>
        <member name="M:OpenDentBusiness.Db.NonQOld(System.String[])">
            <summary>Always throws exception.</summary>
        </member>
        <member name="M:OpenDentBusiness.Db.NonQOld(System.String)">
            <summary>Always throws exception.</summary>
        </member>
        <member name="T:OpenDentBusiness.Ledgers">
            <summary>This does not correspond to any table in the database.  It works with a variety of tables to calculate aging.</summary>
        </member>
        <member name="M:OpenDentBusiness.Ledgers.GetAgingComputationTime">
            <summary>Returns a rough guess on how long RunAging() will take in milliseconds based on the amount of data within certain tables that are used to compute aging.</summary>
        </member>
        <member name="M:OpenDentBusiness.Ledgers.RunAging">
            <summary>This runs aging for all patients.  If using monthly aging, it always just runs the aging as of the last date again.  If using daily aging, it runs it as of today.  This logic used to be in FormAging, but is now centralized.</summary>
        </member>
        <member name="M:OpenDentBusiness.Ledgers.ComputeAging(System.Int64,System.DateTime)">
            <summary>Computes aging for the family specified. Specify guarantor=0 in order to calculate aging for all families. Gets all info from db.
            <para>The aging calculation will use the following rules within each family:</para>
            <para>1) The aging "buckets" (0 to 30, 31 to 60, 61 to 90 and Over 90) ONLY include account activity on or before AsOfDate.</para>
            <para>2) BalTotal includes all account activity, even future entries. If historical, BalTotal excludes entries after AsOfDate.</para>
            <para>3) InsEst includes all insurance estimates, even future estimates. If historical, InsEst excludes ins est after AsOfDate.</para>
            <para>4) PayPlanDue includes all payplan charges minus credits. If historical, PayPlanDue excludes charges and credits after AsOfDate.</para></summary>
        </member>
        <member name="M:OpenDentBusiness.Ledgers.GetAgingQueryString(System.Int64,System.DateTime,System.Boolean)">
            <summary>Returns a query string for selecting the guarantor and aged bals with InsEst and PayPlanDue that exactly matches what the patient
            table amounts would be updated to if aging was run with the same settings.  This allows us to run aging for historic dates without the need to
            reset the bals for the current date.  Used for reports.  Also for enterprise aging, when isAllPats used to populate the famaging table,
            when !isAllPats returns 1 row used to update family.</summary>
        </member>
        <member name="M:OpenDentBusiness.Ledgers.GetAgingGuarTransQuery(System.Int64,System.DateTime,System.Boolean)">
            <summary>Returns a query string.</summary>
        </member>
        <member name="M:OpenDentBusiness.Ledgers.GetDateBalanceBegan(System.Collections.Generic.List{OpenDentBusiness.PatAging},System.DateTime,System.Boolean)">
            <summary>Gets the earliest date of any portion of the current balance for the family.
            Returns a data table with two columns: PatNum and DateAccountAge.</summary>
        </member>
        <member name="T:OpenDentBusiness.MountDefs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MountDefs.RefreshCache">
            <summary>Gets a list of all MountDefs when program first opens.  Also refreshes MountItemDefs and attaches all items to the appropriate mounts.</summary>
        </member>
        <member name="M:OpenDentBusiness.MountDefs.Update(OpenDentBusiness.MountDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MountDefs.Insert(OpenDentBusiness.MountDef)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MountDefs.Delete(System.Int64)">
            <summary>No need to surround with try/catch, because all deletions are allowed.</summary>
        </member>
        <member name="T:OpenDentBusiness.MountItemDefs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.MountItemDefs.Delete(System.Int64)">
            <summary>No need to surround with try/catch, because all deletions are allowed.</summary>
        </member>
        <member name="M:OpenDentBusiness.MountItems.GetItemsForMount(System.Int64)">
            <summary>Returns the list of mount items associated with the given mount key.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mounts.GetByNum(System.Int64)">
            <summary>Returns a single mount object corresponding to the given mount number key.</summary>
        </member>
        <member name="T:OpenDentBusiness.PatientNotes">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PatientNotes.Refresh(System.Int64,System.Int64)">
            <summary>Gets the PatientNote for the patient passed in.
            Inserts a row into the database for the patient AND for the guarantor passed in if one does not exist for either.
            The PatientNote returned always has the guarantor's FamFinancial value which should always override all family member's value.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatientNotes.Update(OpenDentBusiness.PatientNote,System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PatientNotes.GetOne(System.Int64)">
            <summary>Gets the PatientNote for the patient passed in.  The FamFinancial note could be incorrect.
            Users should call Refresh() to get the correct PatientNote for the patient and guarantor combo.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatientNotes.InsertRow(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Patients">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.CreateNewPatient(System.String,System.String,System.DateTime,System.Int64,System.Int64,System.String,OpenDentBusiness.LogSources,System.String,System.String)">
            <summary>Creates and inserts a "new patient" appointment using the information passed in.  Validation must be done prior to calling this.
            securityLogMsg is typically set to something that lets the customer know where this new patient was created from.
            Used by multiple applications so be very careful when changing this method.  E.g. Open Dental and Web Sched.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetFamily(System.Int64)">
            <summary>Returns a Family object for the supplied patNum.  Use Family.GetPatient to extract the desired patient from the family.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetByGUID(System.String,System.String)">
            <summary>Returns a patient, or null, based on an internally defined or externally defined globaly unique identifier.  This can be an OID, GUID, IID, UUID, etc.</summary>
            <param name="IDNumber">The extension portion of the GUID/OID.  Example: 333224444 if using SSN as a the unique identifier</param>
            <param name="OID">root OID that the IDNumber extends.  Example: 2.16.840.1.113883.4.1 is the OID for the Social Security Numbers.</param>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetPat(System.Int64)">
            <summary>This is a way to get a single patient from the database if you don't already have a family object to use.  Will return null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetPatByChartNumber(System.String)">
            <summary>Will return null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetPatBySSN(System.String)">
            <summary>Will return null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetAllFamilyPatNums(System.Collections.Generic.List{System.Int64})">
            <summary>Gets all of the PatNums for the family members of the PatNums passed in.  Returns a distinct list of PatNums.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetChangedSincePatNums(System.DateTime)">
            <summary>Used if the number of records are very large, in which case using GetChangedSince(DateTime changedSince) is not the preffered route due to memory problems caused by large recordsets. </summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetPatNumsForDeletion">
            <summary>Gets PatNums of patients whose online password is  blank</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.Insert(OpenDentBusiness.Patient,System.Boolean)">
            <summary>ONLY for new patients. Set includePatNum to true for use the patnum from the import function.  Used in HL7.  Otherwise, uses InsertID to fill PatNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.Update(OpenDentBusiness.Patient,OpenDentBusiness.Patient)">
            <summary>Updates only the changed columns and returns the number of rows affected.  Supply the old Patient object to compare for changes.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.Delete(OpenDentBusiness.Patient)">
            <summary>This is only used when entering a new patient and user clicks cancel.  It used to actually delete the patient, but that will mess up UAppoint synch function.  DateTStamp needs to track deleted patients. So now, the PatStatus is simply changed to 4.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetPtDataTable(System.Boolean,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Int64,System.Boolean,System.Boolean,System.DateTime,System.Int64,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.List{System.Int64},System.Int64)">
            <summary>Only used for the Select Patient dialog.  Pass in a billing type of 0 for all billing types.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetMultPats(System.Collections.Generic.List{System.Int64})">
            <summary>Used when filling appointments for an entire day. Gets a list of Pats, multPats, of all the specified patients.  Then, use GetOnePat to pull one patient from this list.  This process requires only one call to the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetPatientsWithRegKeys">
            <summary>Get all patients who have a corresponding entry in the RegistrationKey table. DO NOT REMOVE! Used by OD WebApps solution.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetOnePat(OpenDentBusiness.Patient[],System.Int64)">
            <summary>First call GetMultPats to fill the list of multPats. Then, use this to return one patient from that list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetLim(System.Int64)">
            <summary>Gets nine of the most useful fields from the db for the given patnum.  If invalid PatNum, returns new Patient rather than null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetLimForPats(System.Collections.Generic.List{System.Int64})">
            <summary>Gets nine of the most useful fields from the db for the given PatNums.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetPaymentStartingBalances(System.Int64,System.Int64)">
            <summary>Gets the patient and provider balances for all patients in the family.  Used from the payment window to help visualize and automate the family splits.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetPaymentStartingBalances(System.Int64,System.Int64,System.Boolean)">
            <summary>Gets the patient and provider balances for all patients in the family.  Used from the payment window to help visualize and automate the family splits. groupByProv means group by provider only not provider/clinic.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.ChangeGuarantorToCur(OpenDentBusiness.Family,OpenDentBusiness.Patient)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.CombineGuarantors(OpenDentBusiness.Family,OpenDentBusiness.Patient)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetAllPatientNames">
            <summary>Key=patNum, value=formatted name.  Used for reports, FormASAP, FormTrackNext, and FormUnsched.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetAllPatients">
            <summary>Useful when you expect to individually examine most of the patients in the database during a data import.  Excludes deleted patients.
            Saves time and database calls to call this method once and keep a short term cache than it is to run a series of select statements.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.UpdateAddressForFam(OpenDentBusiness.Patient)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.UpdateAddressForFamTerminal(OpenDentBusiness.Patient)">
            <summary>Used in patient terminal, aka sheet import.  Synchs less fields than the normal synch.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.UpdateArriveEarlyForFam(OpenDentBusiness.Patient)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.UpdateNotesForFam(OpenDentBusiness.Patient)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.UpdatePhoneAndNoteIfNeeded(System.String,System.String,System.Int64)">
            <summary>Only used from FormRecallListEdit.  Updates two fields for family if they are already the same for the entire family.  If they start out different for different family members, then it only changes the two fields for the single patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.UpdateEmailPhoneForFam(OpenDentBusiness.Patient)">
            <summary>Updates every family members' Email, WirelessPhone, and WkPhone to the passed in patient object.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetAgingList(System.String,System.DateTime,System.Collections.Generic.List{System.Int64},System.Boolean,System.Boolean,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>This is only used in the Billing dialog</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetAgingListSimple(System.Collections.Generic.List{System.Int64})">
            <summary>Used only to run finance charges, so it ignores negative balances.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetNextChartNum">
            <summary>Gets the next available integer chart number.  Will later add a where clause based on preferred format.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.ChartNumUsedBy(System.String,System.Int64)">
            <summary>Returns the name(only one) of the patient using this chartnumber.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetNumberPatients">
            <summary>Used in the patient select window to determine if a trial version user is over their limit.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.SetHasIns(System.Int64)">
            <summary>Makes a call to the db to figure out if the current HasIns status is correct.  If not, then it changes it.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetBirthdayList(System.DateTime,System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetProvNum(OpenDentBusiness.Patient)">
            <summary>Gets the provider for this patient.  If provNum==0, then it gets the practice default prov.
            If no practice default set, returns the first non-hidden ProvNum from the provider cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetAllPatNums(System.Boolean)">
            <summary>Gets the list of all valid patient primary keys. Allows user to specify whether to include non-deleted patients. Used when checking for missing ADA procedure codes after a user has begun entering them manually. This function is necessary because not all patient numbers are necessarily consecutive (say if the database was created due to a conversion from another program and the customer wanted to keep their old patient ids after the conversion).</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.DateToAge(System.DateTime)">
            <summary>Converts a date to an age. If age is over 115, then returns 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.DateToAge(System.DateTime,System.DateTime)">
            <summary>Converts a date to an age. If age is over 115, then returns 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.AgeToString(System.Int32)">
            <summary>If zero, returns empty string.  Otherwise returns simple year.  Also see PatientLogic.DateToAgeString().</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetPatNumByNameAndBirthday(System.String,System.String,System.DateTime)">
            <summary>Will return 0 if can't find exact matching pat.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetListPatNumsByNameAndBirthday(System.String,System.String,System.DateTime)">
            <summary>Will return an empty list if it can't find exact matching pat.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetPatientsByNameAndBirthday(OpenDentBusiness.Patient,System.Collections.Generic.List{OpenDentBusiness.Patient})">
            <summary>Returns a list of all patients within listSortedPatients which match the given pat.LName, pat.FName and pat.Birthdate.
            Ignores case and leading/trailing space.  The listSortedPatients MUST be sorted by LName, then FName, then Birthdate or else the result will be
            wrong.  Call listSortedPatients.Sort() before calling this function.  This function uses a binary search to much more efficiently locate
            matches than a linear search would be able to.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetHasDuplicateForNameBirthdayEmailAndPhone(System.String,System.String,System.DateTime,System.String,System.String)">
            <summary>Returns true if there is an exact match in the database based on the lName, fName, and birthDate passed in.
            Also, the phone number or the email must match at least one phone number or email on file for any patient within the family.
            Otherwise we assume a match is not within the database because some offices have multiple clinics and we need strict matching.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetPatNumByName(System.String,System.String)">
            <summary>Will return 0 if can't find an exact matching pat.  Because it does not include birthdate, it's not specific enough for most situations.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetSimilarList(System.String,System.String,System.DateTime)">
            <summary>When importing webforms, if it can't find an exact match, this method attempts a similar match.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetListByName(System.String,System.String,System.Int64)">
            <summary>Returns a list of patients that match last and first name.  Case insensitive.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetCloneAndNonClone(OpenDentBusiness.Patient,OpenDentBusiness.Patient@,OpenDentBusiness.Patient@,System.Collections.Generic.List{OpenDentBusiness.Patient}@)">
            <summary>Finds any patients with the same first name, last name, and birthdate.  The birthdate must be a valid date, not 0001-01-01.
            <para>If patCur has all-caps first and last names and there is exactly one matching patient who does not have all-caps first and last names, then patClone is set to patCur, patNonClone is set to the matching patient, and listAmbiguousMatches will be an empty list.</para>
            <para>If the matching patient has an all-caps first and last name and patCur does not, then patClone will be set to the matching patient, patNonClone will be set to patCur, and listAmbiguousMatches will be an empty list.</para>
            <para>If there are no matching patients, patClone and patNonClone will be null and listAmbiguousMatches will be an empty list.</para>
            <para>If more than one patient has the same first and last name and birthdate, patClone and patNonClone will be null and listAmbiguousMatches will contain all the matching patients.</para>
            <para>If there is one match, but there is not an all-caps to not all-caps relationship (meaning both are all-caps or both are mixed case or both are lower), patClone and patNonClone will be null and listAmbiguousMatches will contain the matching patient.</para></summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.ArePatsClones(System.Int64,System.Int64)">
            <summary>Returns true if one patient is a clone of the other, that is if both patients have the same birthdate, one patient has a mixed-case
            name, and the other patient has an all-caps name.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetListByNameAndBirthdate(System.Int64,System.String,System.String,System.DateTime)">
            <summary>Returns a list of patients that have the same last name, first name, and birthdate, ignoring case sensitivity, but different patNum.  Used to find duplicate patients that may be clones of the patient identified by the patNum parameter, or are the non-clone version of the patient.  Currently only used with GetCloneAndNonClone to find the non-clone and clone patients for the pateint sent in if they exist.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetTreatmentFinderList(System.Boolean,System.Boolean,System.Int32,System.DateTime,System.Double,System.Collections.Generic.List{System.Int32},System.Collections.Generic.List{System.Int32},System.String,System.String)">
            <summary>Gets the DataTable to display for treatment finder report</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.IsTrophyFolderInUse(System.String)">
            <summary>Only a partial folderName will be sent in.  Not the .rvg part.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.IsBillingTypeInUse(System.Int64)">
            <summary>Used to check if a billing type is in use when user is trying to hide it.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.MergeTwoPatients(System.Int64,System.Int64)">
            <summary>Updated 10/29/2015 v15.4.  To prevent orphaned patients, if patFrom is a guarantor then all family members of patFrom are moved into the family patTo belongs to, and then the merge of the two specified accounts is performed.  Returns false if the merge was canceled by the user.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.MergeTwoPatientPointOfNoReturn(System.Int64,System.Int64,System.Collections.Generic.List{OpenDentBusiness.PatField},System.Collections.Generic.List{OpenDentBusiness.PatField})">
            <summary>Only call this method after all checks have been done to make sure the user wants these patients merged.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetNameLF(System.String,System.String,System.String,System.String)">
            <summary>LName, 'Preferred' FName M</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetNameLF(System.Int64)">
            <summary>LName, 'Preferred' FName M for the patnum passed in.  Uses the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetNameLFnoPref(System.String,System.String,System.String)">
            <summary>LName, FName M</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetNameFL(System.String,System.String,System.String,System.String)">
            <summary>FName 'Preferred' M LName</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetNameFLnoPref(System.String,System.String,System.String)">
            <summary>FName M LName</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetNameFirstOrPrefL(System.String,System.String,System.String)">
            <summary>FName/Preferred LName</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetNameFirstOrPrefML(System.String,System.String,System.String,System.String)">
            <summary>FName/Preferred M. LName</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetNameFLFormal(System.String,System.String,System.String,System.String)">
            <summary>Title FName M LName</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetNameFirst(System.String,System.String)">
            <summary>Includes preferred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetNameFirstOrPreferred(System.String,System.String)">
            <summary>Returns preferred name if one exists, otherwise returns first name.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetNameFirstOrPreferredOrLast(System.String,System.String,System.String)">
            <summary>Returns first name if one exists or returns preferred name,otherwise returns last name.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.AddSpaceIfNeeded(System.String)">
            <summary>Adds a space if the passed in string is not empty.  Used for name functions to add a space only when needed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetSalutation(System.String,System.String,System.String)">
            <summary>Dear __.  Does not include the "Dear" or the comma.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetAddressFull(System.String,System.String,System.String,System.String,System.String)">
            <summary>Result will be multiline.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.ChangePrimaryProviders(System.Int64,System.Int64)">
            <summary>Change preferred provider for all patients with provNumFrom to provNumTo.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.ChangeSecondaryProviders(System.Int64,System.Int64)">
            <summary>Change secondary provider for all patients with provNumFrom to provNumTo.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetPatsByPriProvs(System.Collections.Generic.List{System.Int64})">
            <summary>Gets all patients whose primary provider PriProv is in the list provNums.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.ReassignProvGetMostUsed(System.Int64)">
            <summary>Find the most used provider for a single patient. Bias towards the most recently used provider if they have done an equal number of procedures.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.ReassignProv(System.Int64,System.Int64)">
            <summary>Change preferred provider PriProv to provNum for patient with PatNum=patNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetZipUnknown(System.DateTime,System.DateTime)">
            <summary>Gets the number of patients with unknown Zip.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetZipOther(System.DateTime,System.DateTime)">
            <summary>Gets the number of qualified patients (having a completed procedure within the given time frame) in zip codes with less than 9 other qualified patients in that same zip code.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetPatCount(System.DateTime,System.DateTime)">
            <summary>Gets the total number of patients with completed procedures between dateFrom and dateTo. Also checks for age between 0 and 200.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetAgeGenderCount(System.Int32,System.Int32,OpenDentBusiness.PatientGender,System.DateTime,System.DateTime)">
            <summary>Gets the total number of patients with completed procedures between dateFrom and dateTo who are at least agelow and strictly younger than agehigh.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetSuperFamProcAdjusts(System.Int64)">
            <summary>Gets all procedures and adjustments for a superfamily, ordered by datetime.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetBySuperFamily(System.Int64)">
            <summary>Returns a list of patients belonging to the SuperFamily</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetSuperFamilyGuarantors(System.Int64)">
            <summary>Returns a list of patients that are the guarantors for the patients in the Super Family</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetExportList(System.Int64,System.String,System.String,System.Int64,System.Int64,System.Int64)">
            <summary>Get a list of patients for FormEhrPatientExport. If provNum, clinicNum, or siteNum are =0 get all.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetPatientsForPhi(System.Int64)">
            <summary>Returns a list of Patients of which this PatNum is eligible to view given PHI constraints.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetPatNumsForPhi(System.Int64)">
            <summary>Returns a list of PatNum(s) of which this PatNum is eligible to view given PHI constraints.  Used internally and also used by Patient Portal.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.IsPortalPasswordValid(System.String)">
            <summary>Validate password against strong password rules. Currently only used for patient portal passwords. Requirements: 8 characters, 1 uppercase character, 1 lowercase character, 1 number. Returns non-empty string if validation failed. Return string will be translated.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetClinicGuarantors(System.String)">
            <summary>Returns a distinct list of PatNums for guarantors that have any family member with passed in clinics, or have had work done at passed in clinics.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetDependents(System.Int64)">
            <summary>Returns all PatNums for whom the specified PatNum is the Guarantor. If this patient is not a guarantor, returns an empty list. If the
            patient is a guarantor, this patient's PatNum will be included in the list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.ClearFkey(System.Int64)">
            <summary>Zeros securitylog FKey column for rows that are using the matching patNum as FKey and are related to Patient.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Patient table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.ClearFkey(System.Collections.Generic.List{System.Int64})">
            <summary>Zeros securitylog FKey column for rows that are using the matching patNums as FKey and are related to Patient.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Patient table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patients.GetAssociatedPatients(System.Int64)">
            <summary>List of all patients in the current family along with any patients associated to payment plans of which a member of this family is the guarantor.
            Only gets patients that are associated to active plans.</summary>
        </member>
        <member name="T:OpenDentBusiness.PatComm">
            <summary>PatComm gets the fields of the patient table that are needed to determine electronic communications.</summary>
        </member>
        <member name="T:OpenDentBusiness.PatAging">
            <summary>Not a database table.  Just used in billing and finance charges.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatAging.PatNum">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatAging.Bal_0_30">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatAging.Bal_31_60">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatAging.Bal_61_90">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatAging.BalOver90">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatAging.InsEst">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatAging.PatName">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatAging.BalTotal">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatAging.AmountDue">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatAging.PriProv">
            <summary>The patient priprov to assign the finance charge to.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatAging.DateLastStatement">
            <summary>The date of the last statement.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatAging.BillingType">
            <summary>FK to defNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatAging.PayPlanDue">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatAging.SuperFamily">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatAging.HasSuperBilling">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatAging.Guarantor">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Providers">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetAll">
            <summary>Gets list of all instructors.  Returns an empty list if none are found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.Update(OpenDentBusiness.Provider)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.Insert(OpenDentBusiness.Provider)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetNextAvailableProvNum">
            <summary>This checks for the maximum number of provnum in the database and then returns the one directly after.  Not guaranteed to be a unique primary key.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.MoveDownBelow(OpenDentBusiness.Provider)">
            <summary>Increments all (privider.ItemOrder)s that are >= the ItemOrder of the provider passed in 
            but does not change the item order of the provider passed in.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.Delete(OpenDentBusiness.Provider)">
            <summary>Only used from FormProvEdit if user clicks cancel before finishing entering a new provider.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.RefreshStandard">
            <summary>Gets table for the FormProviderSetup window.  Always orders by ItemOrder.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.RefreshForDentalSchool(System.Int64,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>Gets table for main provider edit list when in dental school mode.  Always orders alphabetically, but there will be lots of filters to get the list shorter.  Must be very fast because refreshes while typing.  selectAll will trump selectInstructors and always return all providers.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetInstructors">
            <summary>Gets list of all instructors.  Returns an empty list if none are found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetAbbr(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetLName(System.Int64)">
            <summary>Used in the HouseCalls bridge</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetFormalName(System.Int64)">
            <summary>First Last, Suffix</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetLongDesc(System.Int64)">
            <summary>Abbr - LName, FName (hidden).  For dental schools -- ProvNum - LName, FName (hidden).</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetColor(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetOutlineColor(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetIsSec(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetProv(System.Int64)">
            <summary>Gets a provider from ListLong.  If provnum is not valid, then it returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetProv(System.Int64,System.Collections.Generic.List{OpenDentBusiness.Provider})">
            <summary>Gets a provider from a given list.  If provnum is not valid it returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetProvsByProvNums(System.Collections.Generic.List{System.Int64})">
            <summary>Gets all providers that have the matching prov nums.  Returns an empty list if no matches.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetProvsByFLName(System.String,System.String)">
            <summary>Gets a list of providers from ListLong.  If none found or if either LName or FName are an empty string, returns an empty list.  There may be more than on provider with the same FName and LName so we will return a list of all such providers.  Usually only one will exist with the FName and LName provided so list returned will have count 0 or 1 normally.  Name match is not case sensitive.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetProvsByNpiOrMedicaidId(System.String,System.String)">
            <summary>Gets a list of providers from ListLong with either the NPI provided or a blank NPI and the Medicaid ID provided.
            medicaidId can be blank.  If the npi param is blank, or there are no matching provs, returns an empty list.
            Shouldn't be two separate functions or we would have to compare the results of the two lists.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetProvsByClinic(System.Int64)">
            <summary>Gets all providers associated to users that have a clinic set to the clinic passed in.  Passing in 0 will get a list of providers not assigned to any clinic or to any users.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetProvsNoCache">
            <summary>Gets all providers from the database.  Doesn't use the cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetProvByEcwID(System.String)">
            <summary>Gets a provider from the List.  If EcwID is not found, then it returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetOrionProvNum(System.Int64)">
            <summary>Takes a provNum. Normally returns that provNum. If in Orion mode, returns the user's ProvNum, if that user is a primary provider. Otherwise, in Orion Mode, returns 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetIndexLong(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetIndexLong(System.Int64,System.Collections.Generic.List{OpenDentBusiness.Provider})">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetIndex(System.Int64)">
            <summary>Within the regular list of visible providers.  Will return -1 if the specified provider is not in the list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetBillingProvNum(System.Int64,System.Int64)">
            <summary>If useClinic, then clinicInsBillingProv will be used.  Otherwise, the pref for the practice.  Either way, there are three different choices for getting the billing provider.  One of the three is to use the treating provider, so supply that as an argument.  It will return a valid provNum unless the supplied treatProv was invalid.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetProvsForClinic(System.Int64)">
            <summary>Returns list of providers that are either not restricted to a clinic, or are restricted to the ClinicNum provided. 
            Passing ClinicNum=0 returns all unrestricted providers. Ordered by provider.Abbr.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetDuplicateAbbrs">
            <Summary>Used once in the Provider Select window to warn user of duplicate Abbrs.</Summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetDefaultProvider">
            <summary>Returns the default practice provider</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetDefaultProvider(System.Int64)">
            <summary>Returns the default provider for the clinic if it exists, else returns the default practice provider.  Pass 0 to get practice default.  Can return null if no clinic or practice default provider found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetDefaultPracticeProvider2">
            <summary>We should merge these results with GetDefaultPracticeProvider(), but
            that would require restructuring indexes in different places in the code and this is
            faster to do as we are just moving the queries down in to the business layer for now.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetDefaultPracticeProvider3">
            <summary>We should merge these results with GetDefaultPracticeProvider(), but
            that would require restructuring indexes in different places in the code and this is
            faster to do as we are just moving the queries down in to the business layer for now.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetLastSeenHygienistForPat(System.Int64)">
            <summary>Returns the patient's last seen hygienist.  Returns null if no hygienist has been seen.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetProvidersForWebSched(System.Int64)">
            <summary>Gets a list of providers based for the patient passed in based on the WebSchedProviderRule preference.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetProvidersForWebSchedNewPatAppt">
            <summary>Gets a list of providers that are allowed to have new patient appointments scheduled for them.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetMultProviders(System.Collections.Generic.List{System.Int64})">
            <summary>Used along with GetChangedSinceProvNums</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.GetFilteredProviderList(System.Int64,System.String,System.String,System.Int64)">
            <summary>Currently only used for Dental Schools and will only return ProviderC.ListShort if Dental Schools is not active.  Otherwise this will return a filtered provider list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.RemoveProvFromFutureSchedule(System.Int64)">
            <summary>Removes a provider from the future schedule.  Currently called after a provider is hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.RemoveProvsFromFutureSchedule(System.Collections.Generic.List{System.Int64})">
            <summary>Removes the providers from the future schedule.  Currently called from DBM to clean up hidden providers still on the schedule.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.IsSpecialtyInUse(System.Int64)">
            <summary>Used to check if a specialty is in use when user is trying to hide it.</summary>
        </member>
        <member name="M:OpenDentBusiness.Providers.Merge(System.Int64,System.Int64)">
            <summary>Provider merge tool.  Returns the number of rows changed when the tool is used.</summary>
        </member>
        <member name="T:OpenDentBusiness.Suppliers">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Suppliers.GetAll">
            <summary>Gets all Suppliers.</summary>
        </member>
        <member name="M:OpenDentBusiness.Suppliers.GetOne(System.Int64)">
            <summary>Gets one Supplier by num.</summary>
        </member>
        <member name="M:OpenDentBusiness.Suppliers.Insert(OpenDentBusiness.Supplier)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Suppliers.Update(OpenDentBusiness.Supplier)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Suppliers.DeleteObject(OpenDentBusiness.Supplier)">
            <summary>Surround with try-catch.</summary>
        </member>
        <member name="T:OpenDentBusiness.Supplies">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Supplies.GetAll">
            <summary>Gets all Supplies, ordered by category and itemOrder.</summary>
        </member>
        <member name="M:OpenDentBusiness.Supplies.GetSupply(System.Int64)">
            <Summary>Gets one supply from the database.  Used for display in SupplyOrderItemEdit window.</Summary>
        </member>
        <member name="M:OpenDentBusiness.Supplies.Insert(OpenDentBusiness.Supply)">
            <summary>Insert new item at bottom of category.</summary>
        </member>
        <member name="M:OpenDentBusiness.Supplies.Insert(OpenDentBusiness.Supply,System.Int32)">
            <summary>Inserts item at corresponding itemOrder. If item order is out of range, item will be placed at beginning or end of category.</summary>
        </member>
        <member name="M:OpenDentBusiness.Supplies.Update(OpenDentBusiness.Supply)">
            <summary>Standard update logic.</summary>
        </member>
        <member name="M:OpenDentBusiness.Supplies.Update(OpenDentBusiness.Supply,OpenDentBusiness.Supply)">
            <summary>Updates and also fixes item order issues that may arise from changing categories.</summary>
        </member>
        <member name="M:OpenDentBusiness.Supplies.UpdateOrInsertIfNeeded(OpenDentBusiness.Supply,OpenDentBusiness.Supply)">
            <summary>Updates item orders only.  One query is run per supply item. If supplyOriginal is null will insert supplyNew.</summary>
        </member>
        <member name="M:OpenDentBusiness.Supplies.DeleteObject(OpenDentBusiness.Supply)">
            <summary>Surround with try-catch.</summary>
        </member>
        <member name="M:OpenDentBusiness.Supplies.CleanupItemOrders(System.Collections.Generic.List{OpenDentBusiness.Supply})">
            <Summary>Loops through the supplied list and verifies that the ItemOrders are not corrupted.  If they are, then it fixes them.  Returns true if fix was required.  It makes a few assumptions about the quality of the list supplied.  Specifically, that there are no missing items, and that categories are grouped and sorted.</Summary>
        </member>
        <member name="M:OpenDentBusiness.Supplies.GetNextItemOrder(System.Int64)">
            <Summary>Gets from the database the next available itemOrder for the specified category.  Returns 0 if no items found in category.</Summary>
        </member>
        <member name="M:OpenDentBusiness.Supplies.Sync(System.Collections.Generic.List{OpenDentBusiness.Supply},System.Collections.Generic.List{OpenDentBusiness.Supply})">
            <summary>Syncs supplies to the database.  Sync(list,list) uses more bandwidth for middle tier than Sync(List,long).</summary>
        </member>
        <member name="T:OpenDentBusiness.SupplyNeededs">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SupplyNeededs.CreateObjects">
            <summary>Gets all SupplyNeededs.</summary>
        </member>
        <member name="M:OpenDentBusiness.SupplyNeededs.Insert(OpenDentBusiness.SupplyNeeded)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SupplyNeededs.Update(OpenDentBusiness.SupplyNeeded)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SupplyNeededs.DeleteObject(OpenDentBusiness.SupplyNeeded)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.SupplyOrderItems">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SupplyOrderItems.GetItemsForOrder(System.Int64)">
            <summary>Items in the table are not ItemOrderObjects</summary>
        </member>
        <member name="M:OpenDentBusiness.SupplyOrderItems.Insert(OpenDentBusiness.SupplyOrderItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SupplyOrderItems.Update(OpenDentBusiness.SupplyOrderItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SupplyOrderItems.DeleteObject(OpenDentBusiness.SupplyOrderItem)">
            <summary>Surround with try-catch.</summary>
        </member>
        <member name="T:OpenDentBusiness.SupplyOrders">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SupplyOrders.CreateObjects(System.Int64)">
            <summary>Gets all SupplyOrders for one supplier, ordered by date.</summary>
        </member>
        <member name="M:OpenDentBusiness.SupplyOrders.GetAll">
            <summary>Gets all SupplyOrders, ordered by date.</summary>
        </member>
        <member name="M:OpenDentBusiness.SupplyOrders.Insert(OpenDentBusiness.SupplyOrder)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SupplyOrders.Update(OpenDentBusiness.SupplyOrder)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SupplyOrders.DeleteObject(OpenDentBusiness.SupplyOrder)">
            <summary>No need to surround with try-catch.</summary>
        </member>
        <member name="T:OpenDentBusiness.TaskAncestors">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TaskAncestors.Insert(OpenDentBusiness.TaskAncestor)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TaskAncestors.SynchAll">
            <summary>Only run once after the upgrade to version 5.5.</summary>
        </member>
        <member name="T:OpenDentBusiness.TaskLists">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.RefreshUserTrunk(System.Int64)">
            <summary>Gets all task lists for the trunk of the user tab.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.RefreshMainTrunk(System.Int64,OpenDentBusiness.TaskType)">
            <summary>Gets all task lists for the main trunk.  Pass in the current user.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.RefreshRepeatingTrunk">
            <summary>Gets all task lists for the repeating trunk.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.RefreshChildren(System.Int64,System.Int64,System.Int64,OpenDentBusiness.TaskType)">
            <summary>0 is not allowed, because that would be a trunk.  Pass in the current user.  Also, if this is in someone's inbox, then pass in the userNum whose inbox it is in.  If not in an inbox, pass in 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.RefreshRepeating(OpenDentBusiness.TaskDateType)">
            <summary>All repeating items for one date type with no heirarchy.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.RefreshDatedTrunk(System.DateTime,OpenDentBusiness.TaskDateType)">
            <summary>Gets all task lists for one of the 3 dated trunks.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.GetOne(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.GetAll">
            <summary>Gets all task lists from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.GetNumsByDescription(System.String)">
            <summary>Get TaskListNums based on description.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.TableToList(System.Data.DataTable)">
            <summary>The table passed in can contain additional columns: "NewTaskCount", "ParentDesc1", "ParentDesc2".  These additional columns are used when getting a list of task lists for trunks.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.GetForObjectType(OpenDentBusiness.TaskObjectType)">
            <summary>Gets all task lists with the give object type.  Used in TaskListSelect when assigning an object to a task list.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.Update(OpenDentBusiness.TaskList)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.Insert(OpenDentBusiness.TaskList)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.Delete(OpenDentBusiness.TaskList)">
            <summary>Throws exception if any child tasklists or tasks.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.GetMailboxUserNum(System.Int64)">
            <summary>Will return 0 if not anyone's inbox.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.GetMailboxUserNumByAncestor(System.Int64)">
            <summary>Checks all ancestors of a task.  Will return 0 if no ancestor is anyone's inbox.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskLists.GetFullPath(System.Int64,System.Collections.Generic.List{OpenDentBusiness.TaskList})">
            <summary>Build the full path to the passed in task list.  Returns the string in the standard Windows path format.</summary>
        </member>
        <member name="T:OpenDentBusiness.Tasks">
            <summary>Not part of cache refresh.</summary>
        </member>
        <member name="F:OpenDentBusiness.Tasks._dictTaskApts">
            <summary>Key=AptNum, Value=AptDateTime</summary>
        </member>
        <member name="F:OpenDentBusiness.Tasks.LastOpenList">
            <summary>Only used from UI.</summary>
        </member>
        <member name="F:OpenDentBusiness.Tasks.LastOpenGroup">
            <summary>Only used from UI.  The index of the last open tab.</summary>
        </member>
        <member name="F:OpenDentBusiness.Tasks.LastOpenDate">
            <summary>Only used from UI.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.TableToList(System.Data.DataTable)">
            <summary>This is needed because of the extra column that is not part of the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.GetOne(System.Int64)">
            <summary>Gets one Task from database.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.GetDataSet(System.Int64,System.Collections.Generic.List{System.Int64},System.Int64,System.String,System.String,System.String,System.String,System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>Gets all tasks for the Task Search function, limited to 50 by default.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.GetMany(System.Collections.Generic.List{System.Int64})">
            <summary>Gets all tasks for a supplied list of task nums.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.GetCountReminderTasks(System.String,System.DateTime)">
            <summary>Gets the count of reminder tasks on or after the specified dateTimeAsOf.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.GetNewTasksThisUser(System.Int64,System.Collections.Generic.List{System.Int64})">
            <summary>After a refresh, this is used to determine whether the Current user has received any new tasks through subscription.
            Must supply the current usernum.  If the listTaskNums is null, then all subscribed tasks for the user will be returned.
            The signal list will include any task changes including status changes and deletions.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.SetReminderGroupId(OpenDentBusiness.Task)">
            <summary>Sets the task.ReminderGroupId to a brand new and unique value.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.RefreshMainTrunk(System.Boolean,System.DateTime,System.Int64,OpenDentBusiness.TaskType)">
            <summary>Gets all tasks for the main trunk.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.RefreshUserNew(System.Int64)">
            <summary>Gets all 'new' tasks for a user.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.RefreshOpenTickets(System.Int64)">
            <summary>Gets all 'open ticket' tasks for a user.  An open ticket is a task that was created by this user, is attached to a patient, and is not done.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.RefreshRepeatingTrunk">
            <summary>Gets all tasks for the repeating trunk.  Always includes "done".</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.RefreshChildren(System.Int64,System.Boolean,System.DateTime,System.Int64,System.Int64,OpenDentBusiness.TaskType)">
            <summary>0 is not allowed, because that would be a trunk.  
            Also, if this is in someone's inbox, then pass in the userNum whose inbox it is in.  If not in an inbox, pass in 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.RefreshChildren(System.Int64,System.Boolean,System.DateTime,System.Int64,System.Int64,OpenDentBusiness.TaskType,System.Boolean)">
            <summary>0 is not allowed, because that would be a trunk.
            Also, if this is in someone's inbox, then pass in the userNum whose inbox it is in.  If not in an inbox, pass in 0.
            If isTaskSortApptDateTime==true and parent task list is an appointment type task list, TaskComparer oders appointment tasks to the top and
            then by AptDateTime.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.RefreshRepeating(OpenDentBusiness.TaskDateType,System.Int64)">
            <summary>All repeating items for one date type with no heirarchy.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.RefreshDatedTrunk(System.DateTime,OpenDentBusiness.TaskDateType,System.Boolean,System.DateTime,System.Int64)">
            <summary>Gets all tasks for one of the 3 dated trunks. startDate only applies if showing Done.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.RefreshAll">
            <summary>The full refresh is only used once when first synching all the tasks for taskAncestors.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.Update(OpenDentBusiness.Task,OpenDentBusiness.Task)">
            <summary>Surround with try/catch.  Must supply the supposedly unaltered oldTask.  Will throw an exception if oldTask does not exactly match the database state.  Keeps users from overwriting each other's changes.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.CopyReminderToNextDueDate(OpenDentBusiness.Task)">
            <summary>Creates a copy of reminderTask with DateTimeEntry set to the next date due in the future.  Ensures new copy is marked new.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.IsWeekDayFound(System.DateTime,OpenDentBusiness.TaskReminderType)">
            <summary>Returns true if the dateTimeEntry is on a day of the week specified by the day schedule inside reminderType.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.Update(OpenDentBusiness.Task)">
            <summary>This update method doesn't do any of the typical checks for the Task update.Do not use this method. Instead use Update(Task task,Task oldTask).</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.Insert(OpenDentBusiness.Task)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.WasTaskAltered(OpenDentBusiness.Task)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.Delete(System.Int64)">
            <summary>Deleting a task never causes a problem, so no dependencies are checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.GetOfficeDowns">
            <summary>Only called for ODHQ. Gets the tasks that are in the Office Down task list. This method only returns the Task table row, not the
            extra non-DB columns.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.TaskEditCreateLog(OpenDentBusiness.Permissions,System.String,OpenDentBusiness.Task)">
            <summary>Makes audit trail entry for the task passed in.
            If this task has an object type set, the log will show up under the corresponding patient for the selected object type.
            Used for both TaskEdit and TaskNoteEdit permissions.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.TaskComparer(System.Data.DataRow,System.Data.DataRow)">
            <summary>Sorted in Ascending order: Unread/Read, </summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.CompareTimes(System.Data.DataRow,System.Data.DataRow)">
            <summary>Compares the most recent times of the task or task notes associated to the tasks passed in.  Most recently updated tasks will be farther down in the list.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.CompareAptDateTimes(System.Data.DataRow,System.Data.DataRow)">
            <summary>Compares the AptDateTime of appointments attached to tasks.  Most recently updated tasks will be farther down in the list.
            If there is no appointment attached, it appears at the bottom.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.ClearFkey(System.Int64)">
            <summary>Zeros securitylog FKey column for rows that are using the matching taskNum as FKey and are related to Task.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Task table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tasks.ClearFkey(System.Collections.Generic.List{System.Int64})">
            <summary>Zeros securitylog FKey column for rows that are using the matching taskNums as FKey and are related to Task.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Task table type.</summary>
        </member>
        <member name="T:OpenDentBusiness.TaskSubscriptions">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TaskSubscriptions.Insert(OpenDentBusiness.TaskSubscription)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TaskSubscriptions.SubscList(System.Int64,System.Int64)">
            <summary>Creates a subscription to a list.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskSubscriptions.UnsubscList(System.Int64,System.Int64)">
            <summary>Removes a subscription to a list.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskSubscriptions.UpdateAllSubs(System.Int64,System.Int64)">
            <summary>Moves all subscriptions from taskListOld to taskListNew. Used when cutting and pasting a tasklist. Can also be used when deleting a tasklist to remove all subscriptions from the tasklist by sending in 0 as taskListNumNew.</summary>
        </member>
        <member name="T:OpenDentBusiness.TerminalActives">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TerminalActives.Refresh">
            <summary>Gets a list of all TerminalActives.  Used by the terminal monitor window and by the terminal window itself.  Data is retrieved at regular short intervals, so functions as a messaging system.</summary>
        </member>
        <member name="M:OpenDentBusiness.TerminalActives.GetTerminal(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TerminalActives.Update(OpenDentBusiness.TerminalActive)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TerminalActives.Insert(OpenDentBusiness.TerminalActive)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TerminalActives.Delete(OpenDentBusiness.TerminalActive)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TerminalActives.DeleteAllForComputer(System.String)">
            <summary>Run when starting up a terminal window to delete any previous entries for this computer that didn't get deleted properly.</summary>
        </member>
        <member name="M:OpenDentBusiness.TerminalActives.PatIsInUse(System.Int64)">
            <summary>Called whenever user wants to edit patient info.  Not allowed to if patient edit window is open at a terminal.  Once patient is done at terminal, then staff allowed back into patient edit window.</summary>
        </member>
        <member name="T:OpenDentBusiness.TimeAdjusts">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TimeAdjusts.Refresh(System.Int64,System.DateTime,System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TimeAdjusts.GetValidList(System.Int64,System.DateTime,System.DateTime)">
            <summary>Validates and throws exceptions. Gets all time adjusts between date range and time adjusts made during the current work week. </summary>
        </member>
        <member name="M:OpenDentBusiness.TimeAdjusts.GetListForTimeCardManage(System.Int64,System.Int64,System.DateTime,System.DateTime,System.Boolean)">
            <summary>Validates and throws exceptions.  Deletes automatic adjustments that fall within the pay period.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeAdjusts.Insert(OpenDentBusiness.TimeAdjust)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TimeAdjusts.Update(OpenDentBusiness.TimeAdjust)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TimeAdjusts.Delete(OpenDentBusiness.TimeAdjust)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TimeAdjusts.GetSimpleListAuto(System.Int64,System.DateTime,System.DateTime)">
            <summary>Returns all automatically generated timeAdjusts for a given employee between the date range (inclusive).</summary>
        </member>
        <member name="T:OpenDentBusiness.ToolButItems">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ToolButItems.list">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ToolButItems.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ToolButItems.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ToolButItems.Insert(OpenDentBusiness.ToolButItem)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ToolButItems.Update(OpenDentBusiness.ToolButItem)">
            <summary>This in not currently being used.</summary>
        </member>
        <member name="M:OpenDentBusiness.ToolButItems.Delete(OpenDentBusiness.ToolButItem)">
            <summary>This is not currently being used.</summary>
        </member>
        <member name="M:OpenDentBusiness.ToolButItems.DeleteAllForProgram(System.Int64)">
            <summary>Deletes all ToolButItems for the Programs.Cur.  This is used regularly when saving a Program link because of the way the user interface works.</summary>
        </member>
        <member name="M:OpenDentBusiness.ToolButItems.GetForProgram(System.Int64)">
            <summary>Fills ForProgram with toolbutitems attached to the Programs.Cur</summary>
        </member>
        <member name="M:OpenDentBusiness.ToolButItems.GetForToolBar(OpenDentBusiness.ToolBarsAvail)">
            <summary>Returns a list of toolbutitems for the specified toolbar. Used when laying out toolbars.</summary>
        </member>
        <member name="T:OpenDentBusiness.ToothInitials">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ToothInitials.Refresh(System.Int64)">
            <summary>Gets all toothinitial entries for the current patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.ToothInitials.Insert(OpenDentBusiness.ToothInitial)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ToothInitials.Update(OpenDentBusiness.ToothInitial)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ToothInitials.Delete(OpenDentBusiness.ToothInitial)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ToothInitials.SetValue(System.Int64,System.String,OpenDentBusiness.ToothInitialType)">
            <summary>Sets teeth missing, or sets primary, or sets movement values.  It first clears the value from the database, then adds a new row to represent that value.  Movements require an amount.  If movement amt is 0, then no row gets added.</summary>
        </member>
        <member name="M:OpenDentBusiness.ToothInitials.SetValue(System.Int64,System.String,OpenDentBusiness.ToothInitialType,System.Single)">
            <summary>Sets teeth missing, or sets primary, or sets movement values.  It first clears the value from the database, then adds a new row to represent that value.  Movements require an amount.  If movement amt is 0, then no row gets added.</summary>
        </member>
        <member name="M:OpenDentBusiness.ToothInitials.SetValueQuick(System.Int64,System.String,OpenDentBusiness.ToothInitialType,System.Single)">
            <summary>Same as SetValue, but does not clear any values first.  Only use this if you have first run ClearAllValuesForType.</summary>
        </member>
        <member name="M:OpenDentBusiness.ToothInitials.AddMovement(System.Collections.Generic.List{OpenDentBusiness.ToothInitial},System.Int64,System.String,OpenDentBusiness.ToothInitialType,System.Single)">
            <summary>Only used for incremental tooth movements.  Automatically adds a movement to any existing movement.  Supply a list of all toothInitials for the patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.ToothInitials.ClearValue(System.Int64,System.String,OpenDentBusiness.ToothInitialType)">
            <summary>Sets teeth not missing, or sets to perm, or clears movement values.</summary>
        </member>
        <member name="M:OpenDentBusiness.ToothInitials.ClearAllValuesForType(System.Int64,OpenDentBusiness.ToothInitialType)">
            <summary>Sets teeth not missing, or sets to perm, or clears movement values.  Clears all the values of one type for all teeth in the mouth.</summary>
        </member>
        <member name="M:OpenDentBusiness.ToothInitials.GetMissingOrHiddenTeeth(System.Collections.Generic.List{OpenDentBusiness.ToothInitial})">
            <summary>Gets a list of missing teeth as strings. Includes "1"-"32", and "A"-"Z".</summary>
        </member>
        <member name="M:OpenDentBusiness.ToothInitials.GetPriTeeth(System.Collections.Generic.List{OpenDentBusiness.ToothInitial})">
            <summary>Gets a list of primary teeth as strings. Includes "1"-"32".</summary>
        </member>
        <member name="M:OpenDentBusiness.ToothInitials.ToothIsMissingOrHidden(System.Collections.Generic.List{OpenDentBusiness.ToothInitial},System.String)">
            <summary>Loops through supplied initial list to see if the specified tooth is already marked as missing or hidden.</summary>
        </member>
        <member name="M:OpenDentBusiness.ToothInitials.GetMovement(System.Collections.Generic.List{OpenDentBusiness.ToothInitial},System.String,OpenDentBusiness.ToothInitialType)">
            <summary>Gets the current movement value for a single tooth by looping through the supplied list.</summary>
        </member>
        <member name="M:OpenDentBusiness.ToothInitials.GetHiddenTeeth(System.Collections.Generic.List{OpenDentBusiness.ToothInitial})">
            <summary>Gets a list of the hidden teeth as strings. Includes "1"-"32", and "A"-"Z".</summary>
        </member>
        <member name="T:OpenDentBusiness.Transactions">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Transactions.GetTrans(System.Int64)">
            <summary>Since transactions are always viewed individually, this function returns one transaction</summary>
        </member>
        <member name="M:OpenDentBusiness.Transactions.GetAttachedToDeposit(System.Int64)">
            <summary>Gets one transaction directly from the database which has this deposit attached to it.  If none exist, then returns null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Transactions.GetAttachedToPayment(System.Int64)">
            <summary>Gets one transaction directly from the database which has this payment attached to it.  If none exist, then returns null.  There should never be more than one, so that's why it doesn't return more than one.</summary>
        </member>
        <member name="M:OpenDentBusiness.Transactions.Insert(OpenDentBusiness.Transaction)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Transactions.Update(OpenDentBusiness.Transaction)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Transactions.Delete(OpenDentBusiness.Transaction)">
            <summary>Also deletes all journal entries for the transaction.  Will later throw an error if journal entries attached to any reconciles.  Be sure to surround with try-catch.</summary>
        </member>
        <member name="M:OpenDentBusiness.Transactions.IsReconciled(OpenDentBusiness.Transaction)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.TreatPlans">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlans.Refresh(System.Int64)">
            <summary>Gets all Saved TreatPlans for a given Patient, ordered by date.</summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlans.GetOne(System.Int64)">
            <summary>A single treatplan from the DB.</summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlans.GetActiveForPat(System.Int64)">
            <summary>Gets the first Active TP from the DB for the patient.  Returns null if no Active TP is found for this patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlans.Update(OpenDentBusiness.TreatPlan)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlans.Insert(OpenDentBusiness.TreatPlan)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlans.Delete(OpenDentBusiness.TreatPlan)">
            <summary>Dependencies checked first and throws an exception if any found. So surround by try catch</summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlans.GetKeyDataForSignatureSaving(OpenDentBusiness.TreatPlan,System.Collections.Generic.List{OpenDentBusiness.ProcTP})">
            <summary>Gets the hashstring for generating signatures.
            Should only be used when saving signatures, for validating see GetKeyDataForSignatureHash() and GetHashStringForSignature()</summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlans.GetKeyDataForSignatureHash(OpenDentBusiness.TreatPlan,System.Collections.Generic.List{OpenDentBusiness.ProcTP})">
            <summary>Gets the key data string needed to create a hashstring to be used later when filling the signature.
            This is done seperate of the hashing so that new line replacements can be done when validating signatures before hashing.</summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlans.GetHashStringForSignature(System.String)">
            <summary>Gets the hashstring from the provided string that is typically generated from GetStringForSignatureHash().
            This is done seperate of building the string so that new line replacements can be done when validating signatures before hashing.</summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlans.AuditPlans(System.Int64,System.Int64)">
            <summary>No need to pass in userNum, it's set before remoting role check and passed to the server if necessary.
            <para>This is the automation behind keeping treatplans correct.  Many calls to DB, consider optimizing or calling sparingly.</para>
            <para>Ensures patients only have one active treatplan, marks extras inactive and creates an active if necessary.</para>
            <para>Attaches procedures to the active plan if the proc status is TP or status is TPi and the procs is attached to a sched/planned appt.</para>
            <para>Creates an unassigned treatplan if necessary and attaches any unassigned procedures to it.</para>
            <para>Also maintains priorities of treatplanattaches and procedures and updates the procstatus of TP and TPi procs if necessary.</para></summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlans.SetOtherActiveTPsToInactive(OpenDentBusiness.TreatPlan)">
            <summary>Called after setting the status to treatPlanCur to Active.
            Updates the status of any other plan with Active status to Inactive.
            If the original heading of the other plan is "Active Treatment Plan" it will be updated to "Inactive Treatment Plan".</summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlans.GetNumsByNote(System.String)">
            <summary>May not return correct values if notes are stored with newline characters.</summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlans.UpdateNotes(System.String,System.Collections.Generic.List{System.Int64})">
            <summary>	Updates the default note on active/inactive treatment plans with new note</summary>
        </member>
        <member name="T:OpenDentBusiness.UserGroups">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.UserGroups.List">
            <summary>A list of all user groups, ordered by description.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserGroups.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserGroups.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserGroups.GetList">
            <summary>A list of all user groups, ordered by description.  Does not include CEMT user groups.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserGroups.GetList(System.Boolean)">
            <summary>A list of all user groups, ordered by description.  Set includeCEMT to true if you want CEMT user groups included.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserGroups.Update(OpenDentBusiness.UserGroup)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserGroups.UpdateCEMTNoCache(OpenDentBusiness.UserGroup)">
            <summary>Only called from the CEMT in order to update a remote database with changes.  This method will update rows based on the UserGroupNumCEMT instead of the typical UserGroupNum column.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserGroups.GetCEMTGroupsNoCache">
            <summary>Gets a list of CEMT usergroups without using the cache.  Useful for multithreaded connections.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserGroups.Insert(OpenDentBusiness.UserGroup)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserGroups.InsertNoCache(OpenDentBusiness.UserGroup)">
            <summary>Insertion logic that doesn't use the cache. Has special cases for generating random PK's and handling Oracle insertions.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserGroups.Delete(OpenDentBusiness.UserGroup)">
            <summary>Checks for dependencies first</summary>
        </member>
        <member name="M:OpenDentBusiness.UserGroups.DeleteNoCache(OpenDentBusiness.UserGroup)">
            <summary>Deletes without using the cache.  Doesn't check dependencies.  Useful for multithreaded connections.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserGroups.GetGroup(System.Int64)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.UserQueries">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserQueries.Refresh">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserQueries.Insert(OpenDentBusiness.UserQuery)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserQueries.Delete(OpenDentBusiness.UserQuery)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UserQueries.Update(OpenDentBusiness.UserQuery)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ZipCodes">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ZipCodes.list">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ZipCodes.aLFrequent">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ZipCodes.ALMatches">
            <summary>Only used from UI.</summary>
        </member>
        <member name="M:OpenDentBusiness.ZipCodes.FillCache(System.Data.DataTable)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ZipCodes.Insert(OpenDentBusiness.ZipCode)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ZipCodes.Update(OpenDentBusiness.ZipCode)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ZipCodes.Delete(OpenDentBusiness.ZipCode)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ZipCodes.GetALMatches(System.String)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DatabaseType">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DataConnection">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DataConnection.da">
            <summary>This data adapter is used for all queries to the database.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataConnection.daOr">
            <summary>Data adapter when 'isOracle' is set to true.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataConnection.con">
            <summary>This is the connection that is used by the data adapter for all queries.  8/30/2010 js Changed this to be not static so that we can use it with multiple threads.  Has potential to cause bugs.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataConnection.conOr">
            <summary>Connection that is being used when 'isOracle' is set to true.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataConnection.dr">
            <summary>Used to get very small bits of data from the db when the data adapter would be overkill.  For instance retrieving the response after a command is sent.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataConnection.drOr">
            <summary>The data reader being used when 'isOracle' is set to true.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataConnection.cmd">
            <summary>Stores the string of the command that will be sent to the database.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataConnection.cmdOr">
            <summary>The command to set when 'isOracle' is set to true?</summary>
        </member>
        <member name="F:OpenDentBusiness.DataConnection.InsertID">
            <summary>After inserting a row, this variable will contain the primary key for the newly inserted row.  This can frequently save an additional query to the database.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataConnection._connectionString">
            <summary>If this is used, then none of the fields above will be set.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataConnection._dBtype">
            <summary>The value here is now reliable for public use.  FormChooseDatabase.DBtype, which used to be used for the client is now gone.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataConnection._connectionStringT">
            <summary>If this is used, then none of the fields above will be set.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataConnection.MainThreadId">
            <summary>Set this variable to OpenDental's thread ID.  Until this is set, there is no chance of LostConnection events being fired.
            This is only set after FormChooseDatabase is closed and has allowed the initial connection.  FormChooseDatabase can also be launched in
            read-only mode from FormOpenDental, but the user cannot change the connection in that manner.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataConnection.delayForTesting">
            <summary>milliseconds.</summary>
        </member>
        <member name="P:OpenDentBusiness.DataConnection.DBtype">
            <summary>Only call from the main thread.  The value here is now reliable for public use.  FormChooseDatabase.DBtype, which used to be used for the client is now gone.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.GetConnectionString">
            <summary>From local variable.  Does not query the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.GetDatabaseName">
            <summary>From local variable.  Does not query the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.GetServerName">
            <summary>From local variable.  Does not query the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.GetMysqlUser">
            <summary>From local variable.  Does not query the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.GetMysqlPass">
            <summary>From local variable.  Does not query the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.GetMysqlUserLow">
            <summary>From local variable.  Does not query the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.GetMysqlPassLow">
            <summary>From local variable.  Does not query the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.#ctor">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.#ctor(OpenDentBusiness.DatabaseType)">
            <summary>Only used from FormChooseDatabase to attempt connection with database.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.#ctor(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.#ctor(System.String,System.String,System.String,System.String,OpenDentBusiness.DatabaseType)">
            <summary>Only used to fill the list of databases in the ChooseDatabase window and from Employees.GetAsteriskMissedCalls.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.#ctor(System.String,System.Boolean)">
            <summary>Used by the mobile server because it does not need to worry about 3-tier scenarios.  Only supports MySQL.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.SetDb(System.String,System.String,System.String,System.String,System.String,System.String,OpenDentBusiness.DatabaseType)">
            <summary>This needs to be run every time we switch databases, especially on startup.  Will throw an exception if fails.  Calling class should catch exception.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.SetDb(System.String,System.String,OpenDentBusiness.DatabaseType,System.Boolean)">
            <summary>This needs to be run every time we switch databases, especially on startup.  Will throw an exception if fails.  Calling class should catch exception.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.SetDb(System.String,System.String,OpenDentBusiness.DatabaseType)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.SetDbT(System.String,System.String,System.String,System.String,System.String,System.String,OpenDentBusiness.DatabaseType)">
            <summary>This method sets all the thread specific variables for the DataConnection.  It will leave all normal static connection variables.  
            Should be called before connecting to a database from a thread outside of the main thread. Will validate both high and low permission connection by running an arbitrary query against each.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.SetDbT(System.String,System.String,System.String,System.String,System.String,System.String,OpenDentBusiness.DatabaseType,System.Boolean)">
            <summary>This method sets all the thread specific variables for the DataConnection.  It will leave all normal static connection variables.  
            Should be called before connecting to a database from a thread outside of the main thread. Can optionally validate both high and low permission connections by running an arbitrary query against each.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.SetDbT(System.String,System.String,OpenDentBusiness.DatabaseType,System.Boolean)">
            <summary>This method sets all the thread specific variables for the DataConnection.  It will leave all normal static connection variables.  Should be called before connecting to a database from a thread outside of the main thread.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.SetDbT(System.String,System.String,OpenDentBusiness.DatabaseType)">
            <summary>This method sets all the thread specific variables for the DataConnection.  It will leave all normal static connection variables.  Should be called before connecting to a database from a thread outside of the main thread.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.ConnectionLost">
            <summary>Fires an event to launch the LostConnection window to freeze the calling thread.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.GetTable(System.String,System.Boolean)">
            <summary>Fills table with data from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.NonQ(System.String,System.Boolean,OpenDentBusiness.OdSqlParameter[])">
            <summary>Sends a non query command to the database and returns the number of rows affected. If true, then InsertID will be set to the value of the primary key of the newly inserted row.   WILL NOT RETURN CORRECT PRIMARY KEY if the query specifies the primary key.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.NonQ(System.String)">
            <summary>Sends a non query command to the database and returns the number of rows affected. If true, then InsertID will be set to the value of the primary key of the newly inserted row.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.GetCount(System.String)">
            <summary>Use this for count(*) queries.  They are always guaranteed to return one and only one value.  Uses datareader instead of datatable, so faster.  Can also be used when retrieving prefs manually, since they will also return exactly one value</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.GetScalar(System.String)">
            <summary>Get one value.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataConnection.SplitCommands(System.String)">
            <summary>Oracle only. Used to split a command string into a list of individual commands so that each command can be run individually. It has proven difficult to run multiple commands at one time in Oracle without making drastic changes to existing queries.</summary>
        </member>
        <member name="T:OpenDentBusiness.DtoObject">
            <summary>Packages any object with a TypeName so that it can be serialized and deserialized better.</summary>
        </member>
        <member name="F:OpenDentBusiness.DtoObject.TypeName">
            <summary>Fully qualified name, including the namespace but not the assembly.  Examples: System.Int32, OpenDentBusiness.Patient, OpenDentBusiness.Patient[], List&lt;OpenDentBusiness.Patient&gt;, PluginOC.OcContainer.  When the xml element is created for the Obj, the namespace is not included.  So this field properly stores it.</summary>
        </member>
        <member name="F:OpenDentBusiness.DtoObject.Obj">
            <summary>The actual object.</summary>
        </member>
        <member name="M:OpenDentBusiness.DtoObject.#ctor">
            <summary>Empty constructor as required by IXmlSerializable</summary>
        </member>
        <member name="M:OpenDentBusiness.DtoObject.#ctor(System.Object,System.Type)">
            <summary>This is the constructor that should be used normally because it automatically creates the TypeName.</summary>
        </member>
        <member name="M:OpenDentBusiness.DtoObject.WriteXml(System.Xml.XmlWriter)">
            <summary>This is not explicitly called by our code.  It's required for the IXmlSerializable interface, which we have defined for this class.  So C# will call this when we call Serialize().</summary>
        </member>
        <member name="M:OpenDentBusiness.DtoObject.GetSchema">
            <summary>Required by IXmlSerializable</summary>
        </member>
        <member name="M:OpenDentBusiness.DtoObject.ConstructArray(System.Object[],System.Type[])">
            <summary>We must pass in a matching array of types for situations where nulls are used in parameters.
            Otherwise, we won't know the parameter type.
            This method needs to create a "deep copy" of all objects passed in because we will be escaping characters within string variables.
            Since we do not know what objects are being passed in, we decided to use JSON to generically serialize each object.
            JSON seems to handle invalid characters better than XML even though it has its own quirks.</summary>
        </member>
        <member name="M:OpenDentBusiness.DtoObject.ConvertNameToType(System.String)">
            <summary>Examples of strTypeName passed in: System.Int32, System.Drawing.Color, OpenDentBusiness.Patient, OpenDentBusiness.Patient[], List&lt;OpenDentBusiness.Patient&gt;, PluginOC.OcContainer</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageHelper.RenderMountImage(System.Drawing.Bitmap,System.Drawing.Bitmap[],System.Collections.Generic.List{OpenDentBusiness.MountItem},OpenDentBusiness.Document[],System.Int32)">
            <summary>Takes in a mount object and finds all the images pertaining to the mount, then concatonates them together into one large, unscaled image and returns that image. Set imageSelected=-1 to unselect all images, or set to an image ordinal to highlight the image. The mount is rendered onto the given mountImage, so it must have been appropriately created by CreateBlankMountImage(). One can create a mount template by passing in arrays of zero length.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageHelper.RenderMountFrames(System.Drawing.Bitmap,System.Collections.Generic.List{OpenDentBusiness.MountItem},System.Int32)">
            <summary>Renders the hallow rectangles which represent the individual image frames into the given mount image.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageHelper.RenderImageIntoMount(System.Drawing.Bitmap,OpenDentBusiness.MountItem,System.Drawing.Bitmap,OpenDentBusiness.Document)">
            <summary>Renders the given image using the settings provided by the given document object into the location of the given mountItem object.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageHelper.HasImageExtension(System.String)">
            <summary>Returns true if the given filename contains a supported file image extension.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageHelper.ApplyDocumentSettingsToImage(OpenDentBusiness.Document,System.Drawing.Bitmap,OpenDentBusiness.ImageSettingFlags)">
            <summary>Applies the document specified cropping, flip, rotation, brightness and contrast transformations to the image and returns the resulting image. Zoom and translation must be handled by the calling code. The returned image is always a new image that can be modified without affecting the original image. The change in the image's center point is returned into deltaCenter, so that rotation offsets can be properly calculated when displaying the returned image.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageHelper.GetThumbnail(System.Drawing.Image,System.Int32)">
            <summary>specify the size of the square to return</summary>
        </member>
        <member name="T:OpenDentBusiness.ImageStore">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ImageStore.LocalAtoZpath">
            <summary>Remembers the computerpref.AtoZpath.  Set to empty string on startup.  If set to something else, this path will override all other paths.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.GetPreferredAtoZpath">
            <summary>Only makes a call to the database on startup.  After that, just uses cached data.  
            Does not validate that the path exists except if the main one is used.  ONLY used from Client layer or S class methods that have
            "No need to check RemotingRole; no call to db" and which also make sure PrefC.AtoZfolderUsed.
            Returns DropBox AtoZ path if using DropboxAtoZ</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.GetPatientFolder(OpenDentBusiness.Patient,System.String)">
            <summary>Returns patient's AtoZ folder if local AtoZ used, blank if database is used, or dropbox AtoZ path if Dropbox is used.  Will create folder if needed.  Will validate that folder exists.  It will alter the pat.ImageFolder if needed, but still make sure to pass in a very new Patient because we do not want an invalid patFolder.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.GetEobFolder">
            <summary>Will create folder if needed.  Will validate that folder exists.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.GetAmdFolder">
            <summary>Will create folder if needed.  Will validate that folder exists.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.AddMissingFilesToDatabase(OpenDentBusiness.Patient)">
            <summary>When the Image module is opened, this loads newly added files.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.GetMountImage(OpenDentBusiness.Mount,System.String)">
            <summary>Takes in a mount object and finds all the images pertaining to the mount, then combines them together into one large, unscaled image and returns that image. For use in other modules.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.Import(System.String,System.Int64,OpenDentBusiness.Patient)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.Import(System.Drawing.Bitmap,System.Int64,OpenDentBusiness.ImageType,OpenDentBusiness.Patient)">
            <summary>Saves to AtoZ folder, dropbox, or to db.  Saves image as a jpg.  Compression will differ depending on imageType.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.ImportForm(System.String,System.Int64,OpenDentBusiness.Patient)">
            <summary>Obviously no support for db storage</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.ImportImageToMount(System.Drawing.Bitmap,System.Int16,System.Int64,System.Int64,OpenDentBusiness.Patient)">
            <summary>Always saves as bmp.  So the 'paste to mount' logic needs to be changed to prevent conversion to bmp.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.ImportEobAttach(System.Drawing.Bitmap,System.Int64)">
            <summary>Saves to either AtoZ folder or to db.  Saves image as a jpg.  Compression will be according to user setting.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.ImportEobAttach(System.String,System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.Export(System.String,OpenDentBusiness.Document,OpenDentBusiness.Patient)">
            <summary> Save a Document to another location on the disk (outside of Open Dental). </summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.ExportEobAttach(System.String,OpenDentBusiness.EobAttach)">
            <summary> Save an Eob to another location on the disk (outside of Open Dental). </summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.ExportAmdAttach(System.String,OpenDentBusiness.EhrAmendment)">
            <summary> Save an Eob to another location on the disk (outside of Open Dental). </summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.SaveDocument(OpenDentBusiness.Document,System.Drawing.Bitmap,System.Drawing.Imaging.ImageFormat,System.String)">
            <summary>If using AtoZ folder, then patFolder must be fully qualified and valid.  If not usingAtoZ folder, this uploads to Dropbox or fills the doc.RawBase64 which must then be updated to db.  The image format can be bmp, jpg, etc, but this overload does not allow specifying jpg compression quality.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.SaveDocument(OpenDentBusiness.Document,System.Drawing.Bitmap,System.Drawing.Imaging.ImageCodecInfo,System.Drawing.Imaging.EncoderParameters,System.String)">
            <summary>If usingAtoZfoler, then patFolder must be fully qualified and valid.  If not usingAtoZ folder, this uploads to DropBox or fills the doc.RawBase64 which must then be updated to db.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.SaveDocument(OpenDentBusiness.Document,System.String,System.String)">
            <summary>If using AtoZfolder, then patFolder must be fully qualified and valid.  If not using AtoZfolder, this uploads to DropBox or fills the eob.RawBase64 which must then be updated to db.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.SaveEobAttach(OpenDentBusiness.EobAttach,System.Drawing.Bitmap,System.Drawing.Imaging.ImageCodecInfo,System.Drawing.Imaging.EncoderParameters,System.String)">
            <summary>If using AtoZfolder, then patFolder must be fully qualified and valid.  If not using AtoZfolder, this fills the eob.RawBase64 which must then be updated to db.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.SaveAmdAttach(OpenDentBusiness.EhrAmendment,System.Drawing.Bitmap,System.Drawing.Imaging.ImageCodecInfo,System.Drawing.Imaging.EncoderParameters,System.String)">
            <summary>If using AtoZfolder, then patFolder must be fully qualified and valid.  If not using AtoZfolder, this fills the eob.RawBase64 which must then be updated to db.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.SaveEobAttach(OpenDentBusiness.EobAttach,System.String,System.String)">
            <summary>If using AtoZfolder, then patFolder must be fully qualified and valid.  If not using AtoZfolder, this fills the eob.RawBase64 which must then be updated to db.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.SaveAmdAttach(OpenDentBusiness.EhrAmendment,System.String,System.String)">
            <summary>If using AtoZfolder, then patFolder must be fully qualified and valid.  If not using AtoZfolder, this fills the eob.RawBase64 which must then be updated to db.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.DeleteDocuments(System.Collections.Generic.IList{OpenDentBusiness.Document},System.String)">
            <summary>For each of the documents in the list, deletes row from db and image from AtoZ folder if needed.  Throws exception if the file cannot be deleted.  Surround in try/catch.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.DeleteEobAttach(OpenDentBusiness.EobAttach)">
            <summary>Also handles deletion of db object.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.DeleteAmdAttach(OpenDentBusiness.EhrAmendment)">
            <summary>Also handles deletion of db object.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.CleanAmdAttach(System.String)">
            <summary>Cleans up unreferenced Amendments</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.DeleteThumbnailImage(OpenDentBusiness.Document,System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.HasImageExtension(System.String)">
            <summary>Returns true if the given filename contains a supported file image extension.</summary>
        </member>
        <member name="M:OpenDentBusiness.ImageStore.LogDocument(System.String,OpenDentBusiness.Permissions,OpenDentBusiness.Document)">
            <summary>Makes log entry for documents.  Supply beginning text, permission, and document.</summary>
        </member>
        <member name="T:OpenDentBusiness.MiscData">
            <summary>Miscellaneous database functions.</summary>
        </member>
        <member name="M:OpenDentBusiness.MiscData.GetNowDateTime">
            <summary>Gets the current date/Time direcly from the server.  Mostly used to prevent uesr from altering the workstation date to bypass security.</summary>
        </member>
        <member name="M:OpenDentBusiness.MiscData.GetNowDateTimeWithMilli">
            <summary>Gets the current date/Time with milliseconds directly from server.  In Mysql we must query the server until the second rolls over, which may take up to one second.  Used to confirm synchronization in time for EHR.</summary>
        </member>
        <member name="M:OpenDentBusiness.MiscData.Contains(System.String[],System.String)">
            <summary>Used in MakeABackup to ensure a unique backup database name.</summary>
        </member>
        <member name="M:OpenDentBusiness.MiscData.MakeABackup">
            <summary>Backs up the database to the same directory as the original just in case the user did not have sense enough to do a backup first.
            Does not work for Oracle, due to some MySQL specific commands inside.</summary>
        </member>
        <member name="M:OpenDentBusiness.MiscData.GetMySqlVersion">
            <summary>Returns the major and minor version of MySQL for the current connection.  Returns a version of 0.0 if the MySQL version cannot be determined.</summary>
        </member>
        <member name="M:OpenDentBusiness.MiscData.GetODServer">
            <summary>Gets the human readable host name of the database server, even when using the middle-tier.  This will return an empty string if Dns lookup fails.</summary>
        </member>
        <member name="M:OpenDentBusiness.MiscData.GetMaxAllowedPacket">
            <summary>Returns the current value in the GLOBAL max_allowed_packet variable.
            max_allowed_packet is stored as an integer in multiples of 1,024 with a min value of 1,024 and a max value of 1,073,741,824.</summary>
        </member>
        <member name="M:OpenDentBusiness.MiscData.SetMaxAllowedPacket(System.Int32)">
            <summary>Sets the global MySQL variable max_allowed_packet to the passed in size (in bytes).
            Returns the results of GetMaxAllowedPacket() after running the SET GLOBAL command.</summary>
        </member>
        <member name="M:OpenDentBusiness.MiscData.GetAtoZforDb(System.String[])">
            <summary>Returns a collection of unique AtoZ folders for the array of dbnames passed in.  It will not include the current AtoZ folder for this database, even if shared by another db.  This is used for the feature that updates multiple databases simultaneously.</summary>
        </member>
        <member name="T:OpenDentBusiness.DataTransferObject">
            <summary>Provides a base class for DTO classes.  A DTO class is a simple data storage object.  A DTO is the only format accepted by OpenDentBusiness.dll.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTransferObject.Credentials">
            <summary>Always passed with new web service.  Never null.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTransferObject.MethodName">
            <summary>This is the name of the method that we need to call.  "Class.Method" format.  Not used with GetTableLow.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTransferObject.Params">
            <summary>This is a list of parameters that we are passing.  They can be various kinds of objects.</summary>
        </member>
        <member name="T:OpenDentBusiness.Credentials">
            <summary>The username and password are internal to OD.  They are not the MySQL username and password.</summary>
        </member>
        <member name="F:OpenDentBusiness.Credentials.Password">
            <summary>If using Ecw, then the password is actually just a hash because we don't know the real password.</summary>
        </member>
        <member name="T:OpenDentBusiness.DtoGetDS">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DtoGetTable">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DtoGetTableLow">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DtoGetLong">
            <summary>Gets a long.</summary>
        </member>
        <member name="T:OpenDentBusiness.DtoGetInt">
            <summary>Gets an int.</summary>
        </member>
        <member name="T:OpenDentBusiness.DtoGetDouble">
            <summary>Gets a double.</summary>
        </member>
        <member name="T:OpenDentBusiness.DtoGetVoid">
            <summary>Used when the return type is void.  It will still return 0 to ack.</summary>
        </member>
        <member name="T:OpenDentBusiness.DtoGetObject">
            <summary>Gets an object which must be serializable.  Calling code will convert object to specific type.</summary>
        </member>
        <member name="F:OpenDentBusiness.DtoGetObject.ObjectType">
            <summary>This is the "FullName" string representation of the type of object that we expect back as a result.  Examples: System.Int32, OpenDentBusiness.Patient, OpenDentBusiness.Patient[], List&lt;OpenDentBusiness.Patient&gt;.  DataTable and DataSet not allowed.</summary>
        </member>
        <member name="T:OpenDentBusiness.DtoGetString">
            <summary>Gets a simple string.</summary>
        </member>
        <member name="T:OpenDentBusiness.DtoGetBool">
            <summary>Gets a bool.</summary>
        </member>
        <member name="T:OpenDentBusiness.DtoException">
            <summary>OpenDentBusiness and all the DA classes are designed to throw an exception if something goes wrong.  If using OpenDentBusiness through the remote server, then the server catches the exception and passes it back to the main program using this DTO.  The client then turns it back into an exception so that it behaves just as if OpenDentBusiness was getting called locally.</summary>
        </member>
        <member name="F:OpenDentBusiness.DtoException.ExceptionType">
            <summary>String representation of the type of Exception that was thrown.</summary>
        </member>
        <member name="T:OpenDentBusiness.EnumType">
            <summary>This is an enumeration of all the enumeration types that are used in the database.  This is used in the reporting classes to make the data human-readable.  May need to be updated with recent additions.</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.YN">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.Relat">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.Month">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.ProcStat">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.DefCat">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.TreatmentArea">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.DentalSpecialty">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.ApptStatus">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.PatientStatus">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.PatientGender">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.PatientPosition">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.ScheduleType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.LabCase">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.PlaceOfService">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.PaintType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.SchedStatus">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.AutoCondition">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.ClaimProcStatus">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.CommItemType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.ToolBarsAvail">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.ProblemStatus">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.EZTwainErrorCode">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.ScaleType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.SortStrategy">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumType.ProcCodeListSort">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.YN">
            <summary>Unknown,Yes, or No.</summary>
        </member>
        <member name="F:OpenDentBusiness.YN.Unknown">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.YN.Yes">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.YN.No">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.Relat">
            <summary>Relationship to subscriber for insurance.</summary>
        </member>
        <member name="F:OpenDentBusiness.Relat.Self">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.Relat.Spouse">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.Relat.Child">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.Relat.Employee">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.Relat.HandicapDep">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.Relat.SignifOther">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.Relat.InjuredPlaintiff">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.Relat.LifePartner">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.Relat.Dependent">
            <summary>8</summary>
        </member>
        <member name="T:OpenDentBusiness.Month">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Month.Jan">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.Month.Feb">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.Month.Mar">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.Month.Apr">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.Month.May">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.Month.Jun">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.Month.Jul">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.Month.Aug">
            <summary>8</summary>
        </member>
        <member name="F:OpenDentBusiness.Month.Sep">
            <summary>9</summary>
        </member>
        <member name="F:OpenDentBusiness.Month.Oct">
            <summary>10</summary>
        </member>
        <member name="F:OpenDentBusiness.Month.Nov">
            <summary>11</summary>
        </member>
        <member name="F:OpenDentBusiness.Month.Dec">
            <summary>12</summary>
        </member>
        <member name="T:OpenDentBusiness.ProgType">
            <summary>Progress notes line type. Used when displaying lines in the Chart module.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProgType.Proc">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.ProgType.Rx">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.PriSecTot">
            <summary>Primary, secondary, or total. Used in some insurance estimates to specify which kind of estimate is needed.</summary>
        </member>
        <member name="F:OpenDentBusiness.PriSecTot.Pri">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.PriSecTot.Sec">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.PriSecTot.Tot">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcStat">
            <summary>Procedure Status.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcStat.TP">
            <summary>1- Treatment Plan.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcStat.C">
            <summary>2- Complete.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcStat.EC">
            <summary>3- Existing Current Provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcStat.EO">
            <summary>4- Existing Other Provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcStat.R">
            <summary>5- Referred Out.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcStat.D">
            <summary>6- Deleted.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcStat.Cn">
            <summary>7- Condition.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcStat.TPi">
            <summary>8- Treatment Plan inactive.</summary>
        </member>
        <member name="T:OpenDentBusiness.TreatmentArea">
            <summary>Used in procedurecode setup to specify the treatment area for a procedure.  This determines what fields are available when editing an appointment.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatmentArea.None">
            <summary>0-Same as 3 mouth.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatmentArea.Surf">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatmentArea.Tooth">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatmentArea.Mouth">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatmentArea.Quad">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatmentArea.Sextant">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatmentArea.Arch">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatmentArea.ToothRange">
            <summary>7</summary>
        </member>
        <member name="T:OpenDentBusiness.InvalidType">
            <summary>When the autorefresh message is sent to the other computers, this is the type.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.None">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Date">
            <summary>1 Deprecated. Not used with any other flags</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.AllLocal">
            <summary>2 Deprecated.  Inefficient.  All flags combined except Date and Tasks.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Task">
            <summary>3 Not used with any other flags.  Used to just indicate added tasks, but now it indicates any change at all except those where a popup is needed.  If we also want a popup, then use TaskPopup.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.ProcCodes">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Prefs">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Views">
            <summary>6 ApptViews, ApptViewItems, AppointmentRules, ProcApptColors.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.AutoCodes">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Carriers">
            <summary>8</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.ClearHouses">
            <summary>9</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Computers">
            <summary>10</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.InsCats">
            <summary>11</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Employees">
            <summary>12- Also includes payperiods.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.StartupOld">
            <summary>13- Deprecated.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Defs">
            <summary>14</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Email">
            <summary>15- Both templates and addresses.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Fees">
            <summary>16</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Letters">
            <summary>17</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.QuickPaste">
            <summary>18- Invalidates quick paste notes and cats.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Security">
            <summary>19- Userods, UserGroups, and GroupPermissions</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Programs">
            <summary>20 - Also includes program properties.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.ToolBut">
            <summary>21- Also includes Image Mounts</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Providers">
            <summary>22- Also includes clinics.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.ClaimForms">
            <summary>23</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.ZipCodes">
            <summary>24</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.LetterMerge">
            <summary>25</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.DentalSchools">
            <summary>26</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Operatories">
            <summary>27</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.TaskPopup">
            <summary>28</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Sites">
            <summary>29</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Pharmacies">
            <summary>30</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Sheets">
            <summary>31</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.RecallTypes">
            <summary>32</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.FeeScheds">
            <summary>33</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.PhoneNumbers">
            <summary>34. This is used internally by OD, Inc with the phonenumber table and the phone server.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Signals">
            <summary>35. Deprecated, use SigMessages instead.  Old summary: Signal/message defs</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.DisplayFields">
            <summary>36</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.PatFields">
            <summary>37. And ApptFields.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.AccountingAutoPays">
            <summary>38</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.ProcButtons">
            <summary>39</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Diseases">
            <summary>40.  Includes ICD9s.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Languages">
            <summary>41</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.AutoNotes">
            <summary>42</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.ElectIDs">
            <summary>43</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Employers">
            <summary>44</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.ProviderIdents">
            <summary>45</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.ShutDownNow">
            <summary>46</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.InsFilingCodes">
            <summary>47</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.ReplicationServers">
            <summary>48</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Automation">
            <summary>49</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.PhoneAsteriskReload">
            <summary>50. This is used internally by OD, Inc with the phone server to trigger the phone system to reload after changing which call groups users are in.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.TimeCardRules">
            <summary>51</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Vaccines">
            <summary>52. Includes DrugManufacturers and DrugUnits.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.HL7Defs">
            <summary>53. Includes all 4 HL7Def tables.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.DictCustoms">
            <summary>54</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Wiki">
            <summary>55. Caches the wiki master page and the wikiListHeaderWidths</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Sops">
            <summary>56. SourceOfPayment</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.EhrCodes">
            <summary>57. In-Memory table used for hard-coded codes and CQMs</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.AppointmentTypes">
            <summary>58. Used to override appointment color.  Might be used for other appointment attributes in the future.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Medications">
            <summary>59. Caches the medication list to stop from over-refreshing and causing slowness.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.SmsTextMsgReceivedUnreadCount">
            <summary>60. This is a special InvalidType which indicates a refresh, but also includes the data to be refreshed inside of the signalod.FKey field.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.ProviderErxs">
            <summary>61</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Jobs">
            <summary>62. This is used internally by OD, refreshes the jobs windows in the Job Manager.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.JobPermission">
            <summary>63. This is used internally by OD, refreshes the jobRoles</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.StateAbbrs">
            <summary>64. Caches the StateAbbrs used for helping prefill state fields and for state validations.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.RequiredFields">
            <summary>65</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Ebills">
            <summary>66</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.UserClinics">
            <summary>67</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.Appointment">
            <summary>68. Replaces the deprecated "Date" invalid type for more granularity on invalid signals.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.OrthoChartTabs">
            <summary>69</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.SigMessages">
            <summary>70. A user either acknowledged or added to the messaging buttons system.</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.AlertSubs">
            <summary>71</summary>
        </member>
        <member name="F:OpenDentBusiness.InvalidType.AlertItems">
            <summary>72. THIS IS NOT CACHED. But is used to make server run the alert logic in OpenDentalService.</summary>
        </member>
        <member name="T:OpenDentBusiness.ApptStatus">
            <summary>Appointment status.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptStatus.None">
            <summary>0- No appointment should ever have this status.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptStatus.Scheduled">
            <summary>1- Shows as a regularly scheduled appointment.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptStatus.Complete">
            <summary>2- Shows greyed out.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptStatus.UnschedList">
            <summary>3- Only shows on unscheduled list.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptStatus.ASAP">
            <summary>4- Functions almost the same as Scheduled, but also causes the appointment to show on the ASAP list.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptStatus.Broken">
            <summary>5- Shows with a big X on it.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptStatus.Planned">
            <summary>6- Planned appointment.  Only shows in Chart module. User not allowed to change this status, and it does not display as one of the options.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptStatus.PtNote">
            <summary>7- Patient "post-it" note on the schedule. Shows light yellow. Shows on day scheduled just like appt, as well as in prog notes, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptStatus.PtNoteCompleted">
            <summary>8- Patient "post-it" note completed</summary>
        </member>
        <member name="T:OpenDentBusiness.PatientStatus">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatientStatus.Patient">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientStatus.NonPatient">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientStatus.Inactive">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientStatus.Archived">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientStatus.Deleted">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientStatus.Deceased">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientStatus.Prospective">
            <summary>6- Not an actual patient yet.</summary>
        </member>
        <member name="T:OpenDentBusiness.PatientGender">
            <summary>Known as administrativeGender (HL7 OID of 2.16.840.1.113883.5.1) Male=M, Female=F, Unknown=Undifferentiated=UN.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGender.Male">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGender.Female">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGender.Unknown">
            <summary>2- Not a joke. Required by HIPAA for privacy.  Required by ehr to track missing entries. EHR/HL7 known as undifferentiated (UN).</summary>
        </member>
        <member name="T:OpenDentBusiness.PatientPosition">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatientPosition.Single">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientPosition.Married">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientPosition.Child">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientPosition.Widowed">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientPosition.Divorced">
            <summary>4</summary>
        </member>
        <member name="T:OpenDentBusiness.ScheduleType">
            <summary>For schedule timeblocks.</summary>
        </member>
        <member name="F:OpenDentBusiness.ScheduleType.Practice">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.ScheduleType.Provider">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.ScheduleType.Blockout">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.ScheduleType.Employee">
            <summary>3</summary>
        </member>
        <member name="T:OpenDentBusiness.PlaceOfService">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PlaceOfService.Office">
            <summary>0. CPT code 11</summary>
        </member>
        <member name="F:OpenDentBusiness.PlaceOfService.PatientsHome">
            <summary>1. CPT code 12</summary>
        </member>
        <member name="F:OpenDentBusiness.PlaceOfService.InpatHospital">
            <summary>2. CPT code 21</summary>
        </member>
        <member name="F:OpenDentBusiness.PlaceOfService.OutpatHospital">
            <summary>3. CPT code 22</summary>
        </member>
        <member name="F:OpenDentBusiness.PlaceOfService.SkilledNursFac">
            <summary>4. CPT code 31</summary>
        </member>
        <member name="F:OpenDentBusiness.PlaceOfService.CustodialCareFacility">
            <summary>5. CPT code 33.  In X12, a similar code AdultLivCareFac 35 is mentioned.</summary>
        </member>
        <member name="F:OpenDentBusiness.PlaceOfService.OtherLocation">
            <summary>6. CPT code ?.  We use 11 for office.</summary>
        </member>
        <member name="F:OpenDentBusiness.PlaceOfService.MobileUnit">
            <summary>7. CPT code 15</summary>
        </member>
        <member name="F:OpenDentBusiness.PlaceOfService.School">
            <summary>8. CPT code 03</summary>
        </member>
        <member name="F:OpenDentBusiness.PlaceOfService.MilitaryTreatFac">
            <summary>9. CPT code 26</summary>
        </member>
        <member name="F:OpenDentBusiness.PlaceOfService.FederalHealthCenter">
            <summary>10. CPT code 50</summary>
        </member>
        <member name="F:OpenDentBusiness.PlaceOfService.PublicHealthClinic">
            <summary>11. CPT code 71</summary>
        </member>
        <member name="F:OpenDentBusiness.PlaceOfService.RuralHealthClinic">
            <summary>12. CPT code 72</summary>
        </member>
        <member name="F:OpenDentBusiness.PlaceOfService.EmergencyRoomHospital">
            <summary>13. CPT code 23</summary>
        </member>
        <member name="F:OpenDentBusiness.PlaceOfService.AmbulatorySurgicalCenter">
            <summary>14. CPT code 24</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcCodeListSort">
            <summary>Default sort method of the Procedure Code list.  0=Category, 1=ProcCode</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcCodeListSort.Category">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcCodeListSort.ProcCode">
            <summary>1</summary>
        </member>
        <member name="T:OpenDentBusiness.OtherResult">
            <summary>Used in the other appointments window to keep track of the result when closing.</summary>
        </member>
        <member name="F:OpenDentBusiness.OtherResult.Cancel">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.OtherResult.CreateNew">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.OtherResult.GoTo">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.OtherResult.CopyToPinBoard">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.OtherResult.NewToPinBoard">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.OtherResult.PinboardAndSearch">
            <summary>Currently only used when scheduling a recall.  Puts it on the pinboard, and then launches a search, jumping to a new date in the process.</summary>
        </member>
        <member name="T:OpenDentBusiness.PaintType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PaintType.Extraction">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.PaintType.FillingSolid">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.PaintType.FillingOutline">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.PaintType.RCT">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.PaintType.Post">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.PaintType.CrownSolid">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.PaintType.CrownOutline">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.PaintType.CrownHatch">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.PaintType.Implant">
            <summary>8</summary>
        </member>
        <member name="F:OpenDentBusiness.PaintType.Sealant">
            <summary>9</summary>
        </member>
        <member name="F:OpenDentBusiness.PaintType.PonticSolid">
            <summary>10</summary>
        </member>
        <member name="F:OpenDentBusiness.PaintType.PonticOutline">
            <summary>11</summary>
        </member>
        <member name="F:OpenDentBusiness.PaintType.PonticHatch">
            <summary>12</summary>
        </member>
        <member name="F:OpenDentBusiness.PaintType.RetainerSolid">
            <summary>13</summary>
        </member>
        <member name="F:OpenDentBusiness.PaintType.RetainerOutline">
            <summary>14</summary>
        </member>
        <member name="F:OpenDentBusiness.PaintType.RetainerHatch">
            <summary>15</summary>
        </member>
        <member name="T:OpenDentBusiness.SchedStatus">
            <summary>Schedule status.  Open=0,Closed=1,Holiday=2.</summary>
        </member>
        <member name="F:OpenDentBusiness.SchedStatus.Open">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.SchedStatus.Closed">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.SchedStatus.Holiday">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.AutoCondition">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.Anterior">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.Posterior">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.Premolar">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.Molar">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.One_Surf">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.Two_Surf">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.Three_Surf">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.Four_Surf">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.Five_Surf">
            <summary>8</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.First">
            <summary>9</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.EachAdditional">
            <summary>10</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.Maxillary">
            <summary>11</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.Mandibular">
            <summary>12</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.Primary">
            <summary>13</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.Permanent">
            <summary>14</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.Pontic">
            <summary>15</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.Retainer">
            <summary>16</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondition.AgeOver18">
            <summary>17</summary>
        </member>
        <member name="T:OpenDentBusiness.SubstitutionCondition">
            <Summary>Used for insurance substitutions conditions of procedurecodes.  Mostly for posterior composites.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SubstitutionCondition.Always">
            <Summary>0</Summary>
        </member>
        <member name="F:OpenDentBusiness.SubstitutionCondition.Molar">
            <Summary>1</Summary>
        </member>
        <member name="F:OpenDentBusiness.SubstitutionCondition.SecondMolar">
            <Summary>2</Summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimProcStatus">
            <summary>Claimproc Status.  The status must generally be the same as the claim, although it is sometimes not strictly enforced.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcStatus.NotReceived">
            <summary>0: For claims that have been created or sent, but have not been received.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcStatus.Received">
            <summary>1: For claims that have been received.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcStatus.Preauth">
            <summary>2: For preauthorizations.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcStatus.Adjustment">
            <summary>3: The only place that this status is used is to make adjustments to benefits from the coverage window.  It is never attached to a claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcStatus.Supplemental">
            <summary>4:This differs from Received only slightly.  It's for additional payments on procedures already received.  Most fields are blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcStatus.CapClaim">
            <summary>5: CapClaim is used when you want to send a claim to a capitation insurance company.  These are similar to Supplemental in that there will always be a duplicate claimproc for a procedure. The first claimproc tracks the copay and writeoff, has a status of CapComplete, and is never attached to a claim. The second claimproc has status of CapClaim.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcStatus.Estimate">
            <summary>6: Estimates have replaced the fields that were in the procedure table.  Once a procedure is complete, the claimprocstatus will still be Estimate.  An Estimate can be attached to a claim and status gets changed to NotReceived.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcStatus.CapComplete">
            <summary>7: For capitation procedures that are complete.  This replaces the old procedurelog.CapCoPay field. This stores the copay and writeoff amounts.  The copay is only there for reference, while it is the writeoff that actually affects the balance. Never attached to a claim. If procedure is TP, then status will be CapEstimate.  Only set to CapComplete if procedure is Complete.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProcStatus.CapEstimate">
            <summary>8: For capitation procedures that are still estimates rather than complete.  When procedure is completed, this can be changed to CapComplete, but never to anything else.</summary>
        </member>
        <member name="T:OpenDentBusiness.ToolBarsAvail">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ToolBarsAvail.AccountModule">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.ToolBarsAvail.ApptModule">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.ToolBarsAvail.ChartModule">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.ToolBarsAvail.ImagesModule">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.ToolBarsAvail.FamilyModule">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.ToolBarsAvail.TreatmentPlanModule">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.ToolBarsAvail.ClaimsSend">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.ToolBarsAvail.MainToolbar">
            <summary>7 Shows in the toolbar at the top that is common to all modules.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToolBarsAvail.ReportsMenu">
            <summary>8 Shows in the main menu Reports submenu.</summary>
        </member>
        <member name="T:OpenDentBusiness.TimeClockStatus">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.TimeClockStatus.Home">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.TimeClockStatus.Lunch">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.TimeClockStatus.Break">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.PerioSequenceType">
            <summary>In perio, the type of measurements for a given row.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioSequenceType.Mobility">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioSequenceType.Furcation">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioSequenceType.GingMargin">
            <summary>2-AKA recession.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioSequenceType.MGJ">
            <summary>3-MucoGingivalJunction- the division between attached and unattached mucosa.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioSequenceType.Probing">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioSequenceType.SkipTooth">
            <summary>5-For the skiptooth type, set surf to none, and ToothValue to 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioSequenceType.Bleeding">
            <summary>6. Sum of flags for bleeding(1), suppuration(2), plaque(4), and calculus(8).</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioSequenceType.CAL">
            <summary>7. But this type is never saved to the db. It is always calculated on the fly.</summary>
        </member>
        <member name="T:OpenDentBusiness.PatientRaceOld">
            <summary>Deprecated, use patientrace table instead.  Temporarily used for converting old patient races to patientrace entries and screening.  Race and ethnicity for patient. Used by public health.  The problem is that everyone seems to want different choices.  If we give these choices their own table, then we also need to include mapping functions.  These are currently used in ArizonaReports, HL7 w ECW, and EHR.  Foreign users would like their own mappings.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientRaceOld.Unknown">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientRaceOld.Multiracial">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientRaceOld.HispanicLatino">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientRaceOld.AfricanAmerican">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientRaceOld.White">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientRaceOld.HawaiiOrPacIsland">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientRaceOld.AmericanIndian">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientRaceOld.Asian">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientRaceOld.Other">
            <summary>8</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientRaceOld.Aboriginal">
            <summary>9</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientRaceOld.BlackHispanic">
            <summary>10 - Required by EHR.</summary>
        </member>
        <member name="T:OpenDentBusiness.PatientGrade">
            <summary>Grade level used in public health.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.Unknown">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.First">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.Second">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.Third">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.Fourth">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.Fifth">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.Sixth">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.Seventh">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.Eighth">
            <summary>8</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.Ninth">
            <summary>9</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.Tenth">
            <summary>10</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.Eleventh">
            <summary>11</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.Twelfth">
            <summary>12</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.PrenatalWIC">
            <summary>13</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.PreK">
            <summary>14</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.Kindergarten">
            <summary>15</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientGrade.Other">
            <summary>16</summary>
        </member>
        <member name="T:OpenDentBusiness.TreatmentUrgency">
            <summary>For public health.  Unknown, NoProblems, NeedsCarE, or Urgent.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatmentUrgency.Unknown">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.TreatmentUrgency.NoProblems">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.TreatmentUrgency.NeedsCare">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.TreatmentUrgency.Urgent">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ImageType">
            <summary>The type of image for images module.</summary>
        </member>
        <member name="F:OpenDentBusiness.ImageType.Document">
            <summary>0- Includes scanned documents and screenshots.</summary>
        </member>
        <member name="F:OpenDentBusiness.ImageType.Radiograph">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.ImageType.Photo">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.ImageType.File">
            <summary>3- For instance a Word document or a spreadsheet. Not an image.</summary>
        </member>
        <member name="F:OpenDentBusiness.ImageType.Mount">
            <summary>4- For xray mount sets.</summary>
        </member>
        <member name="T:OpenDentBusiness.QuickPasteType">
            <summary>Used by QuickPasteCat to determine which category to default to when opening.</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.None">
            <summary>0 - None should never be used.  It is simply used as a "default" when adding a new control.  Searching for usage of "None" is an easy way to find spots where our pattern was not followed correctly.</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.Procedure">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.Appointment">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.CommLog">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.Adjustment">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.Claim">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.Email">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.InsPlan">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.Letter">
            <summary>8</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.MedicalSummary">
            <summary>9</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.ServiceNotes">
            <summary>10</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.MedicalHistory">
            <summary>11</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.MedicationEdit">
            <summary>12</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.MedicationPat">
            <summary>13</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.PatAddressNote">
            <summary>14</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.Payment">
            <summary>15</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.PayPlan">
            <summary>16</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.Query">
            <summary>17</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.Referral">
            <summary>18</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.Rx">
            <summary>19</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.FinancialNotes">
            <summary>20</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.ChartTreatment">
            <summary>21</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.MedicalUrgent">
            <summary>22</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.Statement">
            <summary>23</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.Recall">
            <summary>24</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.Popup">
            <summary>25</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.TxtMsg">
            <summary>26</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.Task">
            <summary>27</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.Schedule">
            <summary>28</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteType.TreatPlan">
            <summary>29</summary>
        </member>
        <member name="T:OpenDentBusiness.ElectronicClaimFormat">
            <summary>For every type of electronic claim format that Open Dental can create, there will be an item in this enumeration.  All e-claim formats are hard coded due to complexity.</summary>
        </member>
        <member name="F:OpenDentBusiness.ElectronicClaimFormat.None">
            <summary>0-Not in database, but used in various places in program.</summary>
        </member>
        <member name="F:OpenDentBusiness.ElectronicClaimFormat.x837D_4010">
            <summary>1-The American standard through 12/31/11.</summary>
        </member>
        <member name="F:OpenDentBusiness.ElectronicClaimFormat.Renaissance">
            <summary>2-Proprietary format for Renaissance.</summary>
        </member>
        <member name="F:OpenDentBusiness.ElectronicClaimFormat.Canadian">
            <summary>3-CDAnet format version 4.</summary>
        </member>
        <member name="F:OpenDentBusiness.ElectronicClaimFormat.Dutch">
            <summary>4-CSV file adaptable for use in Netherlands.</summary>
        </member>
        <member name="F:OpenDentBusiness.ElectronicClaimFormat.x837D_5010_dental">
            <summary>5-The American standard starting on 1/1/12.</summary>
        </member>
        <member name="F:OpenDentBusiness.ElectronicClaimFormat.x837_5010_med_inst">
            <summary>6-Either professional or medical.  The distiction is stored at the claim level.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProviderSupplementalID">
            <summary>Used when submitting e-claims to some carriers who require extra provider identifiers.  Usage varies by company.  Only used as needed.  SiteNumber is the only one that is still used on 5010s.  The other 3 have been deprecated and replaced by NPI.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderSupplementalID.BlueCross">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderSupplementalID.BlueShield">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderSupplementalID.SiteNumber">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderSupplementalID.CommercialNumber">
            <summary>3</summary>
        </member>
        <member name="T:OpenDentBusiness.EclaimsCommBridge">
            <summary>Each clearinghouse can have a hard-coded comm bridge which handles all the communications of transfering the claim files to the clearinghouse/carrier.  Does not just include X12, but can include any format at all.</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.None">
            <summary>0-No comm bridge will be activated. The claim files will be created to the specified path, but they will not be uploaded.</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.WebMD">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.BCBSGA">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.Renaissance">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.ClaimConnect">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.RECS">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.Inmediata">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.AOS">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.PostnTrack">
            <summary>8</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.ITRANS">
            <summary>9 Canadian clearinghouse.</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.Tesia">
            <summary>10</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.MercuryDE">
            <summary>11</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.ClaimX">
            <summary>12</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.DentiCal">
            <summary>13</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.EmdeonMedical">
            <summary>14</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.Claimstream">
            <summary>15 Canadian clearinghouse.</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.NHS">
            <summary>16 UK clearinghouse.</summary>
        </member>
        <member name="F:OpenDentBusiness.EclaimsCommBridge.EDS">
            <summary>17</summary>
        </member>
        <member name="T:OpenDentBusiness.PrintSituation">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PrintSituation.Default">
            <summary>0- Covers any printing situation not listed separately.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrintSituation.Statement">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PrintSituation.LabelSingle">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PrintSituation.Claim">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PrintSituation.TPPerio">
            <summary>TP and perio</summary>
        </member>
        <member name="F:OpenDentBusiness.PrintSituation.Rx">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PrintSituation.LabelSheet">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PrintSituation.Postcard">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PrintSituation.Appointments">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PrintSituation.RxControlled">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PrintSituation.Receipt">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PrintSituation.RxMulti">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ReportFKType">
            <summary>Used as the enumeration of FieldValueType.ForeignKey.  Basically, this allows lists to be included in the parameter list.  The lists are those common short lists that are used so frequently.  The user can only select one from the list, and the primary key of that item will be used as the parameter.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReportFKType.None">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.ReportFKType.SchoolClass">
            <summary>The schoolclass table in the database. Used for dental schools.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReportFKType.SchoolCourse">
            <summary>The schoolcourse table in the database. Used for dental schools.</summary>
        </member>
        <member name="T:OpenDentBusiness.SignalType">
            <summary>The type of signal being sent.</summary>
        </member>
        <member name="F:OpenDentBusiness.SignalType.Button">
            <summary>0- Includes text messages.</summary>
        </member>
        <member name="F:OpenDentBusiness.SignalType.Invalid">
            <summary>1</summary>
        </member>
        <member name="T:OpenDentBusiness.InsBenefitType">
            <summary>Used in the benefit table.  Corresponds to X12 EB01.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsBenefitType.ActiveCoverage">
            <summary>0- Not usually used.  Would only be used if you are just indicating that the patient is covered, but without any specifics.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsBenefitType.CoInsurance">
            <summary>1- Used for percentages to indicate portion that insurance will cover.  When interpreting electronic benefit information, this is the opposite percentage, the percentage that the patient will pay after deductible.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsBenefitType.Deductible">
            <summary>2- The deductible amount.  Might be two entries if, for instance, deductible is waived on preventive.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsBenefitType.CoPayment">
            <summary>3- A dollar amount.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsBenefitType.Exclusions">
            <summary>4- Services that are simply not covered at all.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsBenefitType.Limitations">
            <summary>5- Covers a variety of limitations, including Max, frequency, fee reductions, etc.</summary>
        </member>
        <member name="T:OpenDentBusiness.BenefitTimePeriod">
            <summary>Used in the benefit table.  Corresponds to X12 EB06.</summary>
        </member>
        <member name="F:OpenDentBusiness.BenefitTimePeriod.None">
            <summary>0- A timeperiod is frequenly not needed.  For example, percentages.</summary>
        </member>
        <member name="F:OpenDentBusiness.BenefitTimePeriod.ServiceYear">
            <summary>1- The renewal month is not Jan.  In this case, we need to know the effective date so that we know which month the benefits start over in.</summary>
        </member>
        <member name="F:OpenDentBusiness.BenefitTimePeriod.CalendarYear">
            <summary>2- Renewal month is Jan.</summary>
        </member>
        <member name="F:OpenDentBusiness.BenefitTimePeriod.Lifetime">
            <summary>3- Usually used for ortho max.</summary>
        </member>
        <member name="F:OpenDentBusiness.BenefitTimePeriod.Years">
            <summary>4- Wouldn't be used alone.  Years would again be specified in the quantity field along with a number.</summary>
        </member>
        <member name="T:OpenDentBusiness.BenefitQuantity">
            <summary>Used in the benefit table in conjunction with an integer quantity.</summary>
        </member>
        <member name="F:OpenDentBusiness.BenefitQuantity.None">
            <summary>0- This is used a lot. Most benefits do not need any sort of quantity.</summary>
        </member>
        <member name="F:OpenDentBusiness.BenefitQuantity.NumberOfServices">
            <summary>1- For example, two exams per year</summary>
        </member>
        <member name="F:OpenDentBusiness.BenefitQuantity.AgeLimit">
            <summary>2- For example, 18 when flouride only covered to 18 y.o.</summary>
        </member>
        <member name="F:OpenDentBusiness.BenefitQuantity.Visits">
            <summary>3- For example, copay per 1 visit.</summary>
        </member>
        <member name="F:OpenDentBusiness.BenefitQuantity.Years">
            <summary>4- For example, pano every 5 years.</summary>
        </member>
        <member name="F:OpenDentBusiness.BenefitQuantity.Months">
            <summary>5- For example, BWs every 6 months.</summary>
        </member>
        <member name="T:OpenDentBusiness.BenefitCoverageLevel">
            <summary>Used in the benefit table.</summary>
        </member>
        <member name="F:OpenDentBusiness.BenefitCoverageLevel.None">
            <summary>0- Since this is a situational X12 field, we can also have none.  Typical for percentages and copayments.</summary>
        </member>
        <member name="F:OpenDentBusiness.BenefitCoverageLevel.Individual">
            <summary>1- The default for deductibles and maximums.</summary>
        </member>
        <member name="F:OpenDentBusiness.BenefitCoverageLevel.Family">
            <summary>2- For example, family deductible or family maximum.</summary>
        </member>
        <member name="T:OpenDentBusiness.EbenefitCategory">
            <summary>The X12 benefit categories.  Used to link the user-defined CovCats to the corresponding X12 category.</summary>
        </member>
        <member name="F:OpenDentBusiness.EbenefitCategory.None">
            <summary>0- Default.  Applies to all codes.</summary>
        </member>
        <member name="F:OpenDentBusiness.EbenefitCategory.General">
            <summary>1- X12: 30 and 35. All ADA codes except ortho.  D0000-D7999 and D9000-D9999</summary>
        </member>
        <member name="F:OpenDentBusiness.EbenefitCategory.Diagnostic">
            <summary>2- X12: 23. ADA D0000-D0999.  This includes DiagnosticXray.</summary>
        </member>
        <member name="F:OpenDentBusiness.EbenefitCategory.Periodontics">
            <summary>3- X12: 24. ADA D4000</summary>
        </member>
        <member name="F:OpenDentBusiness.EbenefitCategory.Restorative">
            <summary>4- X12: 25. ADA D2000-D2699, and D2800-D2999.</summary>
        </member>
        <member name="F:OpenDentBusiness.EbenefitCategory.Endodontics">
            <summary>5- X12: 26. ADA D3000</summary>
        </member>
        <member name="F:OpenDentBusiness.EbenefitCategory.MaxillofacialProsth">
            <summary>6- X12: 27. ADA D5900-D5999</summary>
        </member>
        <member name="F:OpenDentBusiness.EbenefitCategory.Crowns">
            <summary>7- X12: 36. Exclusive subcategory of restorative.  D2700-D2799</summary>
        </member>
        <member name="F:OpenDentBusiness.EbenefitCategory.Accident">
            <summary>8- X12: 37. ADA range?</summary>
        </member>
        <member name="F:OpenDentBusiness.EbenefitCategory.Orthodontics">
            <summary>9- X12: 38. ADA D8000-D8999</summary>
        </member>
        <member name="F:OpenDentBusiness.EbenefitCategory.Prosthodontics">
            <summary>10- X12: 39. ADA D5000-D5899 (removable), and D6200-D6899 (fixed)</summary>
        </member>
        <member name="F:OpenDentBusiness.EbenefitCategory.OralSurgery">
            <summary>11- X12: 40. ADA D7000</summary>
        </member>
        <member name="F:OpenDentBusiness.EbenefitCategory.RoutinePreventive">
            <summary>12- X12: 41. ADA D1000</summary>
        </member>
        <member name="F:OpenDentBusiness.EbenefitCategory.DiagnosticXRay">
            <summary>13- X12: 4. ADA D0200-D0399.  So this is like an optional category which is otherwise considered to be diagnosic.</summary>
        </member>
        <member name="F:OpenDentBusiness.EbenefitCategory.Adjunctive">
            <summary>14- X12: 28. ADA D9000-D9999</summary>
        </member>
        <member name="T:OpenDentBusiness.AccountType">
            <summary>Used in accounting for chart of accounts.</summary>
        </member>
        <member name="F:OpenDentBusiness.AccountType.Asset">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.AccountType.Liability">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.AccountType.Equity">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.AccountType.Income">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.AccountType.Expense">
            <summary>4</summary>
        </member>
        <member name="T:OpenDentBusiness.ToothPaintingType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ToothPaintingType.None">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothPaintingType.Extraction">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothPaintingType.Implant">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothPaintingType.RCT">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothPaintingType.PostBU">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothPaintingType.FillingDark">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothPaintingType.FillingLight">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothPaintingType.CrownDark">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothPaintingType.CrownLight">
            <summary>8</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothPaintingType.BridgeDark">
            <summary>9</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothPaintingType.BridgeLight">
            <summary>10</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothPaintingType.DentureDark">
            <summary>11</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothPaintingType.DentureLight">
            <summary>12</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothPaintingType.Sealant">
            <summary>13</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothPaintingType.Veneer">
            <summary>14</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothPaintingType.Watch">
            <summary>15</summary>
        </member>
        <member name="T:OpenDentBusiness.ToothInitialType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitialType.Missing">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitialType.Hidden">
            <summary>1 - Also hides the number.  This is now also allowed for primary teeth.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitialType.Primary">
            <summary>2 - Only used with 1-32.  "sets" this tooth as a primary tooth.  The result is that the primary tooth shows in addition to the perm, and that the letter shows in addition to the number.  It also does a Shift0 -12 and some other handy movements.  Even if this is set to true, there can be a separate entry for a missing primary tooth; this would be almost equivalent to not even setting the tooth as primary, but would also allow user to select the letter.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitialType.ShiftM">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitialType.ShiftO">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitialType.ShiftB">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitialType.Rotate">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitialType.TipM">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitialType.TipB">
            <summary>8</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitialType.Drawing">
            <summary>9 One segment of a drawing.</summary>
        </member>
        <member name="T:OpenDentBusiness.TerminalStatusEnum">
            <summary>Indicates at what point the patient is in the sequence. 0=standby, 1=PatientInfo, 2=Medical, 3=UpdateOnly.</summary>
        </member>
        <member name="F:OpenDentBusiness.TerminalStatusEnum.Standby">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.TerminalStatusEnum.PatientInfo">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.TerminalStatusEnum.Medical">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.TerminalStatusEnum.UpdateOnly">
            <summary>3. Only the patient info tab will be visible.  This is just to let patient up date their address and phone number.</summary>
        </member>
        <member name="T:OpenDentBusiness.QuestionType">
            <summary>0=FreeformText, 1=YesNoUnknown. Allows for later adding other types, 3=picklist, 4, etc</summary>
        </member>
        <member name="F:OpenDentBusiness.QuestionType.FreeformText">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.QuestionType.YesNoUnknown">
            <summary>1</summary>
        </member>
        <member name="T:OpenDentBusiness.SignalElementType">
            <summary>0=User,1=Extra,2=Message.</summary>
        </member>
        <member name="F:OpenDentBusiness.SignalElementType.User">
            <summary>0-To and From lists.  Not tied in any way to the users that are part of security.</summary>
        </member>
        <member name="F:OpenDentBusiness.SignalElementType.Extra">
            <summary>Typically used to insert "family" before "phone" signals.</summary>
        </member>
        <member name="F:OpenDentBusiness.SignalElementType.Message">
            <summary>Elements of this type show in the last column and trigger the message to be sent.</summary>
        </member>
        <member name="T:OpenDentBusiness.InsFilingCodeOldOld">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.Commercial_Insurance">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.SelfPay">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.OtherNonFed">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.PPO">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.POS">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.EPO">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.Indemnity">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.HMO_MedicareRisk">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.DMO">
            <summary>8</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.BCBS">
            <summary>9</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.Champus">
            <summary>10</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.Disability">
            <summary>11</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.FEP">
            <summary>12</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.HMO">
            <summary>13</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.LiabilityMedical">
            <summary>14</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.MedicarePartB">
            <summary>15</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.Medicaid">
            <summary>16</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.ManagedCare_NonHMO">
            <summary>17</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.OtherFederalProgram">
            <summary>18</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.SelfAdministered">
            <summary>19</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.Veterans">
            <summary>20</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.WorkersComp">
            <summary>21</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeOldOld.MutuallyDefined">
            <summary>22</summary>
        </member>
        <member name="T:OpenDentBusiness.ContactMethod">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ContactMethod.None">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactMethod.DoNotCall">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactMethod.HmPhone">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactMethod.WkPhone">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactMethod.WirelessPh">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactMethod.Email">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactMethod.SeeNotes">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactMethod.Mail">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactMethod.TextMessage">
            <summary>8</summary>
        </member>
        <member name="T:OpenDentBusiness.ReferralToStatus">
            <summary>0=None,1=Declined,2=Scheduled,3=Consulted,4=InTreatment,5=Complete</summary>
        </member>
        <member name="F:OpenDentBusiness.ReferralToStatus.None">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.ReferralToStatus.Declined">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.ReferralToStatus.Scheduled">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.ReferralToStatus.Consulted">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.ReferralToStatus.InTreatment">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.ReferralToStatus.Complete">
            <summary>5</summary>
        </member>
        <member name="T:OpenDentBusiness.StatementMode">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.StatementMode.Mail">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.StatementMode.InPerson">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.StatementMode.Email">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.StatementMode.Electronic">
            <summary>3</summary>
        </member>
        <member name="T:OpenDentBusiness.DeletedObjectType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.Appointment">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.ScheduleProv">
            <summary>1 - A schedule object.  Only provider schedules are tracked for deletion.</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.RecallPatNum">
            <summary>2 - When a recall row is deleted, this records the PatNum for which it was deleted.</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.RxPat">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.LabPanel">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.LabResult">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.DrugUnit">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.Medication">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.MedicationPat">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.Allergy">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.AllergyDef">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.Disease">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.DiseaseDef">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.ICD9">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.Provider">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.Pharmacy">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.Statement">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.Document">
            <summary>Deprecated</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObjectType.Recall">
            <summary>Deprecated</summary>
        </member>
        <member name="T:OpenDentBusiness.SmokingSnoMed">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.SmokingSnoMed._266927001">
            <summary>0 - UnknownIfEver</summary>
        </member>
        <member name="F:OpenDentBusiness.SmokingSnoMed._77176002">
            <summary>1 - SmokerUnknownCurrent</summary>
        </member>
        <member name="F:OpenDentBusiness.SmokingSnoMed._266919005">
            <summary>2 - NeverSmoked</summary>
        </member>
        <member name="F:OpenDentBusiness.SmokingSnoMed._8517006">
            <summary>3 - FormerSmoker</summary>
        </member>
        <member name="F:OpenDentBusiness.SmokingSnoMed._428041000124106">
            <summary>4 - CurrentSomeDay</summary>
        </member>
        <member name="F:OpenDentBusiness.SmokingSnoMed._449868002">
            <summary>5 - CurrentEveryDay</summary>
        </member>
        <member name="F:OpenDentBusiness.SmokingSnoMed._428061000124105">
            <summary>6 - LightSmoker</summary>
        </member>
        <member name="F:OpenDentBusiness.SmokingSnoMed._428071000124103">
            <summary>7 - HeavySmoker</summary>
        </member>
        <member name="T:OpenDentBusiness.ProblemStatus">
            <summary>0=Active, 1=Resolved, 2=Inactive</summary>
        </member>
        <member name="F:OpenDentBusiness.ProblemStatus.Active">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.ProblemStatus.Resolved">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.ProblemStatus.Inactive">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.EZTwainErrorCode">
            <summary>EZTwain Error Codes. 43 EZTEC_NO_PDF is because of a missing DLL.</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_NONE">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_START_TRIPLET_ERRS">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_CAP_GET">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_CAP_SET">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_DSM_FAILURE">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_DS_FAILURE">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_XFER_FAILURE">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_END_TRIPLET_ERRS">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_OPEN_DSM">
            <summary>8</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_OPEN_DEFAULT_DS">
            <summary>9</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_NOT_STATE_4">
            <summary>10</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_NULL_HCON">
            <summary>11</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_BAD_HCON">
            <summary>12</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_BAD_CONTYPE">
            <summary>13</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_BAD_ITEMTYPE">
            <summary>14</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_CAP_GET_EMPTY">
            <summary>15</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_CAP_SET_EMPTY">
            <summary>16</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_INVALID_HWND">
            <summary>17</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_PROXY_WINDOW">
            <summary>18</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_USER_CANCEL">
            <summary>19</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_RESOLUTION">
            <summary>20</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_LICENSE">
            <summary>21</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_JPEG_DLL">
            <summary>22</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_SOURCE_EXCEPTION">
            <summary>23</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_LOAD_DSM">
            <summary>24</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_NO_SUCH_DS">
            <summary>25</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_OPEN_DS">
            <summary>26</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_ENABLE_FAILED">
            <summary>27</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_BAD_MEMXFER">
            <summary>28</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_JPEG_GRAY_OR_RGB">
            <summary>29</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_JPEG_BAD_Q">
            <summary>30</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_BAD_DIB">
            <summary>31</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_BAD_FILENAME">
            <summary>32</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_FILE_NOT_FOUND">
            <summary>33</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_FILE_ACCESS">
            <summary>34</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_MEMORY">
            <summary>35</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_JPEG_ERR">
            <summary>36</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_JPEG_ERR_REPORTED">
            <summary>37</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_0_PAGES">
            <summary>38</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_UNK_WRITE_FF">
            <summary>39</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_NO_TIFF">
            <summary>40</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_TIFF_ERR">
            <summary>41</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_PDF_WRITE_ERR">
            <summary>42</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_NO_PDF">
            <summary>43</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_GIFCON">
            <summary>44</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_FILE_READ_ERR">
            <summary>45</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_BAD_REGION">
            <summary>46</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_FILE_WRITE">
            <summary>47</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_NO_DS_OPEN">
            <summary>48</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_DCXCON">
            <summary>49</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_NO_BARCODE">
            <summary>50</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_UNK_READ_FF">
            <summary>51</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_DIB_FORMAT">
            <summary>52</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_PRINT_ERR">
            <summary>53</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_NO_DCX">
            <summary>54</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_APP_BAD_CON">
            <summary>55</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_LIC_KEY">
            <summary>56</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_INVALID_PARAM">
            <summary>57</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_INTERNAL">
            <summary>58</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_LOAD_DLL">
            <summary>59</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_CURL">
            <summary>60</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_MULTIPAGE_OPEN">
            <summary>61</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_BAD_SHUTDOWN">
            <summary>62</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_DLL_VERSION">
            <summary>63</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_OCR_ERR">
            <summary>64</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_ONLY_TO_PDF">
            <summary>65</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_APP_TITLE">
            <summary>66</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_PATH_CREATE">
            <summary>67</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_LATE_LIC">
            <summary>68</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_PDF_PASSWORD">
            <summary>69</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_PDF_UNSUPPORTED">
            <summary>70</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_PDF_BAFFLED">
            <summary>71</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_PDF_INVALID">
            <summary>72</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_PDF_COMPRESSION">
            <summary>73</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_NOT_ENOUGH_PAGES">
            <summary>74</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_DIB_ARRAY_OVERFLOW">
            <summary>75</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_DEVICE_PAPERJAM">
            <summary>76</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_DEVICE_DOUBLEFEED">
            <summary>77</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_DEVICE_COMM">
            <summary>78</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_DEVICE_INTERLOCK">
            <summary>79</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_BAD_DOC">
            <summary>80</summary>
        </member>
        <member name="F:OpenDentBusiness.EZTwainErrorCode.EZTEC_OTHER_DS_OPEN">
            <summary>81</summary>
        </member>
        <member name="T:OpenDentBusiness.ListenerServiceType">
            <summary>Only applies to 15.4 and following.  This defines what and how the eConnector is running for a customer.</summary>
        </member>
        <member name="F:OpenDentBusiness.ListenerServiceType.ListenerService">
            <summary>0.  Default for people who had been using the listener prior to the 15.3 proxy listener.</summary>
        </member>
        <member name="F:OpenDentBusiness.ListenerServiceType.ListenerServiceProxy">
            <summary>1.  Opt-in required to use the proxy service.</summary>
        </member>
        <member name="F:OpenDentBusiness.ListenerServiceType.DisabledByHQ">
            <summary>2.  Customer is off by HQ's choice. This can only be undone by HQ.</summary>
        </member>
        <member name="F:OpenDentBusiness.ListenerServiceType.NoListener">
            <summary>3.  Customer listener is off and awaiting customer consent.</summary>
        </member>
        <member name="T:OpenDentBusiness.SortStrategy">
            <summary>Defines a user-friendly way of describing sorting strategies.  Intended for user selection for sorting grids.  Can easily be added to.</summary>
        </member>
        <member name="F:OpenDentBusiness.SortStrategy.NameAsc">
            <summary>0.</summary>
        </member>
        <member name="F:OpenDentBusiness.SortStrategy.NameDesc">
            <summary>1.</summary>
        </member>
        <member name="F:OpenDentBusiness.SortStrategy.PatNumAsc">
            <summary>2.</summary>
        </member>
        <member name="F:OpenDentBusiness.SortStrategy.PatNumDesc">
            <summary>3.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimSnapshotTrigger">
            <summary>The Enumeration value for which Claim Snapshot Trigger that will be stored.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSnapshotTrigger.ClaimCreate">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSnapshotTrigger.EConnector">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSnapshotTrigger.InsPayment">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.APIPermission">
            <summary>A permission that a FHIR APIKey possesses. The CRUD suffix (Create, Read, Update, Delete) matters here.
            Rows may be filtered by WebServiceHQ.CheckFHIRAPIKey() according to their suffix.</summary>
        </member>
        <member name="T:OpenDentBusiness.APIKeyStatus">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.APIKeyStatus.ReadEnabled">
            <summary>Able to perform read operations. By default, all keys have this status.</summary>
        </member>
        <member name="F:OpenDentBusiness.APIKeyStatus.WritePending">
            <summary>For an API key to have write permissions, it must first pay ODHQ a fee. This key can still perform read operations.</summary>
        </member>
        <member name="F:OpenDentBusiness.APIKeyStatus.WriteEnabled">
            <summary>Able to perform read and write operations.</summary>
        </member>
        <member name="F:OpenDentBusiness.APIKeyStatus.WriteDisabled">
            <summary>ODHQ has purposely turned off write permissions for this key. This key can still perform read operations.</summary>
        </member>
        <member name="F:OpenDentBusiness.APIKeyStatus.Disabled">
            <summary>Read and write operations disabled.</summary>
        </member>
        <member name="T:OpenDentBusiness.OAuthApplicationNames">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.OAuthApplicationNames.Dropbox">
            <summary>0</summary>
        </member>
        <member name="T:OpenDentBusiness.DataStorageType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DataStorageType.InDatabase">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.DataStorageType.LocalAtoZ">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.DataStorageType.DropboxAtoZ">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.Lans">
            <summary>Handles database commands for the language table in the database.</summary>
        </member>
        <member name="P:OpenDentBusiness.Lans.HList">
            <summary>key=ClassType+English.  Value =Language object.</summary>
        </member>
        <member name="M:OpenDentBusiness.Lans.FillCache(System.Data.DataTable)">
            <summary>Refreshed automatically to always be kept current with all phrases, regardless of whether there are any entries in LanguageForeign table.</summary>
        </member>
        <member name="M:OpenDentBusiness.Lans.g(System.String,System.String)">
            <summary>Converts a string to the current language.</summary>
        </member>
        <member name="M:OpenDentBusiness.Lans.g(System.Object,System.String)">
            <summary>Converts a string to the current language.</summary>
        </member>
        <member name="M:OpenDentBusiness.Lans.ConvertString(System.String,System.String)">
            <summary>This is where all the action happens.  This method is used by all the others.
            This is always run on the client rather than the server, unless, of course, it's being called from the server.
            If it inserts an item into the db table, it will also add it to the local cache, but will not trigger a refresh on both ends.</summary>
        </member>
        <member name="M:OpenDentBusiness.Lans.Insert(OpenDentBusiness.Language)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Lans.DeleteItems(System.String,System.Collections.Generic.List{System.String})">
            <summary>No need to refresh after this.</summary>
        </member>
        <member name="M:OpenDentBusiness.Lans.GetListCat">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Lans.GetListForCat(System.String)">
            <summary>Only used in translation tool to get list for one category</summary>
        </member>
        <member name="M:OpenDentBusiness.Lans.GetShortDateTimeFormat">
            <summary>This had to be added because SilverLight does not allow globally setting the current culture format.</summary>
        </member>
        <member name="M:OpenDentBusiness.Lans.GetShortTimeFormat(System.Globalization.CultureInfo)">
            <summary>Gets a short time format for displaying in appt and schedule along the sides. Pass in a clone of the current culture; it will get altered. Returns a string format.</summary>
        </member>
        <member name="M:OpenDentBusiness.Lans.LoadTranslationsFromTextFile(System.String)">
            <summary>This is one rare situation where queries can be passed.  But it will always fail for client web and server web.</summary>
        </member>
        <member name="M:OpenDentBusiness.AccountModules.GetAll(System.Int64,System.Boolean,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>If intermingled=true, the patnum of any family member will get entire family intermingled.</summary>
        </member>
        <member name="M:OpenDentBusiness.AccountModules.GetStatementDataSet(OpenDentBusiness.Statement,System.Boolean)">
            <summary>If intermingled=true the patnum of any family member will get entire family intermingled.  toDate should not be Max, or PayPlan amort will include too many charges.  The 10 days will not be added to toDate until creating the actual amortization schedule.</summary>
        </member>
        <member name="M:OpenDentBusiness.AccountModules.GetPayPlanAmort(System.Int64)">
            <summary>Gets a table of charges mixed with payments to show in the payplan edit window.  Parameters: 0:payPlanNum</summary>
        </member>
        <member name="M:OpenDentBusiness.AccountModules.GetSuperFamAccount(OpenDentBusiness.Statement,System.Boolean)">
            <summary>Returns a data set that is designed for a super family statement.
            This means that GetAccount will be run for every guarantor that HasSuperBilling within the super family.</summary>
        </member>
        <member name="M:OpenDentBusiness.AccountModules.GetAccount(System.Int64,OpenDentBusiness.Statement,System.Boolean)">
            <summary>Also gets the patient table, which has one row for each family member. Also currently runs aging.  Also gets payplan table.  
            If stmt.StatementNum is not zero, then it's for a statement, and the resulting payplan table looks totally different.  
            If stmt.IsInvoice or stmt.StatementType==StmtType.LimitedStatement, this does some extra filtering.</summary>
        </member>
        <member name="M:OpenDentBusiness.AccountModules.GetAccount(System.Int64,System.DateTime,System.DateTime,System.Boolean,System.Boolean,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,OpenDentBusiness.Patient,OpenDentBusiness.Family,System.Decimal@,System.Decimal@,OpenDentBusiness.Statement,System.Boolean)">
            <summary>Also gets the patient table, which has one row for each family member. Also currently runs aging.  Also gets payplan table.  
            If StatementNum is not zero, then it's for a statement, and the resulting payplan table looks totally different.  
            If IsInvoice or statementType==StmtType.LimitedStatement, this does some extra filtering.
            This method cannot be called from the Middle Tier as long as it uses out parameters.
            If !isComputeAging (ONLY if AgingIsEnterprise and printing/sending statements), we assume that aging has been run for all pats for the current
            date and doesn't need to run again for this fam.  Used so aging doesn't run for each statement after we just ran it for all patients when the
            statement list was generated.  We use DateLastAging to determine if computing aging is necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.AccountModules.GetPayPlans(System.Data.DataTable,System.Data.DataTable,System.Data.DataTable,System.Data.DataTable,OpenDentBusiness.Family,OpenDentBusiness.Patient)">
            <summary>Gets payment plans for the family.  This defines what will show in the PayPlans grid in the account module.
            RawPay will include any paysplits for anyone in the family plus any paysplits for payment plans being paid by someone outside the family. </summary>
        </member>
        <member name="M:OpenDentBusiness.AccountModules.GetPayPlansForStatement(System.Data.DataTable,System.Data.DataTable,System.DateTime,System.DateTime,System.Boolean,System.Data.DataTable,OpenDentBusiness.Family,OpenDentBusiness.Patient,System.Decimal@,OpenDentBusiness.StmtType)">
            <summary>Gets payment plans for the family.  RawPay will include any paysplits for anyone in the family plus splits for payment plans being 
            paid by someone outside the family.  fromDate and toDate are only used if isForStatement.  From date lets us restrict how many
            amortization items to show.  toDate is typically 10 days in the future.  This method cannot be called by the Middle Tier due to its use of an
            out parameter.  LimitedStatements will return an empty DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.AccountModules.GetPatientTable(OpenDentBusiness.Family,System.Collections.Generic.List{System.Data.DataRow},System.Boolean,OpenDentBusiness.StmtType)">
            <summary>All rows for the entire family are getting passed in here.  (Except Invoices)  The rows have already been sorted.  Balances have not been computed, and we will do that here, separately for each patient (except invoices).</summary>
        </member>
        <member name="M:OpenDentBusiness.AccountModules.GetApptTable(OpenDentBusiness.Family,System.Boolean,System.Int64)">
            <summary>Future appointments.</summary>
        </member>
        <member name="M:OpenDentBusiness.AccountModules.SortRowsForStatmentPrinting(System.Data.DataRow,System.Data.DataRow)">
            <summary>Used to resort data rows used for printing main account grid on statements.</summary>
        </member>
        <member name="T:OpenDentBusiness.AccountLineComparer">
            <summary>The supplied DataRows must include the following columns: ProcNum,DateTime,(Priority not needed),ToothRange,ToothNum,ProcCode. This sorts all objects in Account module based on their types, dates, toothrange, toothnum, and proccode.  Times are always ignored if present.</summary>
        </member>
        <member name="M:OpenDentBusiness.AccountLineComparer.Compare(System.Data.DataRow,System.Data.DataRow)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.CreateApptForNewPatient(OpenDentBusiness.Patient,OpenDentBusiness.Operatory,System.DateTime,System.DateTime,System.String,System.Collections.Generic.List{OpenDentBusiness.Schedule})">
            <summary>Creates and inserts a "new patient" appointment using the information passed in.  Validation must be done prior to calling this.
            Also, does not flag the patient as prospective.  That must be done outside this method as well.
            Used by multiple applications so be very careful when changing this method.  E.g. Open Dental and Web Sched.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetForPeriod(System.DateTime,System.DateTime)">
            <summary>Gets a list of appointments for a period of time in the schedule, whether hidden or not.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetForPeriodList(System.DateTime,System.DateTime)">
            <summary>Gets a List&lt;Appointment&gt; of appointments for a period of time in the schedule, whether hidden or not.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.RefreshUnsched(System.String,System.Int64,System.Int64,System.Boolean,System.Int64)">
            <summary>Gets list of unscheduled appointments.  Allowed orderby: status, alph, date</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.RefreshASAP(System.Int64,System.Int64,System.Int64)">
            <summary>Gets list of asap appointments.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.RefreshPlannedTracker(System.String,System.Int64,System.Int64,System.Int64)">
            <summary>Allowed orderby: status, alph, date</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetForPat(System.Int64)">
            <summary>Returns all appointments for the given patient, ordered from earliest to latest.  Used in statements, appt cards, OtherAppts window, etc.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetListForPat(System.Int64)">
            <summary>Gets all appointments for a single patient ordered by AptDateTime.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetOneApt(System.Int64)">
            <summary>Gets one appointment from db.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetScheduledPlannedApt(System.Int64)">
            <summary>Gets an appointment (of any status) from the db with this NextAptNum (FK to the AptNum of a planned appt).</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetFutureSchedApts(System.Int64)">
            <summary>Gets a list of all future appointments which are either sched or ASAP.  Ordered by dateTime</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetFutureSchedApts">
            <summary>Gets a list of all future appointments which are either sched or ASAP for all patients.  Ordered by dateTime</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetChangedSinceAptNums(System.DateTime,System.DateTime)">
            <summary>Used if the number of records are very large, in which case using GetChangedSince is not the preffered route due to memory problems caused by large recordsets. </summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetMultApts(System.Collections.Generic.List{System.Int64})">
            <summary>Used along with GetChangedSinceAptNums</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetAptDateTimeForAptNums(System.Collections.Generic.List{System.Int64})">
            <summary>Gets AptNums and AptDateTimes to use for task sorting with the TaskUseApptDate pref.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetUAppointProcs(System.Collections.Generic.List{OpenDentBusiness.Appointment})">
            <summary>A list of strings.  Each string corresponds to one appointment in the supplied list.  Each string is a comma delimited list of codenums of the procedures attached to the appointment.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.InsertIncludeAptNum(OpenDentBusiness.Appointment,System.Boolean)">
            <summary>Set includeAptNum to true only in rare situations.  Like when we are inserting for eCW.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.Update(OpenDentBusiness.Appointment,OpenDentBusiness.Appointment)">
            <summary>Updates only the changed columns and returns the number of rows affected.  Supply an oldApt for comparison.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.UpdateInsPlansForPat(System.Int64,System.Int64,System.Int64)">
            <summary>Updates InsPlan1 and InsPlan2 for every appointment that isn't completed, broken, or a patient note for the patient passed in.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.UpdateProcDescriptForAppts(System.Collections.Generic.List{OpenDentBusiness.Appointment})">
            <summary>Updates the ProcDesript and ProcsColored to be current for every appointment passed in.
            This logic is also in FormApptEdit.SetProcDescript().  Make any changes there as well.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.ProcIsToday(OpenDentBusiness.Appointment[],OpenDentBusiness.Procedure)">
            <summary>Used in Chart module to test whether a procedure is attached to an appointment with today's date. The procedure might have a different date if still TP status.  ApptList should include all appointments for this patient. Does not make a call to db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetConfirmList(System.DateTime,System.DateTime,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Used in FormConfirmList.  The assumption is made that showRecall and showNonRecall will not both be false.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetAddrTable(System.Collections.Generic.List{System.Int64})">
            <summary>Used in Confirm list to just get addresses.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.SetConfirmed(System.Int64,System.Int64)">
            <summary>The newStatus will be a DefNum or 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.SetPattern(System.Int64,System.String)">
            <summary>Sets the new pattern for an appointment.  This is how resizing is done.  Must contain only / and X, with each char representing 5 minutes.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.SetAptStatus(System.Int64,OpenDentBusiness.ApptStatus)">
            <summary>Use to send to unscheduled list, to set broken, etc.  Do not use to set complete.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.SetAptStatusComplete(System.Int64,System.Int64,System.Int64)">
            <summary>The plan nums that are passed in are simply saved in columns in the appt.  Those two fields are used by approximately one office right now.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.RefreshPeriod(System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.RefreshPeriod(System.DateTime,System.DateTime,System.Int64,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>Set clinicNum to 0 to return 'all' clinics.  Otherwise, filters the data set on the clinic num passed in.  
            Currently only filters GetPeriodEmployeeSchedTable()
            Any ApptNums within listPinApptNums will get forcefully added to the DataSet.
            If listOpNums and listProvNums are null then we do not filter the tableAppt based on visible ops and provs for the appt view.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.RefreshOneApt(System.Int64,System.Boolean,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetPeriodApptsTable(System.DateTime,System.DateTime,System.Int64,System.Boolean,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64})">
            <summary>If aptnum is specified, then the dates are ignored.  If getting data for one planned appt, then pass isPlanned=1.  
            The times of the dateStart and dateEnd are ignored.  This changes which procedures are retrieved.
            Any ApptNums within listPinApptNums will get forcefully added to the DataTable.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetApptFields(System.Data.DataTable)">
            <summary>Pass in the appointments table so that we can search based on appointments.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetApptFieldsByApptNums(System.Collections.Generic.List{System.Int64})">
            <summary>Only called from above method, but must be public for remoting.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetPatFields(System.Collections.Generic.List{System.Int64})">
            <summary>Returns a DataTable with the following columns; PatNum, FieldName, FieldValue.
            This method used to get passed an entire DataTable (the apptTable) so that is why it resides within Appointments.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetApptFields(System.Int64)">
            <summary>Pass in one aptNum</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetApptEdit(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.CompareRows(System.Data.DataRow,System.Data.DataRow)">
            <summary>The supplied DataRows must include the following columns: attached,Priority,ToothRange,ToothNum,ProcCode. This sorts all objects in Chart module based on their dates, times, priority, and toothnum.  For time comparisons, procs are not included.  But if other types such as comm have a time component in ProcDate, then they will be sorted by time as well.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.Delete(System.Int64)">
            <summary>Deletes the apt and cleans up objects pointing to this apt.  If the patient is new, sets DateFirstVisit.
            Updates procedurelog.ProcDate to today for procedures attached to the appointment if the ProcDate is invalid.
            Updates procedurelog.PlannedAptNum (for planned apts) or procedurelog.AptNum (for all other AptStatuses); sets to 0.
            Updates labcase.PlannedAptNum (for planned apts) or labcase.AptNum (for all other AptStatuses); sets to 0.
            Deletes any rows in the plannedappt table with this AptNum.
            Updates appointment.NextAptNum (for planned apts) of any apt pointing to this planned apt; sets to 0;
            Deletes any rows in the apptfield table with this AptNum.
            Makes an entry in the deletedobject table.
            Deletes ApptComm entries that were created for this appointment.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.Delete(System.Collections.Generic.List{System.Int64})">
            <summary>Deletes the apts and cleans up objects pointing to these apts.  If the patient is new, sets DateFirstVisit.
            Updates procedurelog.ProcDate to today for procedures attached to the appointment if the ProcDate is invalid.
            Updates procedurelog.PlannedAptNum (for planned apts) or procedurelog.AptNum (for all other AptStatuses); sets to 0.
            Updates labcase.PlannedAptNum (for planned apts) or labcase.AptNum (for all other AptStatuses); sets to 0.
            Deletes any rows in the plannedappt table with this AptNum.
            Updates appointment.NextAptNum (for planned apts) of any apt pointing to this planned apt; sets to 0;
            Deletes any rows in the apptfield table with this AptNum.
            Makes an entry in the deletedobject table.
            Deletes ApptComm entries that were created for this appointment.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.CalculatePattern(System.Int64,System.Int64,System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>Returns the time pattern after combining all codes together for the providers passed in.
            If make5minute is false, then result will be in 10 or 15 minute blocks and will need a later conversion step before going to db.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetApptTimePatternFromProcPatterns(System.Collections.Generic.List{System.String})">
            <summary>Takes all time patterns passed in and fuses them into one final time pattern that should be used on appointments.
            Returns "/" if a null or empty list of patterns is passed in (preserves old behavior).</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetMobileBitmap(System.DateTime,System.Int64)">
            <summary>Only called from the mobile server, not from any workstation.  Pass in an apptViewNum of 0 for now.  We might use that parameter later.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetAppointmentsForPeriod(System.DateTime,System.DateTime,OpenDentBusiness.ApptStatus[])">
            <summary>Returns a list of appointments that are scheduled between start date and end datetime. 
            The end of the appointment must also be in the period.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetAppointmentsStartingWithinPeriod(System.DateTime,System.DateTime,OpenDentBusiness.ApptStatus[])">
            <summary>Returns a list of appointments that are scheduled between start date and end date.
            This method only considers the AptDateTime and does not check to see if the appointment </summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetAppointmentsForOpsByPeriod(System.Collections.Generic.List{System.Int64},System.DateTime,System.DateTime)">
            <summary>Gets all appointments scheduled in the operatories passed in that fall within the start and end dates.
            Does not currently consider the time portion of the DateTimes passed in.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetAppointmentsForProcs(System.Collections.Generic.List{OpenDentBusiness.Procedure})">
            <summary>Gets all appointments associated to the procedures passed in.  Returns an empty list if no procedure is linked to an appt.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetSchedApptsForPeriod(System.DateTime,System.DateTime)">
            <summary>Returns a list of appointments that are scheduled (have scheduled or ASAP status) to start between start date and end date.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetProvNumFromLastApptForPat(System.Int64)">
            <summary>Gets the ProvNum for the last completed or scheduled appointment for a patient. If none, returns 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetApptSearchProviderScheduleForProvidersAndDate(System.Collections.Generic.List{System.Int64},System.DateTime,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.Schedule},System.Collections.Generic.List{OpenDentBusiness.Appointment})">
            <summary>Uses the input parameters to construct a List&lt;ApptSearchProviderSchedule&gt;. It is written to reduce the number of queries to the database.</summary>
             <param name="listProvNums">PrimaryKeys to Provider.</param>
             <param name="dateScheduleStart">The date that will start looking for provider schedule information.</param>
             <param name="dateScheduleStop">The date that will stop looking for provider schedule information.</param>
             <param name="listSchedules">A List of Schedules containing all of the schedules for the given day, or possibly more. 
             Intended to be all schedules between search start date and search start date plus 2 years. This is to reduce queries to DB.</param>
             <param name="listAppointments">A List of Appointments containing all of the schedules for the given day, or possibly more. 
             Intended to be all Appointments between search start date and search start date plus 2 years. This is to reduce queries to DB.</param>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetApptSearchProviderScheduleForProvidersAndDate(System.Collections.Generic.List{System.Int64},System.DateTime,System.Collections.Generic.List{OpenDentBusiness.Schedule},System.Collections.Generic.List{OpenDentBusiness.Appointment})">
            <summary>Uses the input parameters to construct a List&lt;ApptSearchProviderSchedule&gt;. It is written to reduce the number of queries to the database.</summary>
             <param name="ProviderNums">PrimaryKeys to Provider.</param>
             <param name="ScheduleDate">The date to construct the schedule for.</param>
             <param name="ScheduleList">A List of Schedules containing all of the schedules for the given day, or possibly more. 
             Intended to be all schedules between search start date and search start date plus 2 years. This is to reduce queries to DB.</param>
             <param name="AppointmentList">A List of Appointments containing all of the schedules for the given day, or possibly more. 
             Intended to be all Appointments between search start date and search start date plus 2 years. This is to reduce queries to DB.</param>
        </member>
        <member name="M:OpenDentBusiness.Appointments.HasOutsandingAppts(System.Int64,System.Boolean)">
            <summary>Returns true if the patient has any broken appointments, future appointments, unscheduled appointments, or unsched planned appointments.  
            This adds intelligence when user attempts to schedule an appointment by only showing the appointments for the patient when needed rather than always.
            Setting exludePlannedAppts to true will remove them from the search.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetDateLastVisit">
            <summary>Returns a dictionary containing the last completed appointment date of each patient.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetAptsForPats(System.DateTime,System.DateTime)">
            <summary>Returns a dictionary containing all information of every scheduled, completed, and ASAP appointment made from all non-deleted patients.  Usually used for bridges.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetCodeNumsAllApts">
            <summary>Get a dictionary of all procedure codes for all scheduled, ASAP, and completed appointments</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.FillAppointmentForRecall(OpenDentBusiness.Appointment,OpenDentBusiness.Recall,System.Collections.Generic.List{OpenDentBusiness.Recall},OpenDentBusiness.Patient,System.Collections.Generic.List{System.String},System.Collections.Generic.List{OpenDentBusiness.InsPlan},System.Collections.Generic.List{OpenDentBusiness.InsSub})">
            <summary>Fills an appointment passed in with all appropriate procedures for the recall passed in.  
            It's up to the calling class to then place the appointment on the pinboard or schedule.  
            The appointment will be inserted into the database in this method so it's important to delete it if the appointment doesn't get scheduled.  
            Returns the list of procedures that were created for the appointment so that they can be displayed to Orion users.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.Sync(System.Collections.Generic.List{OpenDentBusiness.Appointment},System.Collections.Generic.List{OpenDentBusiness.Appointment},System.Int64,System.Int64)">
            <summary>Inserts, updates, or deletes db rows to match listNew.  No need to pass in userNum, it's set before remoting role check and passed to
            the server if necessary.  Doesn't create ApptComm items, but will delete them.  If you use Sync, you must create new Apptcomm items.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.ClearFkey(System.Int64)">
            <summary>Zeros securitylog FKey column for rows that are using the matching aptNum as FKey and are related to Appointment.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Appointment table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.ClearFkey(System.Collections.Generic.List{System.Int64})">
            <summary>Zeros securitylog FKey column for rows that are using the matching aptNums as FKey and are related to Appointment.
            Permtypes are generated from the AuditPerms property of the CrudTableAttribute within the Appointment table type.</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointments.GetApptConfirmationStatus(System.Int64)">
            <summary>Gets the appt confirmation status for a single appt.</summary>
        </member>
        <member name="T:OpenDentBusiness.ApptSearchProviderSchedule">
            <summary>Holds information about a provider's Schedule. Not actual database table.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptSearchProviderSchedule.ProviderNum">
            <summary>FK to Provider</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptSearchProviderSchedule.SchedDate">
            <summary>Date of the ProviderSchedule.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptSearchProviderSchedule.ProvSchedule">
            <summary>This contains a bool for each 5 minute block throughout the day. True means provider is scheduled to work, False means provider is not scheduled to work.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptSearchProviderSchedule.ProvBar">
            <summary>This contains a bool for each 5 minute block throughout the day. True means available, False means something is scheduled there or the provider is not scheduled to work.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptSearchProviderSchedule.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:OpenDentBusiness.ApptSearchOperatorySchedule">
            <summary>Holds information about a operatory's Schedule. Not actual database table.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptSearchOperatorySchedule.OperatoryNum">
            <summary>FK to Operatory</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptSearchOperatorySchedule.SchedDate">
            <summary>Date of the OperatorySchedule.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptSearchOperatorySchedule.OperatorySched">
            <summary>This contains a bool for each 5 minute block throughout the day. True means operatory is open, False means operatory is in use.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptSearchOperatorySchedule.ProviderNums">
            <summary>List of providers 'allowed' to work in this operatory.</summary>
        </member>
        <member name="M:OpenDentBusiness.BenefitLogic.ComputeRenewDate(System.DateTime,System.Int32)">
            <summary>This function is unit tested for accuracy because it has been a repeated source of bugs in the past.</summary>
        </member>
        <member name="M:OpenDentBusiness.ChartModules.CompareChartRows(System.Data.DataRow,System.Data.DataRow)">
            <summary>The supplied DataRows must include the following columns: ProcNum,ProcDate,Priority,ToothRange,ToothNum,ProcCode. This sorts all objects in Chart module based on their dates, times, priority, and toothnum.  For time comparisons, procs are not included.  But if other types such as comm have a time component in ProcDate, then they will be sorted by time as well.</summary>
        </member>
        <member name="M:OpenDentBusiness.ChartModuleComponentsToLoad.#ctor">
            <summary>All showComponents are set to true.</summary>
        </member>
        <member name="M:OpenDentBusiness.ChartModuleComponentsToLoad.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DataCore">
            <summary>You don't generally use this class.  Use Db instead except in special situations.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataCore.GetTable(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DataCore.GetTableLow(System.String)">
            <summary>Only used if using the server component.  This is used for queries written by the user.  It uses the user with lower privileges  to prevent injection attack.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataCore.NonQ(System.String,System.Boolean,OpenDentBusiness.OdSqlParameter[])">
            <summary>This query is run with full privileges.  This is for commands generated by the main program, and the user will not have access for injection attacks.  Result is usually number of rows changed, or can be insert id if requested.  WILL NOT RETURN CORRECT PRIMARY KEY if the query specifies the primary key.</summary>
        </member>
        <member name="M:OpenDentBusiness.DataCore.GetScalar(System.String)">
            <summary>Get one single value.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatientLogic.GetNameLF(System.String,System.String,System.String,System.String)">
            <summary>Returns a formatted name, Last, First.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatientLogic.DateToAgeString(System.DateTime)">
            <summary>Converts a date to an age.  Blank if over 115.  Only used where it's important to show the month, too.  Month will only show if less than 18yo.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatientLogic.DateToAgeString(System.DateTime,System.DateTime)">
            <summary>Converts a date to an age.  Blank if over 115.  Only used where it's important to show the month, too.  Month will only show if less than 18yo.
            Use dateTo=DateTime.Now for current age.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureLogic.CompareProcedures(System.Data.DataRow,System.Data.DataRow)">
            <summary>The supplied DataRows must include the following columns: ProcStatus(optional),Priority(optional),ToothRange,ToothNum,ProcCode.  This sorts procedures based on priority, then tooth number, then procCode.  It does not care about dates or status.  Currently used in Account module, appointments, and Chart module sorting.  TP uses Procedures.ProcedureComparer.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureLogic.CompareProcedures(OpenDentBusiness.Procedure,OpenDentBusiness.Procedure)">
            <summary>Compares two procedures and returns the order they should appear based on status, priority, toothrange, toothnum, then proccode.  
            Uses the same logic as the other CompareProcedures but takes Procedure objects instead of DataRows.  
            Only used for the Appointment Edit window currently.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcNotes.GetIsProcNoteSigned(System.Collections.Generic.List{System.Int64})">
            <summary>Returns a list of ProcNums from listProcNums where the most recent ProcNote for the proc is signed.</summary>
        </member>
        <member name="M:OpenDentBusiness.TelephoneNumbers.ReFormat(System.String)">
            <summary>Used in the tool that loops through the database fixing telephone numbers.  Also used in the patient import from XML tool, carrier edit window, and PT Dental bridge.</summary>
        </member>
        <member name="M:OpenDentBusiness.TelephoneNumbers.AutoFormat(System.String)">
            <summary>reformats initial entry with each keystroke</summary>
        </member>
        <member name="M:OpenDentBusiness.TelephoneNumbers.FormatNumbersOnly(System.String)">
            <Summary>Also truncates if more than two non-numbers in a row.  This is to avoid the notes that can follow phone numbers.</Summary>
        </member>
        <member name="M:OpenDentBusiness.TelephoneNumbers.FormatNumbersExactTen(System.String)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Tooth">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.#ctor">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.IsAnterior(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.IsAnterior(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.IsPosterior(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.IsPosterior(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.IsMolar(System.String)">
            <summary>toothNum gets validated here.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.IsMolar(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.IsSecondMolar(System.String)">
            <summary>toothNum gets validated here. Used for FGC insurance substitutions.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.IsPreMolar(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.IsPreMolar(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.GetToothLabel(System.String,OpenDentBusiness.ToothNumberingNomenclature)">
            <summary>Sometimes validated by IsValidDB before coming here, otherwise an invalid toothnum .  This should be run on all displayed tooth numbers. It will handle checking for whether user is using international tooth numbers.  All tooth numbers are passed in american values until the very last moment.  Just before display, the string is converted using this method.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.GetToothLabelGraphic(System.String,OpenDentBusiness.ToothNumberingNomenclature)">
            <summary>Identical to GetToothLabel, but just used in the 3D tooth chart because with Palmer, we don't want the UR, UL, etc.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.GetToothId(System.String)">
            <summary>MUST be validated by IsValidEntry before coming here.  All user entered toothnumbers are run through this method which automatically checks to see if using international toothnumbers.  So the procedurelog class will always contain the american toothnum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.GetQuadrant(System.String)">
            <summary>Get quadrant returns "UR" for teeth 1-8, "LR" for 25-32, "UL" for 9-16, and "LL" for 17-24.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.GetSextant(System.String,OpenDentBusiness.ToothNumberingNomenclature)">
            <summary>For nomenclature, use pref UseInternationalToothNumbers, or a hard coded value.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.ToInternat(System.String)">
            <summary>Sometimes validated by IsValidDB before coming here, otherwise an invalid toothnum .  This should be run on all displayed tooth numbers. It will handle checking for whether user is using international tooth numbers.  All tooth numbers are passed in american values until the very last moment.  Just before display, the string is converted using this method.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.FromInternat(System.String)">
            <summary>MUST be validated by IsValidEntry before coming here.  All user entered toothnumbers are run through this method which automatically checks to see if using international toothnumbers.  So the procedurelog class will always contain the american toothnum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.FormatRangeForDisplay(System.String)">
            <summary>The supplied toothNumbers will be a series of tooth numbers separated by commas.  They will be in american format..  For display purposes, ranges will use dashes, and international numbers will be used.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.FormatRangeForDb(System.String)">
            <summary>Takes a user entered string and validates/formats it for the database.  Throws an ApplicationException if any formatting errors.  User string can contain spaces, dashes, and commas, too.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.IsValidEntry(System.String)">
            <summary>Used every time user enters toothNum in procedure box. Must be followed with FromInternat. These are the *ONLY* methods that are designed to accept user input.  Can also handle international toothnum</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.IsValidDB(System.String)">
            <summary>Intended to validate toothNum coming in from database. Will not handle any international tooth nums since all database teeth are in US format.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.IsSuperNum(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.ToInt(System.String)">
            <summary>Returns 1-32, or -1.  The toothNum should be validated before coming here, but it won't crash if invalid.  Primary or perm are ok.  Empty and null are also ok.  Supernumerary are also ok.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.FromInt(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.IsPrimary(System.String)">
            <summary>Returns true if A-T or AS-TS.  Otherwise, returns false.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.PermToPri(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.PermToPri(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.PriToPerm(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.SupToPerm(System.String)">
            <summary>Converts supernumerary teeth to permanent.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.ToOrdinal(System.String)">
            <summary>Used to put perm and pri into a single array.  1-32 is perm.  33-52 is pri.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.FromOrdinal(System.Int32)">
            <summary>Assumes ordinal is valid.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.IsMaxillary(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.IsMaxillary(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.SurfTidyForDisplay(System.String,System.String)">
            <summary>Handles direct user input and tidies according to rules.  ToothNum might be empty, and a tidy should still be attempted.  Otherwise, toothNum must be valid.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.SurfTidyForClaims(System.String,System.String)">
            <summary>Converts the database value to a claim value.  Special handling for V surfaces.  ToothNum must be valid.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.SurfTidyFromDisplayToDb(System.String,System.String)">
            <summary>Takes display string and converts it into Db string.  ToothNum does not need to be valid.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.SurfTidyFromDbToDisplay(System.String,System.String)">
            <summary>Takes surfaces from Db and converts them to appropriate culture for display.  Only Canada supported so far.  ToothNum does not need to be valid since minimal manipulation here.</summary>
        </member>
        <member name="M:OpenDentBusiness.Tooth.PerioShiftMm(System.String)">
            <summary>This will be deleted as soon as it's no longer in use by DirectX chart.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothNumberingNomenclature.Universal">
            <summary>0- American</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothNumberingNomenclature.FDI">
            <summary>1- International</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothNumberingNomenclature.Haderup">
            <summary>2- </summary>
        </member>
        <member name="F:OpenDentBusiness.ToothNumberingNomenclature.Palmer">
            <summary>3- Ortho</summary>
        </member>
        <member name="T:OpenDentBusiness.ToothComparer">
            <summary>A generic comparison that puts primary teeth after perm teeth.</summary>
        </member>
        <member name="M:OpenDentBusiness.ToothComparer.Compare(System.String,System.String)">
            <summary>A generic comparison that puts primary teeth after perm teeth.</summary>
        </member>
        <member name="T:OpenDentBusiness.Userods">
            <summary>(Users OD)</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.RefreshCache">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetAll">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetUser(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetUsers(System.Collections.Generic.List{System.Int64})">
            <summary>Returns a list of users from the list of usernums.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetUsers">
            <summary>Returns a list of all non-hidden users.  Does not include CEMT users.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetUsers(System.Boolean)">
            <summary>Returns a list of all non-hidden users.  Set includeCEMT to true if you want CEMT users included.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetUsersByClinic(System.Int64)">
            <summary>Returns a list of all non-hidden users.  Does not include CEMT users.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetUsersNoCache">
            <summary>Returns a list of all users without using the local cache.  Useful for multithreaded connections.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetUsersForCEMT">
            <summary>Returns a list of all non-hidden CEMT users.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetUserByName(System.String,System.Boolean)">
            <summary>Returns null if not found.  isEcwTight is not case sensitive.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetUserByEmployeeNum(System.Int64)">
            <summary>Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetUsersByEmployeeNum(System.Int64)">
            <summary>Returns all users that are associated to the employee passed in.  Returns empty list if no matches found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetUsersByPermission(OpenDentBusiness.Permissions,System.Boolean)">
            <summary>Returns all users that are associated to the permission passed in.  Returns empty list if no matches found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetUsersByJobRole(OpenDentBusiness.JobPerm,System.Boolean)">
            <summary>Returns all users that are associated to the permission passed in.  Returns empty list if no matches found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetUsersWithProviders">
            <summary>Gets all non-hidden users that have an associated provider.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetUsersByProvNum(System.Int64)">
            <summary>Returns all users associated to the provider passed in.  Returns empty list if no matches found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetUsersForVerifyList(System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>Returns all users selectable for the insurance verification list.  
            Pass in an empty list to not filter by clinic.  
            Set isAssigning to false to return only users who have an insurance already assigned.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetName(System.Int64)">
            <summary>This handles situations where we have a usernum, but not a user.  And it handles usernum of zero.  Pass in a list of users to save making a deep copy of the userod cache if you are going to be calling this method repeatedly.  js Must maintain 2 overloads instead of optional parameter for my dll.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetName(System.Int64,System.Collections.Generic.List{OpenDentBusiness.Userod})">
            <summary>This handles situations where we have a usernum, but not a user.  And it handles usernum of zero.  Pass in a list of users to save making a deep copy of the userod cache if you are going to be calling this method repeatedly.  js Must maintain 2 overloads instead of optional parameter for my dll.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.IsUserCpoe(OpenDentBusiness.Userod)">
            <summary>Returns true if the user passed in is associated with a provider that has (or had) an EHR prov key.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.CheckUserAndPassword(System.String,System.String,System.Boolean)">
            <summary>Only used in one place on the server when first attempting to log on.  The password will be hashed and checked against the one in the database.  Password is required, so empty string will return null.  Returns a user object if user and password are valid.  Otherwise, returns null.  If usingEcw, password will actually be the hash.  If usingEcw, then the username is not case sensitive.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.CheckCredentials(OpenDentBusiness.Credentials)">
            <summary>Used by Server.  Throws exception if bad username or passhash or if either are blank.  It uses cached user list, refreshing it if null.  This is used everywhere except in the log on screen.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.LoadDatabaseInfoFromFile(System.String)">
            <summary>Will throw an exception if it fails for any reason.  This will directly access the config file on the disk, read the values, and set the DataConnection to the new database.  This is only triggered when someone tries to log on.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.HashPassword(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.HashPassword(System.String,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.ByteToStr(System.Byte)">
            <summary>The only valid input is a value between 0 and 15.  Text returned will be 1-9 or a-f.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.CheckTypedPassword(System.String,System.String)">
            <summary>Used from log on screen, phoneUI, and when logging in via command line.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.UpdateUserGroupsForDentalSchools(OpenDentBusiness.UserGroup,System.Boolean)">
            <summary>Updates all students/instructors to the specified user group.  Surround with try/catch because it can throw exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.Update(OpenDentBusiness.Userod)">
            <summary>Surround with try/catch because it can throw exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.UpdateCEMT(OpenDentBusiness.Userod)">
            <summary>Update for CEMT only.  Used when updating Remote databases with information from the CEMT.  Because of potentially different primary keys we have to update based on UserNumCEMT.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.UpdatePassword(OpenDentBusiness.Userod,System.String,System.Boolean)">
            <summary>Surround with try/catch because it can throw exceptions.  Only used from FormOpenDental.menuItemPassword_Click().  Same as Update(), only the Validate call skips checking duplicate names for hidden users.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.Insert(OpenDentBusiness.Userod)">
            <summary>Surround with try/catch because it can throw exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.Validate(System.Boolean,OpenDentBusiness.Userod,System.Boolean)">
            <summary>Surround with try/catch because it can throw exceptions.  We don't really need to make this public, but it's required in order to follow the RemotingRole pattern.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.IsUserNameUnique(System.String,System.Int64,System.Boolean,System.Boolean)">
            <summary>Supply 0 or -1 for the excludeUserNum to not exclude any.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetForGroup(System.Int64)">
            <summary>Used in FormSecurity.FillTreeUsers</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetAdminUser">
            <summary>This always returns one admin user.  There must be one and there is rarely more than one.  Only used on startup to determine if security is being used.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetInbox(System.Int64)">
            <summary>Will return 0 if no inbox found for user.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.GetNotHidden">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.IsPasswordStrong(System.String)">
            <summary>Returns empty string if password is strong enough.  Otherwise, returns explanation of why it's not strong enough.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userods.ResetStrongPasswordFlags">
            <summary>This resets the strong password flag on all users after an admin turns off pref PasswordsMustBeStrong.  If strong passwords are again turned on later, then each user will have to edit their password in order set the strong password flag again.</summary>
        </member>
        <member name="T:OpenDentBusiness.Meth">
            <summary>Short for Method.  Calls a method remotely.  ONLY used if ClientWeb.  This must be tested at top of the method in question.  These will be used extensively since ALL data interface classes will need this.  This completely avoids sending queries directly to the server.  Must pass all the parameters from the original method.</summary>
        </member>
        <member name="M:OpenDentBusiness.Meth.GetTable(System.Reflection.MethodBase,System.Object[])">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Meth.GetTableLow(System.String)">
            <summary>Uses lower sql permissions, making it safe to pass a query.</summary>
        </member>
        <member name="M:OpenDentBusiness.Meth.GetDS(System.Reflection.MethodBase,System.Object[])">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Meth.GetLong(System.Reflection.MethodBase,System.Object[])">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Meth.GetInt(System.Reflection.MethodBase,System.Object[])">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Meth.GetDouble(System.Reflection.MethodBase,System.Object[])">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Meth.GetVoid(System.Reflection.MethodBase,System.Object[])">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Meth.GetObject``1(System.Reflection.MethodBase,System.Object[])">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Meth.GetString(System.Reflection.MethodBase,System.Object[])">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Meth.GetBool(System.Reflection.MethodBase,System.Object[])">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DatabaseMaintenance._listTableAndColumns">
            <summary>List of tables and columns to remove null characters from.
            Loop through this list two items at a time because it is designed to have a table first which is then followed by a relative column.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.RepairAndOptimize(System.Boolean)">
            <summary>If using MySQL, tries to repair and then optimize each table.
            Developers must make a backup prior to calling this method because repairs have a tendency to delete data.
            Currently called whenever MySQL is upgraded and when users click Optimize in database maintenance.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.OptimizeTable(System.String,System.Boolean)">
            <summary>Optimizes the table passed in.  Set hasResult to true to return a string representation of the query results.
            Does not attempt the optimize if random PKs is turned on or if the table is of storage engine InnoDB.
            See wiki page [[Database Storage Engine Comparison: InnoDB vs MyISAM]] for reasons why.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.DatesNoZeros(System.Boolean,System.Boolean)">
            <summary>This method updates many invalid date columns to '0001-01-01' and a few invalid DateTStamp columns to '1970-01-01 00:00:01'.
            DateTStamp columns are TIMESTAMP data type.  The TIMESTAMP data type has a range of '1970-01-01 00:00:01' UTC to '2038-01-19 03:14:07' UTC.
            https://dev.mysql.com/doc/refman/5.0/en/datetime.html
            Always safe to backport changes to this function to the current stable version. As per conversation between OD engineers. 2/24/2014</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.DecimalValues(System.Boolean,System.Boolean)">
            <summary>Deprecated.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.SpecialCharactersInNotes(System.Boolean,System.Boolean)">
            <summary>also checks patient.AddrNote</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.AppointmentsNoPatients(System.Boolean,System.Boolean,System.Int64)">
            <summary>userNum can be 0, it's set before remoting role check and passed to the server if necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.AuditTrailDeleteDuplicateApptCreate(System.Boolean,System.Boolean)">
            <summary>For appointments that have more than one AppointmentCreate audit entry, deletes all but the newest.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.BenefitsWithExactDuplicatesForInsPlan(System.Boolean,System.Boolean)">
            <summary>Remove duplicates where all benefit columns match except for BenefitNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.BenefitsWithPartialDuplicatesForInsPlan(System.Boolean,System.Boolean)">
            <summary>Identify duplicates where all benefit columns match except for BenefitNum, Percent, and MonetaryAmt.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.ClaimWithInvalidInsSubNum(System.Boolean,System.Boolean,System.Int64)">
            <summary>No need to pass in userNum, it's set before remoting role check and passed to the server if necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.ClaimWithInvalidPatNum(System.Boolean,System.Boolean)">
            <summary>Also fixes situations where PatNum=0</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.ClaimPaymentCheckAmt(System.Boolean,System.Boolean,System.Int64)">
            <summary>Also fixes resulting deposit misbalances.
            No need to pass in userNum, it's set before remoting role check and passed to the server if necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.ClaimProcEstimateAttachedToGroupNote(System.Boolean,System.Boolean)">
            <summary>Deletes claimprocs that are attached to group notes.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.ClaimProcStatusNotMatchClaim(System.Boolean,System.Boolean)">
            <summary>We are only checking mismatched statuses if either claim or claimproc is marked as received.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.ClaimProcWithInvalidClaimNum(System.Boolean,System.Boolean,System.Int64)">
            <summary>No need to pass in userNum, it's set before remoting role check and passed to the server if necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.EduResourceInvalidDiseaseDefNum(System.Boolean,System.Boolean)">
            <summary>This could be enhanced to validate all foreign keys on the eduresource.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.InsPlanInvalidNum(System.Boolean,System.Boolean,System.Int64)">
            <summary>No need to pass in userNum, it's set before remoting role check and passed to the server if necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.InsSubInvalidSubscriber(System.Boolean,System.Boolean,System.Int64)">
            <summary>No need to pass in userNum, it's set before remoting role check and passed to the server if necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.InsSubNumMismatchPlanNum(System.Boolean,System.Boolean,System.Int64)">
            <summary>No need to pass in userNum, it's set before remoting role check and passed to the server if necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.PatientInvalidBillingType(System.Boolean,System.Boolean)">
            <summary>Finds any patients that have an invalid BillingType (Billing Type that does not exist as a definition) and sets them to the first billing type in definitions table.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.PaymentAmtNotMatchPaySplitTotal(System.Boolean,System.Boolean)">
            <summary>Shows payments that have a PaymentAmt that doesn't match the sum of all associated PaySplits.  
            Payments with no PaySplits are dealt with in PaymentMissingPaySplit()</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.PaySplitWithInvalidPayNum(System.Boolean,System.Boolean,System.Int64)">
            <summary>No need to pass in userNum, it's set before remoting role check and passed to the server if necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.RefAttachesWithDuplicateOrder(System.Boolean,System.Boolean)">
            <summary>Finds patients that have a more than 1 from referral with the lowest order.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.SecurityLogInvalidFKey(System.Boolean,System.Boolean)">
            <summary>This function will fix any FKey entries in securitylog that point to entries in other tables that have been deleted (orphaned FKeys).
            It uses reflection to find all tables using audit trail Fkey columns and their respective permissions.
            This method does not need to change even if more permissions are added.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.TreatPlansInvalid(System.Boolean,System.Boolean,System.Int64)">
            <summary>No need to pass in userNum, it's set before remoting role check and passed to the server if necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.TreatPlanAttachDuplicateProc(System.Boolean,System.Boolean)">
            <summary>Finds treatplanattaches with the same treatplannum and procnum.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.UserodDuplicateUser(System.Boolean,System.Boolean)">
            <summary>Only one user of a given UserName may be unhidden at a time. Warn the user and instruct them to hide extras.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.UserodInvalidUserGroupNum(System.Boolean,System.Boolean)">
            <summary>userod has an invalid FK to usergroup</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.UserodInvalidRestrictedClinic(System.Boolean,System.Boolean)">
            <summary>userod is restricted to ClinicNum 0 - All.  Restricted to All clinics doesn't make sense.  This will set the ClinicIsRestricted bool to false if ClinicNum=0.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.GetDuplicateClaimProcs">
            <summary>Will return empty string if no problems.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.GetDuplicateSupplementalPayments">
            <summary>Will return empty string if no problems.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.GetMissingClaimProcs(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.FixClaimProcDeleteDuplicates">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.FixMissingClaimProcs(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.FixSpecialCharacters">
            <summary>Removes unsupported unicode characters from appointment.ProcDescript, appointment.Note, and patient.AddrNote.
            Also removes mysql null character ("\0" or CHAR(0)) from several columns from several tables.
            These null characters were causing the middle tier deserialization to fail as they are not UTF-16 supported characters.
            They are, however, allowed in UTF-8.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.MySqlRemoveNullStrings">
            <summary>Replaces null strings with empty strings and returns the number of rows changed.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.ClearOldEtransMessageText">
            <summary>Makes a backup of the database, clears out etransmessagetext entries over a year old, and then runs optimize on just the etransmessagetext table.  Customers were calling in with the complaint that their etransmessagetext table is too big so we added this tool.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.GetStorageEngineDefaultName">
            <summary>Return values look like 'MyISAM' or 'InnoDB'. Will return empty string on error.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.GetMyisamTableCount">
            <summary>Gets the number of tables in MyISAM format.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.ConvertTablesToMyisam">
            <summary>Returns true if the conversion was successfull or no conversion was necessary. The goal is to convert InnoDB tables (excluding the 'phone' table) to MyISAM format when there are a mixture of InnoDB and MyISAM tables but no conversion will be performed when all of the tables are already in the same format.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.GetCountForSecuritylogInvalidFKeys(System.String,System.String,System.String)">
            <summary>Returns the number of invalid FKey entries for specified tableName, permissions, and primary key column.
            You MUST check remoting role before calling this method.  It is purposefully private and must remain so.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.UpdateOrphanedSecuritylogInvalidKeys(System.String,System.String,System.String)">
            <summary>Fixes orphaned FKey entries for specific tableName, permissions, and primary key column.
            Returns number of rows fixed.
            You MUST check remoting role before calling this method.  It is purposefully private and must remain so.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.GetProcsNoActiveTp">
            <summary>Used to estimate the time that CreateMissingActiveTPs will take to run.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.CreateMissingActiveTPs(System.Collections.Generic.List{OpenDentBusiness.Procedure},System.Int64)">
            <summary>No need to pass in userNum, it's set before remoting role check and passed to the server if necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.DatabaseMaintenance.CleanUpRawEmails">
            <summary>This method is designed to help save hard drive space due to the RawEmailIn column containing Base64 attachments.</summary>
        </member>
        <member name="T:OpenDentBusiness.DbmMethod">
            <summary>An attribute that should get applied to any method that needs to show up in the main grid of FormDatabaseMaintenance.
            Also, an attribute that identifies methods that require a userNum parameter for sending the current user through the middle tier to set the
            SecUserNumEntry field.</summary>
        </member>
        <member name="P:OpenDentBusiness.DbmMethod.HasBreakDown">
            <summary>Set to true if this dbm method needs to be able to show the user a list or break down of items that need manual attention.</summary>
        </member>
        <member name="P:OpenDentBusiness.DbmMethod.HasUserNum">
            <summary>Set to true if this dbm method requires a userNum parameter.  The parameter can be 0, it will be set if not ServerWeb remoting role.</summary>
        </member>
        <member name="T:OpenDentBusiness.DbHelper">
            <summary>This class contains methods used to generate database independent SQL.</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.ClobOrderBy(System.String,System.Int32,System.Int32)">
            <summary>Helper method that is only useful for Oracle.  This method is really just here for exposure for the lack of Oracle functionality.
            Oracle will cut up a section of the CLOB column using SUBSTR.  The portion is dictated by starting at startIndex for substringLength chars.
            When using MySQL you simply order by the column name because it is smart enough to allow users to ORDER BY 'text' data type.</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.DropTableIfExist(System.String)">
            <summary>Returns a safe drop table string that does not need to be surrounded with a try catch.</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.LimitAnd(System.Int32)">
            <summary>Use when you already have a WHERE clause in the query. Uses AND RowNum... for Oracle.</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.LimitWhere(System.Int32)">
            <summary>Use when you do not otherwise have a WHERE clause in the query. Uses WHERE RowNum... for Oracle.</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.LimitOrderBy(System.String,System.Int32)">
            <summary>Use when there is an ORDER BY clause in the query. Uses RowNum... for Oracle.</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.Concat(System.String[])">
            <summary>Concatenates the fields and/or literals passed as params for Oracle or MySQL. If passing in a literal, surround with single quotes.</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.GroupConcat(System.String,System.Boolean,System.Boolean,System.String)">
            <summary>Specify column for equivalent of "GROUP_CONCAT(column)" in MySQL. Adds DISTINCT (MySQL only) and ORDERBY and SEPARATOR as specified.
            SEPARATOR not used for Oracle.
            Call using parameters by name, example: GroupConcat(column,distinct:true,separator:" | ").</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.UnionOrderBy(System.String,System.Int32)">
            <summary>In Oracle, union order by combos can only use ordinals and not column names. Values for ordinal start at 1.</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.UseIndex(System.String,System.String)">
            <summary>Helper for getting the correct "use index" syntax that will force a query to use the index passed in.
            tableName is required for Oracle and it CANNOT reference the schema name E.g. "customers.patient" fails, just pass in "patient".</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.DtimeToDate(System.String)">
            <summary>TO_DATE() for datetime columns where we only want the date.</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.DateFormatColumn(System.String,System.String)">
            <summary>The format must be the MySQL format. The following formats are currently acceptable as input: %c/%d/%Y , %m/%d/%Y</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.DateTFormatColumn(System.String,System.String)">
            <summary>The format must be the MySQL format.  The following formats are currently acceptable as input: %c/%d/%Y %H:%i:%s and %m/%d/%Y %H:%i:%s.</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.Curdate">
            <summary>Helper for Oracle that will return equivalent of MySql CURDATE()</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.Now">
            <summary>Helper for Oracle that will return equivalent of MySql NOW()</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.Year(System.String)">
            <summary>Helper for Oracle that will return equivalent of MySql YEAR()</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.Regexp(System.String,System.String)">
            <summary>Helper for Oracle that will return equivalent of MySql "input REGEXP 'pattern'". Also changes pattern:[0-9] to [:digit:] for Oracle.</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.Regexp(System.String,System.String,System.Boolean)">
            <summary>Helper for Oracle that will return equivalent of MySql "input REGEXP 'pattern'". Also changes pattern:[0-9] to [:digit:] for Oracle. Takes matches param for "does [not] match this regexp."</summary>
        </member>
        <member name="P:OpenDentBusiness.DbHelper.ParamChar">
            <summary>Gets the database specific character used for parameters.  For example, : or @.</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.GetNextOracleKey(System.String,System.String)">
            <summary>Gets the maximum value for the specified field within the specified table. This key will always be the MAX(field)+1 and will usually be the correct key to use for new inserts, but not always.</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.isMySQLReservedWord(System.String)">
            <summary>Returns true if the input string is a reserved word in MySQL 5.6.25.</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.IfNull(System.String,System.Int32)">
            <summary>Helper for Oracle that will return equivalent of MySQL IFNULL().</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.IfNull(System.String,System.String)">
            <summary>Helper for Oracle that will return equivalent of MySQL IFNULL().  Automatically adds single quotes around valWhenNull so that it is treated as text in the query.</summary>
        </member>
        <member name="M:OpenDentBusiness.DbHelper.IfNull(System.String,System.String,System.Boolean)">
            <summary>Helper for Oracle that will return equivalent of MySQL IFNULL(). Boolean to decide whether or not to encapsulate the value when null.</summary>
        </member>
        <member name="T:OpenDentBusiness.OdSqlParameter">
            <summary>Hold parameter info in a database independent manner.</summary>
        </member>
        <member name="P:OpenDentBusiness.OdSqlParameter.ParameterName">
            <summary>parameterName should not include the leading character such as @ or : . And DbHelper.ParamChar() should be used to determine the char in the query itself.</summary>
        </member>
        <member name="M:OpenDentBusiness.OdSqlParameter.#ctor(System.String,OpenDentBusiness.OdDbType,System.Object)">
            <summary>parameterName should not include the leading character such as @ or : . And DbHelper.ParamChar() should be used to determine the char in the query itself.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeSpanExtension.ToStringHmm(System.TimeSpan)">
            <summary>-H:mm.  If zero, then returns empty string.  Hours can be greater than 24.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeSpanExtension.ToStringHmmss(System.TimeSpan)">
            <summary>-H:mm:ss.  If zero, then returns empty string.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeSpanExtension.ToStringmmss(System.TimeSpan)">
            <summary>-mm:ss.  If zero, then returns empty string.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeSpanExtension.ToString(System.TimeSpan,System.String)">
            <summary>Does not work well with negative values.</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeSpanExtension.ToShortTimeString(System.TimeSpan)">
            <summary>Does not work well with negative values.</summary>
        </member>
        <member name="M:OpenDentBusiness.TrojanQueries.GetUniqueFileNum">
            <summary>returns int32</summary>
        </member>
        <member name="M:OpenDentBusiness.TrojanQueries.GetPendingDeletionTable(System.Collections.ObjectModel.Collection{System.String[]})">
            <summary>Get the list of records for the pending plan deletion report for plans that need to be brought to the patient's attention.</summary>
        </member>
        <member name="M:OpenDentBusiness.TrojanQueries.GetPendingDeletionTableTrojan(System.Collections.ObjectModel.Collection{System.String[]})">
            <summary>Get the list of records for the pending plan deletion report for plans which need to be bought to Trojan's attention.</summary>
        </member>
        <member name="M:OpenDentBusiness.TrojanQueries.UpdatePlan(OpenDentBusiness.TrojanObject,System.Int64,System.Boolean)">
            <summary>This returns the number of plans affected.</summary>
        </member>
        <member name="T:OpenDentBusiness.TrojanObject">
            <summary>This is used as a container for plan and benefit info coming in from Trojan.</summary>
        </member>
        <member name="F:OpenDentBusiness.TrojanObject.TROJANID">
            <summary>TrojanID</summary>
        </member>
        <member name="F:OpenDentBusiness.TrojanObject.ENAME">
            <summary>Employer name</summary>
        </member>
        <member name="F:OpenDentBusiness.TrojanObject.PLANDESC">
            <summary>GroupName</summary>
        </member>
        <member name="F:OpenDentBusiness.TrojanObject.ELIGPHONE">
            <summary>Carrier phone</summary>
        </member>
        <member name="F:OpenDentBusiness.TrojanObject.POLICYNO">
            <summary>GroupNum</summary>
        </member>
        <member name="F:OpenDentBusiness.TrojanObject.ECLAIMS">
            <summary>Accepts eclaims</summary>
        </member>
        <member name="F:OpenDentBusiness.TrojanObject.PAYERID">
            <summary>ElectID</summary>
        </member>
        <member name="F:OpenDentBusiness.TrojanObject.MAILTO">
            <summary>CarrierName</summary>
        </member>
        <member name="F:OpenDentBusiness.TrojanObject.MAILTOST">
            <summary>Address</summary>
        </member>
        <member name="F:OpenDentBusiness.TrojanObject.MAILCITYONLY">
            <summary>City</summary>
        </member>
        <member name="F:OpenDentBusiness.TrojanObject.MAILSTATEONLY">
            <summary>State</summary>
        </member>
        <member name="F:OpenDentBusiness.TrojanObject.MAILZIPONLY">
            <summary>Zip</summary>
        </member>
        <member name="F:OpenDentBusiness.TrojanObject.BenefitList">
            <summary>The only thing that will be missing from these benefits is the PlanNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.TrojanObject.CarrierNum">
            <summary>This can be filled at some point based on the carrier fields.</summary>
        </member>
        <member name="F:OpenDentBusiness.TrojanObject.BenefitNotes">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.TrojanObject.PlanNote">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.PluginBase.Host">
            <summary>This will be a refrence to the main FormOpenDental so that it can be used by    the plugin if needed.  It is set once on startup, so it's a good place to put startup code.   If this is the middle tier, then this will be null.</summary>
        </member>
        <member name="M:OpenDentBusiness.PluginBase.HookMethod(System.Object,System.String,System.Object[])">
            <summary>These types of hooks are designed to completely replace the existing functionality of specific methods.  They always belong at the top of a method.</summary>
        </member>
        <member name="M:OpenDentBusiness.PluginBase.HookAddCode(System.Object,System.String,System.Object[])">
            <summary>These types of hooks allow adding extra code in at some point without disturbing the existing code.</summary>
        </member>
        <member name="M:OpenDentBusiness.PluginBase.LaunchToolbarButton(System.Int64)">
            <summary>Plugin button now supports no patient loaded, patNum=0.  Plugin writers may need to give error message to user in this situation.</summary>
        </member>
        <member name="F:OpenDentBusiness.PluginContainer.Assemb">
            <summary>Used by reflection for "s" class calls to middle tier.</summary>
        </member>
        <member name="F:OpenDentBusiness.PluginContainer.Name">
            <summary>The dll name without extension, and stripped clean.  Used by reflection for "s" class calls to middle tier.</summary>
        </member>
        <member name="M:OpenDentBusiness.Plugins.LoadAllPlugins(System.Windows.Forms.Form)">
            <summary>If this is middle tier, pass in null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Plugins.GetAssembly(System.String)">
            <summary>Returns null if no plugin assembly loaded with the given name.  So OpenDentBusiness can be passed through here quickly to return null.</summary>
        </member>
        <member name="M:OpenDentBusiness.Plugins.HookMethod(System.Object,System.String,System.Object[])">
            <summary>Will return true if a plugin implements this method, replacing the default behavior.</summary>
        </member>
        <member name="M:OpenDentBusiness.Plugins.HookAddCode(System.Object,System.String,System.Object[])">
            <summary>Adds code without disrupting existing code.</summary>
        </member>
        <member name="T:OpenDentBusiness.SerializableDictionary`2">
            <summary>Because Dictionaries are not serializable, this class should be used whenever a dictionary needs to be serialized.
            This code is taken from Paul Welter's blog posted May 3, 2006.  https://weblogs.asp.net/pwelter34/444961 </summary>
        </member>
        <member name="M:OpenDentBusiness.SerializableDictionary`2.GetSchema">
            <summary>Returns null.  Required when extending IXmlSerializable.</summary>
        </member>
        <member name="M:OpenDentBusiness.RpActivePatients.GetActivePatientTable(System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Boolean,System.Boolean,System.Boolean)">
            <summary>If not using clinics then supply an empty list of clinicNums. dateStart and dateEnd can be MinVal/MaxVal to indicate "forever".</summary>
        </member>
        <member name="M:OpenDentBusiness.RpInsOverpaid.GetInsuranceOverpaid(System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>If not using clinics then supply an empty list of clinicNums.  listClinicNums must have at least one item if using clinics.</summary>
        </member>
        <member name="M:OpenDentBusiness.RpOutstandingIns.GetOutInsClaims(System.Boolean,System.Collections.Generic.List{System.Int64},System.DateTime,System.DateTime,System.Boolean,System.Collections.Generic.List{System.Int64})">
            <summary>Called from FormRpOutstandingIns. Gets outstanding insurance claims. Requires all fields. provNumList may be empty (but will return null if isAllProv is false).  listClinicNums may be empty.  dateMin and dateMax will not be used if they are set to DateTime.MinValue() (01/01/0001). If isPreauth is true only claims of type preauth will be returned.</summary>
        </member>
        <member name="M:OpenDentBusiness.RpPayPlan.GetPayPlanTable(System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Boolean,OpenDentBusiness.DisplayPayPlanType,System.Boolean,System.Boolean,System.Boolean)">
            <summary>If not using clinics then supply an empty list of clinicNums.</summary>
        </member>
        <member name="T:OpenDentBusiness.DisplayPayPlanType">
            <summary>Used to dictate which payment plan types are shown in the payment plan report.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayPayPlanType.Patient">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayPayPlanType.Insurance">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayPayPlanType.Both">
            <summary>2</summary>
        </member>
        <member name="M:OpenDentBusiness.ReportsComplex.GetTable(System.String)">
            <summary>Gets a table of data using normal permissions.</summary>
        </member>
        <member name="M:OpenDentBusiness.RpPaySheet.GetInsTable(System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>If not using clinics then supply an empty list of clinicNums.  listClinicNums must have at least one item if using clinics.</summary>
        </member>
        <member name="M:OpenDentBusiness.RpPaySheet.GetPatTable(System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>If not using clinics, or for all clinics with clinics enabled, supply an empty list of clinicNums.  If the user is restricted, for all
            clinics supply only those clinics for which the user has permission to access, otherwise it will be run for all clinics.</summary>
        </member>
        <member name="M:OpenDentBusiness.RpProcNotBilledIns.GetProcsNotBilled(System.Collections.Generic.List{System.Int64},System.Boolean,System.DateTime,System.DateTime)">
            <summary>If not using clinics then supply an empty list of clinicNums.  listClinicNums must have at least one item if using clinics.</summary>
        </member>
        <member name="M:OpenDentBusiness.RpProcSheet.GetIndividualTable(System.DateTime,System.DateTime,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.String,System.Boolean,System.Boolean)">
            <summary>If not using clinics then supply an empty list of clinicNums.  listClinicNums must have at least one item if using clinics. Not formatted for display</summary>
        </member>
        <member name="F:OpenDentBusiness.RpProdInc._hasClinics">
            <summary>Used in RowComparer to limit using the cache in the CEMT.</summary>
        </member>
        <member name="M:OpenDentBusiness.RpProdInc.GetDailyData(System.DateTime,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.Provider},System.Collections.Generic.List{OpenDentBusiness.Clinic},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>If not using clinics then supply an empty list of clinicNums.  Also used for the CEMT Provider P and I report.</summary>
        </member>
        <member name="M:OpenDentBusiness.RpProdInc.GetProviderDataForClinics(System.DateTime,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.Provider},System.Collections.Generic.List{OpenDentBusiness.Clinic},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RpProdInc.GetProviderPayrollDataForClinics(System.DateTime,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.Provider},System.Collections.Generic.List{OpenDentBusiness.Clinic},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RpProdInc.GetDailyProdIncDataSet(System.DateTime,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.Provider},System.Collections.Generic.List{OpenDentBusiness.Clinic},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Returns a dataset that contains 5 tables used to generate the daily report.  If not using clinics then simply supply an empty list of clinicNums.  Also used for the CEMT Provider P and I report</summary>
        </member>
        <member name="M:OpenDentBusiness.RpProdInc.GetProviderPayrollDataSet(System.DateTime,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.Provider},System.Collections.Generic.List{OpenDentBusiness.Clinic},System.Boolean,System.Boolean,System.Boolean)">
            <summary>Returns a dataset that contains 5 tables used to generate the provider payroll report.  If not using clinics then simply supply an empty list of clinicNums.</summary>
        </member>
        <member name="M:OpenDentBusiness.RpProdInc.GetNetProductionDetailDataSet(System.DateTime,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.Provider},System.Collections.Generic.List{OpenDentBusiness.Clinic},System.Boolean,System.Boolean,System.Boolean)">
            <summary>Returns a dataset that contains 3 tables used to generate the provider payroll transaction detail report.  
            This is also used to provide a "Daily" Provider Payroll Transaction Detail report, 
            which will have slightly different logic to calculate due to claimsnapshot eConnector trigger timing issues.
            If not using clinics then simply supply an empty list of clinicNums.</summary>
        </member>
        <member name="M:OpenDentBusiness.RpProdInc.GetMonthlyData(System.DateTime,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.Provider},System.Collections.Generic.List{OpenDentBusiness.Clinic},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>If not using clinics then supply an empty list of clinics.</summary>
        </member>
        <member name="M:OpenDentBusiness.RpProdInc.GetMonthlyProdIncDataSet(System.DateTime,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.Provider},System.Collections.Generic.List{OpenDentBusiness.Clinic},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Returns a dataset that contains 5 tables used to generate the monthly report. If not using clinics then supply an empty list of clinics.
             Does not work for Oracle (by chance not by design). Consider enhancing with DbHelper.Year(),DbHelper.Month(), DbHelper.Day() and enhancing the GroupBy Logic.</summary>
        </member>
        <member name="M:OpenDentBusiness.RpProdInc.GetAnnualData(System.DateTime,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.Provider},System.Collections.Generic.List{OpenDentBusiness.Clinic},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>If not using clinics then supply an empty list of clinics.</summary>
        </member>
        <member name="M:OpenDentBusiness.RpProdInc.GetAnnualProdIncDataSet(System.DateTime,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.Provider},System.Collections.Generic.List{OpenDentBusiness.Clinic},System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Returns a dataset that contains 5 tables used to generate the annual report. If not using clinics then supply an empty list of clinics.
             Does not work for Oracle (by chance not by design). Consider enhancing with DbHelper.Year(),DbHelper.Month(), DbHelper.Day() and enhancing the GroupBy Logic.</summary>
        </member>
        <member name="T:OpenDentBusiness.RpProdInc.ProviderPayrollRow">
            <summary>This class is only used for the Provider Payroll report.  It is to be able to use Linq to cut down on processing time.</summary>
        </member>
        <member name="F:OpenDentBusiness.RpProdInc.ProviderPayrollRow.WriteOff">
            <summary>Only used by the InsWriteOff table</summary>
        </member>
        <member name="F:OpenDentBusiness.RpProdInc.ProviderPayrollRow.WriteOffEst">
            <summary>Only used by the InsWriteOff table</summary>
        </member>
        <member name="M:OpenDentBusiness.RpProdInc.ProviderPayrollRow.#ctor(System.DateTime,System.Decimal,System.Int64)">
            <summary>Used by all tabled except the InsWriteOff table</summary>
        </member>
        <member name="M:OpenDentBusiness.RpProdInc.ProviderPayrollRow.#ctor(System.DateTime,System.Decimal,System.Decimal,System.Int64)">
            <summary>Only used by the InsWriteOff table</summary>
        </member>
        <member name="M:OpenDentBusiness.RpRouting.GetRouting(System.DateTime,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{System.Int64},System.Boolean)">
            <summary>Gets a list of aptNums for one day in the schedule for a given set of providers and clinics.</summary>
        </member>
        <member name="T:OpenDentBusiness.AlertItem">
            <summary>Any row in this table will show up in the main menu of Open Dental to get the attention of the user.
            The user will be able to click on the alert and take an action.  The actions available to the user are also determined in this row.</summary>
        </member>
        <member name="F:OpenDentBusiness.AlertItem.AlertItemNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.AlertItem.ClinicNum">
            <summary>FK to clinic.ClinicNum. Can be 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.AlertItem.Description">
            <summary>What is displayed in the menu item.</summary>
        </member>
        <member name="F:OpenDentBusiness.AlertItem.Type">
            <summary>Enum:AlertType Identifies what type of alert this row is.</summary>
        </member>
        <member name="F:OpenDentBusiness.AlertItem.Severity">
            <summary>Enum:SeverityType The severity will help determine what color this alert should be in the main menu.</summary>
        </member>
        <member name="F:OpenDentBusiness.AlertItem.Actions">
            <summary>Enum:ActionType Bitwise flag that represents what actions are available for this alert.</summary>
        </member>
        <member name="M:OpenDentBusiness.AlertItem.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.AlertType">
            <summary>Enum representing different alert types.</summary>
        </member>
        <member name="F:OpenDentBusiness.AlertType.Generic">
            <summary>Generic. Informational, has no action associated with it</summary>
        </member>
        <member name="F:OpenDentBusiness.AlertType.OnlinePaymentsPending">
            <summary>Opens the Online Payments Window when clicked</summary>
        </member>
        <member name="T:OpenDentBusiness.SeverityType">
            <summary>Represents the urgency of the alert.  Also determines the color for the menu item in the main menu.</summary>
        </member>
        <member name="F:OpenDentBusiness.SeverityType.Normal">
            <summary>0 - White</summary>
        </member>
        <member name="F:OpenDentBusiness.SeverityType.Low">
            <summary>1 - Yellow</summary>
        </member>
        <member name="F:OpenDentBusiness.SeverityType.Medium">
            <summary>2 - Orange</summary>
        </member>
        <member name="F:OpenDentBusiness.SeverityType.High">
            <summary>3 - Red</summary>
        </member>
        <member name="T:OpenDentBusiness.ActionType">
            <summary>The possible actions that can be taken on this alert.  Multiple actions can be available for one alert.</summary>
        </member>
        <member name="F:OpenDentBusiness.ActionType.None">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ActionType.MarkAsRead">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ActionType.OpenForm">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.AlertRead">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AlertRead.AlertReadNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.AlertRead.AlertItemNum">
            <summary>FK to alertitem.AlertItemNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.AlertRead.UserNum">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.AlertRead.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.AlertSub">
            <summary>Subscribes a user and optional clinic to specifc alert types.  Users will not get alerts unless they have an entry in this table.</summary>
        </member>
        <member name="F:OpenDentBusiness.AlertSub.AlertSubNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.AlertSub.UserNum">
            <summary>FK to userod.EmployeeNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.AlertSub.ClinicNum">
            <summary>FK to clinic.ClinicNum. Can be 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.AlertSub.Type">
            <summary>Enum:AlertType Identifies what type of alert this row is.</summary>
        </member>
        <member name="M:OpenDentBusiness.AlertSub.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.AppointmentDeleted">
            <summary>Inherits from Appointment. All the values from the appointment table will be stored in this table when deleted.</summary>
        </member>
        <member name="F:OpenDentBusiness.AppointmentDeleted.AppointmentDeletedNum">
            <summary>Primary key.</summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentDeleted.#ctor">
            <summary>Empty constructor necessary for serialization.</summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentDeleted.#ctor(OpenDentBusiness.Appointment)">
            <summary>Assigns all fields from the Appointment object to the inherited fields on the AppointmentDeleted.</summary>
        </member>
        <member name="T:OpenDentBusiness.ApptReminderSent">
            <summary>When a reminder is sent for an appointment a record of that send is stored here. This is used to prevent re-sends of the same reminder.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderSent.ApptReminderSentNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderSent.ApptNum">
            <summary>FK to appointment.AptNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderSent.ApptDateTime">
            <summary>The Date and time of the original appointment. We need this in case the appointment was moved and needs another reminder sent out.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderSent.DateTimeSent">
            <summary>Once sent, this was the date and time that the reminder was sent out on.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderSent.TSPrior">
            <summary>This was the TSPrior used to send this reminder. </summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderSent.ApptReminderRuleNum">
            <summary>FK to ApptReminderRule.ApptReminderRuleNum. Allows us to look up the rules to determine how to send this apptcomm out.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderSent.SendDateTime">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderSent.IsSmsSent">
            <summary>Indicates if an SMS message was succesfully sent.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderSent.IsEmailSent">
            <summary>Indicates if an email was succesfully sent.</summary>
        </member>
        <member name="T:OpenDentBusiness.ApptReminderRule">
            <summary> Appointment Reminder Rules are used to track the automated generation and sending of appointment reminders and confirmations. 
             Users are allowed to define up to two reminders and one confirmation (per clinic.) These can be sent out any number of Days, Hours, and/or 
             Minutes before a scheduled appointment.
             <para>PRACTICE - Appointment Reminder Rules will be saved and edited with clinicNum=0. This denotes the "Defaults" when using clinics, 
             but for a practice the defaults become the practice rules.</para>
            <para>CLINICS - When using clinics, each clinic has a bool "IsConfirmEnabled" that determines if a particular clinic has automated reminders/confirmations
            enabled. If not, no reminders will be sent out for the clinic. If enabled, and no rules are defined for the clinic, then the clinic will attempt to use the
            defaults that have been defined with clinicNum==0. If a clinic is enabled and has at least one AppointmentReminderRule defined, then NO defaults will be
            used for that clinic.</para>
            <para>REMINDERS - reminders are sent out using the ApptComm system implemented by DG. These used to be stored as preferences for the practice only,
            now users are allowed to define them on a per clinic basis. Reminders should be considered one way communications and should not be desingned with a
            customer response in mind.</para>
            <para>CONFIRMATIONS - confirmations are sent using the new automated-confirmation system implemented by RM (proper) and SO (web backend). Confirmations
            are intended to allow end patients to respond to OpenDental via text or email and automatically confirm, or set to a desired status, the appointments
            on the schedule.</para>
             </summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderRule.ApptReminderRuleNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderRule.TypeCur">
            <summary>Enum:ApptReminderType </summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderRule.TSPrior">
            <summary>Time before appointment that this confirmation should be sent.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderRule.SendOrder">
            <summary>Comma Delimited List of comm types. Enum values of ApptComm.CommType. 0=pref,1=sms,2=email; Like the deprecated pref "ApptReminderSendOrder"</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderRule.IsSendAll">
            <summary>Set to True if both an email AND a text should be sent.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderRule.TemplateSMS">
            <summary>If using SMS, this template will be used to generate the body of the text message.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderRule.TemplateEmailSubject">
            <summary>If using email, this template will be used to generate the subject of the email.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderRule.TemplateEmail">
            <summary>If using email, this template will be used to generate the body of the email.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderRule.ClinicNum">
            <summary>FKey to clinic.ClinicNum.  Allows reminder rules to be configured on a per clinic basis. If ClinicNum==0 then it is the practice/HQ/default settings.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderRule.TemplateSMSAggShared">
            <summary>Used when aggregating multiple appointments together into a single message.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderRule.TemplateSMSAggPerAppt">
            <summary>Used when aggregating multiple appointments together into a single message.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderRule.TemplateEmailSubjAggShared">
            <summary>Used when aggregating multiple appointments together into a single message.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderRule.TemplateEmailAggShared">
            <summary>Used when aggregating multiple appointments together into a single message.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderRule.TemplateEmailAggPerAppt">
            <summary>Used when aggregating multiple appointments together into a single message.</summary>
        </member>
        <member name="P:OpenDentBusiness.ApptReminderRule.NumDaysInFuture">
            <summary>Only valid for IsFutureDay rule.</summary>
        </member>
        <member name="P:OpenDentBusiness.ApptReminderRule.NumMinutesInFuture">
            <summary>Only valid for IsSameDay rule.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptReminderType.ReminderFutureDay">
            <summary>2 - Used to define the rules for when reminders should be sent out for a future day of appointments. Only 1 allowed max.</summary>
        </member>
        <member name="T:OpenDentBusiness.CommType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CommType.Preferred">
            <summary>0 - Use text OR email based on patient preference.</summary>
        </member>
        <member name="F:OpenDentBusiness.CommType.Text">
            <summary>1 - Attempt to send text message, if successful do not send via email. (Unless, a SendAll bool is used, which usually negates the need for this enumeration.)</summary>
        </member>
        <member name="F:OpenDentBusiness.CommType.Email">
            <summary>2 - Attempt to send email message, if successful do not send via text. (Unless, a SendAll bool is used, which usually negates the need for this enumeration.)</summary>
        </member>
        <member name="T:OpenDentBusiness.IntervalType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.IntervalType.Daily">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.IntervalType.Hourly">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ConfirmationRequest">
            <summary>Requests that have been sent via EConnector to HQ. HQ will process and update status as responses become available.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.ConfirmationRequestNum">
            <summary>PK. Generated by HQ.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.ClinicNum">
            <summary>FK to clinic.ClinicNum. Generated by OD.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.IsForSms">
            <summary>Generated by OD. If true then generate and send MT text message. 
            If false then OD proper is probably panning on emailing the message/GUID so just enter into ConfirmPending and return.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.IsForEmail">
            <summary>Generated by OD. If true then generate and send email.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.PatNum">
            <summary>FK to patient.PatNum. Generated by OD. Patient that this request is linked to. No corresponding field in HQ ConfirmationPending.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.ApptNum">
            <summary>FK to appointment.AptNum. Generated by OD. Will be sent back linked to corresponding newly created ConfirmPending. Allows OD proper to link the newly created ConfirmPending to the input ConfirmationRequest and set the short GUID on the appointment.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.PhonePat">
            <summary>Generated by OD. Only allowed to be empty is IsForSms==true. In that case then it is assumed that OD proper will probably be emailing confirmation and does not want a text message sent.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.DateTimeConfirmExpire">
            <summary>Generated by OD. Typically the time of the appointment. This is the time at which HQ will consider this unconfirmed and auto terminate.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.SecondsFromEntryToExpire">
            <summary>Generated by OD. HQ and OD proper are in different timezones. This is used to tell HQ how far in advance to set the DateTimeExpire when entering the row into HQ db. This is a work-around for timezone offset.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.ShortGUID">
            <summary>Generated by HQ. Identifies this ConfirmationRequest in future transactions between HQ and OD. Will be used for sms confirmations only.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.ConfirmCode">
            <summary>Generated by HQ. The code that the patient will text back in order to confirm the appointment. If received then it indicates a positive response.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.MsgTextToMobileTemplate">
            <summary>Generated by OD. Includes [ConfirmCode] replacement tag and (optionally) [URL] replacement tag. OD proper can construct this to be any length.
            Will be converted to final MsgText and sent to patient once tags are replaced with real values.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.MsgTextToMobile">
            <summary>Generated by HQ. Applied real text to tags from MsgTextTemplate.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.EmailSubjTemplate">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.EmailSubj">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.EmailTextTemplate">
            <summary>Generated by OD. Includes [ConfirmCode] replacement tag and (optionally) [URL] replacement tag. OD proper can construct this to be any length.
            Will be converted to final EmailText and emailed to patient once tags are replaced with real values.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.EmailText">
            <summary>Generated by HQ. Applied real text to tags from EmailTextTemplate.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.DateTimeEntry">
            <summary>Generated by OD. Timestamp when row is created.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.DateTimeConfirmTransmit">
            <summary>Generated by OD. Timestamp when EConnector sent this confirm request to HQ. Stored in local customer timezone.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.DateTimeRSVP">
            <summary>Generated by OD. Timestamp when HQ updates this request to indicate that it has been terminated. RSVPStatusCode will change to its final state at this time. Stored in local customer timezone.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.RSVPStatus">
            <summary>Enum:RSVPStatusCodes Generated by OD in some cases and HQ in others. Indicates current status in the lifecycle of this ConfirmationRequest.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.ResponseDescript">
            <summary>Generated by OD in some cases and HQ in others. Any human readable error message generated by either HQ or EConnector. Used for debugging.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.GuidMessageToMobile">
            <summary>FK to SmsToMobile.GuidMessage. Generated at HQ when the confirmation is generated.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.GuidMessageFromMobile">
            <summary>FK to SmsFromMobile.GuidMessage. Generated at HQ when the confirmation pending is terminated with confirmation text message.
            Also allows SmsFromMobile to be linked to ConfirmationRequest in OD proper.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConfirmationRequest.ShortGuidEmail">
            <summary>Generated by HQ. Identifies this ConfirmationRequest in future transactions between HQ and OD. Will be used for email confirmations only.</summary>
        </member>
        <member name="F:OpenDentBusiness.RSVPStatusCodes.AwaitingTransmit">
            <summary>Entered manually by something other than EConnector. EConnector will pickup and send to HQ and change to pendingRsvp.</summary>
        </member>
        <member name="F:OpenDentBusiness.RSVPStatusCodes.PendingRsvp">
            <summary>EConnector has sent this to HQ and will remain in this status until it is either terminated or receives a response from the patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.RSVPStatusCodes.PositiveRsvp">
            <summary>Patient responded with an affirmative confirmation.</summary>
        </member>
        <member name="F:OpenDentBusiness.RSVPStatusCodes.NegativeRsvp">
            <summary>Patient responded and declined the confirmation.</summary>
        </member>
        <member name="F:OpenDentBusiness.RSVPStatusCodes.Callback">
            <summary>Patient responded by requesting a callback.</summary>
        </member>
        <member name="F:OpenDentBusiness.RSVPStatusCodes.Expired">
            <summary>Patient took no action by the time DateTimeExpired passed and the confirmation was terminated.</summary>
        </member>
        <member name="F:OpenDentBusiness.RSVPStatusCodes.Failed">
            <summary>HQ or EConnector was unable to create the confirmation so it was terminated prematurely.</summary>
        </member>
        <member name="T:OpenDentBusiness.FamAging">
            <summary>This table stores intermediate family aged balances just prior to updating the patient table.  Once the aging calculations are finished
            and the patient table is updated, this table is truncated.  At the start of the aging calculations this table is checked and if there are existing
            rows, we will notify the user and force them to decide whether an aging calculation has already begun or an error happened that prevented the
            calculations from finishing and the rows are left over and can be deleted.</summary>
        </member>
        <member name="F:OpenDentBusiness.FamAging.PatNum">
            <summary>FK to patient.PatNum.  Also the primary key for this table.  Always the PatNum for the Guarantor of a family.  A guarantor may not
            exist in this table if the family does not have a balance.  i.e. If a PatNum is not in this table, the aged balance columns on the patient table
            are set to 0, so either the patient is not the guarantor or the family has a zero balance.</summary>
        </member>
        <member name="F:OpenDentBusiness.FamAging.Bal_0_30">
            <summary>Aged balance from 0 to 30 days old. Aging numbers are for entire family.  Only stored with guarantor.</summary>
        </member>
        <member name="F:OpenDentBusiness.FamAging.Bal_31_60">
            <summary>Aged balance from 31 to 60 days old. Aging numbers are for entire family.  Only stored with guarantor.</summary>
        </member>
        <member name="F:OpenDentBusiness.FamAging.Bal_61_90">
            <summary>Aged balance from 61 to 90 days old. Aging numbers are for entire family.  Only stored with guarantor.</summary>
        </member>
        <member name="F:OpenDentBusiness.FamAging.BalOver90">
            <summary>Aged balance over 90 days old. Aging numbers are for entire family.  Only stored with guarantor.</summary>
        </member>
        <member name="F:OpenDentBusiness.FamAging.InsEst">
            <summary>Insurance Estimate for entire family.  Only stored with guarantor.</summary>
        </member>
        <member name="F:OpenDentBusiness.FamAging.BalTotal">
            <summary>Total balance for entire family before insurance estimate.  Not the same as the sum of the 4 aging balances because this can be 
            negative.  Only stored with guarantor.</summary>
        </member>
        <member name="F:OpenDentBusiness.FamAging.PayPlanDue">
            <summary>Amount "due now" for all payment plans such that someone in this family is the payment plan guarantor.  
            This is the total of all payment plan charges past due (taking into account the PayPlansBillInAdvanceDays setting) subtract the amount 
            already paid for the payment plans.  Only stored with family guarantor.</summary>
        </member>
        <member name="T:OpenDentBusiness.FHIRContactPoint">
            <summary>Details of a Technology mediated contact point (phone, fax, email, etc.). https://www.hl7.org/fhir/datatypes.html#contactpoint 
            .</summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRContactPoint.FHIRContactPointNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRContactPoint.FHIRSubscriptionNum">
            <summary>FK to fhirsubscription.FHIRSubscriptionNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRContactPoint.ContactSystem">
            <summary>Enum:ContactPointSystem </summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRContactPoint.ContactValue">
            <summary>The actual contact point details.</summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRContactPoint.ContactUse">
            <summary>Enum:ContactPointUse </summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRContactPoint.ItemOrder">
            <summary>Specify preferred order of use (1 = highest)</summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRContactPoint.DateStart">
            <summary>Time when the contact point started to be in use.</summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRContactPoint.DateEnd">
            <summary>Timewhen the contact point stopped being used.</summary>
        </member>
        <member name="M:OpenDentBusiness.FHIRContactPoint.Copy">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ContactPointSystem.Phone">
            <summary>The value is a telephone number used for voice calls. Use of full international numbers starting with + is recommended to enable
            automatic dialing support but not required.</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactPointSystem.Fax">
            <summary>The value is a fax machine. Use of full international numbers starting with + is recommended to enable automatic dialing support 
            but not required.</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactPointSystem.Email">
            <summary>The value is an email address.</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactPointSystem.Pager">
            <summary>The value is a pager number. These may be local pager numbers that are only usable on a particular pager system.</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactPointSystem.Other">
            <summary>A contact that is not a phone, fax, or email address. The format of the value SHOULD be a URL. This is intended for various personal 
            contacts including blogs, Twitter, Facebook, etc. Do not use for email addresses. If this is not a URL, then it will require human 
            interpretation.</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactPointUse.Home">
            <summary>A communication contact point at a home; attempted contacts for business purposes might intrude privacy and chances are one will 
            contact family or other household members instead of the person one wishes to call. Typically used with urgent cases, or if no other contacts 
            are available.</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactPointUse.Work">
            <summary>An office contact point. First choice for business related contacts during business hours.</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactPointUse.Temp">
            <summary>A temporary contact point. The period can provide more detailed information.</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactPointUse.Old">
            <summary>This contact point is no longer in use (or was never correct, but retained for records).</summary>
        </member>
        <member name="F:OpenDentBusiness.ContactPointUse.Mobile">
            <summary>A telecommunication device that moves and stays with its owner. May have characteristics of all other use codes, suitable for urgent 
            matters, not the first choice for routine business.</summary>
        </member>
        <member name="T:OpenDentBusiness.FHIRSubscription">
            <summary>A subscription by a client that requests an alert whenever a change is made to a FHIR resource.</summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRSubscription.FHIRSubscriptionNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRSubscription.Criteria">
            <summary>Rule for server push criteria.</summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRSubscription.Reason">
            <summary>Description of why this subscription was created.</summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRSubscription.SubStatus">
            <summary>Enum:SubscriptionStatus </summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRSubscription.ErrorNote">
            <summary>Latest error note.</summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRSubscription.ChannelType">
            <summary>Enum:SubscriptionChannelType </summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRSubscription.ChannelEndpoint">
            <summary>Where the channel points to.</summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRSubscription.ChannelPayLoad">
            <summary>Mimetype to send, or blank for no payload.</summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRSubscription.ChannelHeader">
            <summary>Usage depends on the channel type.</summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRSubscription.DateEnd">
            <summary>When to automatically delete the subscription.</summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRSubscription.APIKeyHash">
            <summary>A hash of the API key that was used in the request to create this subscription.</summary>
        </member>
        <member name="F:OpenDentBusiness.FHIRSubscription._listContactPoints">
            <summary>List of attached ContactPoints for this Subscription.  Limit in db: 16M char.</summary>
        </member>
        <member name="P:OpenDentBusiness.FHIRSubscription.ListContactPoints">
            <summary>Set list to null to force refresh.</summary>
        </member>
        <member name="M:OpenDentBusiness.FHIRSubscription.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.SubscriptionStatus">
            <summary>The status of a Subscription. https://www.hl7.org/fhir/valueset-subscription-status.html </summary>
        </member>
        <member name="F:OpenDentBusiness.SubscriptionStatus.Requested">
            <summary>The client has requested the subscription, and the server has not yet set it up.</summary>
        </member>
        <member name="F:OpenDentBusiness.SubscriptionStatus.Active">
            <summary>The subscription is active.</summary>
        </member>
        <member name="F:OpenDentBusiness.SubscriptionStatus.Error">
            <summary>The server has an error executing the notification.</summary>
        </member>
        <member name="F:OpenDentBusiness.SubscriptionStatus.Off">
            <summary>Too many errors have occurred or the subscription has expired.</summary>
        </member>
        <member name="T:OpenDentBusiness.SubscriptionChannelType">
            <summary>Only rest_hook is supported by Open Dental FHIR. https://www.hl7.org/fhir/valueset-subscription-channel-type.html </summary>
        </member>
        <member name="F:OpenDentBusiness.SubscriptionChannelType.Rest_Hook">
            <summary>The channel is executed by making a post to the URI. If a payload is included, the URL is interpreted as the service base, and an 
            update (PUT) is made.</summary>
        </member>
        <member name="F:OpenDentBusiness.SubscriptionChannelType.Websocket">
            <summary>The channel is executed by sending a packet across a web socket connection maintained by the client. The URL identifies the 
            websocket, and the client binds to this URL.</summary>
        </member>
        <member name="F:OpenDentBusiness.SubscriptionChannelType.Email">
            <summary>	The channel is executed by sending an email to the email addressed in the URI (which must be a mailto:).</summary>
        </member>
        <member name="F:OpenDentBusiness.SubscriptionChannelType.Sms">
            <summary>The channel is executed by sending an SMS message to the phone number identified in the URL (tel:).</summary>
        </member>
        <member name="F:OpenDentBusiness.SubscriptionChannelType.Message">
            <summary>	The channel is executed by sending a message (e.g. a Bundle with a MessageHeader resource etc.) to the application identified in 
            the URI.</summary>
        </member>
        <member name="T:OpenDentBusiness.PatRestriction">
            <summary>This table is similar to the GroupPermission table.  However, unlike the GroupPermissions table, existence of a row for a patient in
            this table means the action is NOT allowed.  Hence the name PatRestrictions.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatRestriction.PatRestrictionNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatRestriction.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatRestriction.PatRestrictType">
            <summary>Enum:PatRestrict </summary>
        </member>
        <member name="M:OpenDentBusiness.PatRestriction.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.PatRestrict">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatRestrict.None">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.PatRestrict.ApptSchedule">
            <summary>1 - Patient cannot be scheduled nor have schedule edited. This PatRestrict should probably be checked every place the group 
            permissions AppointmentCreate, AppointmentMove, and AppointmentEdit are checked.</summary>
        </member>
        <member name="T:OpenDentBusiness.SigMessage">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.SigMessage.SigMessageNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigMessage.ButtonText">
            <summary>The text on the button</summary>
        </member>
        <member name="F:OpenDentBusiness.SigMessage.ButtonIndex">
            <summary>0-based index defines the order of the buttons.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigMessage.SynchIcon">
            <summary>0=none, or 1-9. The cell in the 3x3 tic-tac-toe main program icon that is to be synched with this button.
            It will light up or clear whenever this button lights or clears.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigMessage.FromUser">
            <summary>Text version of 'user' this message was sent from, which can actually be any description of a group or individual.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigMessage.ToUser">
            <summary>Text version of 'user' this message was sent to, which can actually be any description of a group or individual.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigMessage.MessageDateTime">
            <summary>Automatically set to the date and time upon insert.  Uses server time.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigMessage.AckDateTime">
            <summary>This date time will get set as soon as this message has been acknowledged.  How lights get turned off.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigMessage.SigText">
            <summary>The text that shows for the element, like the user name or the two word message.  No long text is stored here.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigMessage.SigElementDefNumUser">
            <summary>FK to sigelementdef.SigElementDefNum</summary>
        </member>
        <member name="F:OpenDentBusiness.SigMessage.SigElementDefNumExtra">
            <summary>FK to sigelementdef.SigElementDefNum</summary>
        </member>
        <member name="F:OpenDentBusiness.SigMessage.SigElementDefNumMsg">
            <summary>FK to sigelementdef.SigElementDefNum</summary>
        </member>
        <member name="M:OpenDentBusiness.SigMessage.Copy">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.SigMessage.CompareTo(System.Object)">
            <summary>IComparable.CompareTo implementation.  This is used to order sigmessages.
            This is needed because ordering SigMessages is too complex to do with a query.</summary>
        </member>
        <member name="T:OpenDentBusiness.StmtAdjAttach">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.StmtAdjAttach.StmtAdjAttachNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.StmtAdjAttach.StatementNum">
            <summary>FK to statement.StatementNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.StmtAdjAttach.AdjNum">
            <summary>FK to adjustment.AdjNum.</summary>
        </member>
        <member name="T:OpenDentBusiness.StmtPaySplitAttach">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.StmtPaySplitAttach.StmtPaySplitAttachNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.StmtPaySplitAttach.StatementNum">
            <summary>FK to statement.StatementNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.StmtPaySplitAttach.PaySplitNum">
            <summary>FK to paysplit.PaySplitNum.</summary>
        </member>
        <member name="T:OpenDentBusiness.StmtProcAttach">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.StmtProcAttach.StmtProcAttachNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.StmtProcAttach.StatementNum">
            <summary>FK to statement.StatementNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.StmtProcAttach.ProcNum">
            <summary>FK to procedurelog.ProcNum.</summary>
        </member>
        <member name="T:OpenDentBusiness.DisplayReport">
            <summary>One item is needed for each field on a claimform.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayReport.DisplayReportNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayReport.InternalName">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayReport.ItemOrder">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayReport.Description">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayReport.Category">
            <summary>Enum: DisplayReportCategory.  0 - ProdInc; 1 - Daily, 2 - Monthly, 3 - Lists, 4 - PublicHealth, 5 - ArizonaPrimaryCare.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayReport.IsHidden">
            <summary>.</summary>
        </member>
        <member name="M:OpenDentBusiness.DisplayReport.Copy">
            <summary>Returns a copy of the claimformitem.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayReportCategory.ProdInc">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayReportCategory.Daily">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayReportCategory.Monthly">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayReportCategory.Lists">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayReportCategory.PublicHealth">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayReportCategory.ArizonaPrimaryCare">
            <summary>5</summary>
        </member>
        <member name="T:OpenDentBusiness.OrthoChartTabLink">
            <summary>Links one orthocharttab to one displayfield.  Allows for displayfields to be part of multiple orthocharttabs.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrthoChartTabLink.OrthoChartTabLinkNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrthoChartTabLink.ItemOrder">
            <summary>Overrides the displayfield ItemOrder, so that each display field can have a different order in each ortho chart tab.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrthoChartTabLink.OrthoChartTabNum">
            <summary>FK to orthocharttab.OrthoChartTabNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrthoChartTabLink.DisplayFieldNum">
            <summary>FK to displayfield.DisplayFieldNum.</summary>
        </member>
        <member name="T:OpenDentBusiness.OrthoChartTab">
            <summary>Corresponds to one tab full of display fields inside the ortho chart.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrthoChartTab.OrthoChartTabNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrthoChartTab.TabName">
            <summary>The description of the tab which shows in the UI.  User editable.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrthoChartTab.ItemOrder">
            <summary>Item order of the tabs.  This is how they will display within the Ortho Chart window.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrthoChartTab.IsHidden">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.UpdateHistory">
            <summary>Makes an entry every time Open Dental has successfully updated to a newer version.
            New entries will always be for the newest version being used so that users can see a "history" of how long they used previous versions.
            This will also help EHR customers when attesting or when they get audited.</summary>
        </member>
        <member name="F:OpenDentBusiness.UpdateHistory.UpdateHistoryNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.UpdateHistory.DateTimeUpdated">
            <summary>DateTime that OD was updated to the Version.</summary>
        </member>
        <member name="F:OpenDentBusiness.UpdateHistory.ProgramVersion">
            <summary>The version that OD was updated to.</summary>
        </member>
        <member name="M:OpenDentBusiness.UpdateHistory.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.CDSPermission">
            <summary>User to specify user level permissions used for CDS interventions.  Unlike normal permissions and security, each permission has its own column and each employee has their own row.</summary>
        </member>
        <member name="F:OpenDentBusiness.CDSPermission.CDSPermissionNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.CDSPermission.UserNum">
            <summary>FK to userod.UserNum.  </summary>
        </member>
        <member name="F:OpenDentBusiness.CDSPermission.SetupCDS">
            <summary>True if allowed to edit EHR Triggers.</summary>
        </member>
        <member name="F:OpenDentBusiness.CDSPermission.ShowCDS">
            <summary>True if user should see EHR triggers that are enabled.  If false, no CDS interventions will show.</summary>
        </member>
        <member name="F:OpenDentBusiness.CDSPermission.ShowInfobutton">
            <summary>True if user can see Infobutton.</summary>
        </member>
        <member name="F:OpenDentBusiness.CDSPermission.EditBibliography">
            <summary>True if user can edit to bibliographic information.</summary>
        </member>
        <member name="F:OpenDentBusiness.CDSPermission.ProblemCDS">
            <summary>True to enable Problem based CDS interventions for this user.</summary>
        </member>
        <member name="F:OpenDentBusiness.CDSPermission.MedicationCDS">
            <summary>True to enable Medication based CDS interventions for this user.</summary>
        </member>
        <member name="F:OpenDentBusiness.CDSPermission.AllergyCDS">
            <summary>True to enable Allergy based CDS interventions for this user.</summary>
        </member>
        <member name="F:OpenDentBusiness.CDSPermission.DemographicCDS">
            <summary>True to enable Demographic based CDS interventions for this user.</summary>
        </member>
        <member name="F:OpenDentBusiness.CDSPermission.LabTestCDS">
            <summary>True to enable Lab Test based CDS interventions for this user.</summary>
        </member>
        <member name="F:OpenDentBusiness.CDSPermission.VitalCDS">
            <summary>True to enable Vital Sign based CDS interventions for this user.</summary>
        </member>
        <member name="M:OpenDentBusiness.CDSPermission.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.AppointmentType">
            <summary>Appointment type is used to override appointment color.  Might control other properties on appointments in the future.</summary>
        </member>
        <member name="F:OpenDentBusiness.AppointmentType.AppointmentTypeNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.AppointmentType.AppointmentTypeName">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AppointmentType.AppointmentTypeColor">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AppointmentType.ItemOrder">
            <summary>0 based</summary>
        </member>
        <member name="F:OpenDentBusiness.AppointmentType.IsHidden">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AppointmentType.Pattern">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AppointmentType.CodeStr">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentType.Clone">
            <summary>Returns a copy of the appointment.</summary>
        </member>
        <member name="T:OpenDentBusiness.ConnectionGroup">
            <summary>Used in the Central Enterprise Management Tool for creating a group of connections.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConnectionGroup.ConnectionGroupNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConnectionGroup.Description">
            <summary>Description of the connection group</summary>
        </member>
        <member name="M:OpenDentBusiness.ConnectionGroup.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ConnGroupAttach">
            <summary>Used in the Central Enterprise Management Tool to link CentralConnections and ConnectionGroups.</summary>
        </member>
        <member name="F:OpenDentBusiness.ConnGroupAttach.ConnGroupAttachNum">
            <summary>Primary Key</summary>
        </member>
        <member name="F:OpenDentBusiness.ConnGroupAttach.ConnectionGroupNum">
            <summary>FK to connectiongroup.ConnectionGroupNum</summary>
        </member>
        <member name="F:OpenDentBusiness.ConnGroupAttach.CentralConnectionNum">
            <summary>FK to centralconnection.CentralConnectionNum</summary>
        </member>
        <member name="M:OpenDentBusiness.ConnGroupAttach.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimSnapshot">
            <summary>Stores the original insurance writeoff, fee, and expected insurance payment information on claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSnapshot.ClaimSnapshotNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSnapshot.ProcNum">
            <summary>FK to procedurelog.ProcNum</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSnapshot.ClaimType">
            <summary>Deprecated column.  Used to store "S"=Secondary or "P"=Primary to identify the claim type for the claimproc.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSnapshot.Writeoff">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSnapshot.InsPayEst">
            <summary>Expected amount the insurance will pay on the procedure.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSnapshot.Fee">
            <summary>Procedure's ProcFee</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSnapshot.DateTEntry">
            <summary>The date/time that the snapshot was created.  Not user editable.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSnapshot.ClaimProcNum">
            <summary>FK to claimproc.ClaimProcNum</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimSnapshot.SnapshotTrigger">
            <summary>Enum:ClaimSnapshotTrigger Stores the trigger to which this ClaimSnapshot was created.</summary>
        </member>
        <member name="T:OpenDentBusiness.DashboardCell">
            <summary>Each DashboardLayout can include multiple DashboardCell(s). DashboardLayout and DashboardCell work in conjunction to form the dashboard layout.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCell.DashboardCellNum">
            <summary>PK.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCell.DashboardLayoutNum">
            <summary>FK to DashboardLayout.DashboardLayoutNum. This foreign key object will include the 0 based DashboardTabOrder, which is used to place this DashboardCell.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCell.CellRow">
            <summary>The row to which this DashboardCell belongs. 0 based.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCell.CellColumn">
            <summary>The column to which this DashboardCell belongs. 0 based.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCell.CellType">
            <summary>Determines what type of control will be docked in this cell.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCell.CellSettings">
            <summary>Typically a serialized string that the control will accept in order to change view attributes.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCell.LastQueryTime">
            <summary>Not used yet. Timestamp at which the cached data behind this cell was last retrieved.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCell.LastQueryData">
            <summary>Not used yet. Cached data behind this cell.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCell.RefreshRateSeconds">
            <summary>Not used yet. Frequency at which the cached data behind this cell should be retrieved.</summary>
        </member>
        <member name="M:OpenDentBusiness.DashboardCell.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DashboardCellType">
            <summary>Represents each type of graph which is available in graphic reports. Will be stored as string in DashboardCell unless specified otherwise.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCellType.NotDefined">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCellType.ProductionGraph">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCellType.IncomeGraph">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCellType.AccountsReceivableGraph">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCellType.NewPatientsGraph">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCellType.BrokenApptGraph">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCellType.HQMtMessage">
            <summary>HQ only. Will not be saved to DashboardCell table.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCellType.HQBillingInboundOutbound">
            <summary>HQ only. Will not be saved to DashboardCell table.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCellType.HQBillingUsageAccess">
            <summary>HQ only. Will not be saved to DashboardCell table.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCellType.HQMoMessage">
            <summary>HQ only. Will not be saved to DashboardCell table.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCellType.HQPhone">
            <summary>HQ only. Will not be saved to DashboardCell table.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardCellType.HQConfirmation">
            <summary>HQ only. Will not be saved to DashboardCell table.</summary>
        </member>
        <member name="T:OpenDentBusiness.DashboardLayout">
            <summary>Each tab in the dashboard has a corresponding DashboardLayout. DashboardLayout and DashboardCell work in conjunction to form the dashboard layout.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardLayout.DashboardLayoutNum">
            <summary>PK.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardLayout.UserNum">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardLayout.UserGroupNum">
            <summary>FK to usergroup.UserGroupNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardLayout.DashboardTabName">
            <summary>Text shown in the tab header.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardLayout.DashboardTabOrder">
            <summary>Orders the tabs in the tab control. 0 based.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardLayout.DashboardRows">
            <summary>Number of rows for this DashboardLayout. Min value of 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardLayout.DashboardColumns">
            <summary>Number of columns for this DashboardLayout. Min value of 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardLayout.DashboardGroupName">
            <summary>Groups multiple DashboardLayout(s) together.</summary>
        </member>
        <member name="M:OpenDentBusiness.DashboardLayout.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.HL7ProcAttach">
            <summary>Keeps track of whether procedures have been sent in an HL7 message.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7ProcAttach.HL7ProcAttachNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7ProcAttach.HL7MsgNum">
            <summary>FK to hl7msg.HL7MsgNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7ProcAttach.ProcNum">
            <summary>FK to procedurelog.ProcNum.</summary>
        </member>
        <member name="T:OpenDentBusiness.InsVerify">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.InsVerify.InsVerifyNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsVerify.DateLastVerified">
            <summary>The date of the last successful verification.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsVerify.UserNum">
            <summary>FK to userod.UserNum.  This is the assigned user for this verification.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsVerify.VerifyType">
            <summary>Enum:VerifyTypes The type of verification.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsVerify.FKey">
            <summary>Foreign key to any table defined in the VerifyType Enumeration.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsVerify.DefNum">
            <summary>FK to definition.DefNum.  Links to the category InsVerifyStatus</summary>
        </member>
        <member name="F:OpenDentBusiness.InsVerify.DateLastAssigned">
            <summary>The date of the last assignment of this verification.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsVerify.Note">
            <summary>Note for this insurance verification.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsVerify.PatNum">
            <summary>Not a database column.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsVerify.PlanNum">
            <summary>Not a database column.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsVerify.PatPlanNum">
            <summary>Not a database column.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsVerify.ClinicName">
            <summary>Not a database column.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsVerify.PatientName">
            <summary>Not a database column.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsVerify.CarrierName">
            <summary>Not a database column.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsVerify.AppointmentDateTime">
            <summary>Not a database column.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerify.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.VerifyTypes">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.VerifyTypes.None">
            <summary>0.  This means FKey should be 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.VerifyTypes.InsuranceBenefit">
            <summary>1.  This means FKey will link to insplan.InsPlanNum</summary>
        </member>
        <member name="F:OpenDentBusiness.VerifyTypes.PatientEnrollment">
            <summary>2.  This means FKey will link to patplan.PatPlanNum</summary>
        </member>
        <member name="T:OpenDentBusiness.InsVerifyHist">
            <summary>Inherits from insverify. A historical copy of an insurance verification record.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsVerifyHist.InsVerifyHistNum">
            <summary>Primary key.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsVerifyHist.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.TreatPlanAttach">
            <summary>Links active and inactive treatment plans to procedurelog rows.  
            These rows will be deleted as their corresponding procedures get set complete.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlanAttach.TreatPlanAttachNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlanAttach.TreatPlanNum">
            <summary>FK to treatplan.TreatPlanNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlanAttach.ProcNum">
            <summary>FK to procedurelog.ProcNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlanAttach.Priority">
            <summary>FK to definition.DefNum, which contains the text of the priority. Identical to Procedure.Priority but used to allow different priorities
             for the same procedure depending on which TP it is a part of.</summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlanAttach.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Ebill">
            <summary>Keeps track of account details of e-statements per clinic.</summary>
        </member>
        <member name="F:OpenDentBusiness.Ebill.EbillNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Ebill.ClinicNum">
            <summary>FK to clinic.ClinicNum</summary>
        </member>
        <member name="F:OpenDentBusiness.Ebill.ClientAcctNumber">
            <summary>The account number for the e-statement client.</summary>
        </member>
        <member name="F:OpenDentBusiness.Ebill.ElectUserName">
            <summary>The user name for this particular account.</summary>
        </member>
        <member name="F:OpenDentBusiness.Ebill.ElectPassword">
            <summary>The password for this particular account.</summary>
        </member>
        <member name="F:OpenDentBusiness.Ebill.PracticeAddress">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Ebill.RemitAddress">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EbillAddress">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EbillAddress.PracticePhysical">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.EbillAddress.PracticeBilling">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.EbillAddress.PracticePayTo">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.EbillAddress.ClinicPhysical">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.EbillAddress.ClinicBilling">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.EbillAddress.ClinicPayTo">
            <summary>5</summary>
        </member>
        <member name="T:OpenDentBusiness.EmailAutograph">
            <summary>A manually created autograph that can be inserted at the bottom of an outgoing email.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAutograph.EmailAutographNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAutograph.Description">
            <summary>Description of the autograph.  This is what the user sees when picking an autograph.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAutograph.EmailAddress">
            <summary>Email address(es) that this autograph is associated with.  An autograph can be associated with multiple addresses.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAutograph.AutographText">
            <summary>The actual text of the autograph.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAutograph.Copy">
            <summary>Returns a copy of this EmailAutograph.</summary>
        </member>
        <member name="T:OpenDentBusiness.EServiceSignal">
            <summary>Communication item from OD Cloud to workstation.</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceSignal.EServiceSignalNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceSignal.ServiceCode">
            <summary>Service which this signal applies to. Defined by eServiceCodes.</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceSignal.ReasonCategory">
            <summary>Category defined by ReasonCodeCategories. Can be zero if no grouping is necessary per a given service. Stored as an int for forward compatibility.</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceSignal.ReasonCode">
            <summary>The reason for the eServiceSignal. This code is used to determine what actions to take and how to process this message. 
            It is a function of ReasonCategory. It will most likely be defined by an enum that lives on HQ-only closed source.</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceSignal.Severity">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceSignal.Description">
            <summary>Human readable description of what this signal means, or a message for the user.</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceSignal.SigDateTime">
            <summary>Time signal was sent.</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceSignal.Tag">
            <summary>Used to store serialized data that can be used for processing this signal.</summary>
        </member>
        <member name="F:OpenDentBusiness.EServiceSignal.IsProcessed">
            <summary>After a message has been processed or acknowledged this is set true. Not currently used for heartbeat or service status signals.</summary>
        </member>
        <member name="M:OpenDentBusiness.EServiceSignal.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.eServiceSignalSeverity">
            <summary>Used to determine that status of the entire service.  Order of enum is important, from lowest to highest importance.</summary>
        </member>
        <member name="F:OpenDentBusiness.eServiceSignalSeverity.None">
            <summary>Service is not in use and is not supposed to be in use.</summary>
        </member>
        <member name="F:OpenDentBusiness.eServiceSignalSeverity.NotEnabled">
            <summary>Service is not in use and is not supposed to be in use.</summary>
        </member>
        <member name="F:OpenDentBusiness.eServiceSignalSeverity.Info">
            <summary>Used to convey information. Does not change the "working" status of the service. Will always be inserted with IsProcess=true.</summary>
        </member>
        <member name="F:OpenDentBusiness.eServiceSignalSeverity.Working">
            <summary>Service is operational and working as designed. Typcially used for heartbeat and initialization.</summary>
        </member>
        <member name="F:OpenDentBusiness.eServiceSignalSeverity.Warning">
            <summary>Recoverable error has has occurred and no user intervention is required. Typically requires user acknowledgement only.</summary>
        </member>
        <member name="F:OpenDentBusiness.eServiceSignalSeverity.Error">
            <summary>Recoverable error has has occurred and user intervention is probably required in addition to user acknowledgement only.</summary>
        </member>
        <member name="F:OpenDentBusiness.eServiceSignalSeverity.Critical">
            <summary>Unrecoverable error and the service has shut itself off. Immediate user intervention is required.</summary>
        </member>
        <member name="T:OpenDentBusiness.eServiceCode">
            <summary>Used by EServiceSignal.ServiceCode. Each service will have an entry here. Stored as an int for forward compatibility.</summary>
        </member>
        <member name="F:OpenDentBusiness.eServiceCode.Undefined">
            <summary>Should not be used. If you are seeing this then an entry was made incorrectly.</summary>		
        </member>
        <member name="F:OpenDentBusiness.eServiceCode.ListenerService">
            <summary>Runs 1 instance per customer on a given client PC.</summary>		
        </member>
        <member name="F:OpenDentBusiness.eServiceCode.IntegratedTexting">
            <summary>Runs 1 instance total on HQ server.</summary>		
        </member>
        <member name="F:OpenDentBusiness.eServiceCode.HQProxyService">
            <summary>Runs 1 instance total on HQ server.</summary>		
        </member>
        <member name="F:OpenDentBusiness.eServiceCode.MobileWeb">
            <summary>EService WebApp.</summary>		
        </member>
        <member name="F:OpenDentBusiness.eServiceCode.PatientPortal">
            <summary>EService WebApp.</summary>		
        </member>
        <member name="F:OpenDentBusiness.eServiceCode.WebSched">
            <summary>EService WebApp. The "Recall" version of Web Sched.</summary>		
        </member>
        <member name="F:OpenDentBusiness.eServiceCode.WebForms">
            <summary>EService WebApp.</summary>		
        </member>
        <member name="F:OpenDentBusiness.eServiceCode.ResellerPortal">
            <summary>EService WebApp.</summary>		
        </member>
        <member name="F:OpenDentBusiness.eServiceCode.FeaturePortal">
            <summary>EService WebApp.</summary>		
        </member>
        <member name="F:OpenDentBusiness.eServiceCode.ConfirmationRequest">
            <summary>EService WebApp.</summary>		
        </member>
        <member name="F:OpenDentBusiness.eServiceCode.OAuth">
            <summary>EService WebApp.</summary>		
        </member>
        <member name="F:OpenDentBusiness.eServiceCode.FHIR">
            <summary>RESTful API from HL7.</summary>		
        </member>
        <member name="F:OpenDentBusiness.eServiceCode.WebSchedNewPatAppt">
            <summary>EService WebApp. The "New Patient Appointment" version of Web Sched.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProviderErx">
            <summary>Tracks which providers have access to eRx based on NPI.  Synchronized with HQ.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderErx.ProviderErxNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderErx.PatNum">
            <summary>FK to patient.PatNum.  Holder of registration key only for HQ record, in customer record this will be 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderErx.NationalProviderID">
            <summary>NPI of a provider from the provider table.  May correspond to multiple records in the provider table.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderErx.IsEnabled">
            <summary>Set to true if the provider with the given NationalProviderID has access to eRx.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderErx.IsIdentifyProofed">
            <summary>True if HQ knows that the provider has completed the Identify Proofing (IDP) process and is allows access to eRx.
            A provider can be enabled even when this is false if the provider is an existing provider before version 15.4 (a legacy provider).</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderErx.IsSentToHq">
            <summary>Set to true if the NationalProviderID has been sent to HQ.  Will be false in customer db until sent.
            If true, this tells us that the IsEnabled and IsIdentityProofed flags are set according to HQ records.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProviderErx.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.RequiredField">
            <summary>Each row represents a field that is required to be filled out.</summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredField.RequiredFieldNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredField.FieldType">
            <summary>Enum:RequiredFieldType . The area of the program that uses this field.</summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredField.FieldName">
            <summary>Enum:RequiredFieldName </summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredField._listRequiredFieldConditions">
            <summary>This is not a data column but is stored in a seperate table named RequiredFieldCondition.</summary>
        </member>
        <member name="M:OpenDentBusiness.RequiredField.RefreshConditions">
            <summary>Refreshes the list holding the requirefieldconditions for this requiredfield.</summary>
        </member>
        <member name="M:OpenDentBusiness.RequiredField.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.RequiredFieldType">
            <summary>The part of the program where this required field is used.</summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldType.PatientInfo">
            <summary>0 - Edit Patient Information window and Add Family window.</summary>
        </member>
        <member name="T:OpenDentBusiness.RequiredFieldName">
            <summary>This enum is stored as a string, so the order of values can be rearranged.</summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.Address">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.Address2">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.AddressPhoneNotes">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.AdmitDate">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.AskArriveEarly">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.BillingType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.Birthdate">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.Carrier">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.ChartNumber">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.City">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.Clinic">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.CollegeName">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.County">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.CreditType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.DateFirstVisit">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.DateTimeDeceased">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.EligibilityExceptCode">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.EmailAddress">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.EmergencyName">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.EmergencyPhone">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.Employer">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.Ethnicity">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.FeeSchedule">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.FirstName">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.Gender">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.GradeLevel">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.GroupName">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.GroupNum">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.HomePhone">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.InsurancePhone">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.InsuranceSubscriber">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.InsuranceSubscriberID">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.Language">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.LastName">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.Position">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.MedicaidID">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.MedicaidState">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.MiddleInitial">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.MothersMaidenFirstName">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.MothersMaidenLastName">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.PatientStatus">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.PreferConfirmMethod">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.PreferContactMethod">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.PreferRecallMethod">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.PreferredName">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.PrimaryProvider">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.Race">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.ReferredFrom">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.ResponsibleParty">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.Salutation">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.SecondaryProvider">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.Site">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.SocialSecurityNumber">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.State">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.StudentStatus">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.TextOK">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.Title">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.TreatmentUrgency">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.TrophyFolder">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.Ward">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.WirelessPhone">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.WorkPhone">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldName.Zip">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.RequiredFieldCondition">
            <summary>When one of these conditions is true, the corresponding requiredfield will be triggered.</summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldCondition.RequiredFieldConditionNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldCondition.RequiredFieldNum">
            <summary>FK to requiredfield.RequiredFieldNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldCondition.ConditionType">
            <summary>Enum:RequiredFieldName </summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldCondition.Operator">
            <summary>Enum:ConditionOperator . The operator that is being applied to the ConditionType.</summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldCondition.ConditionValue">
            <summary>The value that the condition is being compared against. Could be 18, Fulltime, Male, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.RequiredFieldCondition.ConditionRelationship">
            <summary>Enum:LogicalOperator 0-None,1-And,2-Or. This field is only used when comparing continuous values such as age or date.</summary>
        </member>
        <member name="M:OpenDentBusiness.RequiredFieldCondition.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ConditionOperator">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ConditionOperator.Equals">
            <summary>0: =</summary>
        </member>
        <member name="F:OpenDentBusiness.ConditionOperator.NotEquals">
            <summary>1: !=</summary>
        </member>
        <member name="F:OpenDentBusiness.ConditionOperator.GreaterThan">
            <summary>2: ></summary>
        </member>
        <member name="F:OpenDentBusiness.ConditionOperator.LessThan">
            <summary>3: &lt;</summary>
        </member>
        <member name="F:OpenDentBusiness.ConditionOperator.GreaterThanOrEqual">
            <summary>4: >=</summary>
        </member>
        <member name="F:OpenDentBusiness.ConditionOperator.LessThanOrEqual">
            <summary>5: &lt;=</summary>
        </member>
        <member name="T:OpenDentBusiness.LogicalOperator">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.LogicalOperator.None">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.LogicalOperator.And">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.LogicalOperator.Or">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.SmsPhone">
            <summary>A phone number used to send and receive SMS.
            When clinics is enabled all SmsPhones with clinic num 0 should be updated to have clinic num of the lowest numbered clinic.
            When clinics are disabled, all SmsPhones with the lowest numbered clinic num should be re-associated to clinic number 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsPhone.SmsPhoneNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsPhone.ClinicNum">
            <summary>FK to clinic.ClinicNum. </summary>
        </member>
        <member name="F:OpenDentBusiness.SmsPhone.PhoneNumber">
            <summary>String representation of the phone number in international format. Ex: 15035551234 This field should not contain any formatting characters.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsPhone.DateTimeActive">
            <summary>Date and time this phone number became active.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsPhone.DateTimeInactive">
            <summary>Date and time this phone number became inactive. Once inactive, the phone is dead and cannot be reactivated. A new number will have to be purchased.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsPhone.InactiveCode">
            <summary>Used to indicate why this phone number was made inactive.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsPhone.CountryCode">
            <summary>Country linked to this phone's clinic at the instant that this phone is created. Based on ISO31661.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsPhone.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.SmsToMobile">
            <summary>Messages are only inserted into this table after they are accepted by ODHQ.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.SmsToMobileNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.GuidMessage">
            <summary>GUID. Uniquely identifies this message and is used for tracking message status.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.GuidBatch">
            <summary>GUID. When sending batch messages, all messages will have the same batch GUID that should be the GUID of the first message within the batch.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.SmsPhoneNumber">
            <summary>This is the sending phone number in international format. Each office may have several different numbers that they use.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.MobilePhoneNumber">
            <summary>The phone number that this message was sent to. Must be kept in addition to the PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.IsTimeSensitive">
            <summary>Set to true if this message should "jump the queue" and be sent asap.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.MsgType">
            <summary>Enum:SmsMessageSource  This is used to identify where in the program this message originated from.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.MsgText">
            <summary>The contents of the message.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.SmsStatus">
            <summary>Enum:SmsDeliveryStatus  Set by the Listener, tracks status of SMS.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.MsgParts">
            <summary>The count of parts that this message will be broken into when sent.
            A single long message will be broken into several smaller 153 utf8 or 70 unicode character messages.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.MsgChargeUSD">
            <summary>The amount charged to the customer. Total cost for this message always stored in US Dollars.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.ClinicNum">
            <summary>FK to clinic.ClinicNum.  0 when not using clinics.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.CustErrorText">
            <summary>Only used when SmsDeliveryStatus==Failed.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.DateTimeSent">
            <summary>Time message was accepted at ODHQ.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.DateTimeTerminated">
            <summary>Date time that the message was either successfully delivered or failed.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsToMobile.IsHidden">
            <summary>Messages are hidden, not deleted.</summary>
        </member>
        <member name="T:OpenDentBusiness.SmsMessageSource">
            <summary>This helps us determine how to handle messages.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsMessageSource.Undefined">
            <summary>0. Should not be used.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsMessageSource.DirectSms">
            <summary>1. This should be used for one-off messages that might be sent as direct communication with patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsMessageSource.Recall">
            <summary>2. Used when sending single or batch recall SMS.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsMessageSource.Reminder">
            <summary>3. Used when sending single or batch reminder SMS.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsMessageSource.TestNoCharge">
            <summary>4. Used when sending a test message from HQ. Customer will not be charged for this message.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsMessageSource.Confirmation">
            <summary>5. Used when sending confirmations.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsMessageSource.ConfirmationRequest">
            <summary>6. Used when sending confirmation requests. Will be the subject of automated response processing.</summary>
        </member>
        <member name="T:OpenDentBusiness.SmsDeliveryStatus">
            <summary>None should never be used, the code should be re-written to not use it.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsDeliveryStatus.None">
            <summary>0. Should not be used.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsDeliveryStatus.Pending">
            <summary>1. After a message has been accepted at ODHQ. Before any feedback.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsDeliveryStatus.DeliveryConf">
            <summary>2. Delivered to customer, carrier replied with confirmation.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsDeliveryStatus.DeliveryUnconf">
            <summary>3. Delivered to customer, no confirmation of failure or delivery sent back from carrier.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsDeliveryStatus.FailWithCharge">
            <summary>4. Attempted delivery, failure message return after arriving at handset.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsDeliveryStatus.FailNoCharge">
            <summary>5. Attempted delivery, immediate failure confirmation received from carrier.</summary>
        </member>
        <member name="T:OpenDentBusiness.SmsFromMobile">
            <summary>A Mobile Originating SMS bound for the office. Will usually be a re-constructed message.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromMobile.SmsFromMobileNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromMobile.PatNum">
            <summary>FK to patient.PatNum. Not sent from HQ.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromMobile.ClinicNum">
            <summary>FK to clinic.ClinicNum. </summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromMobile.CommlogNum">
            <summary>FK to commlog.CommlogNum. Not sent from HQ.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromMobile.MsgText">
            <summary>Contents of the message.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromMobile.DateTimeReceived">
            <summary>Date and time message was inserted into the DB. Not sent from HQ.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromMobile.SmsPhoneNumber">
            <summary>This is the Phone Number of the office that the mobile device sent a message to.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromMobile.MobilePhoneNumber">
            <summary>This is the PhoneNumber that this message was sent from.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromMobile.MsgPart">
            <summary>Message part sequence number. For single part messages this should always be 1. 
            For messages that exist as multiple parts, due to staggered delivery of the parts, this will be a number between 1 and MsgTotal.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromMobile.MsgTotal">
            <summary>Total count of message parts for this single message identified by MsgRefID.
            For single part messages this should always be 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromMobile.MsgRefID">
            <summary>Each part of a multipart message will have the same MsgRefID.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromMobile.SmsStatus">
            <summary>Enum:SmsFromStatus .</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromMobile.Flags">
            <summary>Words surrounded by spaces, flags should be all lower case. This allows simple querrying. Example: " junk  recall " allows you to 
            write "WHERE Flags like "% junk %" without having to worry about commas. Also, adding and removing tags is easier. Example: Flags=Flags.Replace(" junk ","");</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromMobile.IsHidden">
            <summary>Messages are not deleted, they can only be hidden.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromMobile.GuidMessage">
            <summary>FK to ConfirmationRequest.GuidMessageFromMobile. Generated at HQ when the confirmation pending is terminated with confirmation text message.</summary>
        </member>
        <member name="M:OpenDentBusiness.SmsFromMobile.Copy">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.SmsFromMobile.IsRead">
            <summary>Convenient way to access the Flags and check or set Read status.</summary>
        </member>
        <member name="T:OpenDentBusiness.SmsFromStatus">
            <summary>Status of an incoming message.</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromStatus.ReceivedUnread">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.SmsFromStatus.ReceivedRead">
            <summary>1</summary>
        </member>
        <member name="T:OpenDentBusiness.MedLabFacAttach">
            <summary>Links a MedLab or a MedLabResult to a place of service.  Either the MedLabNum OR the MedLabResultNum column will be populated, never
            both, so this will link the facility to EITHER a MedLab OR a MedLabResult object.
            Every MedLab and MedLabResult will have 1 to many laboratories attached.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabFacAttach.MedLabFacAttachNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabFacAttach.MedLabNum">
            <summary>FK to medlab.MedLabNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabFacAttach.MedLabResultNum">
            <summary>FK to medlabresult.MedLabResultNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabFacAttach.MedLabFacilityNum">
            <summary>FK to medlabfacility.MedLabFacilityNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabFacAttach.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.MedLabFacility">
            <summary>Medical lab facility that performed the test procedure(s).  Contains data from the ZPS segment.  Each MedLab object can have one to
            many places of service, each in a repetition of the ZPS segment.  Each repetition will be its own row in this table.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabFacility.MedLabFacilityNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabFacility.FacilityName">
            <summary>ZPS.3 - Facility Name.  Medical lab location name that performed the testing.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabFacility.Address">
            <summary>ZPS.4.1 - Facility Address.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabFacility.City">
            <summary>ZPS.4.3 - Facility City.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabFacility.State">
            <summary>ZPS.4.4 - Facility State or Province.  Upper case state abbreviation.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabFacility.Zip">
            <summary>ZPS.4.5 - Facility Zip or Postal Code.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabFacility.Phone">
            <summary>ZPS.5 - Facility Phone Number.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabFacility.DirectorTitle">
            <summary>ZPS.7.1 - Facility Director Title.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabFacility.DirectorLName">
            <summary>ZPS.7.2 - Facility Director Last Name.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabFacility.DirectorFName">
            <summary>ZPS.7.3 - Facility Director First Name.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabFacility.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.MedLabSpecimen">
            <summary>The EHRLabSpecimen table is structured to tightly with the HL7 standard and should have names that more reflect how the user will
            consume the data and for that reason for actual implementation we are using these medlab tables.
            Medical lab specimen.  Contains data from the SPM segment.  Each MedLab object can have 0 to many specimen segments.
            Each segment will be its own row in this table.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabSpecimen.MedLabSpecimenNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabSpecimen.MedLabNum">
            <summary>FK to medlab.MedLabNum.  Each MedLab object can have 0 to many specimens pointing to it.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabSpecimen.SpecimenID">
            <summary>SPM.2 - Specimen ID.  Unique identifier for the specimen as referenced by the Placer application, the Filler application, or both.
            The value sent in this field should be the identification value sent on the specimen container.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabSpecimen.SpecimenDescript">
            <summary>SPM.14 - Specimen Description.  Additional information about the specimen.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabSpecimen.DateTimeCollected">
            <summary>SPM.17 - Specimen Collection Date/Time.  yyyyMMddHHmm format in the message, no seconds.  The date and time when the specimen was
            acquired from the source.  This is a DR - Date/Time Range data type, so it may have more than one component if a specimen was collected over
            a period of time.  The first component is the start date/time so we will make sure to only store SPM.17.1 in this field.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabSpecimen.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.MedLabResult">
            <summary>Medical lab result.  The EHRLabResult table is structured too tightly with the HL7 standard and should have names that more reflect how 
            the user will consume the data and for that reason for actual implementation we are using these medlab tables.
            This table is currently only used for LabCorp, but may be utilized by other third party lab
            services in the future.  These fields are required for the LabCorp result report, used to link the result to an order,
            or for linking a parent and child result.  Contains data from the OBX, ZEF, and applicable NTE segments.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.MedLabResultNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.MedLabNum">
            <summary>FK to medlab.medLabNum.  Each MedLab object can have one or more results pointing to it.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.ObsID">
            <summary>OBX.3.1 - Observation Identifier.  Reflex results will have the ObsID of the parent in OBR.26 for linking.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.ObsText">
            <summary>OBX.3.2 - Observation Text.  LabCorp report field "TESTS".  LabCorp test name.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.ObsLoinc">
            <summary>OBX.3.4 - Alternate Identifier (LOINC).  This is the LOINC code for the observation.
            When displaying the results, LabCorp requires OBX.3.2, the text name of the test to be displayed, not the LOINC code.
            But we will store it so we can link to the LOINC code table for reporting purposes.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.ObsLoincText">
            <summary>OBX.3.5 - Alternate Observation Text (LOINC Description).  The LOINC code description for the observation.
            We will display OBX.3.2 per LabCorp requirements, but we will store this description for reporting purposes.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.ObsIDSub">
            <summary>OBX.4 - Observation Sub ID.  Used to aid in the identification of results with the same Observation ID (OBX.3) within a given OBR.
            This value is used to tie the results to the same organism.  The value in OBX.5.3 tells whether this OBX is the organism, observation, or
            antibiotic and then the value in OBX.4 links them together as to whether this is for organism #1, organism #2, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.ObsValue">
            <summary>OBX.5.1 - Observation Value.  LabCorp report field "RESULT".
            Can be null if coded entries, prelims, canceled, or >21 chars and being returned as an attached NTE.
            "TNP" will be reported for Test Not Performed.  For value >21 chars in length: OBX.2 will be 'TX' for text,
            OBX.5 will be NULL (empty field), and the value will be in attached NTEs.
            Examples: Value less than 21 chars:
            OBX|1|ST|001180^Potassium, Serum^L||K+ is >6.5 mEq/L.||3.5-5.5|A||N|F|19830527||200605040929|01|
            Value >21 chars:
            OBX|6|TX|001180^Potassium, Serum^L||||3.5-5.5|||N|C|19830527||200511071406|01|
            NTE|1|L|Red cells observed in serum. Glucose may be falsely decreased.
            NTE|2|L|Potassium may be falsely increased.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.ObsSubType">
            <summary>OBX.5.3 - Data Subtype.  Used to identify the coding system. Required if Discrete Microbiology testing is ordered to identify
            Microbiology Result Type.  Example of use: If OBX.5.3 is ORM, then the observation sub ID in OBX.4 is used to associate the result with
            a specific organism.  OBX.4 might contain 1, 2, or 3 meaning the result is for organism #1, organism #2, or organism #3.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.ObsUnits">
            <summary>OBX.6.1 - Identifier.  LabCorp report field "UNITS".  Units of measure, if too large it will be in the NTE segment.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.ReferenceRange">
            <summary>OBX.7 - Reference Ranges.  LabCorp report field "REFERENCE INTERVAL".  Only if applicable.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.AbnormalFlag">
            <summary>OBX.8 - Abnormal Flags.  LabCorp report field "FLAG".  Blank or null is normal.  When this is displayed on the LabCorp report
            it must be the human readable display name, so for example _gt (>) is displayed as "Panic High" and _lt (&lt;) is "Panic Low".</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.ResultStatus">
            <summary>OBX.11 - Observation Result Status.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.DateTimeObs">
            <summary>OBX.14 - Date/Time of Observation.  yyyyMMddHHmm format in the message, no seconds.
            Date and time tech entered result into the Lab System.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.FacilityID">
            <summary>OBX.15 - Producer ID (Producer’s Reference).  LabCorp report field "LAB".  ID of LabCorp Facility responsible for performing the
            testing.  The Lab Name is supplied in the ZPS segment.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.DocNum">
            <summary>FK to document.DocNum.  ZEF.2 - Embedded File.  Each result may have one or more ZEF segments for embedded files.
            The base-64 text version of the PDF is sent in ZEF.2.  If the file size exceeds 50k, then multiple segments will be sent with 50k blocks
            of the text.  When processing, we will concatenate all ZEF.2 fields, create the PDF document, store the file in the patient's image folder,
            and create an entry in the document table.  Then update this field with the pointer to the document table entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLabResult.Note">
            <summary>NTE.3 at the OBX level.  The NTE segment is repeatable and the Comment Text component is limited to 78 characters.  Multiple NTE
            segments can be used for longer comments.  All NTE segments at the OBX level will be concatenated and stored in this one field.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLabResult.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.AbnormalFlag">
            <summary>MedLab Abnormal Flags.  Similar to EhrLabResult.HL70078 abnormal flag enum.</summary>
        </member>
        <member name="F:OpenDentBusiness.AbnormalFlag.None">
            <summary>0 - None.  Blank or null value indicates normal result, so no abnormal flag.</summary>
        </member>
        <member name="F:OpenDentBusiness.AbnormalFlag._gt">
            <summary>1 - Panic High.  Actual value is ">" but symbol cannot be used as an enum value.</summary>
        </member>
        <member name="F:OpenDentBusiness.AbnormalFlag._lt">
            <summary>2 - Panic Low.  Actual value is "&lt;" but symbol cannot be used as an enum value.</summary>
        </member>
        <member name="F:OpenDentBusiness.AbnormalFlag.A">
            <summary>3 - Abnormal.  Applies to non-numeric results.</summary>
        </member>
        <member name="F:OpenDentBusiness.AbnormalFlag.AA">
            <summary>4 - Critical Abnormal.  Applies to non-numeric results.</summary>
        </member>
        <member name="F:OpenDentBusiness.AbnormalFlag.H">
            <summary>5 - Above High Normal.</summary>
        </member>
        <member name="F:OpenDentBusiness.AbnormalFlag.HH">
            <summary>6 - Alert High.</summary>
        </member>
        <member name="F:OpenDentBusiness.AbnormalFlag.I">
            <summary>7 - Intermediate.  For Discrete Microbiology susceptibilities only.</summary>
        </member>
        <member name="F:OpenDentBusiness.AbnormalFlag.L">
            <summary>8 - Below Low Normal.</summary>
        </member>
        <member name="F:OpenDentBusiness.AbnormalFlag.LL">
            <summary>9 - Alert Low.</summary>
        </member>
        <member name="F:OpenDentBusiness.AbnormalFlag.NEG">
            <summary>10 - Negative for Drug Interpretation Codes and Discrete Microbiology.</summary>
        </member>
        <member name="F:OpenDentBusiness.AbnormalFlag.POS">
            <summary>11 - Positive for Drug Interpretation Codes and Discrete Microbiology.</summary>
        </member>
        <member name="F:OpenDentBusiness.AbnormalFlag.R">
            <summary>12 - Resistant.  For Discrete Microbiology susceptibilities only.</summary>
        </member>
        <member name="F:OpenDentBusiness.AbnormalFlag.S">
            <summary>13 - Susceptible.  For Discrete Microbiology susceptibilities only.</summary>
        </member>
        <member name="T:OpenDentBusiness.DataSubtype">
            <summary>Used to identify the coding system. Required if Discrete Microbiology testing is ordered to identify Microbiology Result Type.
            Example of use: If OBX.5.3 is ORM, then the observation sub ID in OBX.4 is used to associate the result with a specific organism.
            OBX.4 might contain 1, 2, or 3 meaning the result is for organism #1, organism #2, or organism #3.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataSubtype.Unknown">
            <summary>This idicates that we are unable to parse the value from the HL7 message into a data subtype.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataSubtype.ANT">
            <summary>Antibody (for Discrete Microbiology only)</summary>
        </member>
        <member name="F:OpenDentBusiness.DataSubtype.ORM">
            <summary>Organism identifier (for Discrete Microbiology only)</summary>
        </member>
        <member name="F:OpenDentBusiness.DataSubtype.ORP">
            <summary>Presumptive organism identifier (for Discrete Microbiology only)</summary>
        </member>
        <member name="F:OpenDentBusiness.DataSubtype.OBS">
            <summary>Observation (for Discrete Microbiology only)</summary>
        </member>
        <member name="F:OpenDentBusiness.DataSubtype.MOD">
            <summary>Modifier (for Discrete Microbiology only)</summary>
        </member>
        <member name="F:OpenDentBusiness.DataSubtype.L">
            <summary>Local Identifier (default when no Microbiology Result Text)</summary>
        </member>
        <member name="F:OpenDentBusiness.DataSubtype.PDF">
            <summary>Embedded PDF result type or separate PDF file</summary>
        </member>
        <member name="F:OpenDentBusiness.DataSubtype.TIF">
            <summary>Embedded TIF result type or a separate TIF file</summary>
        </member>
        <member name="T:OpenDentBusiness.MedLab">
            <summary>The EHRLab table is structured to tightly with the HL7 standard and should have names that more reflect how the user will
            consume the data and for that reason for actual implementation we are using these medlab tables.
            Medical lab observation order.  This table is currently only used for LabCorp, but may be utilized by other third party lab
            services in the future.  These are the fields required for the LabCorp result report, used to link the order to the result(s),
            specimen(s), place(s) of service, or for linking parent and child results.
            This table contains data from the PID, ORC, OBR, and applicable NTE segments
            
             </summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.MedLabNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.ProvNum">
            <summary>FK to provider.ProvNum.  Can be 0. Attempt to match ordering prov external IDs to internal provnum.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.SendingApp">
            <summary>MSH-2 - Sending Application.  Used to identify the LabCorp Lab System sending the results.
            Possible values for LabCorp (as of their v10.7 specs): '1100' - LabCorp Lab System, 'DIANON' - DIANON Systems,
            'ADL' - Acupath Diagnostic Laboratories, 'EGL' - Esoterix Genetic Laboratories.
            For backward compatibility only: 'CMBP', 'LITHOLINK', 'USLABS'</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.SendingFacility">
            <summary>MSH-3 - Sending Facility.  Identifies the LabCorp laboratory responsible for the client.
            It could be a LabCorp assigned 'Responsible Lab Code' representing the responsible laboratory or it could be a CLIA number.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.PatNum">
            <summary>FK to patient.PatNum.  PID.2 - External Patient ID. LabCorp report field "Client Alt. Pat ID".</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.PatIDLab">
            <summary>PID.3 - Lab Assigned Patient Id.  LabCorp report field "Specimen Number".  LabCorp assigned, alpha numeric specimen number.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.PatIDAlt">
            <summary>PID.4 - Alternate Patient ID.  LabCorp report field "Patient ID".  Alternate patient ID.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.PatAge">
            <summary>PID.7.2/7.3/7.4 - Patient Age Years/Months/Days.  LabCorp report field "Age (Y/M/D)".  YYY/MM/DD format.  Three chars for years,
            2 each for months and days.  Some tests require age for calculation of result.  This will be the age at the time of the test, so we will use
            the values in the message instead of re-calculating..</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.PatAccountNum">
            <summary>PID.18.1 - Account Number.  LabCorp report field "Account Number".  LabCorp Client ID, 8 digit account number.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.PatFasting">
            <summary>PID.18.7 - Fasting.  LabCorp report field "Fasting".  Y, N, or blank.
            A blank component will be stored as 0 - Unknown, the result report fasting field will be blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.SpecimenID">
            <summary>ORC.2.1 and OBR.2.1 - Unique Foreign Accession or Specimen ID.  LabCorp report field "Client Accession (ACC)".
            ID sent on the specimen container.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.SpecimenIDFiller">
            <summary>ORC.3.1 and OBR.3.1 - Internal (to LabCorp for example)/Filler Accession or Specimen ID.
            LabCorp assigned specimen number, reused on a yearly basis.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.ObsTestID">
            <summary>OBR.4.1 - Observation Battery Identifier.  Reflex result will have this value in OBR.29 to link the reflex to the parent.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.ObsTestDescript">
            <summary>OBR.4.2 - Observation Battery Text.  LabCorp report field "Tests Ordered".</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.ObsTestLoinc">
            <summary>OBR.4.4 - Alternate Battery Identifier (LOINC).  This is the LOINC code for the test performed.
            When displaying the results, LabCorp requires OBR.4.2, the text name of the test to be displayed, not the LOINC code.
            But we will store it so we can link to the LOINC code table for reporting purposes.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.ObsTestLoincText">
            <summary>OBR.4.5 - Alternate Observation Battery Text (LOINC Description).  The LOINC code description for the test performed.
            We will display OBR.4.2 per LabCorp requirements, but we will store this description for reporting purposes.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.DateTimeCollected">
            <summary>OBR.7 - Observation/Specimen Collection Date/Time.  LabCorp report field "Date &amp; Time Collected".
            yyyyMMddHHmm format in the message, no seconds.  May be blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.TotalVolume">
            <summary>OBR.9 - Collection/Urine Volume (Quantity/Field Value).  LabCorp report field "Total Volume".
            The LabCorp document says this field is "Numeric Characters", but the HL7 documentation data type as CQ, which is a number with units
            in the form of Quantity^Units.  The Units component has subcomponents: ID&amp;Text&amp;Name of Coding System&amp;Alt ID&amp;Alt Text&amp;
            Name of Alt Coding System&amp;Coding System Version ID&amp;Alt Coding System Version ID&amp;Original Text.
            We will make this a string column and store the Quantity with the Units ID subcomponent if present.
            The default unit of measurement is ML, so if the field is a number only we will add ML.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.ActionCode">
            <summary>OBR.11 - Action Code.  Blank for normal result, "G" for reflex result.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.ClinicalInfo">
            <summary>OBR.13.1 - Relevant Clinical Information.  LabCorp report field "Additional Information".  The report field will be filled with this
            value from the first OBR record in the message.  The message limits this field to 64 characters, the rest is truncated.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.DateTimeEntered">
            <summary>OBR.14 - Date/Time of Specimen Receipt in Lab.  LabCorp report field "Date Entered".  yyyyMMddHHmm format in the message, no seconds.
            Date and time the order was entered in the Lab System.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.OrderingProvNPI">
            <summary>ORC.12.1 and OBR.16.1 - Ordering Provider ID Number.  LabCorp report field "NPI".  ORC.12.* and OBR.16.* are repeatable, the eighth
            component identifies the source of the ID in the first component.  Component 8 possible values: "U"-UPIN,
            "P"-Provider Number (Medicaid or Commercial Ins Provider ID), "N"-NPI (Required for third party billing), "L"-Local (Physician ID).</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.OrderingProvLocalID">
            <summary>ORC.12.1 and OBR.16.1 - Ordering Provider ID Number.  LabCorp report field "Physician ID".  ORC.12.* and OBR.16.* are repeatable,
            the eighth component identifies the source of the ID in the first component.  Component 8 possible values: "U"-UPIN,
            "P"-Provider Number (Medicaid or Commercial Ins Provider ID), "N"-NPI (Required for third party billing), "L"-Local (Physician ID).</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.OrderingProvLName">
            <summary>ORC.12.2 and OBR.16.2 - Ordering Provider Last Name.  LabCorp report field "Physician Name".  Last, First.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.OrderingProvFName">
            <summary>ORC.12.3 and OBR.16.3 - Ordering Provider First Initial.  LabCorp report field "Physician Name".  Last, First.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.SpecimenIDAlt">
            <summary>OBR.18 - Alternate Unique Foreign Accession / Specimen ID.  LabCorp report field "Control Number".</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.DateTimeReported">
            <summary>OBR.22 - Date/Time Observations Reported.  LabCorp report field "Date &amp; Time Reported".  yyyyMMddHHmm format in the message, no secs.
            Date and time the results were released from the Lab System.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.ResultStatus">
            <summary>OBR.25 - Order Result Status.  LabCorp possible values: "F" - Final, "P" - Preliminary, "X" - Cancelled, "C" - Corrected.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.ParentObsID">
            <summary>OBR.26.1 - Link to Parent Result or Organism Link to Susceptibility.
            A reflex test will have the parent's OBX.3.1 value here for linking.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.ParentObsTestID">
            <summary>OBR.29 - Link to Parent Order.  A reflex test will have the value from OBR.4.1 of the original order in this field for linking.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.NotePat">
            <summary>NTE.3 - Comment Text, PID Level.  The NTE segment is repeatable and the Comment Text component is limited to 78 characters.  Multiple
            NTE segments can be used for longer comments.  All NTE segments at the PID level will be concatenated and stored in this one field.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.NoteLab">
            <summary>NTE.3 - Comment Text, OBR level.  The NTE segment is repeatable and the Comment Text component is limited to 78 characters.  Multiple
            NTE segments can be used for longer comments.  All NTE segments at the OBR level will be concatenated and stored in this one field.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.FileName">
            <summary>Not unique. More than one MedLab object can point to the same FileName, so deleting the MedLab object does not necessarily mean the
            file can also be deleted.  This is the filename of the original archived message that was processed to create this medlab object as well as
            associated medlabresult, medlabspecimen, and medlabfacility obects.  The files will be stored in the OpenDentImages folder in a sub-folder
            called MedLabHL7.  If a message is processed correctly it will be moved into the sub-folder MedLabHL7/Processed.  Any message that remains in
            the MedLabHL7 folder and aren't moved into the Processed folder failed at some point during processing.  If the option to store images directly
            in the database is chosen, this will be an empty field and there will not be the option to display the original HL7 message.  
            This is a relative file path from the ImageStore.GetPreferredAtoZpath(), 
            Example: "MedLabHL7/FileName.txt" OR "MedLabHL7/Processed/FileName.txt" 
            Use: string pathToFile=ODFileUtils.CombinePaths(ImageStore.GetPreferredAtoZpath(),FileName)</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab.OriginalPIDSegment">
            <summary>The PID Segment from the HL7 message used to generate this MedLab object.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedLab._listMedLabResults">
            <summary>This isn't a db column but is stored in the MedLabResult table.</summary>
        </member>
        <member name="P:OpenDentBusiness.MedLab.IsPreliminaryResult">
            <summary>Read-only property that indicates whether the test is marked as preliminary or any result returned for the test which is the most
            recent/up-to-date for that result is marked as preliminary.</summary>
        </member>
        <member name="P:OpenDentBusiness.MedLab.ListMedLabResults">
            <summary>Only filled with MedLabResults when value is used.  To refresh ListMedLabResults, set it equal to null or explicitly reassign it using
            MedLabResults.GetForLab(MedLabNum).</summary>
        </member>
        <member name="M:OpenDentBusiness.MedLab.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ResultAction">
            <summary>Order Result Action Code.  To identify the type of result being returned.</summary>
        </member>
        <member name="F:OpenDentBusiness.ResultAction.None">
            <summary>0 - None.  Standard results will be blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.ResultAction.A">
            <summary>1 - Add On.  Limited usage and not applicable for all add on tests.</summary>
        </member>
        <member name="F:OpenDentBusiness.ResultAction.G">
            <summary>2 - Reflex.  Lab generated result for test not on the original order.</summary>
        </member>
        <member name="T:OpenDentBusiness.ResultStatus">
            <summary>Order Result Status.  Identification of status of results at the ordered item level.</summary>
        </member>
        <member name="F:OpenDentBusiness.ResultStatus.C">
            <summary>0 - Corrected Result.</summary>
        </member>
        <member name="F:OpenDentBusiness.ResultStatus.F">
            <summary>1 - Final.  Result complete and verified.</summary>
        </member>
        <member name="F:OpenDentBusiness.ResultStatus.I">
            <summary>2 - Incomplete.  For Discrete Microbiology Testing.</summary>
        </member>
        <member name="F:OpenDentBusiness.ResultStatus.P">
            <summary>3 - Preliminary.  Final not yet obtained.</summary>
        </member>
        <member name="F:OpenDentBusiness.ResultStatus.X">
            <summary>4 - Canceled.  Procedure cannot be done.  Result canceled due to Non-Performance.</summary>
        </member>
        <member name="T:OpenDentBusiness.StateAbbr">
            <summary>State abbreviations are always copied to patient records rather than linked.  
            Items in this list can be freely altered or deleted without harming patient data.</summary>
        </member>
        <member name="F:OpenDentBusiness.StateAbbr.StateAbbrNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.StateAbbr.Description">
            <summary>Full state name</summary>
        </member>
        <member name="F:OpenDentBusiness.StateAbbr.Abbr">
            <summary>Short state abbreviation (usually 2 digit)</summary>
        </member>
        <member name="F:OpenDentBusiness.StateAbbr.MedicaidIDLength">
            <summary>The length that the Medicaid ID should be for this state. If 0, then the Medicaid length is not enforced for this state</summary>
        </member>
        <member name="M:OpenDentBusiness.StateAbbr.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.TaskHist">
            <summary>Inherits from task. A historical copy of a task.  These are generated as a result of a task being edited.  When creating for insertion it needs a passed in Task object.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskHist.TaskHistNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskHist.UserNumHist">
            <summary>FK to UserOd.UserNum  Identifies the user that changed this task from this state, not the person who originally wrote it.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskHist.DateTStamp">
            <summary>The date and time that this task was edited and added to the Hist table.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskHist.IsNoteChange">
            <summary>True if the note was changed when this historical copy was created.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskHist.#ctor(OpenDentBusiness.Task)">
            <summary>Pass in the old task that needs to be recorded.</summary>
        </member>
        <member name="T:OpenDentBusiness.UserClinic">
            <summary>This linker table will enable users to be associated with multiple clinics.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserClinic.UserClinicNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserClinic.UserNum">
            <summary>FK to Userod.UserNum</summary>
        </member>
        <member name="F:OpenDentBusiness.UserClinic.ClinicNum">
            <summary>FK to Clinic.ClinicNum</summary>
        </member>
        <member name="M:OpenDentBusiness.UserClinic.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.UserodApptView">
            <summary>Keeps track of the last appointment view used on a per user basis.  Users can have multiple rows in this table when using clinics.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserodApptView.UserodApptViewNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserodApptView.UserNum">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserodApptView.ClinicNum">
            <summary>FK to clinic.ClinicNum.  0 if clinics is not being used or if the user has not been assigned a clinic.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserodApptView.ApptViewNum">
            <summary>FK to apptview.ApptViewNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserodApptView.Copy">
            <summary>Returns a copy of this UserodApptView.</summary>
        </member>
        <member name="T:OpenDentBusiness.UserOdPref">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.UserOdPref.UserOdPrefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserOdPref.UserNum">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserOdPref.Fkey">
            <summary>Foreign key to a table associated with FkeyType.  Can be 0 if the user preference does not need a foreign key.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserOdPref.FkeyType">
            <summary>Enum:UserOdFkeyType Specifies which flag is overridden for the specified definition, since an individual definition can have multiple flags.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserOdPref.ValueString">
            <summary>Used to hold the override, which might be a simple primitive value, a comma separated list, or a complex document in xml.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserOdPref.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.UserOdFkeyType">
            <summary>These FKey Types are to be used as an identifier for what table the Fkey column is associated to.
            This enum is not stored as a string so DO NOT reorder it.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserOdFkeyType.Definition">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.UserOdFkeyType.ClinicLast">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.UserOdFkeyType.WikiHomePage">
            <summary>2 - Wiki home pages use ValueString to store the name of the wiki page instead of Fkey due to how FormWiki loads pages.</summary>
        </member>
        <member name="T:OpenDentBusiness.UserWeb">
            <summary>Holds credentials for web applications.  Each userweb entry should be linked to a table type or entity of sorts.
            E.g. Patient Portal credentials will have an FKey to patient.PatNum and an FKeyType linked to "UserWebFKeyType.PatientPortal".</summary>
        </member>
        <member name="F:OpenDentBusiness.UserWeb.UserWebNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserWeb.FKey">
            <summary>Foreign key to the table defined by the corresponding FKeyType.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserWeb.FKeyType">
            <summary>Enum:UserWebFKeyType The type of row that identifies which table FKey links to.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserWeb.UserName">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.UserWeb.Password">
            <summary>The password needs to be hashed.  This should never store plain text passwords.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserWeb.PasswordResetCode">
            <summary>A randomly generated code that can be used to reset the password.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserWeb.RequireUserNameChange">
            <summary>Set to true to require a user to change their UserName.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserWeb.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.UserWebFKeyType">
            <summary>The type of row that identifies which table FKey links to.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserWebFKeyType.Undefined">
            <summary>This is a default value that should never be saved into the table.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserWebFKeyType.PatientPortal">
            <summary>FKey links to patient.PatNum</summary>
        </member>
        <member name="T:OpenDentBusiness.WikiListHist">
            <summary>Rows never edited, just added.  Contains all historical versions of each list.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiListHist.WikiListHistNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiListHist.UserNum">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiListHist.ListName">
            <summary>Will not be unique because there are multiple revisions per page.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiListHist.ListHeaders">
            <summary>The contents of the corresponding WikiListHeaderWidths row converted to a string in format ColName1,ColWidth1;ColName2,ColWidth2;...  Database type text/varChar2(4000) (65K/4K)</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiListHist.ListContent">
            <summary>The entire contents of the revision are stored as XML.  Database type mediumtext/clob (16M,4G)</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiListHist.DateTimeSaved">
            <summary>The DateTime from the original WikiPage object.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiListHist.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DispSupply">
            <summary>A dental supply or office supply item that has been dispensed.</summary>
        </member>
        <member name="F:OpenDentBusiness.DispSupply.DispSupplyNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.DispSupply.SupplyNum">
            <summary>FK to supply.SupplyNum</summary>
        </member>
        <member name="F:OpenDentBusiness.DispSupply.ProvNum">
            <summary>FK to provider.ProvNum</summary>
        </member>
        <member name="F:OpenDentBusiness.DispSupply.DateDispensed">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DispSupply.DispQuantity">
            <summary>Quantity given out.</summary>
        </member>
        <member name="F:OpenDentBusiness.DispSupply.Note">
            <summary>Notes on the dispensed supply.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcButtonQuick">
            <summary>Used to customize quick buttons in the chart module.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButtonQuick.ProcButtonQuickNum">
            <summary>Primary Key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButtonQuick.Description">
            <summary>Description used for display.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButtonQuick.CodeValue">
            <summary>FK to procedurecode.ProcCode. </summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButtonQuick.Surf">
            <summary>Surfaces. </summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButtonQuick.YPos">
            <summary>Zero based YPos, row number within panel.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButtonQuick.ItemOrder">
            <summary>Items within each row are sorted using item order. Smallest item order will be drawn on the left.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButtonQuick.IsLabel">
            <summary>If true, this "button" will be displayed as a label.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtonQuick.Copy">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtonQuick.Equals(OpenDentBusiness.ProcButtonQuick)">
            <summary>Returns true if all members are equal. This compares member values instead of comparing memory addresses.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrAptObs">
            <summary>An EHR appointment observation.  Needed for syndromic surveillance messaging.  Each syndromic message requires at least one observation.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObs.EhrAptObsNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObs.AptNum">
            <summary>FK to appointment.AptNum.  There can be an unlimited number of observations per appointment.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObs.IdentifyingCode">
            <summary>Used in HL7 OBX-3 for syndromic surveillance.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObs.ValType">
            <summary>Enum:EhrAptObsType .  Used in HL7 OBX-2 for syndromic surveillance.  Identifies the data type for the observation value in ValReported.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObs.ValReported">
            <summary>The value of the observation. The value format must match the ValType.  This field could be text, a datetime, a code, etc..  Used in HL7 OBX-5 for syndromic surveillance.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObs.UcumCode">
            <summary>Used in HL7 OBX-6 for syndromic surveillance when ValType is Numeric (otherwise left blank).</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObs.ValCodeSystem">
            <summary>When ValType is Coded, then this contains the code system corresponding to the code in ValReported.  When ValType is not Coded, then this field should be blank.
            Allowed values are LOINC,SNOMEDCT,ICD9,ICD10.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrAptObsIdentifier">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObsIdentifier.BodyTemp">
            <summary>0 - Body temperature:Temp:Enctrfrst:Patient:Qn:	Loinc code 11289-6.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObsIdentifier.DateIllnessOrInjury">
            <summary>1 - Illness or injury onset date and time:TmStp:Pt:Patient:Qn:	Loinc code 11368-8.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObsIdentifier.PatientAge">
            <summary>2 - Age Time Patient Reported	Loinc code 21612-7.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObsIdentifier.PrelimDiag">
            <summary>3 - Diagnosis.preliminary:Imp:Pt:Patient:Nom:	Loinc code 44833-2.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObsIdentifier.TriageNote">
            <summary>4 - Triage note:Find:Pt:Emergency department:Doc:	Loinc code 54094-8.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObsIdentifier.OxygenSaturation">
            <summary>5 - Oxygen saturation:MFr:Pt:BldA:Qn:Pulse oximetry	Loinc code 59408-5.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObsIdentifier.CheifComplaint">
            <summary>6 - Chief complaint:Find:Pt:Patient:Nom:Reported	Loinc code 8661-1.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObsIdentifier.TreatFacilityID">
            <summary>7 - Treating Facility Identifier	PHINQUESTION code SS001.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObsIdentifier.TreatFacilityLocation">
            <summary>8 - Treating Facility Location	PHINQUESTION code SS002.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObsIdentifier.VisitType">
            <summary>9 - Facility / Visit Type	PHINQUESTION code SS003.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrAptObsType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObsType.Address">
            <summary>0 - This should only be used with EhrAptObsIdentifier.TreatFacilityLocation.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObsType.Coded">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObsType.DateAndTime">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObsType.Numeric">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAptObsType.Text">
            <summary>4</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabImage">
            <summary>Used to link images to an EHR lab.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabImage.EhrLabImageNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabImage.EhrLabNum">
            <summary>FK to ehrlab.EhrLabNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabImage.DocNum">
            <summary>FK to document.DocNum.  Will be -1 to indicate that lab is expecting image results.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrPatient">
            <summary>Patient information needed for EHR.  1:1 relation to patient table.  They are stored here because we want to try to keep the size of the patient table a bit smaller.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatient.PatNum">
            <summary>FK to patient.PatNum.  Also the primary key for this table. Always one to one relationship with patient table.  A new patient might not have an entry here until needed.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatient.MotherMaidenFname">
            <summary>Mother's maiden first name.  Exported in HL7 PID-6 for immunization messages.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatient.MotherMaidenLname">
            <summary>Mother's maiden last name.  Exported in HL7 PID-6 for immunization messages.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatient.VacShareOk">
            <summary>Enum:YN  Indicates whether or not the patient wants to share their vaccination information with other EHRs.  Used in immunization export.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrPatient.MedicaidState">
            <summary>The abbreviation for the state for the patient's MedicaidID.
            Displayed in patient information window, used to validate the length of the MedicaidID.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrPatient.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.OIDExternal">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.OIDExternal.OIDExternalNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.OIDExternal.IDType">
            <summary>Internal data type to be associated with.</summary>
        </member>
        <member name="F:OpenDentBusiness.OIDExternal.IDInternal">
            <summary>This should be a Primary Key to a Table Type defined by the IDType field. Example: If IDType==Patient, then this field should be a PatNum that is a FK to Patient.Patnum</summary>
        </member>
        <member name="F:OpenDentBusiness.OIDExternal.IDExternal">
            <summary>The OID extension, when combined with rootExternal it uniquely identifies an object.</summary>
        </member>
        <member name="F:OpenDentBusiness.OIDExternal.rootExternal">
            <summary>The OID root, when combined with IDExternal it uniquely identifies an object.</summary>
        </member>
        <member name="M:OpenDentBusiness.OIDExternal.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.OIDInternal">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.OIDInternal.OIDInternalNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.OIDInternal.IDType">
            <summary>Internal data type to be associated with OIDRoot</summary>
        </member>
        <member name="F:OpenDentBusiness.OIDInternal.IDRoot">
            <summary>This is the root OID for this data type, when combined with extension, uniquely identifies a single object.</summary>
        </member>
        <member name="M:OpenDentBusiness.OIDInternal.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.IdentifierType">
            <summary>Stored as string. Sorted and displayed in the order they are present in this enum.  Root should always be first.</summary>
        </member>
        <member name="F:OpenDentBusiness.IdentifierType.Root">
            <summary>Will most likely be the root of all other OIDs.  Represents the organization.</summary>
        </member>
        <member name="F:OpenDentBusiness.IdentifierType.LabOrder">
            <summary>FK to ehrlab.EhrLabNum.  root+".1"</summary>
        </member>
        <member name="F:OpenDentBusiness.IdentifierType.Patient">
            <summary>FK to patient.PatNum.  root+".2"</summary>
        </member>
        <member name="F:OpenDentBusiness.IdentifierType.Provider">
            <summary>FK to provider.ProvNum.  root+".3"</summary>
        </member>
        <member name="F:OpenDentBusiness.IdentifierType.CqmItem">
            <summary>This will be the root for all CQM reported items, like encounters, procedures, problems, etc.  root+".4"  The extension will be abbreviated name concatenated with the primary key of the object.  Examples: pat5231 or medpat197432 or proc231782 or notperf38291.  This is only used for generating QRDA documents and requires that the encounter, procedure, etc. is uniquely identified in the reports.  The root+".4" makes it unique to this office, the abbreviated name plus primary key makes it unique within the office.</summary>
        </member>
        <member name="F:OpenDentBusiness.IdentifierType.Problem">
            <summary>FK to disease.DiseaseNum.  root+".5"</summary>
        </member>
        <member name="F:OpenDentBusiness.IdentifierType.Appointment">
            <summary>FK to appointment.AptNum.  root+".6"</summary>
        </member>
        <member name="F:OpenDentBusiness.IdentifierType.InsPlan">
            <summary>FK to insplan.PlanNum.  root+".7"</summary>
        </member>
        <member name="F:OpenDentBusiness.IdentifierType.Procedure">
            <summary>FK to procedurelog.ProcNum.  root+".8"</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabSpecimenRejectReason">
            <summary>For EHR module, the specimen upon which the lab orders were/are to be performed on.  (May Repeat) SPM.21</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenRejectReason.EhrLabSpecimenRejectReasonNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenRejectReason.EhrLabSpecimenNum">
            <summary>FK to EhrLab.EhrLabNum.  May be 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenRejectReason.SpecimenRejectReasonID">
            <summary> SPM.21.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenRejectReason.SpecimenRejectReasonText">
            <summary>Description of SpecimenRejectReasonId.   SPM.21.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenRejectReason.SpecimenRejectReasonCodeSystemName">
            <summary>CodeSystem that SpecimenRejectReasonId came from.   SPM.21.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenRejectReason.SpecimenRejectReasonIDAlt">
            <summary> SPM.21.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenRejectReason.SpecimenRejectReasonTextAlt">
            <summary>Description of SpecimenRejectReasonIdAlt.   SPM.21.5</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenRejectReason.SpecimenRejectReasonCodeSystemNameAlt">
            <summary>CodeSystem that SpecimenRejectReasonId came from.   SPM.21.6</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenRejectReason.SpecimenRejectReasonTextOriginal">
            <summary>Optional text that describes the original text used to encode the values above.   SPM.21.7</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabSpecimenRejectReason.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabSpecimenCondition">
            <summary>For EHR module, the specimen upon which the lab orders were/are to be performed on.  SPM.24</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenCondition.EhrLabSpecimenConditionNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenCondition.EhrLabSpecimenNum">
            <summary>FK to EhrLabSpecimen.EhrLabSpecimenNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenCondition.SpecimenConditionID">
            <summary>SPM.24.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenCondition.SpecimenConditionText">
            <summary>Description of SpecimenConditionId.  SPM.24.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenCondition.SpecimenConditionCodeSystemName">
            <summary>CodeSystem that SpecimenConditionId came from.  SPM.24.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenCondition.SpecimenConditionIDAlt">
            <summary>SPM.24.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenCondition.SpecimenConditionTextAlt">
            <summary>Description of SpecimenConditionIdAlt.  SPM.24.5</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenCondition.SpecimenConditionCodeSystemNameAlt">
            <summary>CodeSystem that SpecimenConditionId came from.  SPM.24.6</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimenCondition.SpecimenConditionTextOriginal">
            <summary>Optional text that describes the original text used to encode the values above.  SPM.24.7</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabSpecimenCondition.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabSpecimen">
            <summary>For EHR module, the specimen upon which the lab orders were/are to be performed on.  NTE.*</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimen.EhrLabSpecimenNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimen.EhrLabNum">
            <summary>FK to EhrLab.EhrLabNum.  May be 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimen.SetIdSPM">
            <summary>Enumerates the SPM segments within a single message starting with 1.  SPM.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimen.SpecimenTypeID">
            <summary>SPM.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimen.SpecimenTypeText">
            <summary>Description of SpecimenTypeId.  SPM.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimen.SpecimenTypeCodeSystemName">
            <summary>CodeSystem that SpecimenTypeId came from.  SPM.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimen.SpecimenTypeIDAlt">
            <summary>SPM.5</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimen.SpecimenTypeTextAlt">
            <summary>Description of SpecimenTypeIdAlt.  SPM.6</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimen.SpecimenTypeCodeSystemNameAlt">
            <summary>CodeSystem that SpecimenTypeId came from.  SPM.7</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimen.SpecimenTypeTextOriginal">
            <summary>Optional text that describes the original text used to encode the values above.  SPM.8</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimen.CollectionDateTimeStart">
            <summary>Stored as string in the format YYYYMMDD[HH[MM[SS]]] where bracketed values are optional.  When time is not known will be valued "0000".  SPM.17.1.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimen.CollectionDateTimeEnd">
            <summary>May be empty.  Stored as string in the format YYYYMMDD[HH[MM[SS]]] where bracketed values are optional.  SPM.17.2.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimen._listEhrLabSpecimenRejectReason">
            <summary>[0..*]This is not a data column but is stored in a seperate table named EhrLabSpecimenRejectReason.  SPM.21</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabSpecimen._listEhrLabSpecimenCondition">
            <summary>[0..*]This is not a data column but is stored in a seperate table named EhrLabSpecimenCondition.  SPM.24</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabSpecimen.Copy">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.EhrLabSpecimen.ListEhrLabSpecimenCondition">
            <summary>Only filled with EhrLabNotes when value is used.  To refresh ListEhrLabResults, set it equal to null or explicitly reassign it using EhrLabResults.GetForLab(EhrLabNum).</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabResult">
            <summary>For EHR module, lab result that contains all required fields for HL7 Lab Reporting Interface (LRI).  OBX</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.EhrLabResultNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.EhrLabNum">
            <summary>FK to EhrLab.EhrLabNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.SetIdOBX">
            <summary>Enumerates the OBX segments within a single message starting with 1.  OBX.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ValueType">
            <summary>This field identifies the data type used for ObservationValue (OBX-5).  OBX.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationIdentifierID">
            <summary>"LOINC shall be used as the standard coding system for this field if an appropriate LOINC code exists. Appropriate status is defined in the LOINC Manual Section 11.2 Classification of LOINC Term Status. If a local coding system is in use, a local code should also be sent to help with identification of coding issues. When no valid LOINC exists the local code may be the only code sent.  When populating this field with values, this guide does not give preference to the triplet in which the standard (LOINC) code should appear." OBX.3.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationIdentifierText">
            <summary>Description of ObservationIdentifierId. OBX.3.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationIdentifierCodeSystemName">
            <summary>CodeSystem that ObservationIdentifierId came from. Should be "LN".  OBX.3.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationIdentifierIDAlt">
            <summary>Probably a LoincCode or empty.  OBX.3.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationIdentifierTextAlt">
            <summary>Description of ObservationIdentifierIdAlt.  OBX.3.5</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationIdentifierCodeSystemNameAlt">
            <summary>CodeSystem that ObservationIdentifierId came from. Should be "LN" or empty.  OBX.3.6</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationIdentifierTextOriginal">
            <summary>Optional text that describes the original text used to encode the values above.  OBX.3.7</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationIdentifierSub">
            <summary>OBX.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationValueCodedElementID">
            <summary>OBX.5.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationValueCodedElementText">
            <summary>Description of ObservationValueCodedElementId.  OBX.5.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationValueCodedElementCodeSystemName">
            <summary>CodeSystem that ObservationValueCodedElementId came from.  OBX.5.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationValueCodedElementIDAlt">
            <summary>OBX.5.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationValueCodedElementTextAlt">
            <summary>Description of ObservationValueCodedElementIdAlt.  OBX.5.5</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationValueCodedElementCodeSystemNameAlt">
            <summary>CodeSystem that ObservationValueCodedElementId came from.  OBX.5.6</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationValueCodedElementTextOriginal">
            <summary>CWE only.  Optional text that describes the original text used to encode the values above.  OBX.5.7</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationValueDateTime">
            <summary>Stored as string in the formatYYYY[MM[DD]] for DT and YYYYMMDDHHMMSS for TS. Note: this is the lab result value, not the DT the test was performed. OBX.5.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationValueTime">
            <summary>Note: this is the lab result value, not the time the test was performed. OBX.5.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationValueComparator">
            <summary>OBX.5.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationValueNumber1">
            <summary>OBX.5.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationValueSeparatorOrSuffix">
            <summary>OBX.5.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationValueNumber2">
            <summary>OBX.5.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationValueNumeric">
            <summary>OBX.5.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationValueText">
            <summary>OBX.5.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.UnitsID">
            <summary>"UCUM (Unified Code for Units of Measure) will be evaluated during the pilot for potential subsequent inclusion. As part of the pilot test, for dimensionless units the UCUM representation could be {string}, e.g., for titer the pilot might use {titer} to test feasibility. When sending units of measure as text, they must be placed in the correct component of OBX-6 (CWE_CRE.9)."  OBX.6.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.UnitsText">
            <summary>Description of UnitsId.  OBX.6.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.UnitsCodeSystemName">
            <summary>CodeSystem that UnitsId came from. Should be "UCUM".  OBX.6.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.UnitsIDAlt">
            <summary>OBX.6.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.UnitsTextAlt">
            <summary>Description of UnitsIdAlt.  OBX.6.5</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.UnitsCodeSystemNameAlt">
            <summary>CodeSystem that UnitsId came from.  OBX.6.6</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.UnitsTextOriginal">
            <summary>Optional text that describes the original text used to encode the values above.  OBX.6.7</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.referenceRange">
            <summary>"Guidance: It is not appropriate to send the reference range for a result in an associated NTE segment. It would be appropriate to send additional information clarifying the reference range in an NTE associated with this OBX-"  OBX.7</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.AbnormalFlags">
            <summary>Comma Delimited list of Abnormal Flags using HL70078 enum values.  OBX.8.*</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult._listEhrLabResultNotes">
            <summary>[0..*] This is not a data column but is stored in a seperate table named EhrLabNote. OBX.*</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationResultStatus">
            <summary>Coded status of result.  OBX.11</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.ObservationDateTime">
            <summary>Stored as string in the format YYYYMMDD[HH[MM[SS]]]. "For specimen based test, if it is valued it must be the same as SPM-17.  
            If SPM-17 is present and relates to the same observation, then OBX-14 must be within the DR range."  OBX.14.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.AnalysisDateTime">
            <summary>Stored as string in the format YYYYMMDD[HH[MM[SS]]].  "Be as precise as appropriate and available."  OBX.19.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.PerformingOrganizationName">
            <summary>OBX.23.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.PerformingOrganizationNameAssigningAuthorityNamespaceId">
            <summary>OBX.23.6.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalId">
            <summary>The Assigning Authority component is used to identify the system, application, organization, etc. that assigned the ID in component 10.  OBX.23.6.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.PerformingOrganizationNameAssigningAuthorityUniversalIdType">
            <summary>Should always be "ISO", unless importing.  OBX.23.6.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.PerformingOrganizationIdentifierTypeCode">
            <summary>OBX.23.7</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.PerformingOrganizationIdentifier">
            <summary>OBX.23.10</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.PerformingOrganizationAddressStreet">
            <summary>OBX.24.1.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.PerformingOrganizationAddressOtherDesignation">
            <summary>OBX.24.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.PerformingOrganizationAddressCity">
            <summary>OBX.24.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.PerformingOrganizationAddressStateOrProvince">
            <summary>USPS Alpha State Codes.  OBX.24.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.PerformingOrganizationAddressZipOrPostalCode">
            <summary>OBX.24.5</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.PerformingOrganizationAddressCountryCode">
            <summary>Should be the three letter Alpha Code derived from ISO 3166 alpha-3 code set. http://www.nationsonline.org/oneworld/country_code_list.htm OBX.24.6</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.PerformingOrganizationAddressAddressType">
            <summary>OBX.24.7</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.PerformingOrganizationAddressCountyOrParishCode">
            <summary>Should be based on FIPS 6-4. We are just importing the string as is. OBX.24.8</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.MedicalDirectorID">
            <summary>May be provnum or NPI num or any other num, when combined with MedicalDirectorIdAssigningAuthority should uniquely identify the provider.  OBX.25.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.MedicalDirectorLName">
            <summary>OBX.25.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.MedicalDirectorFName">
            <summary>OBX.25.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.MedicalDirectorMiddleNames">
            <summary>Middle names or initials therof.  OBX.25.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.MedicalDirectorSuffix">
            <summary>Example: JR or III.  OBX.25.5</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.MedicalDirectorPrefix">
            <summary>Example: DR, Not MD, MD would be stored in an optional field that was not implemented called MedicalDirectorDegree.  OBX.25.6</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.MedicalDirectorAssigningAuthorityNamespaceID">
            <summary>Usually empty, "The value of [this field] reflects a local code that represents the combination of [the next two fields]."  OBX.25.9.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.MedicalDirectorAssigningAuthorityUniversalID">
            <summary>ISO compliant OID that represents the organization that assigned the unique provider ID.  OBX.25.9.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.MedicalDirectorAssigningAuthorityIDType">
            <summary>Always "ISO", unless importing from outside source.  OBX.25.9.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.MedicalDirectorNameTypeCode">
            <summary>Describes the type of name used.  OBX.25.10</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResult.MedicalDirectorIdentifierTypeCode">
            <summary>Must be value from HL70203 code set, see note at bottom of EhrLab.cs for usage.  OBX.25.13</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabResult.Copy">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.EhrLabResult.ListEhrLabResultNotes">
            <summary>Only filled with EhrLabResultNotes when value is used.  To refresh ListEhrLabResults, set it equal to null or explicitly reassign it using EhrLabNotes.GetForLabResult(EhrLabResultNum).</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabNote">
            <summary>For EHR module, May either be a note attached to an EhrLab or an EhrLabResult.  NTE.*</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabNote.EhrLabNoteNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabNote.EhrLabNum">
            <summary>FK to EhrLab.EhrLabNum.  Should never be zero.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabNote.EhrLabResultNum">
            <summary>FK to EhrLabResult.EhrLabResult.  May be 0 if this is a Lab Note, will be valued if this is an Ehr Lab Result Note.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OpenDentBusiness.EhrLabNote.Comments" -->
        <member name="M:OpenDentBusiness.EhrLabNote.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabResultsCopyTo">
            <summary>For EHR module, copy results to... that contains all required fields for HL7 Lab Reporting Interface (LRI).</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResultsCopyTo.EhrLabResultsCopyToNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResultsCopyTo.EhrLabNum">
            <summary>FK to EhrLab.EhrLabNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResultsCopyTo.CopyToID">
            <summary>May be provnum or NPI num or any other num, when combined with CopyToIdAssigningAuthority should uniquely identify the provider.  OBR.28.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResultsCopyTo.CopyToLName">
            <summary>OBR.28.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResultsCopyTo.CopyToFName">
            <summary>OBR.28.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResultsCopyTo.CopyToMiddleNames">
            <summary>Middle names or initials therof.  OBR.28.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResultsCopyTo.CopyToSuffix">
            <summary>Example: JR or III.  OBR.28.5</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResultsCopyTo.CopyToPrefix">
            <summary>Example: DR, Not MD, MD would be stored in an optional field that was not implemented called CopyToDegree.  OBR.28.6</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResultsCopyTo.CopyToAssigningAuthorityNamespaceID">
            <summary>Usually empty, "The value of [this field] reflects a local code that represents the combination of [the next two fields]."  OBR.28.9.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResultsCopyTo.CopyToAssigningAuthorityUniversalID">
            <summary>ISO compliant OID that represents the organization that assigned the unique provider ID.  OBR.28.9.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResultsCopyTo.CopyToAssigningAuthorityIDType">
            <summary>Always "ISO", unless importing from outside source.  OBR.28.9.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResultsCopyTo.CopyToNameTypeCode">
            <summary>Describes the type of name used.  OBR.28.10</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabResultsCopyTo.CopyToIdentifierTypeCode">
            <summary>Must be value from HL70203 code set, see note at bottom of EhrLab.cs for usage.  OBR.28.13</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabResultsCopyTo.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLabClinicalInfo">
            <summary>For EHR module, lab request that contains all required fields for HL7 Lab Reporting Interface (LRI).  OBR.13.*</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabClinicalInfo.EhrLabClinicalInfoNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabClinicalInfo.EhrLabNum">
            <summary>FK to EhrLab.EhrLabNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabClinicalInfo.ClinicalInfoID">
            <summary>OBR.13.*.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabClinicalInfo.ClinicalInfoText">
            <summary>Description of ClinicalInfoId.  OBR.13.*.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabClinicalInfo.ClinicalInfoCodeSystemName">
            <summary>CodeSystem that ClinicalInfoId came from.  OBR.13.*.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabClinicalInfo.ClinicalInfoIDAlt">
            <summary>OBR.13.*.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabClinicalInfo.ClinicalInfoTextAlt">
            <summary>Description of ClinicalInfoIdAlt.  OBR.13.*.5</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabClinicalInfo.ClinicalInfoCodeSystemNameAlt">
            <summary>CodeSystem that ClinicalInfoId came from.  OBR.13.*.6</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLabClinicalInfo.ClinicalInfoTextOriginal">
            <summary>Optional text that describes the original text used to encode the values above.  OBR.13.*.7</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLabClinicalInfo.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrLab">
            <summary>For EHR module, lab request that contains all required fields for HL7 Lab Reporting Interface (LRI).</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.EhrLabNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.PatNum">
            <summary>FK to patient.PatNum.  PID-3.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.OrderControlCode">
            <summary>Always RE unless importing from outside sources.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.PlacerOrderNum">
            <summary>Placer order number assigned to this lab order, usually assigned by the dental office.  Not the same as EhrLabNum, but similar.  OBR.2.1 and ORC.2.1.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.PlacerOrderNamespace">
            <summary>Usually empty, only used if PlacerOrderNum+PlacerUniversalID cannot uniquely identify the lab order.  OBR.2.2 and ORC.2.2.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.PlacerOrderUniversalID">
            <summary>Usually OID root that uniquely identifies the context that makes PlacerOrderNum globally unique.  May be GUID if importing from other sources.   OBR.2.3 and ORC.2.3.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.PlacerOrderUniversalIDType">
            <summary>Always "ISO", unless importing from other sources.  OBR.2.4 and ORC.2.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.FillerOrderNum">
            <summary>Filler order number assigned to this lab order, usually assigned by the laboratory.  Not the same as EhrLabNum, but similar.  OBR.3.1 and ORC.3.1.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.FillerOrderNamespace">
            <summary>Usually empty, only used if FillerOrderNum+FillerUniversalID cannot uniquely identify the lab order.  OBR.3.2 and ORC.3.2.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.FillerOrderUniversalID">
            <summary>Usually OID root that uniquely identifies the context that makes FillerOrderNum globally unique.  May be GUID if importing from other sources.  OBR.3.2 and ORC.3.3.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.FillerOrderUniversalIDType">
            <summary>Always "ISO", unless importing from other sources.  OBR.3.4 and ORC.3.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.PlacerGroupNum">
            <summary>[0..1] May be empty.  Placer group number assigned to this lab order, usually assigned by the dental office.  ORC.4.1.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.PlacerGroupNamespace">
            <summary>[0..1] Usually empty, only used if PlacerGroupNum+PlacerUniversalID cannot uniquely identify the Group Num.  ORC.4.2.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.PlacerGroupUniversalID">
            <summary>[0..1] Usually OID root that uniquely identifies the context that makes PlacerGroupNum globally unique.  May be GUID if importing from other sources.   ORC.4.3.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.PlacerGroupUniversalIDType">
            <summary>[0..1] Always "ISO", unless importing from other sources.  ORC.4.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.OrderingProviderID">
            <summary>May be provnum or NPI num or any other num, when combined with OrderingProviderIdAssigningAuthority should uniquely identify the provider.  ORC.12.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.OrderingProviderLName">
            <summary>ORC.12.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.OrderingProviderFName">
            <summary>ORC.12.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.OrderingProviderMiddleNames">
            <summary>Middle names or initials therof.  ORC.12.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.OrderingProviderSuffix">
            <summary>Example: JR or III.  ORC.12.5</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.OrderingProviderPrefix">
            <summary>Example: DR, Not MD, MD would be stored in an optional field that was not implemented called OrderingProviderDegree.  ORC.12.6</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.OrderingProviderAssigningAuthorityNamespaceID">
            <summary>Usually empty, "The value of [this field] reflects a local code that represents the combination of [the next two fields]."  ORC.12.9.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.OrderingProviderAssigningAuthorityUniversalID">
            <summary>ISO compliant OID that represents the organization that assigned the unique provider ID.  ORC.12.9.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.OrderingProviderAssigningAuthorityIDType">
            <summary>Always "ISO", unless importing from outside source.  ORC.12.9.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.OrderingProviderNameTypeCode">
            <summary>Describes the type of name used.  ORC.12.10</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.OrderingProviderIdentifierTypeCode">
            <summary>Must be value from HL70203 code set, see note at bottom of EhrLab.cs for usage.  ORC.12.13</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.SetIdOBR">
            <summary>Enumerates the OBR segments within a single message starting with 1.  OBR.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.UsiID">
            <summary>OBR.4.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.UsiText">
            <summary>Description of UsiId.  OBR.4.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.UsiCodeSystemName">
            <summary>CodeSystem that UsiId came from.  OBR.4.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.UsiIDAlt">
            <summary>OBR.4.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.UsiTextAlt">
            <summary>Description of UsiIdAlt.  OBR.4.5</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.UsiCodeSystemNameAlt">
            <summary>CodeSystem that UsiId came from.  OBR.4.6</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.UsiTextOriginal">
            <summary>Optional text that describes the original text used to encode the values above.  OBR.4.9</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ObservationDateTimeStart">
            <summary>Stored as string in the format YYYY[MM[DD[HH[MM[SS]]]]] where bracketed values are optional.  When time is not known will be valued "0000".  OBR.7.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ObservationDateTimeEnd">
            <summary>May be empty.  Stored as string in the format YYYY[MM[DD[HH[MM[SS]]]]] where bracketed values are optional.  OBR.8.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.SpecimenActionCode">
            <summary>OBR.11</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab._listRelevantClinicalInformation">
            <summary>[0..*]This is not a data column but is stored in a seperate table named EhrLabClinicalInfo.  OBR.13.*</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ResultDateTime">
            <summary>Date Time that the result was stored or last updated.  Stored in the format YYYYMMDDHHmmss.  Required to be accurate to the second.  OBR.22.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ResultStatus">
            <summary>OBR.25</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ParentObservationID">
            <summary>OBR.26.1.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ParentObservationText">
            <summary>Description of ParentObservationId.  OBR.26.1.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ParentObservationCodeSystemName">
            <summary>CodeSystem that ParentObservationId came from.  OBR.26.1.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ParentObservationIDAlt">
            <summary>OBR.26.1.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ParentObservationTextAlt">
            <summary>Description of ParentObservationIdAlt.  OBR.26.1.5</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ParentObservationCodeSystemNameAlt">
            <summary>CodeSystem that ParentObservationIdAlt came from.  OBR.26.1.6</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ParentObservationTextOriginal">
            <summary>Optional text that describes the original text used to encode the values above.  OBR.26.1.9</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ParentObservationSubID">
            <summary>OBR.26.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab._listEhrLabResultsCopyTo">
            <summary>[0..*]This is not a data column but is stored in a seperate table named EhrLabResultsCopyTo. OBR.28.*</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ParentPlacerOrderNum">
            <summary>Placer order number assigned to this lab order, usually assigned by the dental office.  Not the same as EhrLabNum, but similar.  OBR.29.1.1.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ParentPlacerOrderNamespace">
            <summary>Usually empty, only used if PlacerOrderNum+PlacerUniversalID cannot uniquely identify the lab order.  OBR.29.1.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ParentPlacerOrderUniversalID">
            <summary>Usually OID root that uniquely identifies the context that makes PlacerOrderNum globally unique.  May be GUID if importing from other sources.   OBR.29.1.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ParentPlacerOrderUniversalIDType">
            <summary>Always "ISO", unless importing from other sources.  OBR.29.1.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ParentFillerOrderNum">
            <summary>Filler order number assigned to this lab order, usually assigned by the laboratory.  Not the same as EhrLabNum, but similar.  OBR.29.2.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ParentFillerOrderNamespace">
            <summary>Usually empty, only used if FillerOrderNum+FillerUniversalID cannot uniquely identify the lab order.  OBR.29.2.2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ParentFillerOrderUniversalID">
            <summary>Usually OID root that uniquely identifies the context that makes FillerOrderNum globally unique.  May be GUID if importing from other sources.  OBR.29.2.3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ParentFillerOrderUniversalIDType">
            <summary>Always "ISO", unless importing from other sources.  OBR.29.2.4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ListEhrLabResultsHandlingF">
            <summary>"Film with patient."  Technically a coded value from HL70507.  Stored as a bool instead of 7 seperate columns. OBR.49.* is used to set both ListEhrLabResultsHandlingF and ListEhrLabResultsHandlingN.  OBR.49.*</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.ListEhrLabResultsHandlingN">
            <summary>"Notify provider when ready."  Technically a coded value from HL70507.  Stored as a bool instead of 7 seperate columns. OBR.49.* is used to set both ListEhrLabResultsHandlingF and ListEhrLabResultsHandlingN.  OBR.49.*</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab._listEhrLabNotes">
            <summary>[0..*]This is not a data column but is stored in a seperate table named EhrLabNote. NTE.*</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.TQ1SetId">
            <summary>Enumerates the TQ1 segments within a single message starting with 1.  TQ1.1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.TQ1DateTimeStart">
            <summary>Stored as string in the format YYYY[MM[DD[HH[MM[SS]]]]] where bracketed values are optional.  TQ1.7</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.TQ1DateTimeEnd">
            <summary>Stored as string in the format YYYY[MM[DD[HH[MM[SS]]]]] where bracketed values are optional.  TQ1.8</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.IsCpoe">
            <summary>This gets set when a provider is logged in with a valid EHR key and then creates a lab.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab.OriginalPIDSegment">
            <summary>The PID Segment from the HL7 message used to generate or update the lab order.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab._listEhrLabResults">
            <summary>[0..*] This is not a data column but is stored in a seperate table named EhrLabResult. OBX.*</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrLab._listEhrLabSpecimen">
            <summary>[0..*] This is not a data column but is stored in a seperate table named EhrLabSpecimen. SPM.*</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrLab.Copy">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.EhrLab.ListEhrLabNotes">
            <summary>Only filled with EhrLabNotes when value is used.  To refresh ListEhrLabResults, set it equal to null or explicitly reassign it using EhrLabResults.GetForLab(EhrLabNum).</summary>
        </member>
        <member name="P:OpenDentBusiness.EhrLab.ListEhrLabResults">
            <summary>Only filled with EhrLabResults when value is used.  To refresh ListEhrLabResults, set it equal to null or explicitly reassign it using EhrLabResults.GetForLab(EhrLabNum).</summary>
        </member>
        <member name="P:OpenDentBusiness.EhrLab.ListEhrLabSpecimens">
            <summary>Only filled with EhrLabSpecimens when value is used.  To refresh ListEhrLabSpecimens, set it equal to null or explicitly reassign it using EhrLabSpecimens.GetForLab(EhrLabNum).</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCarePlan.EhrCarePlanNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCarePlan.PatNum">
            <summary>FK to patient.PatNum. </summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCarePlan.SnomedEducation">
            <summary>Snomed code describing the type of educational instruction provided.  Limited to terms descending from the Snomed 409073007 (Education Hierarchy).</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCarePlan.Instructions">
            <summary>Instructions provided to the patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCarePlan.DatePlanned">
            <summary>This field does not help much with care plan instructions, but will be more helpful for other types of care plans if we expand in the future (for example, planned procedures).  We also saw examples where this date was included in the human readable part of a CCD, but not in the machine readable part.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCarePlan.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Ucum">
            <summary>Unified Code for Units of Measure.  UCUM is not a stricly defined list of codes but is instead a language definition that allows for all units and derived units to be named.  Examples: g (grams), g/L (grams per liter), g/L/s (grams per liter per second), g/L/s/s (grams per liter per second per second), etc... are all allowed units meaning there is an infinite number of units that can be defined using UCUM conventions.  The codes stored in this table are merely a common subset that was readily available and premade.</summary>
        </member>
        <member name="F:OpenDentBusiness.Ucum.UcumNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Ucum.UcumCode">
            <summary>Indexed.  Also called concept code. Example: mol/mL</summary>
        </member>
        <member name="F:OpenDentBusiness.Ucum.Description">
            <summary>Also called Concept Name.  Human readable form of the UCUM code. Example: Moles Per MilliLiter [Substance Concentration Units]</summary>
        </member>
        <member name="F:OpenDentBusiness.Ucum.IsInUse">
            <summary>True if this unit of measure is or has ever been in use.  Useful for assisting users to select common units.</summary>
        </member>
        <member name="T:OpenDentBusiness.EmailMessageUid">
            <summary>Used to track which email messages have been downloaded into the inbox for a particular recipient address.
            Not linked to the email message itself because no link is needed.
            If we decide to add a foreign key to a EmailMessage later, we should consider what do to when an email message is deleted (set the foreign key to 0 perhaps).</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessageUid.EmailMessageUidNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessageUid.MsgId">
            <summary>The unique id for the associated EmailMessage.  </summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessageUid.RecipientAddress">
            <summary>Copied from the EmailAddress.EmailUsername field when a message is received into the inbox.
            Similar to the ToAddress of the EmailMessage, except the ToAddress could contain multiple recipient addresses
            or group email address instead. The recipient address helps match the EmailMessageUid to a particular EmailAddress.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrTrigger">
            <summary>CDS Triggers when referenced in UI. Used for CDS automation.  May later be expanded to replace "automation."
            </summary>
        </member>
        <member name="F:OpenDentBusiness.EhrTrigger.EhrTriggerNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrTrigger.Description">
            <summary>Short description to describe the trigger.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrTrigger.ProblemSnomedList">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrTrigger.ProblemIcd9List">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrTrigger.ProblemIcd10List">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrTrigger.ProblemDefNumList">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrTrigger.MedicationNumList">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrTrigger.RxCuiList">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrTrigger.CvxList">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrTrigger.AllergyDefNumList">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrTrigger.DemographicsList">
            <summary>Age, Gender.  Can be multiple age entries but only one gender entry as coma delimited values.  Example: " age,>18  age,&lt;=55  gender,male"</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrTrigger.LabLoincList">
            <summary>List of loinc codes padded with spaces.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrTrigger.VitalLoincList">
            <summary>Examples:  Height,>=72  Weight&lt;,100  BMI=  (BP currently not implemented.)</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrTrigger.Instructions">
            <summary>The reccomended course of action for this intervention.  </summary>
        </member>
        <member name="F:OpenDentBusiness.EhrTrigger.Bibliography">
            <summary>Bibliographic information, not a URL. </summary>
        </member>
        <member name="F:OpenDentBusiness.EhrTrigger.Cardinality">
            <summary>Requires One, OneOfEachCategory, TwoOrMore, or All for trigger to match.  </summary>
        </member>
        <member name="M:OpenDentBusiness.EhrTrigger.Copy">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EhrTrigger.GetTriggerCategories">
            <summary>Used for displaying what elements of the trigger are set. Example: Medication, Demographics</summary>
        </member>
        <member name="T:OpenDentBusiness.CDSIntervention">
            <summary>Not a DB table. Used to pass intervention information to FormCDSI based on matched trigger. </summary>
        </member>
        <member name="F:OpenDentBusiness.CDSIntervention.EhrTrigger">
            <summary>The EHRtrigger that this CDSIntervention is generated from. </summary>
        </member>
        <member name="F:OpenDentBusiness.CDSIntervention.InterventionMessage">
            <summary>The message generated for the user based on the specific objects that triggered the intervention. </summary>
        </member>
        <member name="F:OpenDentBusiness.CDSIntervention.TriggerObjects">
            <summary>The list of objects that will be passed to FormInfobutton. </summary>
        </member>
        <member name="T:OpenDentBusiness.KnowledgeRequest">
            <summary>Not a DB table. Used to pass trigger object information for a CDSIntervention.</summary>
        </member>
        <member name="F:OpenDentBusiness.KnowledgeRequest.Type">
            <summary>The EHRtrigger that this CDSIntervention is generated from.</summary>
        </member>
        <member name="F:OpenDentBusiness.KnowledgeRequest.Code">
            <summary>The message generated for the user based on the specific objects that triggered the intervention.</summary>
        </member>
        <member name="F:OpenDentBusiness.KnowledgeRequest.CodeSystem">
            <summary>The list of objects that will be passed to FormInfobutton.</summary>
        </member>
        <member name="F:OpenDentBusiness.KnowledgeRequest.Description">
            <summary>The description of the knowledge request.</summary>
        </member>
        <member name="M:OpenDentBusiness.KnowledgeRequest.GetCodeSystemDisplay">
            <summary>Converts the CodeSystem enum value into a string for display purposes.</summary>
        </member>
        <member name="T:OpenDentBusiness.CodeSyst">
            <summary>The different types of code systems that a knowledge request can be for.</summary>
        </member>
        <member name="T:OpenDentBusiness.MatchCardinality">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.MatchCardinality.One">
            <summary>0 - If any one of the conditions are met from any of the categories.</summary>
        </member>
        <member name="F:OpenDentBusiness.MatchCardinality.OneOfEachCategory">
            <summary>1 - Must have one match from each of the categories with set values. Categories are :Medication, Allergy, Problem, Vitals, Age, Gender, and Lab Results.</summary>
        </member>
        <member name="F:OpenDentBusiness.MatchCardinality.TwoOrMore">
            <summary>2 - Must match any two conditions, may be from same category.</summary>
        </member>
        <member name="F:OpenDentBusiness.MatchCardinality.All">
            <summary>3 - Must match every code defined in the EhrTrigger.</summary>
        </member>
        <member name="T:OpenDentBusiness.MapArea">
            <summary>MapArea object will be placed on a MapAreaPanel and shown to give a physical layout of a location.</summary>
        </member>
        <member name="F:OpenDentBusiness.MapArea.MapAreaNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.MapArea.Extension">
            <summary>FK to Phone.Extension.  Typically 0.  Only used by HQ and when ItemType is set to Room.</summary>
        </member>
        <member name="F:OpenDentBusiness.MapArea.XPos">
            <summary>X-position in the clinical map layout.  Indicates how many feet the MapArea should be placed from the left edge.</summary>
        </member>
        <member name="F:OpenDentBusiness.MapArea.YPos">
            <summary>Y-position in the clinical map layout.  Indicates how many feet the MapArea should be placed from the top edge.</summary>
        </member>
        <member name="F:OpenDentBusiness.MapArea.Width">
            <summary>MapArea width measured in feet.  Not allowed to be zero.</summary>
        </member>
        <member name="F:OpenDentBusiness.MapArea.Height">
            <summary>MapArea height measured in feet.</summary>
        </member>
        <member name="F:OpenDentBusiness.MapArea.Description">
            <summary>Any text that the user types in.  Only used when ItemType is set to DisplayLabel.  Limit 255 char.</summary>
        </member>
        <member name="F:OpenDentBusiness.MapArea.ItemType">
            <summary>Enum:MapItemType 0-Room,1-DisplayLabel</summary>
        </member>
        <member name="F:OpenDentBusiness.MapArea.MapAreaContainerNum">
            <summary>The room that this map is in. This is not currently a table. Stored as a JSON serialized list in HQ only pref, HQSerializedMapContainers.</summary>
        </member>
        <member name="T:OpenDentBusiness.MapItemType">
            <summary>Indicate which type of MapArea we are dealing with.</summary>
        </member>
        <member name="F:OpenDentBusiness.MapItemType.Room">
            <summary>0 - A MapAreaRoomControl object.</summary>
        </member>
        <member name="F:OpenDentBusiness.MapItemType.DisplayLabel">
            <summary>1 - A MapAreaDisplayLabelControl object.</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrAmendment">
            <summary>Used in EHR only.  Stores an entry indicating whether the office has accepted or denied the amendment.  Amendments can be verbal or written requests to add information to the patient's record.  The provider can either scan / import the document or create a detailed description that indicates what was verbally requested or where the document can be found.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAmendment.EhrAmendmentNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAmendment.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAmendment.IsAccepted">
            <summary>Enum:YN Y=accepted, N=denied, U=requested.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAmendment.Description">
            <summary>Description or user-defined location of the amendment.  Max length 2000.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAmendment.Source">
            <summary>Enum:AmendmentSource Patient, Provider, Organization, Other.  Required.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAmendment.SourceName">
            <summary>User-defined name of the amendment source.  For example, a patient name or organization name.  Max length 2000.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAmendment.FileName">
            <summary>The file is stored in the A-Z folder in 'EhrAmendments' folder.  This field stores the name of the file.  The files are named automatically based on Date/time along with EhrAmendmentNum for uniqueness.  This meets the requirement of "appending" to the patient's record.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAmendment.RawBase64">
            <summary>The raw file data encoded as base64.  Only used if there is no AtoZ folder.  This meets the requirement of "appending" to the patient's record.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAmendment.DateTRequest">
            <summary>Date and time of the amendment request.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAmendment.DateTAcceptDeny">
            <summary>Date and time of the amendment acceptance or denial.  If there is a date here, then the IsAccepted will be set.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrAmendment.DateTAppend">
            <summary>Date and time of the file being appended to the amendment or a link provided.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrAmendment.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.AmendmentSource">
            <summary>Source Enumeration</summary>
        </member>
        <member name="F:OpenDentBusiness.AmendmentSource.Patient">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.AmendmentSource.Provider">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.AmendmentSource.Organization">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.AmendmentSource.Other">
            <summary>3</summary>
        </member>
        <member name="T:OpenDentBusiness.Automation">
            <summary>A trigger event causes one or more actions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Automation.AutomationNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Automation.Description">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Automation.Autotrigger">
            <summary>Enum:AutomationTrigger What triggers this automation</summary>
        </member>
        <member name="F:OpenDentBusiness.Automation.ProcCodes">
            <summary>If this has a CompleteProcedure trigger, this is a comma-delimited list of codes that will trigger the action.</summary>
        </member>
        <member name="F:OpenDentBusiness.Automation.AutoAction">
            <summary>Enum:AutomationAction The action taken as a result of the trigger.  To get more than one action, create multiple automation entries.</summary>
        </member>
        <member name="F:OpenDentBusiness.Automation.SheetDefNum">
            <summary>FK to sheetdef.SheetDefNum.  If the action is to print a sheet, then this tells which sheet to print.  So it must be a custom sheet.  Also, not that this organization does not allow passing parameters to the sheet such as which procedures were completed, or which appt was broken.</summary>
        </member>
        <member name="F:OpenDentBusiness.Automation.CommType">
            <summary>FK to definition.DefNum. Only used if action is CreateCommlog.</summary>
        </member>
        <member name="F:OpenDentBusiness.Automation.MessageContent">
            <summary>If a commlog action, then this is the text that goes in the commlog.  If this is a ShowStatementNoteBold action, then this is the NoteBold. Might later be expanded to work with email or to use variables.</summary>
        </member>
        <member name="F:OpenDentBusiness.Automation.AptStatus">
            <summary>Enum:ApptStatus .</summary>
        </member>
        <member name="F:OpenDentBusiness.Automation.AppointmentTypeNum">
            <summary>FK to appointmenttype.AppointmentTypeNum.</summary>
        </member>
        <member name="T:OpenDentBusiness.AutomationTrigger">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationTrigger.CompleteProcedure">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationTrigger.BreakAppointment">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationTrigger.CreateApptNewPat">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationTrigger.OpenPatient">
            <summary>Regardless of module.  Usually only used with conditions.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationTrigger.CreateAppt">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationTrigger.ScheduleProcedure">
            <summary>Attaching a procedure to a scheduled appointment.</summary>
        </member>
        <member name="T:OpenDentBusiness.AutomationAction">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationAction.PrintPatientLetter">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationAction.CreateCommlog">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationAction.PrintReferralLetter">
            <summary>If a referral does not exist for this patient, then notify user instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationAction.ShowExamSheet">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationAction.PopUp">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationAction.SetApptStatus">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationAction.ShowConsentForm">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationAction.SetApptType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationAction.PopUpThenDisable10Min">
            <summary>Similar to PopUp, but will only show once per WS per 10 minutes.</summary>
        </member>
        <member name="T:OpenDentBusiness.ApptFieldDef">
            <summary>These are the definitions for the custom patient fields added and managed by the user.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptFieldDef.ApptFieldDefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptFieldDef.FieldName">
            <summary>The name of the field that the user will be allowed to fill in the appt edit window.  Duplicates are prevented.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptFieldDef.FieldType">
            <summary>Enum:ApptFieldType Text=0,PickList=1</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptFieldDef.PickList">
            <summary>The text that contains pick list values.  Length 4000.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptFieldDef.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ApptFieldType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ApptFieldType.Text">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptFieldType.PickList">
            <summary>1</summary>
        </member>
        <member name="T:OpenDentBusiness.ApptField">
            <summary>These are custom fields added to appointments and managed by the user.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptField.ApptFieldNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptField.AptNum">
            <summary>FK to appointment.AptNum</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptField.FieldName">
            <summary>FK to apptfielddef.FieldName.  The full name is shown here for ease of use when running queries.  But the user is only allowed to change fieldNames in the patFieldDef setup window.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptField.FieldValue">
            <summary>Any text that the user types in.  Will later allow some automation.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptField.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.AutomationCondition">
            <summary>Each condition evaluates to true or false.  A series of conditions for a single automation is ANDed together.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationCondition.AutomationConditionNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationCondition.AutomationNum">
            <summary>FK to automation.AutomationNum. </summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationCondition.CompareField">
            <summary>Enum:AutoCondField </summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationCondition.Comparison">
            <summary>Enum:AutoCondComparison Not all comparisons are allowed with all data types.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutomationCondition.CompareString">
            <summary>.</summary>
        </member>
        <member name="M:OpenDentBusiness.AutomationCondition.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.AutoCondField">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondField.NeedsSheet">
            <summary>Typically specify Equals the exact name/description of the sheet.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondField.Problem">
            <summary>disease</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondField.Medication">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondField.Allergy">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondField.Age">
            <summary>Example, 23</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondField.Gender">
            <summary>Allowed values are M or F, not case sensitive.  Enforce at entry time.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondField.Labresult">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondField.InsuranceNotEffective">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.AutoCondComparison">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondComparison.Equals">
            <summary>Not sensitive to capitalization.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondComparison.GreaterThan">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondComparison.LessThan">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondComparison.Contains">
            <summary>aka Like</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCondComparison.None">
            <summary>Should not be displayed to users to choose from.  Used when the condition has one and only one 'comparison' to trigger it.  E.g. ins not effective.</summary>
        </member>
        <member name="T:OpenDentBusiness.ChartView">
            <summary>Enables viewing a variety of views in chart module.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartView.ChartViewNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartView.Description">
            <summary>Description of this view.  Gets displayed at top of Progress Notes grid.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartView.ItemOrder">
            <summary>0-based order to display in lists.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartView.ProcStatuses">
            <summary>Enum:ChartViewProcStat None=0,TP=1,Complete=2,Existing Cur Prov=4,Existing Other Prov=8,Referred=16,Deleted=32,Condition=64,All=127.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartView.ObjectTypes">
            <summary>Enum:ChartViewObjs None=0,Appointments=1,Comm Log=2,Comm Log Family=4,Tasks=8,Email=16,LabCases=32,Rx=64,Sheets=128,All=255.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartView.ShowProcNotes">
            <summary>Set true to show procedure notes.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartView.IsAudit">
            <summary>Set true to enable audit mode.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartView.SelectedTeethOnly">
            <summary>Set true to only show information regarding the selected teeth.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartView.OrionStatusFlags">
            <summary>Enum:OrionStatus Which orion statuses to show. Will be zero if not orion.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartView.DatesShowing">
            <summary>Enum:ChartViewDates </summary>
        </member>
        <member name="F:OpenDentBusiness.ChartView.IsTpCharting">
            <summary>set true to show treatment plan controls in chart module.</summary>
        </member>
        <member name="T:OpenDentBusiness.ChartViewObjs">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewObjs.None">
            <summary>0- None</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewObjs.Appointments">
            <summary>1- Appointments</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewObjs.CommLog">
            <summary>2- Comm Log</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewObjs.CommLogFamily">
            <summary>4- Comm Log Family</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewObjs.Tasks">
            <summary>8- Tasks</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewObjs.Email">
            <summary>16- Email</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewObjs.LabCases">
            <summary>32- Lab Cases</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewObjs.Rx">
            <summary>64- Rx</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewObjs.Sheets">
            <summary>128- Sheets</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewObjs.All">
            <summary>255- All</summary>
        </member>
        <member name="T:OpenDentBusiness.ChartViewProcStat">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewProcStat.None">
            <summary>0- None.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewProcStat.TP">
            <summary>1- Treatment Plan.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewProcStat.C">
            <summary>2- Complete.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewProcStat.EC">
            <summary>4- Existing Current Provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewProcStat.EO">
            <summary>8- Existing Other Provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewProcStat.R">
            <summary>16- Referred Out.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewProcStat.D">
            <summary>32- Deleted.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewProcStat.Cn">
            <summary>64- Condition.</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewProcStat.All">
            <summary>127- All.</summary>
        </member>
        <member name="T:OpenDentBusiness.ChartViewDates">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewDates.All">
            <summary>0- All</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewDates.Today">
            <summary>1- Today</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewDates.Yesterday">
            <summary>2- Yesterday</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewDates.ThisYear">
            <summary>3- This Year</summary>
        </member>
        <member name="F:OpenDentBusiness.ChartViewDates.LastYear">
            <summary>4- Last Year</summary>
        </member>
        <member name="T:OpenDentBusiness.AllergyDef">
            <summary>An allergy definition.  Gets linked to an allergy and patient.  Allergies will not show in CCD messages unless they have a valid Medication (that has an RxNorm) or UniiCode.</summary>
        </member>
        <member name="F:OpenDentBusiness.AllergyDef.AllergyDefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.AllergyDef.Description">
            <summary>Name of the drug.  User can change this.  If an RxCui is present, the RxNorm string can be pulled from the in-memory table for UI display in addition to the Description.</summary>
        </member>
        <member name="F:OpenDentBusiness.AllergyDef.IsHidden">
            <summary>Because user can't delete.</summary>
        </member>
        <member name="F:OpenDentBusiness.AllergyDef.DateTStamp">
            <summary>The last date and time this row was altered.  Not user editable.</summary>
        </member>
        <member name="F:OpenDentBusiness.AllergyDef.SnomedType">
            <summary>Enum:SnomedAllergy SNOMED Allergy Type Code.  Only used to create CCD in FormSummaryOfCare.</summary>
        </member>
        <member name="F:OpenDentBusiness.AllergyDef.MedicationNum">
            <summary>FK to Medication.MedicationNum.  Optional, only used with CCD messages.</summary>
        </member>
        <member name="F:OpenDentBusiness.AllergyDef.UniiCode">
            <summary>The Unii code for the Allergen.  Optional, but there must be either a MedicationNum or a UniiCode.  Used to create CCD in FormSummaryOfCare, or set during CCD allergy reconcile.</summary>
        </member>
        <member name="M:OpenDentBusiness.AllergyDef.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.SnomedAllergy">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.SnomedAllergy.None">
            <summary>0-No SNOMED allergy type code has been assigned.</summary>
        </member>
        <member name="F:OpenDentBusiness.SnomedAllergy.AllergyToSubstance">
            <summary>1-Allergy to substance (disorder), code number 418038007.</summary>
        </member>
        <member name="F:OpenDentBusiness.SnomedAllergy.DrugAllergy">
            <summary>2-Drug allergy (disorder), code number 416098002.</summary>
        </member>
        <member name="F:OpenDentBusiness.SnomedAllergy.DrugIntolerance">
            <summary>3-Drug intolerance (disorder), code number 59037007.</summary>
        </member>
        <member name="F:OpenDentBusiness.SnomedAllergy.FoodAllergy">
            <summary>4-Food allergy (disorder), code number 414285001.</summary>
        </member>
        <member name="F:OpenDentBusiness.SnomedAllergy.FoodIntolerance">
            <summary>5-Food intolerance (disorder), code number 235719002.</summary>
        </member>
        <member name="F:OpenDentBusiness.SnomedAllergy.AdverseReactions">
            <summary>6-Propensity to adverse reactions (disorder), code number 420134006.</summary>
        </member>
        <member name="F:OpenDentBusiness.SnomedAllergy.AdverseReactionsToDrug">
            <summary>7-Propensity to adverse reactions to drug (disorder), code number 419511003</summary>
        </member>
        <member name="F:OpenDentBusiness.SnomedAllergy.AdverseReactionsToFood">
            <summary>8-Propensity to adverse reactions to food (disorder), code number 418471000.</summary>
        </member>
        <member name="F:OpenDentBusiness.SnomedAllergy.AdverseReactionsToSubstance">
            <summary>9-Propensity to adverse reactions to substance (disorder), code number 419199007.</summary>
        </member>
        <member name="T:OpenDentBusiness.Allergy">
            <summary>An allergy attached to a patient and linked to an AllergyDef.</summary>
        </member>
        <member name="F:OpenDentBusiness.Allergy.AllergyNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Allergy.AllergyDefNum">
            <summary>FK to allergydef.AllergyDefNum</summary>
        </member>
        <member name="F:OpenDentBusiness.Allergy.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.Allergy.Reaction">
            <summary>Adverse reaction description.</summary>
        </member>
        <member name="F:OpenDentBusiness.Allergy.StatusIsActive">
            <summary>True if still an active allergy.  False helps hide it from the list of active allergies.</summary>
        </member>
        <member name="F:OpenDentBusiness.Allergy.DateTStamp">
            <summary>To be used for synch with web server for CertTimelyAccess.</summary>
        </member>
        <member name="F:OpenDentBusiness.Allergy.DateAdverseReaction">
            <summary>The historical date that the patient had the adverse reaction to this agent.</summary>
        </member>
        <member name="F:OpenDentBusiness.Allergy.SnomedReaction">
            <summary>Snomed code for reaction.  Optional and independent of the Reaction text field.  Not needed for reporting.  Only used for CCD export/import.</summary>
        </member>
        <member name="M:OpenDentBusiness.Allergy.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.CentralConnection">
            <summary>Used by the Central Manager.  Stores the information needed to establish a connection to a remote database.</summary>
        </member>
        <member name="F:OpenDentBusiness.CentralConnection.CentralConnectionNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.CentralConnection.ServerName">
            <summary>If direct db connection.  Can be ip address.</summary>
        </member>
        <member name="F:OpenDentBusiness.CentralConnection.DatabaseName">
            <summary>If direct db connection.</summary>
        </member>
        <member name="F:OpenDentBusiness.CentralConnection.MySqlUser">
            <summary>If direct db connection.</summary>
        </member>
        <member name="F:OpenDentBusiness.CentralConnection.MySqlPassword">
            <summary>If direct db connection.  Symmetrically encrypted.</summary>
        </member>
        <member name="F:OpenDentBusiness.CentralConnection.ServiceURI">
            <summary>If connecting to the web service. Can be on VPN, or can be over https.</summary>
        </member>
        <member name="F:OpenDentBusiness.CentralConnection.OdUser">
            <summary>Deprecated.  If connecting to the web service.</summary>
        </member>
        <member name="F:OpenDentBusiness.CentralConnection.OdPassword">
            <summary>Deprecated.  If connecting to the web service.  Symmetrically encrypted.</summary>
        </member>
        <member name="F:OpenDentBusiness.CentralConnection.Note">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.CentralConnection.ItemOrder">
            <summary>0-based.</summary>
        </member>
        <member name="F:OpenDentBusiness.CentralConnection.WebServiceIsEcw">
            <summary>If set to true, the password hash is calculated differently.</summary>
        </member>
        <member name="F:OpenDentBusiness.CentralConnection.ConnectionStatus">
            <summary>Contains the most recent information about this connection.  OK if no problems, version information if version mismatch, 
            nothing for not checked, and OFFLINE if previously couldn't connect.</summary>
        </member>
        <member name="M:OpenDentBusiness.CentralConnection.Copy">
            <summary>Returns a copy.</summary>
        </member>
        <member name="T:OpenDentBusiness.CodeSystem">
            <summary>Used for tracking code systems imported to OD. HL7OID used for sending messages.  This must be a database table in order to keep track of VersionCur between sessions.</summary>
        </member>
        <member name="F:OpenDentBusiness.CodeSystem.CodeSystemNum">
            <summary>Primary key. Not currently referenced anywhere.</summary>
        </member>
        <member name="F:OpenDentBusiness.CodeSystem.CodeSystemName">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.CodeSystem.VersionCur">
            <summary>Only used for display, not actually interpreted. Updated by Code System importer.  Examples: 2013 or 1</summary>
        </member>
        <member name="F:OpenDentBusiness.CodeSystem.VersionAvail">
            <summary>Only used for display, not actually interpreted. Updated by Convert DB script.</summary>
        </member>
        <member name="F:OpenDentBusiness.CodeSystem.HL7OID">
            <summary>Example: 2.16.840.1.113883.6.13</summary>
        </member>
        <member name="F:OpenDentBusiness.CodeSystem.Note">
            <summary>Notes to display to user. Examples: "CDT codes distributed via program updates.", "CPT codes require purchase and download from www.ama.com</summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystem.Clone">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystem.#ctor">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.CodeSystem.#ctor(System.String)">
            <summary>Used to generate version specific list.</summary>
        </member>
        <member name="T:OpenDentBusiness.Cdcrec">
            <summary>CDC Race and Ethnicity.  About 200 rows.  This table is not used anywhere right now.</summary>
        </member>
        <member name="F:OpenDentBusiness.Cdcrec.CdcrecNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Cdcrec.CdcrecCode">
            <summary>CDCREC Code.  Example: 1002-5.  Not allowed to edit this column once saved in the database.</summary>
        </member>
        <member name="F:OpenDentBusiness.Cdcrec.HeirarchicalCode">
            <summary>Heirarchical Code. Example:
            <para>R1       =="American Indian or alaska Native"</para>
            <para>R1.01    =="American Indian"</para>
            <para>R1.01.001=="Abenaki"</para>
            <para>Not allowed to edit this column once saved in the database. </para></summary>
        </member>
        <member name="F:OpenDentBusiness.Cdcrec.Description">
            <summary>Description.</summary>
        </member>
        <member name="M:OpenDentBusiness.Cdcrec.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Cpt">
            <summary>Other tables generally use the CptCode as their foreign key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Cpt.CptNum">
            <summary>Primary key. .</summary>
        </member>
        <member name="F:OpenDentBusiness.Cpt.CptCode">
            <summary>Cpt code. Not allowed to edit this column once saved in the database.</summary>
        </member>
        <member name="F:OpenDentBusiness.Cpt.Description">
            <summary>Short Description provided by Cpt documentation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Cpt.VersionIDs">
            <summary>Comma delimited list of years the Cpt code existed in that have been imported into this table.</summary>
        </member>
        <member name="M:OpenDentBusiness.Cpt.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Encounter">
            <summary>Mostly used for EHR.  This rigorously records encounters using rich automation, so that reporting can be easy and meaningful.  Encounters can also be tracked separately using billable procedures.  In contrast, encounters in this table are not billable.  There can be multiple encounters at one appointment because there can be different types.</summary>
        </member>
        <member name="F:OpenDentBusiness.Encounter.EncounterNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Encounter.PatNum">
            <summary>FK to patient.PatNum. </summary>
        </member>
        <member name="F:OpenDentBusiness.Encounter.ProvNum">
            <summary>FK to provider.ProvNum. </summary>
        </member>
        <member name="F:OpenDentBusiness.Encounter.CodeValue">
            <summary>FK to ehrcode.CodeValue.  This code may not exist in the ehrcode table, it may have been chosen from a bigger list of available codes.  In that case, this will be a FK to a specific code system table identified by the CodeSystem column.  The code for this item from one of the code systems supported.  Examples: 185349003 or 406547006.</summary>
        </member>
        <member name="F:OpenDentBusiness.Encounter.CodeSystem">
            <summary>FK to codesystem.CodeSystemName. This will determine which specific code system table the CodeValue is a FK to.  We only allow the following CodeSystems in this table: CDT, CPT, HCPCS, and SNOMEDCT. </summary>
        </member>
        <member name="F:OpenDentBusiness.Encounter.Note">
            <summary>Max length 2000.</summary>
        </member>
        <member name="F:OpenDentBusiness.Encounter.DateEncounter">
            <summary>Date the encounter occurred</summary>
        </member>
        <member name="M:OpenDentBusiness.Encounter.Clone">
            <summary>Returns a copy of this Encounter.</summary>
        </member>
        <member name="T:OpenDentBusiness.PayorType">
            <summary>Used to identify the source of payment for a given patient at a given point in time.  As insurance is added and removed, rows should be either automatically inserted into this table, or the user should be prompted to specify what the new payor type is.  The DateStart of one payor type is interpreted as the end date of the previous payor type.  Example: Patient with no insurance may have payortype.SopCode=81 ("SelfPay").  Patient then adds Medicaid insurance and gets a second new PayorType entry with SopCode=2 (Medicaid).</summary>
        </member>
        <member name="F:OpenDentBusiness.PayorType.PayorTypeNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayorType.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayorType.DateStart">
            <summary>Date of the beginning of new payor type.  End date is the DateStart of the next payor type entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayorType.SopCode">
            <summary>FK to sop.SopCode. Examples: 121, 3115, etc. </summary>
        </member>
        <member name="F:OpenDentBusiness.PayorType.Note">
            <summary>Max length 2000.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayorType.Clone">
            <summary>Returns a copy of this PayorType.</summary>
        </member>
        <member name="T:OpenDentBusiness.Sop">
            <summary>Source of Payment Typology.  Used by EHR.  Examples: Medicaid, MedicaidPPO, NoFee, etc.  About 100 defined by govt.  Other tables generally use the SopCode as their foreign key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sop.SopNum">
            <summary>Primary key. .</summary>
        </member>
        <member name="F:OpenDentBusiness.Sop.SopCode">
            <summary>Sop code. Not allowed to edit this column once saved in the database.  Examples: 121, 3115, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sop.Description">
            <summary>Description provided by Sop documentation.  Examples: Medicare FFS, TRICARE Reserve Select</summary>
        </member>
        <member name="M:OpenDentBusiness.Sop.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Cvx">
            <summary>Vaccines administered.  Other tables generally use the CvxCode as their foreign key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Cvx.CvxNum">
            <summary>Primary key. .</summary>
        </member>
        <member name="F:OpenDentBusiness.Cvx.CvxCode">
            <summary>Cvx code. Not allowed to edit this column once saved in the database.</summary>
        </member>
        <member name="F:OpenDentBusiness.Cvx.Description">
            <summary>Short Description provided by Cvx documentation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Cvx.IsActive">
            <summary>Not currently in use.  Might not need this column.  If we use this in the future, then convert from string to bool.  1 if the code is an active code, 0 if the code is inactive.</summary>
        </member>
        <member name="M:OpenDentBusiness.Cvx.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Hcpcs">
            <summary>A code system used in EHR.  Healhtcare Common Procedure Coding System.  Another system used to describe procedure codes.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hcpcs.HcpcsNum">
            <summary>Primary key..</summary>
        </member>
        <member name="F:OpenDentBusiness.Hcpcs.HcpcsCode">
            <summary>Examples: AQ, J1040</summary>
        </member>
        <member name="F:OpenDentBusiness.Hcpcs.DescriptionShort">
            <summary>Short description.  This is the HCPCS supplied abbreviated description.</summary>
        </member>
        <member name="M:OpenDentBusiness.Hcpcs.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Icd10">
            <summary>Other tables generally use the ICD10Code string as their foreign key.  It is implied that these are all ICD10CMs, although that may not be the case in the future.</summary>
        </member>
        <member name="F:OpenDentBusiness.Icd10.Icd10Num">
            <summary>Primary key. Also identical to "Order Number" column in ICD10 documentation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Icd10.Icd10Code">
            <summary>ICD-10-CM or ICD-10-PCS code. Dots are included. Not allowed to edit this column once saved in the database.</summary>
        </member>
        <member name="F:OpenDentBusiness.Icd10.Description">
            <summary>Short Description provided by ICD10 documentation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Icd10.IsCode">
            <summary>0 if the code is a “header” – not valid for submission on a UB04. 1 if the code is valid for submission on a UB04.</summary>
        </member>
        <member name="M:OpenDentBusiness.Icd10.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Intervention">
            <summary>An intervention ordered or performed.  Examples: smoking cessation and weightloss counseling.  Links to a definition in the ehrcode table using the CodeValue and CodeSystem.</summary>
        </member>
        <member name="F:OpenDentBusiness.Intervention.InterventionNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Intervention.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Intervention.ProvNum">
            <summary>FK to provider.ProvNum. </summary>
        </member>
        <member name="F:OpenDentBusiness.Intervention.CodeValue">
            <summary>FK to ehrcode.CodeValue.  This code may not exist in the ehrcode table, it may have been chosen from a bigger list of available codes.  In that case, this will be a FK to a specific code system table identified by the CodeSystem column.  The code for this item from one of the code systems supported.  Examples: V65.3 or 418995006.</summary>
        </member>
        <member name="F:OpenDentBusiness.Intervention.CodeSystem">
            <summary>FK to codesystem.CodeSystemName. The code system name for this code.  Possible values are: CPT, HCPCS, ICD9CM, ICD10CM, and SNOMEDCT.</summary>
        </member>
        <member name="F:OpenDentBusiness.Intervention.Note">
            <summary>User-entered details about the intervention for this patient.  Max length 4000.</summary>
        </member>
        <member name="F:OpenDentBusiness.Intervention.DateEntry">
            <summary>The date of the intervention.</summary>
        </member>
        <member name="F:OpenDentBusiness.Intervention.CodeSet">
            <summary>Enum:InterventionCodeSet AboveNormalWeight, BelowNormalWeight, TobaccoCessation, Nutrition, PhysicalActivity, Dialysis.</summary>
        </member>
        <member name="F:OpenDentBusiness.Intervention.IsPatDeclined">
            <summary>Indicates whether the intervention was offered/recommended to the patient and the patient declined the treatment/referral.</summary>
        </member>
        <member name="M:OpenDentBusiness.Intervention.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.InterventionCodeSet">
            <summary>Value sets for interventions.  This will limit the codes in FormInterventionEdit to a smaller list of codes and allow us to recommend codes to meet specific CQMs.</summary>
        </member>
        <member name="F:OpenDentBusiness.InterventionCodeSet.AboveNormalWeight">
            <summary>0 - Above Normal Weight Follow-up/Referrals where weight assessment may occur</summary>
        </member>
        <member name="F:OpenDentBusiness.InterventionCodeSet.BelowNormalWeight">
            <summary>1 - Below Normal Weight Follow-up/Referrals where weight assessment may occur</summary>
        </member>
        <member name="F:OpenDentBusiness.InterventionCodeSet.Nutrition">
            <summary>2 - Counseling for Nutrition</summary>
        </member>
        <member name="F:OpenDentBusiness.InterventionCodeSet.PhysicalActivity">
            <summary>3 - Counseling for Physical Activity</summary>
        </member>
        <member name="F:OpenDentBusiness.InterventionCodeSet.TobaccoCessation">
            <summary>4 - Tobacco Use Cessation Counseling</summary>
        </member>
        <member name="F:OpenDentBusiness.InterventionCodeSet.Dialysis">
            <summary>5 - Dialysis Education/Other Services Related to Dialysis</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrNotPerformed">
            <summary>For EHR module, these are all the items 'not performed' on patients.  Each row will link to the ehrcode table to retrieve relevant data.  To join this table to the ehrcode table you must join on CodeValue and CodeSystem.  Some items will have associated reasons attached to specify why it was not performed.  Those reasons will also be defined in the ehrcode table, so it may be necessary to join with that table again for the data relevant to the reason.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrNotPerformed.EhrNotPerformedNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrNotPerformed.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrNotPerformed.ProvNum">
            <summary>FK to provider.ProvNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrNotPerformed.CodeValue">
            <summary>FK to ehrcode.CodeValue.  This code may not exist in the ehrcode table, it may have been chosen from a bigger list of available codes.  In that case, this will be a FK to a specific code system table identified by the CodeSystem column.  The code for this item from one of the code systems supported.  Examples: 90656 or 442333005.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrNotPerformed.CodeSystem">
            <summary>FK to codesystem.CodeSystemName. The code system name for this code.  Possible values are: CPT, CVX, LOINC, SNOMEDCT.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrNotPerformed.CodeValueReason">
            <summary>FK to ehrcode.CodeValue.  This code may not exist in the ehrcode table, it may have been chosen from a bigger list of available codes.  In that case, this will be a FK to a specific code system table identified by the CodeSystem column.  The code for the reason the item was not performed from one of the code systems supported.  Examples: 182856006 or 419808006.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrNotPerformed.CodeSystemReason">
            <summary>FK to codesystem.CodeSystemName. The code system name for this code.  Possible value is: SNOMEDCT.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrNotPerformed.Note">
            <summary>Relevant notes for this not performed item.  Just in case users want it, does not get reported in EHR quality measure reporting.  Max length 4000.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrNotPerformed.DateEntry">
            <summary>The date and time this item was created.  Can be edited to the date and time the item actually occurred.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrNotPerformed.Copy">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrNotPerformedItem.BMIExam">
            <summary>0 - BMI Exam, physical exam</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrNotPerformedItem.InfluenzaVaccination">
            <summary>1 - Influenza Vaccination, procedure or medication</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrNotPerformedItem.TobaccoScreening">
            <summary>2 - Tobacco Use Screening, risk category/assessment</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrNotPerformedItem.DocumentCurrentMeds">
            <summary>3 - Current Medications Documented, procedure</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrCode">
            <summary>For EHR module, these are all the codes from various code sets that will affect reporting clinical quality measures.  Users cannot edit.  This is not an actual table in the database.  The codes are loaded from the EHR.dll, so it is a static object, no inserts/updates.  Selecting from this 'table' will always use the cache pattern.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCode.EhrCodeNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCode.MeasureIds">
            <summary>Clinical quality measure test ID's that utilize this code.  Comma delimited list.  Example: 69v2,147v2.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCode.ValueSetName">
            <summary>The National Library of Medicine Value Set Authority Center assigned value set name.  Example: Influenza Vaccination.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCode.ValueSetOID">
            <summary>The value set object identifier for reporting CQM.  Example: 2.16.840.1.113883.3.526.3.402.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCode.QDMCategory">
            <summary>The Quality Data Model category for this code.  2 examples: Condition/Diagnosis/Problem or Encounter.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCode.CodeValue">
            <summary>The code from the specified code system.  Example: 653.83.  This code can belong to multiple value sets, in which case this table will contain multiple rows for this code.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCode.Description">
            <summary>The description for this code.  This will frequently be duplicate data, but keeping it here ensures accurate CQM reporting.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCode.CodeSystem">
            <summary>The code system name for this code.  Possible values are: CDCREC, CDT, CPT, CVX, HCPCS, ICD9CM, ICD10CM, LOINC, RXNORM, SNOMEDCT, SOP, and AdministrativeSex.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCode.CodeSystemOID">
            <summary>The code system object identifier for reporting CQM.  Example: 2.16.840.1.113883.6.103.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCode.IsInDb">
            <summary>This is true if the code is in the corresponding table identified by CodeSystem.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrCode.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Loinc">
            <summary>Logical Observation Identifiers Names and Codes (LOINC) used to identify both lab panels and lab results. Widths specified are from LOINC documentation and may not represent length of fields in the Open Dental Database.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.LoincNum">
            <summary>Primary key. Internal use only.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.LoincCode">
            <summary>#EULA REQUIRED# Also called LOINC_NUM in the official LOINCDB. Width-10. LOINC244 column 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.Component">
            <summary>#EULA REQUIRED# First Major axis:component or analyte. Width-255. LOINC244 column 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.PropertyObserved">
            <summary>#EULA REQUIRED# Second major axis:property observed (e.g., mass vs. substance). Width-30. LOINC244 column 3.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.TimeAspct">
            <summary>#EULA REQUIRED# Third major axis:timing of the measurement (e.g., point in time vs 24 hours). Width-15. LOINC244 column 4.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.SystemMeasured">
            <summary>#EULA REQUIRED# Fourth major axis:type of specimen or system (e.g., serum vs urine). Width-100 LOINC244. column 5.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.ScaleType">
            <summary>#EULA REQUIRED# Fifth major axis:scale of measurement (e.g., qualitative vs. quantitative). Width-30. LOINC244 column 6.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.MethodType">
            <summary>#EULA REQUIRED# Sixth major axis:method of measurement. Width-50. LOINC244 column 7.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.StatusOfCode">
            <summary><para>#EULA REQUIRED# Width-10. LOINC244 column 13.</para>
            <para>ACTIVE = Concept is active. Use at will.</para>
            <para>TRIAL = Concept is experimental in nature. Use with caution as the concept and associated attributes may change. </para>
            <para>DISCOURAGED = Concept is not recommended for current use. New mappings to this concept are discouraged; although existing may mappings may continue to be valid in context. Wherever  possible, the superseding concept is indicated in the MAP_TO field in the MAP_TO table (see Table 28b) and should be used instead. </para>
            <para>DEPRECATED = Concept is deprecated. Concept should not be used, but it is retained in LOINC for historical purposes. Wherever possible, the superseding concept is indicated in the MAP_TO field (see Table 28b) and should be used both for new mappings and updating existing implementations..</para>
            </summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.NameShort">
            <summary>#EULA REQUIRED# Introduced in version 2.07, this field is a concatenation of the fully specified LOINC name. The field width may change in a future release. Width 40. LOINC244 column 29.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.ClassType">
            <summary>1=Laboratory class; 2=Clinical class; 3=Claims attachments; 4=Surveys. LOINC244 column 16.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.UnitsRequired">
            <summary>Y/N field that indicates that units are required when this LOINC is included as an OBX segment in a HIPAA attachment. LOINC244 column 26.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.OrderObs">
            <summary>Defines term as order only, observation only, or both. A fourth category, Subset, is used for terms that are subsets of a panel but do not represent a package that is known to be orderable we have defined them only to make it easier to maintain panels or other sets within the LOINC construct. LOINC244 column 30.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.HL7FieldSubfieldID">
            <summary>A value in this field means that the content should be delivered in the named field/subfield of the HL7 message. When NULL, the data for this data element should be sent in an OBX segment with this LOINC code stored in OBX-3 and with the value in the OBX-5. Width 50. LOINC244 column 32.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.ExternalCopyrightNotice">
            <summary>External copyright holders copyright notice for this LOINC code. LOINC244 column 33.  Colwidth=4000.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.NameLongCommon">
            <summary>This field contains the LOINC term in a more readable format than the fully specified name. The long common names have been created via a table driven algorithmic process. Most abbreviations and acronyms that are used in the LOINC database have been fully spelled out in English. Width 255. LOINC244 column 35.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.UnitsUCUM">
            <summary>The Unified Code for Units of Measure (UCUM) is a code system intended to include all units of measures being contemporarily used in international science, engineering, and business. (www.unitsofmeasure.org ) This field contains example units of measures for this term expressed as UCUM units. Width 255. LOINC244 column 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.RankCommonTests">
            <summary>Ranking of approximately 2000 common tests performed by laboratories in USA. LOINC244 column 45.</summary>
        </member>
        <member name="F:OpenDentBusiness.Loinc.RankCommonOrders">
            <summary>Ranking of approximately 300 common orders performed by laboratories in USA. LOINC244 column 46.</summary>
        </member>
        <member name="M:OpenDentBusiness.Loinc.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.SecurityLogHash">
            <summary>Stores hashes of audit logs for detecting alteration.  User not allowed to edit.</summary>
        </member>
        <member name="F:OpenDentBusiness.SecurityLogHash.SecurityLogHashNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SecurityLogHash.SecurityLogNum">
            <summary>FK to securityLog.SecurityLogNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.SecurityLogHash.LogHash">
            <summary>The SHA-256 hash of PermType, UserNum, LogDateTime, LogText, and PatNum, all concatenated together.  This hash has length of 32 bytes encoded as base64.  Used to detect if the entry has been altered outside of Open Dental.</summary>
        </member>
        <member name="M:OpenDentBusiness.SecurityLogHash.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.FamilyHealth">
            <summary>For EHR, this lets us record medical problems for family members.  These family members will usually not be in our database, and they are just recorded by relationship.</summary>
        </member>
        <member name="F:OpenDentBusiness.FamilyHealth.FamilyHealthNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.FamilyHealth.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.FamilyHealth.Relationship">
            <summary>Enum:FamilyRelationship </summary>
        </member>
        <member name="F:OpenDentBusiness.FamilyHealth.DiseaseDefNum">
            <summary>FK to diseasedef.DiseaseDefNum, which will have a SnoMed associated with it.</summary>
        </member>
        <member name="F:OpenDentBusiness.FamilyHealth.PersonName">
            <summary>Name of the family member.</summary>
        </member>
        <member name="M:OpenDentBusiness.FamilyHealth.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.FamilyRelationship">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.FamilyRelationship.Parent">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.FamilyRelationship.Sibling">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.FamilyRelationship.Offspring">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.PatientRace">
            <summary>Each patient may have multiple races.  Used to represent a race or an ethnicity for a patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientRace.PatientRaceNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientRace.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientRace.Race">
            <summary>Enum:PatRace </summary>
        </member>
        <member name="F:OpenDentBusiness.PatientRace.CdcrecCode">
            <summary>FK to cdcrec.CdcrecCode.  This code is mainly for Ehr reporting, but may also be used for other HL7 messages.  Will be blank if they choose a race, like Aboriginal, that is not in the cdcrec code list.  We will initially only use 8 of the cdcrec race codes, see enum below.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatientRace.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.PatRace">
            <summary>This enum was not able to completely replace the old enum because we keep string representations of the old enums in certain places like sheets and HL7.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatRace.Aboriginal">
            <summary>0 - Hidden for EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatRace.AfricanAmerican">
            <summary>1 - CDCREC:2054-5 Race</summary>
        </member>
        <member name="F:OpenDentBusiness.PatRace.AmericanIndian">
            <summary>2 - CDCREC:1002-5 Race</summary>
        </member>
        <member name="F:OpenDentBusiness.PatRace.Asian">
            <summary>3 - CDCREC:2028-9 Race</summary>
        </member>
        <member name="F:OpenDentBusiness.PatRace.DeclinedToSpecifyRace">
            <summary>4 - Our hard-coded option for EHR reporting.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatRace.HawaiiOrPacIsland">
            <summary>5 - CDCREC:2076-8 Race</summary>
        </member>
        <member name="F:OpenDentBusiness.PatRace.Hispanic">
            <summary>6 - CDCREC:2135-2 Ethnicicty.  If EHR is turned on, our UI will force this to be supplemental to a base 'race'.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatRace.Multiracial">
            <summary>7 - We had to keep this for backward compatibility.  Hidden for EHR because it's explicitly not allowed.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatRace.Other">
            <summary>8 - CDCREC:2131-1 Race.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatRace.White">
            <summary>9 - CDCREC:2106-3 Race</summary>
        </member>
        <member name="F:OpenDentBusiness.PatRace.NotHispanic">
            <summary>10 - CDCREC:2186-5 Ethnicity.  We originally used the lack of Hispanic to indicate NonHispanic.  Now we are going to explicitly store NonHispanic to make queries for ClinicalQualityMeasures easier.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatRace.DeclinedToSpecifyEthnicity">
            <summary>11 - Our hard-coded option for EHR reporting.</summary>
        </member>
        <member name="T:OpenDentBusiness.ResellerService">
            <summary>An entry in a list of services for a specific reseller to pick from.  To determine which services a certain customer has access to, check the repeating charges table.</summary>
        </member>
        <member name="F:OpenDentBusiness.ResellerService.ResellerServiceNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ResellerService.ResellerNum">
            <summary>FK to reseller.ResellerNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ResellerService.CodeNum">
            <summary>FK to procedurecode.CodeNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ResellerService.Fee">
            <summary>Amount of the service.  Might be a default, or might be the same for all customers of the reseller.</summary>
        </member>
        <member name="M:OpenDentBusiness.ResellerService.Copy">
            <summary>Returns a copy of this ResellerService.</summary>
        </member>
        <member name="T:OpenDentBusiness.Reseller">
            <summary>Only used at HQ.  If a row is present in this table, then this customer is a reseller.  Also holds their credentials for the reseller portal.</summary>
        </member>
        <member name="F:OpenDentBusiness.Reseller.ResellerNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Reseller.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Reseller.UserName">
            <summary>User name used to log into the reseller portal with.</summary>
        </member>
        <member name="F:OpenDentBusiness.Reseller.ResellerPassword">
            <summary>Password used to log into the reseller portal with.  Stored as plain text.</summary>
        </member>
        <member name="M:OpenDentBusiness.Reseller.Copy">
            <summary>Returns a copy of this Reseller.</summary>
        </member>
        <member name="T:OpenDentBusiness.Snomed">
            <summary>We do not import synonyms, only "Fully Specified Name records". Snomed for holding a large list of codes. Codes in use are copied into the DiseaseDef table.  SNOMED CT maintained, owned and copyright International Health Terminology Standards Development Organisation (IHTSDO).</summary>
        </member>
        <member name="F:OpenDentBusiness.Snomed.SnomedNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Snomed.SnomedCode">
            <summary>Used as FK by other tables.  Also called the Concept ID.  Not allowed to edit this column once saved in the database.</summary>
        </member>
        <member name="F:OpenDentBusiness.Snomed.Description">
            <summary>Also called "Term", "Name", or "Fully Specified Name".  Not editable and doesn't change.</summary>
        </member>
        <member name="M:OpenDentBusiness.Snomed.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.VaccineObs">
            <summary>Vaccine observation.  There may be multiple vaccine observations for each vaccine.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObs.VaccineObsNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObs.VaccinePatNum">
            <summary>FK to vaccinepat.VaccinePatNum. </summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObs.ValType">
            <summary>Enum:VaccineObsType Coded, Dated, Numeric, Text, DateAndTime.  Used in HL7 OBX-2.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObs.IdentifyingCode">
            <summary>Enum:VaccineObsIdentifier  Identifies the observation question.  Used in HL7 OBX-3.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObs.ValReported">
            <summary>The observation value.  The type of the value depends on the ValType.  Used in HL7 OBX-5.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObs.ValCodeSystem">
            <summary>Enum:VaccineObsValCodeSystem  CVX, HL70064.  The observation value code system when ValType is Coded.  Used in HL7 OBX-5.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObs.VaccineObsNumGroup">
            <summary>FK to vaccineobs.VaccineObsNum.  All vaccineobs records with matching GroupId are in the same group.  Set to 0 if this vaccine observation is not part of a group.  Used in HL7 OBX-4.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObs.UcumCode">
            <summary>Used in HL7 OBX-6.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObs.DateObs">
            <summary>Date of observation.  Used in HL7 OBX-14.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObs.MethodCode">
            <summary>Code from code set CDCPHINVS (this code system is not yet fully defined, so user has to enter manually).  Used in HL7 OBX-17.  Only required when IdentifyingCode is FundPgmEligCat.</summary>
        </member>
        <member name="T:OpenDentBusiness.VaccineObsType">
            <summary>Corresponds to HL7 table 0125.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsType.Coded">
            <summary>0 - Code CE.  Coded entry. (default)</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsType.Dated">
            <summary>1 - Code DT.  Date (no time).</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsType.Numeric">
            <summary>2 - Code NM.  Numeric.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsType.Text">
            <summary>3 - Code ST.  String.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsType.DateAndTime">
            <summary>4 - Code TS.  Date and time.</summary>
        </member>
        <member name="T:OpenDentBusiness.VaccineObsIdentifier">
            <summary>Corresponds to HL7 value set NIP003 (http://hl7v2-iz-testing.nist.gov/mu-immunization/).
            This code set is a subset of LOINC codes.  Used in HL7 OBX-3.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.DatePublished">
            <summary>0 - LOINC code 29768-9.  Date vaccine information statement published:TmStp:Pt:Patient:Qn: (default)</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.DatePresented">
            <summary>1 - LOINC code 29769-7.  Date vaccine information statement presented:TmStp:Pt:Patient:Qn:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.DatePrecautionExpiration">
            <summary>2 - LOINC code 30944-3.  Date of vaccination temporary contraindication and or precaution expiration:TmStp:Pt:Patient:Qn:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.Precaution">
            <summary>3 - LOINC code 30945-0.  Vaccination contraindication and or precaution:Find:Pt:Patient:Nom:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.DatePrecautionEffective">
            <summary>4 - LOINC code 30946-8.  Date vaccination contraindication and or precaution effective:TmStp:Pt:Patient:Qn:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.TypeOf">
            <summary>5 - LOINC code 30956-7.  Type:ID:Pt:Vaccine:Nom:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.FundsPurchasedWith">
            <summary>6 - LOINC code 30963-3.  Funds vaccine purchased with:Find:Pt:Patient:Nom:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.DoseNumber">
            <summary>7 - LOINC code 30973-2.  Dose number:Num:Pt:Patient:Qn:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.NextDue">
            <summary>8 - LOINC code 30979-9.  Vaccines due next:Cmplx:Pt:Patient:Set:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.DateDue">
            <summary>9 - LOINC code 30980-7.  Date vaccine due:TmStp:Pt:Patient:Qn:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.DateEarliestAdminister">
            <summary>10 - LOINC code 30981-5.  Earliest date to give:TmStp:Pt:Patient:Qn:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.ReasonForcast">
            <summary>11 - LOINC code 30982-3.  Reason applied by forcast logic to project this vaccine:Find:Pt:Patient:Nom:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.Reaction">
            <summary>12 - LOINC code 31044-1.  Reaction:Find:Pt:Patient:Nom:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.ComponentType">
            <summary>13 - LOINC code 38890-0.  Vaccine component type:ID:Pt:Vaccine:Nom:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.TakeResponseType">
            <summary>14 - LOINC code 46249-9.  Vaccination take-response type:Prid:Pt:Patient:Nom:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.DateTakeResponse">
            <summary>15 - LOINC code 46250-7.  Vaccination take-response date:TmStp:Pt:Patient:Qn:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.ScheduleUsed">
            <summary>16 - LOINC code 59779-9.  Immunization schedule used:Find:Pt:Patient:Nom:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.Series">
            <summary>17 - LOINC code 59780-7.  Immunization series:Find:Pt:Patient:Nom:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.DoseValidity">
            <summary>18 - LOINC code 59781-5.  Dose validity:Find:Pt:Patient:Ord:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.NumDosesPrimary">
            <summary>19 - LOINC code 59782-3.  Number of doses in primary immunization series:Num:Pt:Patient:Qn:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.StatusInSeries">
            <summary>20 - LOINC code 59783-1.  Status in immunization series:Find:Pt:Patient:Nom:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.DiseaseWithImmunity">
            <summary>21 - LOINC code 59784-9.  Disease with presumed immunity:Find:Pt:Patient:Nom:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.Indication">
            <summary>22 - LOINC code 59785-6.  Indication for Immunization:Find:Pt:Patient:Nom:</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.FundPgmEligCat">
            <summary>23 - LOINC code 64994-7.  Vaccine fund pgm elig cat</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsIdentifier.DocumentType">
            <summary>24 - LOINC code 69764-9.  Document type</summary>
        </member>
        <member name="T:OpenDentBusiness.VaccineObsValCodeSystem">
            <summary>Used in HL7 OBX-5.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsValCodeSystem.CVX">
            <summary>0 (default)</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsValCodeSystem.HL70064">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineObsValCodeSystem.SCT">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.WikiListHeaderWidth">
            <summary>Keeps track of column widths in Wiki Lists.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiListHeaderWidth.WikiListHeaderWidthNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiListHeaderWidth.ListName">
            <summary>Name of the list that this header belongs to.  Tablename without the prefix.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiListHeaderWidth.ColName">
            <summary>Name of the column that this header belongs to.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiListHeaderWidth.ColWidth">
            <summary>Width in pixels of column.</summary>
        </member>
        <member name="T:OpenDentBusiness.EvaluationCriterion">
            <summary>One row on an evaluation.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterion.EvaluationCriterionNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterion.EvaluationNum">
            <summary>FK to evaluation.EvaluationNum</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterion.CriterionDescript">
            <summary>Description that is displayed for the criterion.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterion.IsCategoryName">
            <summary>This row will show in bold and will not have a grade attached to it.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterion.GradingScaleNum">
            <summary>FK to gradingscale.GradingScaleNum.  The grading scale used for this criterion.  Having this here allows the instructor to edit saved grades and also allows the evaluation overall grade to consider whether to include this criterion in the calculation.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterion.GradeShowing">
            <summary>Copied from gradingscaleitem.GradeShowing.  Required.  For example A, B, C, D, F, or 1-10, pass, fail, 89, etc.  Except for percentages, must come from pick list.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterion.GradeNumber">
            <summary>Copied from gradingscaleitem.GradeNumber.  Required.  For example A=4, A-=3.8, pass=1, percentages stored as 89, etc.  Except for percentages, must come from pick list.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterion.Notes">
            <summary>A note about why this student received this particular grade on this criterion.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterion.ItemOrder">
            <summary>Copied from item order of def.  Defines the order that all the criteria show on the evaluation.  User not allowed to change here, only in the def.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterion.MaxPointsPoss">
            <summary>For ScaleType=Points, sets the maximum value of points for this criterion.</summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationCriterion.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.GradingScaleItem">
            <summary>Only used when GradingScale.ScaleType=PickList, not Percentage or Points.  The specific grades allowed on a scale.  Contains both the GradeShowing and the equivalent number.  There are no FKs to these items.  The values are all copied from here into student records as they are used.</summary>
        </member>
        <member name="F:OpenDentBusiness.GradingScaleItem.GradingScaleItemNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.GradingScaleItem.GradingScaleNum">
            <summary>FK to gradingscale.GradingScaleNum</summary>
        </member>
        <member name="F:OpenDentBusiness.GradingScaleItem.GradeShowing">
            <summary>For example A, B, C, D, F.  Optional.  If not specified, it shows the number.</summary>
        </member>
        <member name="F:OpenDentBusiness.GradingScaleItem.GradeNumber">
            <summary>For example A=4, A-=3.8, pass=1, etc.  Required.  Enforced to be equal to or less than GradingScale.MaxPointsPoss.</summary>
        </member>
        <member name="F:OpenDentBusiness.GradingScaleItem.Description">
            <summary>Optional additional info about what this particular grade means.  Just used as guidance and does not get copied to the individual student record.</summary>
        </member>
        <member name="M:OpenDentBusiness.GradingScaleItem.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EvaluationCriterionDef">
            <summary>Rows on an evaluation def.  The individual items that will be graded. Criterion Defs</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterionDef.EvaluationCriterionDefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterionDef.EvaluationDefNum">
            <summary>FK to evaluationdef.EvaluationDefNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterionDef.CriterionDescript">
            <summary>Description that is displayed for the criterion.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterionDef.IsCategoryName">
            <summary>This row will show in bold and will not have a grade attached to it.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterionDef.GradingScaleNum">
            <summary>FK to gradingscale.GradingScaleNum.  The grading scale used for this criterion.  As a user builds an evaluationDef, each criterion should default to the GradingScaleNum of the EvaluationDef, and then the user can change if needed.  The individual criteria do not have to be the same scale as the evaluation.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterionDef.ItemOrder">
            <summary>Defines the order that all the criteria show on the evaluation.  Copied to ItemOrder of actual criterion.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationCriterionDef.MaxPointsPoss">
            <summary>For ScaleType=Points, sets the maximum value of points for this criterion.</summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationCriterionDef.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EvaluationDef">
            <summary>An evaluation def is the entire form that the instructor sets up ahead of time.  Actual evaluations for students are copied from these 'templates', so an evaluation def can be altered or deleted without damaging any student record.  Evaluation defs are usually not specific to instructors, but if different instructors want different evaluation forms, they can use the description column to differentiate.  For example, the description can include the instructor's name or even the year.  But most commonly, the same evaluation will be used from year to year.  There should be a duplicate function to make a copy an entire evaluation def and then allow user to alter the SchoolCourseNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationDef.EvaluationDefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationDef.SchoolCourseNum">
            <summary>FK to schoolcourse.SchoolCourseNum.  For example to PEDO 732.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationDef.EvalTitle">
            <summary>Description of this evaluation form.</summary>
        </member>
        <member name="F:OpenDentBusiness.EvaluationDef.GradingScaleNum">
            <summary>FK to gradingscale.GradingScaleNum.  The default grading scale for this evaluation.  Each criterion will typically use the same scale, but that is not required.</summary>
        </member>
        <member name="M:OpenDentBusiness.EvaluationDef.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.GradingScale">
            <summary>Used in Evaluations.  Describes a scale to be used in grading.  Freeform scales are not allowed.  Percentage scales are handled a little differently than the other scales.</summary>
        </member>
        <member name="F:OpenDentBusiness.GradingScale.GradingScaleNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.GradingScale.ScaleType">
            <summary>Enum:EnumScaleType Used to determine method of assigning grades.  PickList will be the only type that has GradingScaleItems.</summary>
        </member>
        <member name="F:OpenDentBusiness.GradingScale.Description">
            <summary>For example, A-F or Pass/Fail.</summary>
        </member>
        <member name="M:OpenDentBusiness.GradingScale.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EnumScaleType">
            <summary>Used in GradingScale to determine how grades are assigned.</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumScaleType.PickList">
            <summary>0- User-Defined list of possible grades.  Grade is calculated as an average.</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumScaleType.Percentage">
            <summary>1- Percentage Scale 0-100.  Grade is calculated as an average.</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumScaleType.Weighted">
            <summary>2- Allows point values for grades.  Grade is calculated as a sum of all points out of points possible.</summary>
        </member>
        <member name="T:OpenDentBusiness.Evaluation">
            <summary>An evaluation is for one student and is copied from an EvaluationDef.</summary>
        </member>
        <member name="F:OpenDentBusiness.Evaluation.EvaluationNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Evaluation.InstructNum">
            <summary>FK to provider.ProvNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Evaluation.StudentNum">
            <summary>FK to provider.ProvNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Evaluation.SchoolCourseNum">
            <summary>FK to schoolcourse.SchoolCourseNum.  For example to PEDO 732.</summary>
        </member>
        <member name="F:OpenDentBusiness.Evaluation.EvalTitle">
            <summary>Copied from evaluation def.  Not editable.</summary>
        </member>
        <member name="F:OpenDentBusiness.Evaluation.DateEval">
            <summary>Date of the evaluation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Evaluation.GradingScaleNum">
            <summary>FK to gradingscale.GradingScaleNum.  The overall grading scale for this evaluation.  Copied from EvaluationDef.  Criteria will not all necessarily have the same scale.</summary>
        </member>
        <member name="F:OpenDentBusiness.Evaluation.OverallGradeShowing">
            <summary>OverallGradeNumber is calculated as described below.  Once the nearest number on the scale is found, the corresponding gradescaleitem.GradeShowing is used here.</summary>
        </member>
        <member name="F:OpenDentBusiness.Evaluation.OverallGradeNumber">
            <summary>Always recalculated as each individual criterion is changed, so no risk of getting out of synch.  Only considers criteria on the evaluation that use the same grading scale as the evaluation itself.  It's an average of all those criteria.  When averaging, the result will almost never exactly equal one of the numbers in the scale, so the nearest one must be found and used here.  For example, if the average is 3.6 on a 4 point scale, this will show 4.  Percentages will be rounded to the nearest whole number.  This is the value that will be returned in reports and also used in calculations of the student's grade for the term.</summary>
        </member>
        <member name="F:OpenDentBusiness.Evaluation.Notes">
            <summary>Any note that the instructor wishes to place at the bottom of this evaluation.</summary>
        </member>
        <member name="M:OpenDentBusiness.Evaluation.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.WikiPageHist">
            <summary>Rows never edited, just added.  Contains all historical versions of each page as well.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiPageHist.WikiPageNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiPageHist.UserNum">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiPageHist.PageTitle">
            <summary>Will not be unique because there are multiple revisions per page.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiPageHist.PageContent">
            <summary>The entire contents of the revision are stored in "wiki markup language".  This should never be updated.  Medtext (16M)</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiPageHist.DateTimeSaved">
            <summary>The DateTime from the original WikiPage object.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiPageHist.IsDeleted">
            <summary>This flag will only be set for the revision where the user marked it deleted, not the ones prior.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPageHist.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.WikiPage">
            <summary>Rows never edited, just added, unless the wiki page is a draft.  Contains only newest versions of each page and all drafts.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiPage.WikiPageNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiPage.UserNum">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiPage.PageTitle">
            <summary>Must be unique.  Any character is allowed except: \r, \n, and ".  Needs to be tested, especially with apostrophes.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiPage.KeyWords">
            <summary>Automatically filled from the [[Keywords:]] tab in the PageContent field as page is being saved.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiPage.PageContent">
            <summary>Content of page stored in "wiki markup language".  This should never be updated, unless it is a draft.  Medtext (16M)</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiPage.DateTimeSaved">
            <summary>The DateTime that the page was saved to the DB.  User can't directly edit.</summary>
        </member>
        <member name="F:OpenDentBusiness.WikiPage.IsDraft">
            <summary>Signifies that the wiki page is a draft, and will only show in the Wiki Drafts form.</summary>
        </member>
        <member name="M:OpenDentBusiness.WikiPage.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DictCustom">
            <summary>Spell check custom dictionary, shared by the whole office.</summary>
        </member>
        <member name="F:OpenDentBusiness.DictCustom.DictCustomNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.DictCustom.WordText">
            <summary>No space or punctuation allowed.</summary>
        </member>
        <member name="T:OpenDentBusiness.EmailAddress">
            <summary>Stores all the connection info for one email address.  Linked to clinic by clinic.EmailAddressNum.  Sends email based on patient's clinic.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAddress.EmailAddressNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAddress.SMTPserver">
            <summary>For example smtp.gmail.com</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAddress.EmailUsername">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAddress.EmailPassword">
            <summary>Password associated with this email address.  Encrypted when stored in the database and decrypted before using.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAddress.ServerPort">
            <summary>Usually 587, sometimes 25 or 465.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAddress.UseSSL">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAddress.SenderAddress">
            <summary>The email address of the sender as it should appear to the recipient.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAddress.Pop3ServerIncoming">
            <summary>For example pop.gmail.com</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAddress.ServerPortIncoming">
            <summary>Usually 110, sometimes 995.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAddress.UserNum">
            <summary>FK to userod.UserNum.  Associates a user with this email address.  A user may only have one email address associated with them.
            Can be 0 if no user is associated with this email address.</summary>
        </member>
        <member name="P:OpenDentBusiness.EmailAddress.IsImplicitSsl">
            <summary>We assume the email settings are implicit if the server port is 465.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailAddress.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ErxLog">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ErxLog.ErxLogNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ErxLog.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ErxLog.MsgText">
            <summary>Holds up to 16MB.</summary>
        </member>
        <member name="F:OpenDentBusiness.ErxLog.DateTStamp">
            <summary>Automatically updated by MySQL every time a row is added or changed.</summary>
        </member>
        <member name="F:OpenDentBusiness.ErxLog.ProvNum">
            <summary>FK to provider.ProvNum. The provider that the prescription request was sent by or on behalf of.</summary>
        </member>
        <member name="M:OpenDentBusiness.ErxLog.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ScreenPat">
            <summary> This allows users to set up a list of students prior to actually going to the school.  It also serves to attach the exam sheet to the screening.</summary>
        </member>
        <member name="F:OpenDentBusiness.ScreenPat.ScreenPatNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ScreenPat.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.ScreenPat.ScreenGroupNum">
            <summary>FK to screengroup.ScreenGroupNum. Every screening is attached to a group (classroom)</summary>
        </member>
        <member name="F:OpenDentBusiness.ScreenPat.SheetNum">
            <summary>Was never used.  Was supposed to be FK to sheetdef.Sheet_DEF_Num, so not even named correctly.</summary>
        </member>
        <member name="F:OpenDentBusiness.ScreenPat.PatScreenPerm">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.ScreenPat.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.PatScreenPerm">
            <summary>Indicates if the patient does or does not have permission to do a screening.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatScreenPerm.Unknown">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatScreenPerm.Allowed">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatScreenPerm.NoPermission">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatScreenPerm.Refused">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatScreenPerm.Absent">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatScreenPerm.Behavior">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatScreenPerm.Other">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ToothGridCell">
            <summary>Holds one recorded cell value for a tooth grid, which is a special kind of sheet field type that shows a grid with 32 rows and configurable columns.  The entire grid is a single large sheet field.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCell.ToothGridCellNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCell.SheetFieldNum">
            <summary>FK to sheet.SheetFieldNum.  Required.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCell.ToothGridColNum">
            <summary>FK to toothgridcol.ToothGridColNum.  This tells which column it belongs in.  Can't use the column name here because multiple columns could have the same name.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCell.ValueEntered">
            <summary>Cannot be empty.  For a tooth-level cell, the only allowed value is X.  If the cell is unchecked, then it won't even have a row in this table.  For a surface level column, only valid surfaces can be entered:MOIDBFLV  Enforced.  FreeText columns can have any text up to 255 char.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCell.ToothNum">
            <summary>Corresponds exactly to procedurelog.ToothNum.  May be blank, otherwise 1-32, 51-82, A-T, or AS-TS, 1 or 2 char.  Gets internationalized as being displayed.</summary>
        </member>
        <member name="T:OpenDentBusiness.ToothGridCol">
            <summary>Defines the columns present in a single completed tooth grid, which is a special kind of sheet field that shows a grid with 32 rows and configurable columns.  The entire grid is a single large sheet field.  This table defines how the grid is layed out on an actual sheet, pulled initially from a ToothGridDef.  The data itself is recorded in ToothGridCell.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCol.ToothGridColNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCol.SheetFieldNum">
            <summary>FK to sheet.SheetFieldNum.  Required.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCol.NameItem">
            <summary>Pulled from the ToothGridDef.  This can be a NameInternal , or it can be a NameShowing if it's a user-defined column.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCol.CellType">
            <summary>Enum:ToothGridCellType  0=HardCoded, 1=Tooth, 2=Surface, 3=FreeText.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCol.ItemOrder">
            <summary>Order of the column to display.  Every entry must have a unique itemorder.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCol.ColumnWidth">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCol.CodeNum">
            <summary>FK to procedurecode.CodeNum.  This allows data entered to flow into main program as actual completed or tp procedures.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCol.ProcStatus">
            <summary>Enum:ProcStat  If these flow into main program, then this is the status that the new procs will have.</summary>
        </member>
        <member name="T:OpenDentBusiness.ToothGridDef">
            <summary> Defines the columns present in a tooth grid, which is a special kind of sheet field def that shows a grid with 32 rows and configurable columns.  Can be edited without damaging any completed sheets.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridDef.ToothGridDefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridDef.SheetFieldDefNum">
            <summary>FK to sheetfielddef.SheetFieldDefNum</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridDef.NameInternal">
            <summary>This is the internal name that OD uses to identify the column.  Blank if this is a user-defined column.  We will keep a hard-coded list of available NameInternals in the code to pick from.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridDef.NameShowing">
            <summary>The user may override the internal name for display purposes.  If this is a user-defined column, this is the only name, since there is no NameInternal.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridDef.CellType">
            <summary>Enum:ToothGridCellType  0=HardCoded, 1=Tooth, 2=Surface, 3=FreeText.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridDef.ItemOrder">
            <summary>Order of the column to display.  Every entry must have a unique itemorder.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridDef.ColumnWidth">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridDef.CodeNum">
            <summary>FK to procedurecode.CodeNum.  This allows data entered to flow into main program as actual completed or tp procedures.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridDef.ProcStatus">
            <summary>Enum:ProcStat  If these flow into main program, then this is the status that the new procs will have.</summary>
        </member>
        <member name="T:OpenDentBusiness.ToothGridCellType">
            <summary>0=HardCoded, 1=Tooth, 2=Surface, 3=FreeText.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCellType.HardCoded">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCellType.Tooth">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCellType.Surface">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothGridCellType.FreeText">
            <summary>3</summary>
        </member>
        <member name="T:OpenDentBusiness.DocumentMisc">
            <summary>For storing docs/images in database.  This table is for the various miscellaneous documents that are not in the normal patient subfolders.</summary>
        </member>
        <member name="F:OpenDentBusiness.DocumentMisc.DocMiscNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.DocumentMisc.DateCreated">
            <summary>Date created.</summary>
        </member>
        <member name="F:OpenDentBusiness.DocumentMisc.FileName">
            <summary>The name the file would have if it was not in the database. Does not include any directory info.
            DocumentMisc rows that store the contents of the UpdateFiles folder will set this column to an "item order".
            Due to severe limitations with sending large amounts of data all in one query we are going to store the UpdateFiles over several rows.
            The FileName column will store the order of which the UpdateFiles need to go back into when we try to reconstruct it.</summary>
        </member>
        <member name="F:OpenDentBusiness.DocumentMisc.DocMiscType">
            <summary>Enum:DocumentMiscType Corresponds to the same subfolder within AtoZ folder. eg. UpdateFiles</summary>
        </member>
        <member name="F:OpenDentBusiness.DocumentMisc.RawBase64">
            <summary>The raw file data encoded as base64.</summary>
        </member>
        <member name="M:OpenDentBusiness.DocumentMisc.Copy">
            <summary>Returns a copy of this DocumentMisc.</summary>
        </member>
        <member name="T:OpenDentBusiness.DocumentMiscType">
            <summary>More types will be added to correspond to most of the subfolders inside the AtoZ folder.  But no point adding them until we implement.</summary>
        </member>
        <member name="F:OpenDentBusiness.DocumentMiscType.UpdateFiles">
            <summary>0- There will just be zero or one row of this type.  It will contain a zipped archive.</summary>
        </member>
        <member name="F:OpenDentBusiness.DocumentMiscType.UpdateFilesSegment">
            <summary>1- Entries with this doc type hold segments of the UpdateFiles RawBase64 zip contents that will be pieced back together later.
            Storing the entire Update Files contents into one row was exceeding MySQL max_allowed_packet limitations so this new type is required.
            Each row of this type will contain ~1MB of RawBase64 data.</summary>
        </member>
        <member name="T:OpenDentBusiness.CustReference">
            <summary>One to one relation with the patient table representing each customer as a reference.</summary>
        </member>
        <member name="F:OpenDentBusiness.CustReference.CustReferenceNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.CustReference.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.CustReference.DateMostRecent">
            <summary>Most recent date the reference was used, loosely kept updated.</summary>
        </member>
        <member name="F:OpenDentBusiness.CustReference.Note">
            <summary>Notes specific to this customer as a reference.</summary>
        </member>
        <member name="F:OpenDentBusiness.CustReference.IsBadRef">
            <summary>Set to true if this customer was a bad reference.</summary>
        </member>
        <member name="M:OpenDentBusiness.CustReference.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.CustRefEntry">
            <summary>For internal use only.</summary>
        </member>
        <member name="F:OpenDentBusiness.CustRefEntry.CustRefEntryNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.CustRefEntry.PatNumCust">
            <summary>FK to patient.PatNum.  The customer seeking a reference.</summary>
        </member>
        <member name="F:OpenDentBusiness.CustRefEntry.PatNumRef">
            <summary>FK to patient.PatNum.  The chosen reference.  This is the customer who was given as a reference to the new customer.</summary>
        </member>
        <member name="F:OpenDentBusiness.CustRefEntry.DateEntry">
            <summary>Date the reference was chosen.</summary>
        </member>
        <member name="F:OpenDentBusiness.CustRefEntry.Note">
            <summary>Notes specific to this particular reference entry, mostly for a special reference situation.</summary>
        </member>
        <member name="M:OpenDentBusiness.CustRefEntry.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EobAttach">
            <summary>One file attached to an eob (claimpayment).  Multiple files can be attached to an eob using this method.  Order shown will be based on date/time scanned.</summary>
        </member>
        <member name="F:OpenDentBusiness.EobAttach.EobAttachNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EobAttach.ClaimPaymentNum">
            <summary>FK to claimpayment.ClaimPaymentNum</summary>
        </member>
        <member name="F:OpenDentBusiness.EobAttach.DateTCreated">
            <summary>Date/time created.</summary>
        </member>
        <member name="F:OpenDentBusiness.EobAttach.FileName">
            <summary>The file is stored in the A-Z folder in 'EOBs' folder.  This field stores the name of the file.  The files are named automatically based on Date/time along with EobAttachNum for uniqueness.</summary>
        </member>
        <member name="F:OpenDentBusiness.EobAttach.RawBase64">
            <summary>The raw file data encoded as base64.  Only used if there is no AtoZ folder.</summary>
        </member>
        <member name="T:OpenDentBusiness.DashboardAR">
            <summary>A table just used by the dashboard to store historical AR because it never changes and it takes too long (1 second for each of the 12 dates) to compute on the fly.  One entry per month going back at least 12 months.  This table gets automatically filled the first time that the dashboard is used.  The most recent month also gets added by using the dashboard.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardAR.DashboardARNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardAR.DateCalc">
            <summary>This date will always be the last day of a month.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardAR.BalTotal">
            <summary>Bal_0_30+Bal_31_60+Bal_61_90+BalOver90 for all patients.  This should also exactly equal BalTotal for all patients with positive amounts.  Negative BalTotals are credits, not A/R.</summary>
        </member>
        <member name="F:OpenDentBusiness.DashboardAR.InsEst">
            <summary>Sum of all InsEst for all patients for the month.</summary>
        </member>
        <member name="M:OpenDentBusiness.DashboardAR.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrQuarterlyKey">
            <summary>Also used by OD customer support to store and track Ehr Quarterly Keys for customers.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrQuarterlyKey.EhrQuarterlyKeyNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrQuarterlyKey.YearValue">
            <summary>Example 11</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrQuarterlyKey.QuarterValue">
            <summary>Example 2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrQuarterlyKey.PracticeName">
            <summary>The customer must have this exact practice name entered in practice setup.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrQuarterlyKey.KeyValue">
            <summary>The calculated key value, tied to year, quarter, and practice name.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrQuarterlyKey.PatNum">
            <summary>FK to patient.PatNum.  Always zero for customer databases.  When used by OD customer support, this is the customer num.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrQuarterlyKey.Notes">
            <summary>Any notes that the tech wishes to include regarding this situation.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrQuarterlyKey.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrSummaryCcd">
            <summary>Can also be a CCR.  Received CCDs/CCRs are stored both here and in emailattach.  Sent CCDs are not saved here, but are only stored in emailattach.  To display a saved Ccd, it is combined with an internal stylesheet.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrSummaryCcd.EhrSummaryCcdNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrSummaryCcd.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrSummaryCcd.DateSummary">
            <summary>Date that this Ccd was received.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrSummaryCcd.ContentSummary">
            <summary>The xml content of the received text file.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrSummaryCcd.EmailAttachNum">
            <summary>FK to emailattach.EmailAttachNum.  The Direct email attachment where the CCD xml message came from.  Needed to sync PatNum with the email PatNum if the PatNum is changed on the email.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrSummaryCcd.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrProvKey">
            <summary>Used to store and track Ehr Provider Keys.  There can be multiple EhrProvKeys per provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrProvKey.EhrProvKeyNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrProvKey.PatNum">
            <summary>FK to patient.PatNum.  Only used by HQ for generating keys for customers.  Will always be 0 for non-HQ users.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrProvKey.LName">
            <summary>The provider LName.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrProvKey.FName">
            <summary>The provider FName.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrProvKey.ProvKey">
            <summary>The key assigned to the provider</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrProvKey.FullTimeEquiv">
            <summary>Usually 1.  Can be less, like .5 or .25 to indicate possible discount is justified.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrProvKey.Notes">
            <summary>Any notes that the tech wishes to include regarding this situation.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrProvKey.YearValue">
            <summary>Required when generating a new provider key.  It is used to determine annual EHR eligibility.  Format will always be YY.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrProvKey.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DrugManufacturer">
            <summary>Manufacturer of a vaccine.</summary>
        </member>
        <member name="F:OpenDentBusiness.DrugManufacturer.DrugManufacturerNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.DrugManufacturer.ManufacturerName">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.DrugManufacturer.ManufacturerCode">
            <summary>An abbreviation of the manufacturer name.</summary>
        </member>
        <member name="M:OpenDentBusiness.DrugManufacturer.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DrugUnit">
            <summary>And other kinds of units.  We will only prefill this list with units needed for the tests.  Users would have to manually add any other units.</summary>
        </member>
        <member name="F:OpenDentBusiness.DrugUnit.DrugUnitNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.DrugUnit.UnitIdentifier">
            <summary>Example ml, capitalization not critical. Usually entered as lowercase except for L.</summary>
        </member>
        <member name="F:OpenDentBusiness.DrugUnit.UnitText">
            <summary>Example milliliter.</summary>
        </member>
        <member name="M:OpenDentBusiness.DrugUnit.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EduResource">
            <summary>EHR education resource.  Only one of the 3 FK fields will be used at a time (DiseaseDefNum, MedicationNum, or LabResultID).  The other two will be blank.   Displays a clickable URL if the patient meets certain criteria.  </summary>
        </member>
        <member name="F:OpenDentBusiness.EduResource.EduResourceNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EduResource.DiseaseDefNum">
            <summary>FK to diseasedef.DiseaseDefNum.  This now also handles ICD9s and Snomeds via the entry in DiseaseDef.</summary>
        </member>
        <member name="F:OpenDentBusiness.EduResource.MedicationNum">
            <summary>FK to medication.MedicationNum. </summary>
        </member>
        <member name="F:OpenDentBusiness.EduResource.LabResultID">
            <summary>FK to labresult.TestID. </summary>
        </member>
        <member name="F:OpenDentBusiness.EduResource.LabResultName">
            <summary>Used for display in the grid.</summary>
        </member>
        <member name="F:OpenDentBusiness.EduResource.LabResultCompare">
            <summary>String, example &lt;43. Must start with &lt; or &gt; followed by int.  Only used if FK LabResultID is used.</summary>
        </member>
        <member name="F:OpenDentBusiness.EduResource.ResourceUrl">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.EduResource.SmokingSnoMed">
            <summary>FK to ehrmeasureevent.CodeValueResult when ehrmeasureevent.EventType=EhrMeasureEventType.TobaccoUseAssessed (8).</summary>
        </member>
        <member name="M:OpenDentBusiness.EduResource.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrMeasure">
            <summary>For EHR module, automate measure calculation.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasure.EhrMeasureNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasure.MeasureType">
            <summary>Enum:EhrMeasureType</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasure.Numerator">
            <summary>0-100, -1 indicates not entered yet.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasure.Denominator">
            <summary>0-100, -1 indicates not entered yet.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasure.Objective">
            <summary>Not a database column.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasure.Measure">
            <summary>Not a database column.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasure.PercentThreshold">
            <summary>Not a database column.  More than this percent for meaningful use.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasure.NumeratorExplain">
            <summary>Not a database column.  An explanation of which patients qualify for enumerator.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasure.DenominatorExplain">
            <summary>Not a database column.  An explanation of which patients qualify for denominator.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasure.ElapsedTime">
            <summary>Not a database column.  Used for timing calculation of each measure.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasure.ExclusionExplain">
            <summary>Not a database column.  An explanation of the conditions which would allow a Provider to be excluded from this requirement.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasure.ExclusionCount">
            <summary>Not a database column.  Some exclusions have an associated count that the Provider must report if they are to attest to exclusion from this requirement.  Can be 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasure.ExclusionCountDescript">
            <summary>Not a database column.  A description of what the count is.  Example: If a Provider writes fewer than 100 Rx's during the reporting period, they can be excluded from reporting the ProvOrderEntry - CPOE measure.  The count would be the number of Rx's entered by the Provider during the reporting period and the label would identify the number as such.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasure.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrMeasureType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.ProblemList">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.MedicationList">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.AllergyList">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.Demographics">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.Education">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.TimelyAccess">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.ProvOrderEntry">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.CPOE_MedOrdersOnly">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.CPOE_PreviouslyOrdered">
            <summary>8</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.Rx">
            <summary>9</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.VitalSigns">
            <summary>10</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.VitalSignsBMIOnly">
            <summary>11</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.VitalSignsBPOnly">
            <summary>12</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.Smoking">
            <summary>13</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.Lab">
            <summary>14</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.ElectronicCopy">
            <summary>15</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.ClinicalSummaries">
            <summary>16</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.Reminders">
            <summary>17</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.MedReconcile">
            <summary>18</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.SummaryOfCare">
            <summary>19- Summary of care record for transition or referral.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.CPOE_LabOrdersOnly">
            <summary>20</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.CPOE_RadiologyOrdersOnly">
            <summary>21</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.ElectronicCopyAccess">
            <summary>22</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.SummaryOfCareElectronic">
            <summary>23</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.SecureMessaging">
            <summary>24</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.FamilyHistory">
            <summary>25</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.ElectronicNote">
            <summary>26</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.LabImages">
            <summary>27</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.VitalSigns2014">
            <summary>28</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.DrugDrugInteractChecking">
            <summary>29</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.DrugFormularyChecking">
            <summary>30</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.ProtectElectHealthInfo">
            <summary>31</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.ImmunizationRegistries">
            <summary>32</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.SyndromicSurveillance">
            <summary>33</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.PatientList">
            <summary>34</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureType.ClinicalInterventionRules">
            <summary>35</summary>
        </member>
        <member name="T:OpenDentBusiness.EhrMu">
            <summary>Helps track whether the current patient has met the measurement objectives.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMu.MeasureType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMu.Met">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMu.Details">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMu.Action">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMu.Action2">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrMeasureEvent">
            <summary>Stores events for EHR that are needed for reporting purposes.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEvent.EhrMeasureEventNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEvent.DateTEvent">
            <summary>Date and time of measure event.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEvent.EventType">
            <summary>Enum:EhrMeasureEventType .</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEvent.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEvent.MoreInfo">
            <summary>Used to provide extra information about a measure event.  Not typically used.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEvent.CodeValueEvent">
            <summary>The code for this event.  Example: TobaccoUseAssessed can be one of three LOINC codes: 11366-2 History of tobacco use Narrative, 68535-4 Have you used tobacco in the last 30 days, and 68536-2 Have you used smokeless tobacco product in the last 30 days.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEvent.CodeSystemEvent">
            <summary>The code system name for the event code.  Examples: LOINC, SNOMEDCT.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEvent.CodeValueResult">
            <summary>The code for this event result.  Example: A TobaccoUseAssessed event type could result in a finding of SNOMED code 8517006 - Ex-smoker (finding).  There are 54 allowed tobacco user/non-user codes, and the user is allowed to select from any SNOMED code if they wish, for a TobaccoUseAssessed event.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEvent.CodeSystemResult">
            <summary>The code system for this event result.  Example: SNOMEDCT, </summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEvent.FKey">
            <summary>A foreign key to a table associated with the EventType.  0 indicates not in use.  Used to properly count denominators for specific measure types.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEvent.DateStartTobacco">
            <summary>The date the patient started using tobacco.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEvent.TobaccoCessationDesire">
            <summary>How eager a tobacco user is to quit using tobacco.  Scale of 1-10.</summary>
        </member>
        <member name="M:OpenDentBusiness.EhrMeasureEvent.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrMeasureEventType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.EducationProvided">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.OnlineAccessProvided">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.ElectronicCopyRequested">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.ElectronicCopyProvidedToPt">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.ClinicalSummaryProvidedToPt">
            <summary>4, For one office visit.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.ReminderSent">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.MedicationReconcile">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.SummaryOfCareProvidedToDr">
            <summary>7 - When Summary of Care is provided in one of the following ways: Printed, exported, or sent to the patient portal (for referrals To doctors).</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.TobaccoUseAssessed">
            <summary>8</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.TobaccoCessation">
            <summary>9</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.CurrentMedsDocumented">
            <summary>10</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.CPOE_MedOrdered">
            <summary>11</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.CPOE_LabOrdered">
            <summary>12</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.CPOE_RadOrdered">
            <summary>13</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.SummaryOfCareProvidedToDrElectronic">
            <summary>14 - When a Summary of Care is provided to a doctor electronically in one of the following ways: Exported (we assume they send another way), or a Direct message is sent with Summary of Care attached.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.SecureMessageFromPat">
            <summary>15</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.DrugDrugInteractChecking">
            <summary>16</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.DrugFormularyChecking">
            <summary>17</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.ProtectElectHealthInfo">
            <summary>18</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.ImmunizationRegistries">
            <summary>19</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.SyndromicSurveillance">
            <summary>20</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.PatientList">
            <summary>21</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrMeasureEventType.ClinicalInterventionRules">
            <summary>22</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7DefMessage">
            <summary>There is no field for MessageStructureHL7 (ADT_A01), because that will be inferred. Defined in HL7 specs, section 2.16.3.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefMessage.HL7DefMessageNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefMessage.HL7DefNum">
            <summary>FK to HL7Def.HL7DefNum</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefMessage.MessageType">
            <summary>Stored in db as string, but used in OD as enum MessageTypeHL7. Example: ADT</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefMessage.EventType">
            <summary>Stored in db as string, but used in OD as enum EventTypeHL7. Example: A04, which is only used with ADT/ACK.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefMessage.InOrOut">
            <summary>Enum:InOutHL7 Incoming, Outgoing</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefMessage.ItemOrder">
            <summary>The only purpose of this column is to let you change the order in the HL7 Def windows.  It's just for convenience.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefMessage.Note">
            <summary>text</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefMessage.MessageStructure">
            <summary>Stored in db as string, but used in OD as enum MessageStructure. Example: ADT_A01, which is the structure used for event types A01, A04, A08, and A13.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefMessage.hl7DefSegments">
            <Summary>List of segments associated with this hierarchical definition.  Use items in this list to get to items lower in the hierarchy.</Summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefMessage.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.MessageTypeHL7">
            <summary>The items in this enumeration can be freely rearranged without damaging the database.  But can't change spelling or remove existing item.</summary>
        </member>
        <member name="F:OpenDentBusiness.MessageTypeHL7.NotDefined">
            <summary>Use this for unsupported message types</summary>
        </member>
        <member name="F:OpenDentBusiness.MessageTypeHL7.ACK">
            <summary>Message Acknowledgment</summary>
        </member>
        <member name="F:OpenDentBusiness.MessageTypeHL7.ADT">
            <summary>Demographics - A01,A04,A08,A28,A31</summary>
        </member>
        <member name="F:OpenDentBusiness.MessageTypeHL7.DFT">
            <summary>Detailed Financial Transaction - P03</summary>
        </member>
        <member name="F:OpenDentBusiness.MessageTypeHL7.ORU">
            <summary>Unsolicited Observation Message - R01</summary>
        </member>
        <member name="F:OpenDentBusiness.MessageTypeHL7.PPR">
            <summary>Patient Problem - PC1,PC2,PC3</summary>
        </member>
        <member name="F:OpenDentBusiness.MessageTypeHL7.SIU">
            <summary>Schedule Information Unsolicited - Event types S12 through S26.  Currently only S12, S14, S15, and S17 events are supported.  Inbound for eCW, outbound for other interfaces.</summary>
        </member>
        <member name="F:OpenDentBusiness.MessageTypeHL7.SRM">
            <summary>Schedule Request Message - Event types S01 through S11.  Currently only S03 and S04 events are supported.  Not used for eCW, inbound for other interfaces.</summary>
        </member>
        <member name="F:OpenDentBusiness.MessageTypeHL7.SRR">
            <summary>Schedule Request Response - Event types S01 through S11.  Currently only S03 and S04 events are supported.  Not used for eCW, inbound for other interfaces.</summary>
        </member>
        <member name="F:OpenDentBusiness.MessageTypeHL7.VXU">
            <summary>Unsolicited Vaccination Record Update - V04</summary>
        </member>
        <member name="T:OpenDentBusiness.EventTypeHL7">
            <summary>The items in this enumeration can be freely rearranged without damaging the database.  But can't change spelling or remove existing item.</summary>
        </member>
        <member name="F:OpenDentBusiness.EventTypeHL7.NotDefined">
            <summary>Use this for unsupported event types</summary>
        </member>
        <member name="F:OpenDentBusiness.EventTypeHL7.A04">
            <summary>Only used with ADT/ACK.
            <para>A04 - Register a Patient</para>
            <para>For eCW, the A04 and A08 are inbound messages and are processed the same.  We attempt to locate the patient, if not found we insert one.</para>
            <para>For other interfaces, the same method of locating a patient and if not found inserting one will be used for inbound ADT^A04 and ADT^A08 messages.</para>
            <para>Outbound messages will have an A04 event type if a new patient is added</para></summary>
        </member>
        <member name="F:OpenDentBusiness.EventTypeHL7.A08">
            <summary>Only used with ADT/ACK.
            <para>A08 - Update Patient Info</para>
            <para>A04 and A08 inbound are processed the same, but we will send the A08 event type if updating a patient in an outbound ADT.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.EventTypeHL7.P03">
            <summary>Only used with DFT/ACK.</summary>
        </member>
        <member name="F:OpenDentBusiness.EventTypeHL7.PC1">
            <summary>Only used with PPR/ACK (Patient Problem messages).
            <para>Not used for eCW.</para>
            <para>These are inbound messages for adding/updating patient problems.</para>
            <para>PC1 is the Add event.  Add and Update events will be handled the same for now.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.EventTypeHL7.PC2">
            <summary>Only used with PPR/ACK (Patient Problem messages).
            <para>Not used for eCW.</para>
            <para>PC2 is the Update event.  Add and Update events will be handled the same for now.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.EventTypeHL7.S03">
            <summary>Only used with SRM/SRR/ACK.  S03 - Request Appointment Modification.
            <para>Not used for eCW.</para>
            <para>These will be inbound and are used for updating a limited amount of information for an existing appointment.</para>
            <para>S03 messages are used to update appointments.  </para></summary>
        </member>
        <member name="F:OpenDentBusiness.EventTypeHL7.S04">
            <summary>Only used with SRM/SRR/ACK.  S04 - Request Appointment Cancellation.
            <para>Not used for eCW.</para>
            <para>S04 messages are used to set an appointment.AptStatus to ApptStatus.Broken.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.EventTypeHL7.S12">
            <summary>Only used with SIU/ACK.
            <para>S12 - New Appt</para>
            <para>For eCW, these are inbound, OD is considered an auxiliary application, and S12 and S14 messages are processed the same.</para>
            <para>For interfaces that require outbound SIU messages, OD is considered the filler application since OD has control over the operatories and schedules.</para>
            <para>As the filler application, events S12-S26 are the message events and they all have the same structure defined by HL7.</para>
            <para>Different actions in OD will cause a different outbound event type to be inserted, but the defined segments and fields will otherwise be the same.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.EventTypeHL7.S13">
            <summary>Only used with SIU/ACK.
            <para>S13 - Appt Rescheduling</para></summary>
        </member>
        <member name="F:OpenDentBusiness.EventTypeHL7.S14">
            <summary>Only used with SIU/ACK.
            <para>S14 - Appt Modification</para></summary>
        </member>
        <member name="F:OpenDentBusiness.EventTypeHL7.S15">
            <summary>Only used with SIU/ACK.
            <para>S15 - Appt Cancellation</para></summary>
        </member>
        <member name="F:OpenDentBusiness.EventTypeHL7.S17">
            <summary>Only used with SIU/ACK.
            <para>S17 - Appt Deletion</para></summary>
        </member>
        <member name="T:OpenDentBusiness.InOutHL7">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.InOutHL7.Incoming">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.InOutHL7.Outgoing">
            <summary>1</summary>
        </member>
        <member name="T:OpenDentBusiness.MessageStructureHL7">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.MessageStructureHL7.NotDefined">
            <summary>Use this for unsupported message structures</summary>
        </member>
        <member name="F:OpenDentBusiness.MessageStructureHL7.ADT_A01">
            <summary>Used for ADT/ACK event types A01, A04, A08, and A13.
            <para>We currently only support A04 and A08 event types, both will use this structure.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.MessageStructureHL7.DFT_P03">
            <summary>Used for DFT/ACK event type P03.
            <para>All outbound DFT's are this structure.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.MessageStructureHL7.ORU_R01">
            <summary>Used for ORU/ACK event type R01.
            <para>All inbound ORU - Unsolicited transmission of an observation message will use this structure.</para>
            <para>This is used for all inbound LabCorp messages.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.MessageStructureHL7.PPR_PC1">
            <summary>Used for PPR/ACK event types PC1, PC2, and PC3.
            <para>We currently only support PC1 (add problem) and PC2 (update problem), both use this structure.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.MessageStructureHL7.SIU_S12">
            <summary>Used for SIU/ACK event types S12 through S24 and S26.
            <para>We currently only support S12 through S17.</para>
            <para>Inbound SIU's are all treated the same, regardless of the event type.</para>
            <para>We send different event types in outbound SIU's depending on the action that causes the message.</para>
            <para>All SIU's, inbound or outbound, use this message structure.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.MessageStructureHL7.SRM_S01">
            <summary>Used for SRM/ACK event types S01 through S11.
            <para>We currently only support S03 (update appt request) and S04 (cancel appt request).</para>
            <para>SRM's are inbound and when the action of updating or cancelling the appt is completed, an SRR is sent.</para>
            <para>SRM's and SRR's still require ACK's.  i.e. SRM received, ACK sent, action completed leads to SRR sent, ACK received.</para>
            <para>SRM's and SRR's will all use this message structure.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.MessageStructureHL7.SRR_S01">
            <summary>Used for SRR/ACK event types S01 through S11.
            <para>We currently only support S03 and S04 (see SRM_S01).</para>
            <para>SRR's are outbound and sent when an SRM is processed correctly.</para></summary>
        </member>
        <member name="T:OpenDentBusiness.HL7DefSegment">
            <summary>multiple segments per message</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefSegment.HL7DefSegmentNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefSegment.HL7DefMessageNum">
            <summary>FK to HL7DefMessage.HL7DefMessageNum</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefSegment.ItemOrder">
            <summary>Since we don't enforce or automate, it can be 1-based or 0-based.  For outgoing, this affects the message structure.  For incoming, this is just for convenience and organization in the HL7 Def windows.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefSegment.CanRepeat">
            <summary>For example, a DFT can have multiple FT1 segments.  This turns out to be a completely useless field, since we already know which ones can repeat.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefSegment.IsOptional">
            <summary>If this is false, and an incoming message is missing this segment, then it gets logged as an error/failure.  If this is true, then it will gracefully skip a missing incoming segment.  Not used for outgoing.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefSegment.SegmentName">
            <summary>Stored in db as string, but used in OD as enum SegmentNameHL7. Example: PID.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefSegment.Note">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefSegment.hl7DefFields">
            <Summary>List of segments associated with this hierarchical definition.  Use items in this list to get to items lower in the hierarchy.</Summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefSegment.Clone">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefSegment.AddFieldFixed(System.Int32,OpenDentBusiness.DataTypeHL7,System.String)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.SegmentNameHL7">
            <summary>The items in this enumeration can be freely rearranged without damaging the database.  But can't change spelling or remove existing item.</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.AIG">
            <summary>Db Resource Appointment Information</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.AIL">
            <summary>Location Resource Appointment Information</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.AIP">
            <summary>Personnel Resource Appointment Information</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.AL1">
            <summary>Allergy Information</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.ARQ">
            <summary>Appointment Request Information</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.DG1">
            <summary>Diagnosis Information</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.EVN">
            <summary>Event Type</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.FT1">
            <summary>Financial Transaction Information</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.GT1">
            <summary>Guarantor Information</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.IN1">
            <summary>Insurance Information</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.MSA">
            <summary>Message Acknowledgment</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.MSH">
            <summary>Message Header</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.NK1">
            <summary>Next of Kin</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.NTE">
            <summary>Notes and Comments</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.OBR">
            <summary>Observations Request</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.OBX">
            <summary>Observation Related to OBR</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.ORC">
            <summary>Common Order.  Used in outgoing vaccinations VXUs as well as incoming lab result ORUs.</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.PID">
            <summary>Patient Identification</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.PD1">
            <summary>Patient additional demographics</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.PR1">
            <summary>Procedures</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.PRB">
            <summary>Problem Detail</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.PV1">
            <summary>Patient Visit</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.RGS">
            <summary>Resource Group Segment</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.RXA">
            <summary>Pharmacy Administration Segment</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.RXR">
            <summary>Pharmacy/Treatment Route</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.SCH">
            <summary>Scheduling Activity Information</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.SPM">
            <summary>Specimen</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.TQ1">
            <summary>Timing/Quantity</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.Unknown">
            <summary>This can happen for unsupported segments.</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.ZEF">
            <summary>Encapsulated Data Format</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.ZPS">
            <summary>Place of Service</summary>
        </member>
        <member name="F:OpenDentBusiness.SegmentNameHL7.ZX1">
            <summary>We use for PDF Data</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7Def">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.HL7DefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.Description">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.ModeTx">
            <summary>Enum:ModeTxHL7 File, TcpIp.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.IncomingFolder">
            <summary>Used for File mode and for SFTP mode.  For file mode, this is the folder for inbound HL7 messages.
            For SFTP mode, this is the relative path from the SFTP root directory to the directory where the result messages can be found.
            The root or home directory '.' can be included in the path but is not necessary.  Examples: /./results or /results or results.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.OutgoingFolder">
            <summary>Only used for File mode</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.IncomingPort">
            <summary>Only used for tcpip mode. Example: 1461</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.OutgoingIpPort">
            <summary>Only used for tcpip mode. Example: 192.168.0.23:1462</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.FieldSeparator">
            <summary>Only relevant for outgoing. Incoming field separators are defined in MSH. Default |.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.ComponentSeparator">
            <summary>Only relevant for outgoing. Incoming field separators are defined in MSH. Default ^.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OpenDentBusiness.HL7Def.SubcomponentSeparator" -->
        <member name="F:OpenDentBusiness.HL7Def.RepetitionSeparator">
            <summary>Only relevant for outgoing. Incoming field separators are defined in MSH. Default ~.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.EscapeCharacter">
            <summary>Only relevant for outgoing. Incoming field separators are defined in MSH. Default \.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.IsInternal">
            <summary>If this is set, then there will be no child tables. Internal types are fully defined within the C# code rather than in the database.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.InternalType">
            <summary>Stored in db as string, but used in OD as enum HL7InternalType. Example: eCWTight.  This will always have a value because we always start with a copy of some internal type.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.InternalTypeVersion">
            <summary>Example: 12.2.14. This will be empty if IsInternal. This records the version at which they made their copy. We might have made significant improvements since their copy.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.IsEnabled">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.Note">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.HL7Server">
            <summary>The machine name of the computer where the OpenDentHL7 service for this def is running.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.HL7ServiceName">
            <summary>The name of the HL7 service for this def.  Must begin with OpenDent...</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.ShowDemographics">
            <summary>Enum:HL7ShowDemographics Hide,Show,Change,ChangeAndAdd</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.ShowAppts">
            <summary>Show Appointments module.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.ShowAccount">
            <summary>Show Account module</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.IsQuadAsToothNum">
            <summary>Send the quadrant in the tooth number component instead of the surface component of the FT1.26 field of the outgoing DFT messages.  Only for eCW.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.LabResultImageCat">
            <summary>FK to definition.DefNum.  Image category used by MedLab HL7 interfaces when storing PDFs received via inbound HL7 messages.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.SftpUsername">
            <summary>The username for logging into the Sftp server.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.SftpPassword">
            <summary>The password used with the SftpUsername to log into the Sftp server.  This won't be displayed to the user but will be stored as plain text in the db.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.SftpInSocket">
            <summary>The socket used to connect to the Sftp server for retrieving inbound HL7 messages.  Currently only used by MedLabv2_3 interfaces.
            This will be the address:port of the Sftp server to connect to for retrieving lab results.  Example: server.address.com:20020.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.HasLongDCodes">
            <summary>For eCW HL7 interfaces only.  False by default.  When false, D codes sent in outbound DFT messages will be limited to 5 characters.
            Any additional characters will be stripped off when generating the HL7 message.  When true, D codes will not be truncated.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.IsProcApptEnforced">
            <summary>If true a message box will warn users if they try to send procedures from the chart module that are not attached to an 
            appointment.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Def.hl7DefMessages">
            <Summary>List of messages associated with this hierarchical definition.  Use items in this list to get to items lower in the hierarchy.</Summary>
        </member>
        <member name="M:OpenDentBusiness.HL7Def.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ModeTxHL7">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ModeTxHL7.File">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.ModeTxHL7.TcpIp">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.ModeTxHL7.Sftp">
            <summary>2.  Used for MedLab HL7 transmission, currently only LabCorp.</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7ShowDemographics">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.HL7ShowDemographics.Hide">
            <summary>Cannot see or change.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7ShowDemographics.Show">
            <summary>Can see, but not change.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7ShowDemographics.Change">
            <summary>Can change, but not add patients.  Might get overwritten by next incoming message.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7ShowDemographics.ChangeAndAdd">
            <summary>Can change and add patients.  Might get overwritten by next incoming message.</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7InternalType">
            <summary>Stored in the database as a string.  The items in this enumeration can be freely rearranged without damaging the database.  But can't change spelling or remove existing items.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7InternalType.eCWFull">
            <summary><para>Message structure is identical to eCWTight, minor changes in the program like showing patient demographics and the account module.</para>
            <para>Like eCWTight, eCW dictates the patients' PatNums in PID.2, so we try to locate the patient with that PatNum.</para>
            <para>If not found we do not attempt to use PID.4 ChartNumber or name, we assume new patient and insert.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.HL7InternalType.eCWStandalone">
            <summary><para>Only Incoming ADT messages are processed, OD is responsible for adding patients so we assign PatNum.</para>
            <para>The incoming messages patient ID in PID.2 is stored as ChartNumber and PID.4 is not processed.</para>
            <para>The Account and Chart modules are visible and the users can change and add patients in OD.  No outgoing messages.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.HL7InternalType.eCWTight">
            <summary><para>Patient demographics are hidden as well as account and appt modules.</para>
            <para>We let eCW dictate the PatNum values in PID.2 and trust that they are unique and longs (no string characters).</para>
            <para>Unlike Standalone, if the pat isn't found by PID.2 PatNum we don't try to locate the pat by PID.4 ChartNumber or name, we assume it's a new pat.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.HL7InternalType.Centricity">
            <summary><para>Account and Appointment modules are visible and users can change and add patients.</para>
            <para>Only outgoing DFT message defined, no incoming messages are processed.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.HL7InternalType.HL7v2_6">
            <summary><para>Our default behavior for processing and sending HL7 messages.</para>
            <para>Send and receive ADT and SIU messages, receive DFT messages.</para>
            <para>The v2.6 documentation claims both PID.2 and PID.4 are only retained for backward compatibility and PID.3 is now required and used for a list of patient IDs.</para>
            <para>We will still put ChartNumber in PID.2 (used to be referred to as 'external ID' by HL7 doc) for outgoing msgs and look for our PatNum in PID.2 for incoming msgs.</para>
            <para>We will now also check PID.3 for a repitition that contains our PatNum as part of the CX data type.</para>
            <para>Account and Appointments module are visible and users can change and add patients.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.HL7InternalType.MedLabv2_3">
            <summary>This is currently used for LabCorp and is based on HL7 version 2.3 specifications.
            <para>This interface has been built to the LabCorp standards and may not match the HL7 version 2.3 specs exactly.</para></summary>
        </member>
        <member name="T:OpenDentBusiness.HL7DefField">
            <summary>Multiple fields per segment.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefField.HL7DefFieldNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefField.HL7DefSegmentNum">
            <summary>FK to HL7DefSegment.HL7DefSegmentNum</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefField.OrdinalPos">
            <summary>Position within the segment.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefField.TableId">
            <summary>HL7 table Id, if applicable. Example: 0234. Example: 1234/2345.  DataType will be ID.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefField.DataType">
            <summary>The DataTypeHL7 enum will be unlinked from the db by storing as string in db. As it's loaded into OD, it will become an enum.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefField.FieldName">
            <summary>User will get to pick from a list of fields that we will maintain. Example: guar.nameLFM, prov.provIdName, or pat.addressCityStateZip.  See below for the full list.  This will be blank if this is a fixed text field.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7DefField.FixedText">
            <summary>User will need to insert fixed text for some fields.  Either FixedText or FieldName will have a value, not both.</summary>
        </member>
        <member name="M:OpenDentBusiness.HL7DefField.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.DataTypeHL7">
            <summary>Data types are listed in HL7 docs section 2.15.  The items in this enumeration can be freely rearranged without damaging the database.  But can't change spelling or remove existing item.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.CE">
            <summary>Coded element.  Has been replaced in v2.6 with CNE and CWE, retained for backward compatibility only.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.CNE">
            <summary>Coded with no exceptions.  Examples: ProcCode (Dxxxx) or TreatmentArea like tooth^surface</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.CP">
            <summary>Composite price.  Example: 125.00</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.CQ">
            <summary>Composite quantity with units.  Example: 123.7^kg</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.CWE">
            <summary>Coded with exceptions.  Example: Race: American Indian or Alaska Native,Asian,Black or African American,Native Hawaiian or Other Pacific,White, Hispanic,Other Race.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.CX">
            <summary>Extended composite ID with check digit.  Example: patient.PatNum or patient.ChartNumber or appointment.AptNum.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:OpenDentBusiness.DataTypeHL7.DR" -->
        <member name="F:OpenDentBusiness.DataTypeHL7.DT">
            <summary>Date.  yyyyMMdd.  4,6,or 8</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.DTM">
            <summary>Date/Time.  yyyyMMddHHmmss etc.  Allowed 4,6,8,10,12,14.  Possibly more, but unlikely.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.EI">
            <summary>Entity identifier.  Example: appointment.AptNum</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.EIP">
            <summary>Entity identifier pair.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.FT">
            <summary>Formatted text data.  We support new lines identified by '\.br\' (where '\' is the defined escape char, \ is the default)</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.HD">
            <summary>Hierarchic designator.  Application identifier.  Example: "OD" for OpenDental.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.ID">
            <summary>Coded value for HL7 defined tables.  Must include TableId.  Example: 0003 is eCW's event type table id.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.IS">
            <summary>Coded value for user-defined tables.  Example: Administrative Sex, F=Female, M=Male,U=Unknown.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.MSG">
            <summary>Message type.  Example: composed of messageType^eventType like DFT^P03</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.NM">
            <summary>Numeric.  Example: transaction quantity of 1.0</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.PL">
            <summary>Person Location.  ^^^^^Person Location Type^^^Location Description.  Example: ^^^^^S^^^West Salem Elementary.  S=site (or grade school) description.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.PRL">
            <summary>Parent Result Link.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.PT">
            <summary>Processing type.  Examples: P-Production, T-Test.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.SI">
            <summary>Sequence ID.  Example: for repeating segments number that begins with 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.ST">
            <summary>String, alphanumeric.  Example: SSN or patient.FeeSchedule</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.TQ">
            <summary>Timing quantity.  Example: for eCW appointment ^^duration^startTime^endTime like ^^1200^20120101112000^20120101114000 for 20 minute (1200 second) appointment starting at 11:20 on 01/01/2012</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.Varied">
            <summary>Used if the data type for a field can vary based on other factors.  For example, when the field is a test observation value,
            the data type depends on the type of test and how the results of the test are reported.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.VID">
            <summary>Version identifier.  Example: 2.3</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.XAD">
            <summary>Extended address.  Example: Addr1^Addr2^City^State^Zip like 120 Main St.^Suite 3^Salem^OR^97302</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.XCN">
            <summary>Extended composite ID number and name for person.  Example: provider.EcwID^provider.LName^provider.FName^provider.MI</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.XON">
            <summary>Extended composite ID number and name for organizations.</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.XPN">
            <summary>Extended person name.  Composite data type.  Example: LName^FName^MI).</summary>
        </member>
        <member name="F:OpenDentBusiness.DataTypeHL7.XTN">
            <summary>Extended telecommunication number.  Example: 5033635432</summary>
        </member>
        <member name="T:OpenDentBusiness.InstallmentPlan">
            <summary>Simpler than a payment plan.  Does not affect running account balances.  Allows override of finance charges.  Affects the "pay now" on statements.  Only one installmentplan is allowed for a family, attached to guarantor only.  This is loosely enforced.</summary>
        </member>
        <member name="F:OpenDentBusiness.InstallmentPlan.InstallmentPlanNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.InstallmentPlan.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.InstallmentPlan.DateAgreement">
            <summary>Date payment plan agreement was made.</summary>
        </member>
        <member name="F:OpenDentBusiness.InstallmentPlan.DateFirstPayment">
            <summary>Date of first payment.</summary>
        </member>
        <member name="F:OpenDentBusiness.InstallmentPlan.MonthlyPayment">
            <summary>Amount of monthly payment.</summary>
        </member>
        <member name="F:OpenDentBusiness.InstallmentPlan.APR">
            <summary>Annual Percentage Rate. e.g. 12.</summary>
        </member>
        <member name="F:OpenDentBusiness.InstallmentPlan.Note">
            <summary>Note</summary>
        </member>
        <member name="M:OpenDentBusiness.InstallmentPlan.Copy">
            <summary>Returns a copy of this InstallmentPlan.</summary>
        </member>
        <member name="T:OpenDentBusiness.LabPanel">
            <summary>One lab panel comes back from the lab with multiple lab results.  Multiple panels can come back in one HL7 message.  This table loosely corresponds to the OBR segment.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabPanel.LabPanelNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabPanel.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.LabPanel.RawMessage">
            <summary>The entire raw HL7 message.  Can contain other labpanels in addition to this one.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabPanel.LabNameAddress">
            <summary>Both name and address in a single field.  OBR-20.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabPanel.DateTStamp">
            <summary>To be used for synch with web server.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabPanel.SpecimenCondition">
            <summary>OBR-13.  Usually blank.  Example: hemolyzed.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabPanel.SpecimenSource">
            <summary>OBR-15.  Usually blank.  Example: LNA&amp;Arterial Catheter&amp;HL70070.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabPanel.ServiceId">
            <summary>OBR-4-0, Service performed, id portion, LOINC.  For example, 24331-1.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabPanel.ServiceName">
            <summary>OBR-4-1, Service performed description.  Example, Lipid Panel.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabPanel.MedicalOrderNum">
            <summary>FK to medicalorder.MedicalOrderNum.  Used to attach in imported lab panel to a lab order.  Multiple panels may be attached to an order.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabPanel.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.LabResult">
            <summary>Medical labs, not dental labs.  Multiple labresults are attached to a labpanel.  Loosely corresponds to the OBX segment in HL7.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabResult.LabResultNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabResult.LabPanelNum">
            <summary>FK to labpanel.LabPanelNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabResult.DateTimeTest">
            <summary>OBX-14.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabResult.TestName">
            <summary>OBX-3-1, text portion.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabResult.DateTStamp">
            <summary>To be used for synch with web server.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabResult.TestID">
            <summary>OBX-3-0, id portion, LOINC.  For example, 10676-5.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabResult.ObsValue">
            <summary>OBX-5. Value always stored as a string because the type might vary in the future.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabResult.ObsUnits">
            <summary>OBX-6  For example, mL.  Was FK to drugunit.DrugUnitNum, but that would make reliable import problematic, so now it's just text.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabResult.ObsRange">
            <summary>OBX-7  For example, &lt;200 or &gt;=40.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabResult.AbnormalFlag">
            <summary>Enum:LabAbnormalFlag 0-None, 1-Below, 2-Normal, 3-Above.</summary>
        </member>
        <member name="M:OpenDentBusiness.LabResult.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.LabAbnormalFlag">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.LabAbnormalFlag.None">
            <summary>0-No value.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabAbnormalFlag.Below">
            <summary>1-Below normal.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabAbnormalFlag.Normal">
            <summary>2-Normal.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabAbnormalFlag.Above">
            <summary>3-Above high normal.</summary>
        </member>
        <member name="T:OpenDentBusiness.MedicalOrder">
            <summary>Ehr. Lab and radiology orders.  Medication orders are simply fields in medicationPat.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicalOrder.MedicalOrderNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicalOrder.MedOrderType">
            <summary>Enum:MedicalOrderType Laboratory=0,Radiology=1.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicalOrder.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicalOrder.DateTimeOrder">
            <summary>Date and time of order.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicalOrder.Description">
            <summary>User will be required to type entire order out from scratch.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicalOrder.IsDiscontinued">
            <summary>EHR requires Active/Discontinued status. 0=Active, 1=Discontinued.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicalOrder.ProvNum">
            <summary>FK to provider.ProvNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.MedicalOrder.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.MedicalOrderType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.MedicalOrderType.Laboratory">
            <summary>0- Laboratory</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicalOrderType.Radiology">
            <summary>1- Radiology</summary>
        </member>
        <member name="T:OpenDentBusiness.CreditCard">
            <summary>One credit card along with any recurring charge information.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.CreditCardNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.Address">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.Zip">
            <summary>Postal code.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.XChargeToken">
            <summary>Token for X-Charge. Alphanumeric, upper and lower case, about 15 char long.  Passed into Xcharge instead of the actual card number.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.CCNumberMasked">
            <summary>Credit Card Number.  Will be stored masked: XXXXXXXXXXXX1234.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.CCExpiration">
            <summary>Only month and year are used, the day will usually be 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.ItemOrder">
            <summary>The order that multiple cards will show.  Zero-based.  First one will be default.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.ChargeAmt">
            <summary>Amount set for recurring charges.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.DateStart">
            <summary>Start date for recurring charges.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.DateStop">
            <summary>Stop date for recurring charges.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.Note">
            <summary>Any notes about the credit card or account goes here.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.PayPlanNum">
            <summary>FK to payplan.PayPlanNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.PayConnectToken">
            <summary>Token for PayConnect.  PayConnect returns a token and token expiration, when requested by the merchant's system, to be used instead
            of actual credit card number in subsequent transactions.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.PayConnectTokenExp">
            <summary>Expiration for the PayConnect token.  Used with the PayConnect token instead of the actual credit card number and expiration.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.Procedures">
            <summary>What procedures will go on this card as a recurring charge.  Comma delimited list of ProcCodes.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.CCSource">
            <summary>Enum:CreditCardSource Indicates which application made this credit card and token.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCard.ClinicNum">
            <summary>FK to clinic.ClinicNum. The clinic where this card was added. Each clinic could have a different AuthKey and different
            AuthKeys could generate overlapping tokens.</summary>
        </member>
        <member name="M:OpenDentBusiness.CreditCard.Clone">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCardSource.None">
            <summary>0 - Storing the actual credit card number. Not recommended.</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCardSource.XServer">
            <summary>1 - Local installation of X-Charge</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCardSource.XWeb">
            <summary>2 - Credit card created via X-Web (an eService)</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCardSource.PayConnect">
            <summary>3 - PayConnect web service (from within OD).</summary>
        </member>
        <member name="F:OpenDentBusiness.CreditCardSource.XServerPayConnect">
            <summary>4 - Credit card has been added through the local installation of X-Charge and the PayConnect web service.</summary>
        </member>
        <member name="T:OpenDentBusiness.ICD9">
            <summary>Other tables generally use the ICD9Code string as their foreign key.  Currently synched to mobile server in a very inefficient manner.  It is implied that these are all ICD9CMs, although that may not be the case in the future.</summary>
        </member>
        <member name="F:OpenDentBusiness.ICD9.ICD9Num">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ICD9.ICD9Code">
            <summary>Not allowed to edit this column once saved in the database.</summary>
        </member>
        <member name="F:OpenDentBusiness.ICD9.Description">
            <summary>Description.</summary>
        </member>
        <member name="F:OpenDentBusiness.ICD9.DateTStamp">
            <summary>The last date and time this row was altered.  Not user editable.</summary>
        </member>
        <member name="M:OpenDentBusiness.ICD9.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.InsSub">
            <summary>Multiple subscribers can have the same insurance plan.  But the patplan table is still what determines coverage for individual patients.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsSub.InsSubNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsSub.PlanNum">
            <summary>FK to insplan.PlanNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsSub.Subscriber">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsSub.DateEffective">
            <summary>Date plan became effective.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsSub.DateTerm">
            <summary>Date plan was terminated</summary>
        </member>
        <member name="F:OpenDentBusiness.InsSub.ReleaseInfo">
            <summary>Release of information signature is on file.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsSub.AssignBen">
            <summary>Assignment of benefits signature is on file.  For Canada, this handles Payee Code, F01.  Option to pay other third party is not included.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsSub.SubscriberID">
            <summary>Usually SSN, but can also be changed by user.  No dashes. Not allowed to be blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsSub.BenefitNotes">
            <summary>User doesn't usually put these in.  Only used when automatically requesting benefits, such as with Trojan.  All the benefits get stored here in text form for later reference.  Not at plan level because might be specific to subscriber.  If blank, we try to display a benefitNote for another subscriber to the plan.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsSub.SubscNote">
            <summary>Use to store any other info that affects coverage.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsSub.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsSub.SecDateEntry">
            <summary>Timestamp automatically generated and user not allowed to change.  The actual date of entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsSub.SecDateTEdit">
            <summary>Automatically updated by MySQL every time a row is added or changed. Could be changed due to user editing, custom queries or program
            updates.  Not user editable with the UI.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsSub.Copy">
            <summary>Returns a copy of this InsSub.</summary>
        </member>
        <member name="T:OpenDentBusiness.OrionProc">
            <summary>This table is only used by one customer.  1:1 relationship to procedurelog table.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionProc.OrionProcNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionProc.ProcNum">
            <summary>FK to procedurelog.ProcNum</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionProc.DPC">
            <summary>Enum:OrionDPC NotSpecified=0,None=1,_1A=2,_1B=3,_1C=4,_2=5,_3=6,_4=7,_5=8.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionProc.DPCpost">
            <summary>Enum:OrionDPC None=0,1A=1,1B=2,1C=3,2=4,3=5,4=6,5=7</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionProc.DateScheduleBy">
            <summary>System adds days to the diagnosis date based upon the DPC entered for that procedure. If DPC = none the system will return “No Schedule by Date”. </summary>
        </member>
        <member name="F:OpenDentBusiness.OrionProc.DateStopClock">
            <summary> Default to current date.  Provider shall have to ability to edit with a previous date, but not a future date.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionProc.Status2">
            <summary>Enum:OrionStatus None=0,TP=1,C=2,E=4,R=8,RO=16,CS=32,CR=64,CA-Tx=128,CA-ERPD=256,CA-P/D=512,S=1024,ST=2048,W=4096,A=8192</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionProc.IsOnCall">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionProc.IsEffectiveComm">
            <summary>Indicates in the clinical note that effective communication was used for this encounter.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionProc.IsRepair">
            <summary>.</summary>
        </member>
        <member name="T:OpenDentBusiness.OrionDPC">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.OrionDPC.NotSpecified">
            <summary>0- Not Specified</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionDPC.None">
            <summary>1- None</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionDPC._1A">
            <summary>2- Treatment to be scheduled within 1 calendar day</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionDPC._1B">
            <summary>3- Treatment to be scheduled within 30 calendar days</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionDPC._1C">
            <summary>4- Treatment to be scheduled within 60 calendar days</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionDPC._2">
            <summary>5– Treatment to be scheduled within 120 calendar days</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionDPC._3">
            <summary>6– Treatment to be scheduled within 1 year</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionDPC._4">
            <summary>7– No further treatment is needed, no appointment needed</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionDPC._5">
            <summary>8– No appointment needed </summary>
        </member>
        <member name="T:OpenDentBusiness.OrionStatus">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.OrionStatus.None">
            <summary>0- None.  While a normal orion proc would never have this status2, it is still needed for flags in ChartViews.  And it's also possible that a status2 slipped through the cracks and was not assigned, leaving it with this value.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionStatus.TP">
            <summary>1– Treatment planned</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionStatus.C">
            <summary>2– Completed</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionStatus.E">
            <summary>4– Existing prior to incarceration</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionStatus.R">
            <summary>8– Refused treatment</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionStatus.RO">
            <summary>16– Referred out to specialist</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionStatus.CS">
            <summary>32– Completed by specialist</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionStatus.CR">
            <summary>64– Completed by registry</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionStatus.CA_Tx">
            <summary>128- Cancelled, tx plan changed</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionStatus.CA_EPRD">
            <summary>256- Cancelled, eligible parole</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionStatus.CA_PD">
            <summary>512- Cancelled, parole/discharge</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionStatus.S">
            <summary>1024– Suspended, unacceptable plaque</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionStatus.ST">
            <summary>2048- Stop clock, multi visit</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionStatus.W">
            <summary>4096– Watch</summary>
        </member>
        <member name="F:OpenDentBusiness.OrionStatus.A">
            <summary>8192– Alternative</summary>
        </member>
        <member name="T:OpenDentBusiness.OrthoChart">
            <summary>For the orthochart feature, each row in this table is one cell in that grid.  An empty cell often corresponds to a missing db table row.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrthoChart.OrthoChartNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrthoChart.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrthoChart.DateService">
            <summary>Date of service.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrthoChart.FieldName">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.OrthoChart.FieldValue">
            <summary>.</summary>
        </member>
        <member name="M:OpenDentBusiness.OrthoChart.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ProcGroupItem">
            <summary>Links Procedures(groupnotes) to Procedures in a 1-n relationship.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcGroupItem.ProcGroupItemNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcGroupItem.ProcNum">
            <summary>FK to procedurelog.ProcNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcGroupItem.GroupNum">
            <summary>FK to procedurelog.ProcNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcGroupItem.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ProcApptColor">
            <summary>An individual procedure code color range.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcApptColor.ProcApptColorNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcApptColor.CodeRange">
            <summary>Procedure code range defined by user.  Includes commas and dashes, but no spaces.  The codes need not be valid since they are ranges.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcApptColor.ShowPreviousDate">
            <summary>Adds most recent completed date to ProcsColored</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcApptColor.ColorText">
            <summary>Color that shows in appointments</summary>
        </member>
        <member name="T:OpenDentBusiness.Guardian">
            <summary>Links patient to patient in a many to many database relationship.  The two PatNums need not be in the same family, but will usually be.
            The two PatNums could be in different families if the relationship was entered, then one of the patients in the relationship is moved to another family.
            This table can also be used for other relationship types besides guardians.  The table name is guardian because we only supported guardian relationships in the past,
            and we did not want to risk breaking queries by changing the table or column names. User can specify any relationship as a guardian or not a guardian.
            For example, a retired person might specify their brother or child as their guardian, or the user may want to record the brother of a patient as a non-guardian.</summary>
        </member>
        <member name="F:OpenDentBusiness.Guardian.GuardianNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Guardian.PatNumChild">
            <summary>FK to patient.PatNum.  If Relationship is "Mother", then this PatNum is the child of the mother.</summary>
        </member>
        <member name="F:OpenDentBusiness.Guardian.PatNumGuardian">
            <summary>FK to patient.PatNum.  If Relationship is "Mother", then this is the PatNum of the mother.</summary>
        </member>
        <member name="F:OpenDentBusiness.Guardian.Relationship">
            <summary>Enum:GuardianRelationship .</summary>
        </member>
        <member name="F:OpenDentBusiness.Guardian.IsGuardian">
            <summary>True if this specifies a guardian relationship, or false if any other relationship.
            When this flag is true, the relationship will show in the "Guardians" appointment view field and in the family module "Guardians" display field for the patient.  This also grants PHI access in the patient portal to the specific patient designated via PatNumChild.</summary>
        </member>
        <member name="M:OpenDentBusiness.Guardian.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.GuardianRelationship">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Father">
            <summary>0 - Added due to feature request.  Needed for EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Mother">
            <summary>1 - Added due to feature request.  Needed for EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Stepfather">
            <summary>2 - Added due to feature request.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Stepmother">
            <summary>3 - Added due to feature request.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Grandfather">
            <summary>4 - Added due to feature request.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Grandmother">
            <summary>5 - Added due to feature request.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Sitter">
            <summary>6 - Added due to feature request.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Brother">
            <summary>7 - Added for EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.CareGiver">
            <summary>8 - Added for EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.FosterChild">
            <summary>9 - Added for EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Guardian">
            <summary>10 - Added for EHR.  Also meets request #154.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Grandparent">
            <summary>11 - Added for EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Other">
            <summary>12 - Added for EHR.  Also meets request #154.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Parent">
            <summary>13 - Added for EHR.  Also meets request #154.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Stepchild">
            <summary>14 - Added for EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Self">
            <summary>15 - Added for EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Sibling">
            <summary>16 - Added for EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Sister">
            <summary>17 - Added for EHR.  Also meets request #154.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Spouse">
            <summary>18 - Added for EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Child">
            <summary>19 - Added for EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.LifePartner">
            <summary>20 - Added for EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Friend">
            <summary>21 - Added for EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.GuardianRelationship.Grandchild">
            <summary>22 - Added for EHR.</summary>
        </member>
        <member name="T:OpenDentBusiness.ReminderRule">
            <summary>Ehr</summary>
        </member>
        <member name="F:OpenDentBusiness.ReminderRule.ReminderRuleNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReminderRule.ReminderCriterion">
            <summary>Enum:EhrCriterion Problem,Medication,Allergy,Age,Gender,LabResult.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReminderRule.CriterionFK">
            <summary>Foreign key to disease.DiseaseDefNum, medicationpat.MedicationNum, or allergy.AllergyDefNum. Will be 0 if Age, Gender, or LabResult are the trigger.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReminderRule.CriterionValue">
            <summary>Only used if Age, Gender, or LabResult are the trigger. Examples: "&lt;25"(must include &lt; or &gt;), "Male"/"Female", "INR" (the simple description of the lab test)</summary>
        </member>
        <member name="F:OpenDentBusiness.ReminderRule.Message">
            <summary>Text that will show as the reminder.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReminderRule.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EhrCriterion">
            <summary>EhrCriterion: Problem,Medication,Allergy,Age,Gender,LabResult</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCriterion.Problem">
            <summary>0-DiseaseDef.  Shows as 'problem' because it needs to be human readable.</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCriterion.Medication">
            <summary>1-Medication</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCriterion.Allergy">
            <summary>2-AllergyDef</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCriterion.Age">
            <summary>3-Age</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCriterion.Gender">
            <summary>4-Gender</summary>
        </member>
        <member name="F:OpenDentBusiness.EhrCriterion.LabResult">
            <summary>5-LabResult</summary>
        </member>
        <member name="T:OpenDentBusiness.RxNorm">
            <summary>RxNorm created from a zip file.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxNorm.RxNormNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxNorm.RxCui">
            <summary>RxNorm Concept universal ID.  Throughout the program, this is actually used as the Primary Key of this table rather than the RxNormNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxNorm.MmslCode">
            <summary>Multum code.  Only used for crosscoding during import/export with electronic Rx program.  User cannot see multum codes.  Most of the rows in this table do not have an MmslCode and user searches ignore rows with an MmslCode.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxNorm.Description">
            <summary>Only used for RxNorms, not Multums.</summary>
        </member>
        <member name="M:OpenDentBusiness.RxNorm.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Signalod">
            <summary>An actual signal that gets sent out as part of the messaging functionality.</summary>
        </member>
        <member name="F:OpenDentBusiness.Signalod.SignalNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Signalod.DateViewing">
            <summary>If IType=Date, then this is the affected date in the Appointments module.</summary>
        </member>
        <member name="F:OpenDentBusiness.Signalod.SigDateTime">
            <summary>The exact server time when this signal was entered into db.
            This does not need to be set by sender since it's handled automatically.</summary>
        </member>
        <member name="F:OpenDentBusiness.Signalod.FKey">
            <summary>Usually identifies the object that was edited to cause the signal to be created.
            Can be used for special scenarios based on the FKeyType.  E.g. for SmsMsgUnreadCount, this represents a count, not an FK.</summary>
        </member>
        <member name="F:OpenDentBusiness.Signalod.FKeyType">
            <summary>Describes the type of object referenced by the FKey.</summary>
        </member>
        <member name="F:OpenDentBusiness.Signalod.IType">
            <summary>Enum:InvalidType Indicates what cache or entity has been changed.</summary>
        </member>
        <member name="M:OpenDentBusiness.Signalod.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.KeyType">
            <summary>Do not combine with SignalType, they must be seperate. Stored as string, safe to reorder enum values.</summary>
        </member>
        <member name="F:OpenDentBusiness.KeyType.Undefined">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.KeyType.FeeSched">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.KeyType.Job">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.KeyType.Operatory">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.KeyType.PhoneExtension">
            <summary>4 - HQ only.  FKey will be the extension of the corresponding phone that is invalid.
            Specifically used to talk to the PhoneTrackingServer in order to let it know that an extension has changed (e.g. queue change).</summary>
        </member>
        <member name="F:OpenDentBusiness.KeyType.Provider">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.KeyType.SigMessage">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.KeyType.SmsMsgUnreadCount">
            <summary>7 - Special KeyType that does not use a FK but instead will set FKey to a count of unread messages.
            Used along side the SmsTextMsgReceivedUnreadCount InvalidType.</summary>
        </member>
        <member name="F:OpenDentBusiness.KeyType.Task">
            <summary>8</summary>
        </member>
        <member name="T:OpenDentBusiness.TaskNote">
            <summary>A tasknote is a note that may be added to a task. Many notes may be attached to a task. A user may only edit their own tasknotes within a task.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskNote.TaskNoteNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskNote.TaskNum">
            <summary>FK to task.TaskNum. The task this tasknote is attached to.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskNote.UserNum">
            <summary>FK to userod.UserNum. The user who created this tasknote.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskNote.DateTimeNote">
            <summary>Date and time the note was created (editable).</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskNote.Note">
            <summary>Note. Text that the user wishes to show on the task.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskNote.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.TaskUnread">
            <summary>When a task is created or a comment made, a series of these taskunread objects are created, one for each user who is subscribed to the tasklist.  Duplicates are intelligently avoided.  Rows are deleted once user reads the task.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskUnread.TaskUnreadNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskUnread.TaskNum">
            <summary>FK to task.TaskNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskUnread.UserNum">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskUnread.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Equipment">
            <summary>Used for property tax tracking.</summary>
        </member>
        <member name="F:OpenDentBusiness.Equipment.EquipmentNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Equipment.Description">
            <summary>Short description, need not be very unique.</summary>
        </member>
        <member name="F:OpenDentBusiness.Equipment.SerialNumber">
            <summary>Must be unique among all pieces of equipment.  Auto-generated 3 char alpha numeric gives 1.5M unique serial numbers.  Zero never part of autogenerated serial number.</summary>
        </member>
        <member name="F:OpenDentBusiness.Equipment.ModelYear">
            <summary>Limit 2 char.</summary>
        </member>
        <member name="F:OpenDentBusiness.Equipment.DatePurchased">
            <summary>Date when this corporation obtained the equipment.  Always has a valid value.</summary>
        </member>
        <member name="F:OpenDentBusiness.Equipment.DateSold">
            <summary>Normally 01-01-0001 if equipment still in possession.  Once sold, a date will be present.</summary>
        </member>
        <member name="F:OpenDentBusiness.Equipment.PurchaseCost">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Equipment.MarketValue">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Equipment.Location">
            <summary>Freeform text.</summary>
        </member>
        <member name="F:OpenDentBusiness.Equipment.DateEntry">
            <summary>Security uses this date to lock older entries from accidental deletion.  Date, no time.</summary>
        </member>
        <member name="F:OpenDentBusiness.Equipment.ProvNumCheckedOut">
            <summary>FK to provider.ProvNum. Only filled in if equipment has been checked out, otherwise 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.Equipment.DateCheckedOut">
            <summary>Only used when equipment has been checked out.</summary>
        </member>
        <member name="F:OpenDentBusiness.Equipment.DateExpectedBack">
            <summary>Only used when equipment has been checked out.  Defaults to same day as check out.</summary>
        </member>
        <member name="F:OpenDentBusiness.Equipment.DispenseNote">
            <summary>Any notes regarding the equipment checked out.</summary>
        </member>
        <member name="F:OpenDentBusiness.Equipment.Status">
            <summary>Status of the equipment.</summary>
        </member>
        <member name="T:OpenDentBusiness.ReplicationServer">
            <summary>If replication is being used, then this stores information about each server.  Each row is one server.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReplicationServer.ReplicationServerNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReplicationServer.Descript">
            <summary>The description or name of the server.  Optional.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReplicationServer.ServerId">
            <summary>Db admin sets this server_id server variable on each replication server.  Allows us to know what server each workstation is connected to.  In display, it's ordered by this value.  Users are always forced to enter a value here.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReplicationServer.RangeStart">
            <summary>The start of the key range for this server.  0 if no value entered yet.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReplicationServer.RangeEnd">
            <summary>The end of the key range for this server.  0 if no value entered yet.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReplicationServer.AtoZpath">
            <summary>The AtoZpath for this server. Optional.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReplicationServer.UpdateBlocked">
            <summary>If true, then this server cannot initiate an update.  Typical for satellite servers.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReplicationServer.SlaveMonitor">
            <summary>The description or name of the comptuer that will monitor replication for this server.</summary>
        </member>
        <member name="T:OpenDentBusiness.EtransMessageText">
            <summary>Each row is big.  The entire X12 message text is stored here, since it can be the same for multiple etrans objects, and since the messages can be so big.</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransMessageText.EtransMessageTextNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransMessageText.MessageText">
            <summary>The entire message text, including carriage returns.</summary>
        </member>
        <member name="M:OpenDentBusiness.EtransMessageText.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.InsFilingCode">
            <summary>An optional field on insplan and claims.  This lets user customize so that they can track insurance types.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCode.InsFilingCodeNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCode.Descript">
            <summary>Description of the insurance filing code.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCode.EclaimCode">
            <summary>Code for electronic claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCode.ItemOrder">
            <summary>Display order for this filing code within the UI.  0-indexed.</summary>
        </member>
        <member name="T:OpenDentBusiness.InsFilingCodeSubtype">
            <summary>Stores the list of insurance filing code subtypes.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeSubtype.InsFilingCodeSubtypeNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeSubtype.InsFilingCodeNum">
            <summary>FK to insfilingcode.insfilingcodenum</summary>
        </member>
        <member name="F:OpenDentBusiness.InsFilingCodeSubtype.Descript">
            <summary>The description of the insurance filing code subtype.</summary>
        </member>
        <member name="T:OpenDentBusiness.TableBase">
            <summary>The base class for classes that correspond to a table in the database.  Make sure to mark each derived class [Serializable].</summary>
        </member>
        <member name="P:OpenDentBusiness.TableBase.IsNew">
            <summary>Not a db column.  Always false by default.  Will only be true if explicitly set to true by programmer.  When CRUD grabs a table from db, it is naturally set to False.  Once set, this value is not used by the CRUD in any manner.  Just used by the programmer for making decisions about whether to Insert or Update.</summary>
        </member>
        <member name="T:OpenDentBusiness.TimeCardRule">
            <summary>A rule for automation of timecard overtime.  Can apply to one employee or all.</summary>
        </member>
        <member name="F:OpenDentBusiness.TimeCardRule.TimeCardRuleNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.TimeCardRule.EmployeeNum">
            <summary>FK to employee.EmployeeNum. If zero, then this rule applies to all employees.</summary>
        </member>
        <member name="F:OpenDentBusiness.TimeCardRule.OverHoursPerDay">
            <summary>Typical example is 8:00.  In California, any work after the first 8 hours is overtime.</summary>
        </member>
        <member name="F:OpenDentBusiness.TimeCardRule.AfterTimeOfDay">
            <summary>Typical example is 16:00 to indicate that all time worked after 4pm for specific employees is at differential rate.</summary>
        </member>
        <member name="F:OpenDentBusiness.TimeCardRule.BeforeTimeOfDay">
            <summary>Typical example is 6:00 to indicate that all time worked before 6am for specific employees is at differential rate.</summary>
        </member>
        <member name="P:OpenDentBusiness.TimeCardRule.OverHoursPerDayXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="P:OpenDentBusiness.TimeCardRule.AfterTimeOfDayXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="P:OpenDentBusiness.TimeCardRule.BeforeTimeOfDayXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeCardRule.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.VaccineDef">
            <summary>A vaccine definition.  Should not be altered once linked to VaccinePat.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineDef.VaccineDefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineDef.CVXCode">
            <summary>RXA-5-1.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineDef.VaccineName">
            <summary>Name of vaccine.  RXA-5-2.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineDef.DrugManufacturerNum">
            <summary>FK to drugmanufacturer.DrugManufacturerNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.VaccineDef.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.VaccinePat">
            <summary>A vaccine given to a patient on a date.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.VaccinePatNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.VaccineDefNum">
            <summary>FK to vaccinedef.VaccineDefNum.  Can be 0 if and only if CompletionStatus=NotAdministered, in which case CVX code is assumed to be 998 (not administered) and there is no manufacturer.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.DateTimeStart">
            <summary>The datetime that the vaccine was administered.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.DateTimeEnd">
            <summary>Typically set to the same as DateTimeStart.  User can change.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.AdministeredAmt">
            <summary>Size of the dose of the vaccine.  0 indicates unknown and gets converted to 999 on HL7 output.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.DrugUnitNum">
            <summary>FK to drugunit.DrugUnitNum. Unit of measurement of the AdministeredAmt.  0 represents null.  When going out in HL7 RXA-7, the units must be valid UCUM or the export will be blocked.
            Sometime in the future, we may want to convert this column to a string and name it "UcumCode".  For now left alone for backwards compatibility.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.LotNumber">
            <summary>Optional.  Used in HL7 RXA-9.1.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.Note">
            <summary>Documentation sometimes required.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.FilledCity">
            <summary>The city where the vaccine was filled.  This can be different than the practice office city for historical vaccine information.  Exported in HL7 ORC-3.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.FilledST">
            <summary>The state where the vaccine was filled.  This can be different than the practice office state for historical vaccine infromation.  Exported in HL7 ORC-3.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.CompletionStatus">
            <summary>Exported in HL7 RXA-20.  Corresponds to HL7 table 0322 (guide page 225).</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.AdministrationNoteCode">
            <summary>Exported in HL7 RXA-9.  Corresponds to CDC code set NIP001 (http://hl7v2-iz-testing.nist.gov/mu-immunization/).</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.UserNum">
            <summary>FK to userod.UserNum.  The user that the vaccine was entered by.  May be 0 for vaccines added before this column was created.  Exported in HL7 ORD-10.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.ProvNumOrdering">
            <summary>FK to provider.ProvNum.  The provider who ordered the vaccine.  Exported in HL7 ORD-12.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.ProvNumAdminister">
            <summary>FK to provider.ProvNum.  The provider who administered the vaccine.  Exported in HL7 RXA-10.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.DateExpire">
            <summary>The date that the vaccine expires.  Exported in HL7 RXA-16.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.RefusalReason">
            <summary>Exported in HL7 RXA-18.  Corresponds to CDC code set NIP002 (http://hl7v2-iz-testing.nist.gov/mu-immunization/).</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.ActionCode">
            <summary>Exported in HL7 RXA-21.  Corresponds to HL7 table 0323 (guide page 225).</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.AdministrationRoute">
            <summary>Exported in HL7 RXR-1.  Corresponds to HL7 table 0162 (guide page 200).</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccinePat.AdministrationSite">
            <summary>Exported in HL7 RXR-2.  Corresponds to HL7 table 0163 (guide page 201).</summary>
        </member>
        <member name="M:OpenDentBusiness.VaccinePat.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.VaccineCompletionStatus">
            <summary>Exported in HL7 RXA-20.  Corresponds to HL7 table 0322 (guide page 225).</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineCompletionStatus.Complete">
            <summary>0 - Code CP.  Default.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineCompletionStatus.Refused">
            <summary>1 - Code RE</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineCompletionStatus.NotAdministered">
            <summary>2 - Code NA</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineCompletionStatus.PartiallyAdministered">
            <summary>3 - Code PA</summary>
        </member>
        <member name="T:OpenDentBusiness.VaccineAdministrationNote">
            <summary>Exported in HL7 RXA-9.  Corresponds to CDC code set NIP001 (http://hl7v2-iz-testing.nist.gov/mu-immunization/).</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationNote.NewRecord">
            <summary>0 - Code 00.  Default.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationNote.HistoricalSourceUnknown">
            <summary>1 - Code 01</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationNote.HistoricalOtherProvider">
            <summary>2 - Code 02</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationNote.HistoricalParentsWrittenRecord">
            <summary>3 - Code 03</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationNote.HistoricalParentsRecall">
            <summary>4 - Code 04</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationNote.HistoricalOtherRegistry">
            <summary>5 - Code 05</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationNote.HistoricalBirthCertificate">
            <summary>6 - Code 06</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationNote.HistoricalSchoolRecord">
            <summary>7 - Code 07</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationNote.HistoricalPublicAgency">
            <summary>8 - Code 08</summary>
        </member>
        <member name="T:OpenDentBusiness.VaccineRefusalReason">
            <summary>Exported in HL7 RXA-18.  Corresponds to CDC code set NIP002 (http://hl7v2-iz-testing.nist.gov/mu-immunization/).</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineRefusalReason.None">
            <summary>0 - No code.  Default.  Not sent in HL7 messages.  Only used in UI.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineRefusalReason.ParentalDecision">
            <summary>1 - Code 00</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineRefusalReason.ReligiousExemption">
            <summary>2 - Code 01</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineRefusalReason.Other">
            <summary>3 - Code 02</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineRefusalReason.PatientDecision">
            <summary>4 - Code 03</summary>
        </member>
        <member name="T:OpenDentBusiness.VaccineAction">
            <summary>Exported in HL7 RXA-21.  Corresponds to HL7 table 0323 (guide page 225).</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAction.Add">
            <summary>0 - Code A.  Default.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAction.Delete">
            <summary>1 - Code D</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAction.Update">
            <summary>2 - Code U</summary>
        </member>
        <member name="T:OpenDentBusiness.VaccineAdministrationRoute">
            <summary>Exported in HL7 RXR-1.  Corresponds to HL7 table 0162 (guide page 200).</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationRoute.None">
            <summary>0 - No code.  Default.  Not sent in HL7 messages.  Used in UI only.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationRoute.Intradermal">
            <summary>1 - Code ID.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationRoute.Intramuscular">
            <summary>2 - Code IM.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationRoute.Nasal">
            <summary>3 - Code NS.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationRoute.Intravenous">
            <summary>4 - Code IV.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationRoute.Oral">
            <summary>5 - Code PO.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationRoute.Other">
            <summary>6 - Code OTH.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationRoute.Subcutaneous">
            <summary>7 - Code SC.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationRoute.Transdermal">
            <summary>8 - Code TD.</summary>
        </member>
        <member name="T:OpenDentBusiness.VaccineAdministrationSite">
            <summary>Exported in HL7 RXR-2.  Corresponds to HL7 table 0163 (guide page 201).</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationSite.None">
            <summary>0 - No code.  Default.  Not sent in HL7 messages.  Used in UI only.</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationSite.LeftThigh">
            <summary>1- Code LT</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationSite.LeftArm">
            <summary>2 - Code LA</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationSite.LeftDeltoid">
            <summary>3 - Code LD</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationSite.LeftGluteousMedius">
            <summary>4 - Code LG</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationSite.LeftVastusLateralis">
            <summary>5 - Code LVL</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationSite.LeftLowerForearm">
            <summary>6 - Code LLFA</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationSite.RightArm">
            <summary>7 - Code RA</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationSite.RightThigh">
            <summary>8 - Code RT</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationSite.RightVastusLateralis">
            <summary>9 - Code RVL</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationSite.RightGluteousMedius">
            <summary>10 - Code RG</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationSite.RightDeltoid">
            <summary>11 - Code RD</summary>
        </member>
        <member name="F:OpenDentBusiness.VaccineAdministrationSite.RightLowerForearm">
            <summary>12 - Code RLFA</summary>
        </member>
        <member name="T:OpenDentBusiness.Vitalsign">
            <summary>For EHR module, one dated vital sign entry.  BMI is calulated on demand based on height and weight and may be one of 4 ALOINC codes. 39156-5 "Body mass index (BMI) [Ratio]" is most applicable.</summary>
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.VitalsignNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.Height">
            <summary>Height of patient in inches. Fractions might be needed some day.  Allowed to be 0.  Six possible LOINC codes, most applicable is 8302-2, "Body height".</summary>
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.Weight">
            <summary>Lbs.  Allowed to be 0. Six possible LOINC codes, most applicable is 29463-7, "Body weight".</summary>
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.BpSystolic">
            <summary>Units are mmHg (millimeters of mercury). Allowed to be 0. LOINC code 8480-6.</summary>
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.BpDiastolic">
            <summary>Units are mmHg (millimeters of mercury). Allowed to be 0. LOINC code 8462-4.</summary>
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.DateTaken">
            <summary>The date that the vitalsigns were taken.</summary>
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.HasFollowupPlan">
            <summary>For an abnormal BMI measurement this must be true in order to meet quality measurement.</summary>//intervention? I think these should be deprecated and use an Intervention object instead.
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.IsIneligible">
            <summary>If a BMI was not recorded, this must be true in order to meet quality measurement.  For children, this is used as an IsPregnant flag, the only valid reason for not taking BMI on children.</summary>//intervention? I think these should be deprecated and use an Intervention object instead.
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.Documentation">
            <summary>For HasFollowupPlan or IsIneligible, this documents the specifics.</summary>//intervention? I think these should be deprecated and use an Intervention object instead.
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.ChildGotNutrition">
            <summary>.</summary>//intervention? I think these should be deprecated and use an Intervention object instead.
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.ChildGotPhysCouns">
            <summary>.</summary>//intervention? I think these should be deprecated and use an Intervention object instead.
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.WeightCode">
            <summary>Used for CQMs.  SNOMED CT code either Normal="", Overweight="238131007", or Underweight="248342006".  Set when BMI is found to be "out of range", based on age groups.  Should be calculated when vital sign is saved.  Calculate based on age as of Jan 1 of the year vitals were taken.  Not currently displayed to user.</summary>
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.HeightExamCode">
            <summary>FK to ehrcode.CodeValue.  Also FK to LOINC.LoincCode.  Used for CQMs.  LOINC code used to describe the height exam performed.  Examples: Body Height Measured=3137-7, Body Height Stated=3138-5, Body Height --pre surgery=8307-1.  We will default to Body Height=8302-2, but user can choose another from the list of 6 allowed.  Can be blank if BP only.</summary>
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.WeightExamCode">
            <summary>FK to ehrcode.CodeValue.  Also FK to LOINC.LoincCode.  Used for CQMs.  LOINC code used to describe the weight exam performed.  Examples: Body Weight Measured=3141-9, Body Weight Stated=3142-7, Body Weight --with clothes=8350-1.  We will default to Body Weight=29463-7, but user can choose another from the list of 6 allowed.  Can be blank if BP only.</summary>
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.BMIExamCode">
            <summary>FK to ehrcode.CodeValue.  Also FK to LOINC.LoincCode.  Used for CQMs.  LOINC code used to describe the BMI percentile calculated.  We will use LOINC 59576-9 - BMI Percentile Per age and gender.  Can be blank if BP only.</summary>
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.EhrNotPerformedNum">
            <summary>FK to ehrnotperformed.EhrNotPerformedNum.  This will link a vitalsign to the EhrNotPerformed object where the reason not performed will be stored.  The linking will allow us to display the not performed reason directly in the vital sign window and will make CQM queries easier.  Will be 0 if not linked to an EhrNotPerformed object.</summary>
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.PregDiseaseNum">
            <summary>FK to disease.DiseaseNum.  This will link this vitalsign object to a pregnancy diagnosis for this patient.  It will be 0 for non pregnant patients.  The disease it is linked to will be inserted automatically based on the default value set.  In order to change this code for this specific exam it will have to be changed in the problems list.</summary>
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.BMIPercentile">
            <summary>BMI percentile of patient, based on gender and age and the calculated BMI.  We will use the CDC numbers to calculate percentile found here: (http://www.cdc.gov/nchs/data/series/sr_11/sr11_246.pdf).</summary>
        </member>
        <member name="F:OpenDentBusiness.Vitalsign.Pulse">
            <summary>Recorded pulse of the patient. Stored in beats per minute.</summary>
        </member>
        <member name="M:OpenDentBusiness.Vitalsign.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.XChargeTransaction">
            <summary>XCharge transactions that have been imported into OD.  Used by reconcile tool.  Keeps a history, but no references to these rows from other tables.</summary>
        </member>
        <member name="F:OpenDentBusiness.XChargeTransaction.XChargeTransactionNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.XChargeTransaction.TransType">
            <summary>Usually "CCPurchase."</summary>
        </member>
        <member name="F:OpenDentBusiness.XChargeTransaction.Amount">
            <summary>Amount.</summary>
        </member>
        <member name="F:OpenDentBusiness.XChargeTransaction.CCEntry">
            <summary>Credit card entry method. Usually "Keyed".</summary>
        </member>
        <member name="F:OpenDentBusiness.XChargeTransaction.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.XChargeTransaction.Result">
            <summary>Result: AP for approved, DECLINE for declined.</summary>
        </member>
        <member name="F:OpenDentBusiness.XChargeTransaction.ClerkID">
            <summary>ClerkID. Open Dental username with a possible " R" at the end to indicate a recurring charge.</summary>
        </member>
        <member name="F:OpenDentBusiness.XChargeTransaction.ResultCode">
            <summary>ResultCode: 000 for approved, 005 for declined.</summary>
        </member>
        <member name="F:OpenDentBusiness.XChargeTransaction.Expiration">
            <summary>Expiration is shown as a four digit number (string since it may contain leading zeros).</summary>
        </member>
        <member name="F:OpenDentBusiness.XChargeTransaction.CCType">
            <summary>VISA, AMEX, MC, DISC etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.XChargeTransaction.CreditCardNum">
            <summary>Usually looks like 123456XXXXXX7890.</summary>
        </member>
        <member name="F:OpenDentBusiness.XChargeTransaction.BatchNum">
            <summary>BatchNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.XChargeTransaction.ItemNum">
            <summary>ItemNum. Starts at 0001 for each batch.</summary>
        </member>
        <member name="F:OpenDentBusiness.XChargeTransaction.ApprCode">
            <summary>Approval code. 6 characters. 72142Z for example.</summary>
        </member>
        <member name="F:OpenDentBusiness.XChargeTransaction.TransactionDateTime">
            <summary>TransactionDateTime. Is taken from the Date and Time columns in X-Charge.</summary>
        </member>
        <member name="T:OpenDentBusiness.XWebResponse">
            <summary>Received as XML output from XWeb gateway. Not all fields are available for all method calls. This is a combination of all possible output fields. 
            The fields that are available are dependent on which method was called and the given result.
            HPF (XWeb Hosted Payment Form) Payments and HPF CC Alias creations will each enter a row in this table. That row will be monitored by the eConnector and updated when the XWebResponseCode changes from Pending.
             -- 1) Create the row and indicate the HPF/OTK.
             -- 2) Poll the OTK (one-time key) until an XWebResponseCode is available. Update the row with information about the transaction.
            DTG (XWeb Direct To Gateway) Will enter 1 row in this table. 
             -- 1) Make the DTG payment using a pre-authorized CC alias. Create row with information about the transaction.
            Any fields prefixed with 'Gateaway output' come directly as XML output from the XWeb Gateway. All other fields are derived by OD.
            The class instance will created by eConnector by deserializing an XML string as received from XWeb Gateway. 
            The fields names MUST NOT CHANGE for this reason. XML will not deserialize if the names do not match EXACTLY.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.XWebResponseNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.ProvNum">
            <summary>FK to provider.ProvNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.ClinicNum">
            <summary>FK to clinic.ClinicNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.PaymentNum">
            <summary>FK to payment.PaymentNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.DateTEntry">
            <summary>Timestamp at which this row was created. Auto generated on insert.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.DateTUpdate">
            <summary>Timestamp at which this row was last updated. Will be updated each time the OTK status is polled and one final time when XWebResponseCode changes from Pending.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.TransactionStatus">
            <summary>Inidicates which phase of the XWeb process this transaction is in. See class summary for details.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.ResponseCode">
            <summary>Gateaway output. Pre-defined responses generated by XWeb. Will be converted to strongly typed enum XWebResponseCode.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.XWebResponseCode">
            <summary>Strongly typed representation of ResponseCode. Initialized by XWebInputAbs.CreateGatewayResponse().</summary>	
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.ResponseDescription">
            <summary>Gateaway output. Gives a more detailed description on the ResponseCode.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.OTK">
            <summary>Gateaway output. This is the One Time Key that is used to launch the Hosted Payment Form. 
            The status of the OTK can be polled to determine if the end user has completed the HPF or if it has expired.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.HpfUrl">
            <summary>This URL will be generated as a result of the OTK. The URL can be browsed in an IFRAME to create a secure portal between a browser and the XWeb server.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.HpfExpiration">
            <summary>Timestamp at which this HPF will expire. The end user will only be able to access the HPF before it has expired. This expiration is set explicitly when creating the HPF.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.TransactionID">
            <summary>Gateaway output. Each transaction is given a reference for future use. This can be used to void the transaction.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.TransactionType">
            <summary>Gateaway output. The type of transaction that was processed. Must be a string data type because it comes from the Gateway as a string.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.Alias">
            <summary>Gateaway output. A credit transaction will return an alias which is now linked to the credit card which was used. 
            This alias can be used in the future to make DTG payments and circumvent the need for the secure HPF. Only applies when Credit (not Debit) data is submitted on the HPF.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.CardType">
            <summary>Gateaway output. The card type used for this transaction. 
            "Credit" - for cards that support signature only.
            "Debit/Credit" - for cards that support either PIN-entry or signature.
            "Debit/ATM" - for cards that support PIN-entry only.
            "FSA" - for Flexible Spending Accounts</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.CardBrand">
            <summary>Gateaway output. The card brand used for this transaction. Possible values include "Visa", "MasterCard", "Discover", "American Express", "Diners Club", "JCB", "PayPal".</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.CardBrandShort">
            <summary>Gateaway output. The industry standard abbreviation of the card brand. 
            Possible values include "VS", "MC", "DS", "AX", "DCIDISC", "JCB-DISC", "PP" (order respective to CardBrand above).</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.MaskedAcctNum">
            <summary>Gateaway output. Provides a masked format of the account number. The format will show the last 4 digits, the remainder will masked out with an asterisk character.
            End user will be presented with a list of previously generated MaskedAcctNum(s) when making a payment. These are linked to an alias which can be used to make a DTG payment.
            This ciccumvents the need to use the HPF.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.Amount">
            <summary>Gateaway output. Amount of credit card and check transactions.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.ApprovalCode">
            <summary>Gateaway output. A 6 digit authorization approval code.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.CardCodeResponse">
            <summary>Gateaway output. Response from the Card Security Code lookup. Only applies when Credit(not Debit) data is submitted on the HPF.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.ReceiptID">
            <summary>Gateaway output. An identification number assigned by the OpenEdge Gateway to the receipt.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.ExpDate">
            <summary>Gateaway output. Provides the Expiration Date of the account being accessed. Format is yyMM from XWeb gateway. Will be converted to ExpirationDate.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.EntryMethod">
            <summary>Gateaway output. Indicates how the account number was entered by the end user. Always 'KEYED' in our case.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.ProcessorResponse">
            <summary>Gateaway output. The response from the processor. It is only returned on transactions that are processed by the processor (Auth, Sales and Settlements).</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.BatchNum">
            <summary>Gateaway output. This indicates the current open batch number.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.BatchAmount">
            <summary>Gateaway output. Net amount of Credit and Debit Card transactions in batch.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.AccountExpirationDate">
            <summary>The expiration date of the credit card that was referenced in this transaction. DateTime representation of ExpDate. Initialized by XWebInputAbs.CreateGatewayResponse().</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.DebugError">
            <summary>Debug information regarding this response. Can only be set by XWebResponses.ProcessOutstandingTransactions().</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponse.PayNote">
            <summary>Will be entered as Payment.PayNote once payment transaction has completed.</summary>
        </member>
        <member name="M:OpenDentBusiness.XWebResponse.ConvertResponseCode(System.Int32)">
            <summary>Returned from XWeb Gateway as an int. Helper method to convert to enum.</summary>
        </member>
        <member name="M:OpenDentBusiness.XWebResponse.ConvertExpDate(System.String)">
            <summary>Returned from XWeb Gateway as a string. Helper method to convert to DateTime. Format is yyMM from XWeb gateway</summary>
        </member>
        <member name="M:OpenDentBusiness.XWebResponse.SetPersistentFields(System.Int64,System.String,System.Int64,System.Int64,System.Int64,System.Double,System.String,System.String,System.DateTime,System.String,System.String)">
            <summary>These fields should persist from instance to instance for the same OTK.</summary>
        </member>
        <member name="M:OpenDentBusiness.XWebResponse.GetFormattedNote(System.Boolean)">
            <summary>Formats a note that can be used as a PayNote on a payment. If the XWebResponse is a return or a void of a positive payment, pass in
            false for keepAmountPositive.</summary>
        </member>
        <member name="T:OpenDentBusiness.XWebResponseCodes">
            <summary>OTK POLL statuses that provide a real-time check on the HPF transaction and will immediately return a response indicating an Approval, HPF timeout, or another termination event has occurred. 
            If not, a Pending response will be returned. These states are returned directly from the XWeb gateway.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponseCodes.Undefined">
            <summary>1000</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponseCodes.OtkSuccess">
            <summary>100</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponseCodes.Approval">
            <summary>000</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponseCodes.AliasSuccess">
            <summary>005</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponseCodes.PartialApproval">
            <summary>007</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponseCodes.ExpiredWithoutApproval">
            <summary>101 - Expired Without Approval.  Hosted Form timed out without Approval, OTK was never launched, or Invalid OTK</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebResponseCodes.Pending">
            <summary>102 - Pending (neither of the above events has occurred yet)</summary>
        </member>
        <member name="T:OpenDentBusiness.XWebTransactionStatus">
            <summary>Track which phase of the XWebResponse a given transaction is currently in. This will be used by the eConnector when monitoring and processing XWeb payments.</summary>
        </member>
        <member name="T:OpenDentBusiness.XWebTransactionType">
            <summary>Transaction types avaialble for XWeb API. Not all are implemented.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebTransactionType.PollOtkUnspecified">
            <summary>OTK status polling does not require a specific transaction type.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebTransactionType.CreditSaleTransaction">
            <summary>This transaction type is used to purchase goods and services. When a sale occurs, the cardholder's credit limit is checked to see if the funds are available. If the funds are available, an approval code is transmitted to the XWeb gateway and is forwarded to the POS device. If approved, the transaction is flagged for inclusion in the settlement batch.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebTransactionType.AliasCreateTransaction">
            <summary>This transaction will enable the merchant to obtain an "alias" of payment account information to be created and security stored at XWeb.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebTransactionType.CheckSaleTransaction">
            <summary>NOT IMPLEMENTED. A Check is accepted for payment of services and processed either as an ACH transaction or a Check21 transaction.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebTransactionType.CreditAuthTransaction">
            <summary>NOT IMPLEMENTED. This transaction will check the cardholder's funds and if the funds are sufficient for the purchase amount, the funds will be reserved on the cardholder's account for a period of time. A capture on this transaction will flag the transaction for settlement.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebTransactionType.CreditVoidTransaction">
            <summary>This transaction removes a Sale, Capture or Return transaction from the current batch. Also, a void can be used on an Authorization transaction to prevent it from being captured in the future. Finally, the Void transaction can be used to reverse the Authorization or Sale transaction, thereby restoring the open-to-buy amount on the consumer card.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebTransactionType.CreditReturnTransaction">
            <summary>This transaction will return the funds to a customer's account after settlement of the original batch has occurred.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebTransactionType.CheckCreditTransaction">
            <summary>NOT IMPLEMENTED. A credit is issued to a bank account via the ACH network.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebTransactionType.CheckAliasCreateTransaction">
            <summary>NOT IMPLEMENTED. This transaction will allow the ability to create a check alias to account information securely stored at XWeb.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebTransactionType.SaleTransaction">
            <summary>NOT IMPLEMENTED. A SaleTransaction is identical to a CreditSaleTransaction, but allows a PIN-based DebitSaleTransaction to be initiated from the Hosted Payment Form. A PIN-based Debit Sale transaction can be performed by sending a SaleTransaction Request during the OTK Call. With a SaleTransaction Request, the Hosted Payment Form will appear identical to that for a CreditSaleTransaction Request, and support for the MagTek IPAD is available. If a PIN-based Debit Sale transaction is processed using the MagTek IPAD, then a DebitSaleTransaction will be sent to XWeb, and this transaction type will be returned during the Results Call.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebTransactionType.DebitSaleTransaction">
            <summary>NOT IMPLEMENTED. This transaction type is used to process EMV Debit transactions using the Interac network. EMV Debit transactions require the XCharge Remote Client Manager to be installed on the local merchant PC and are only available to Global Canada merchants at this time.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebTransactionType.DebitReturnTransaction">
            <summary>NOT IMPLEMENTED. This transaction will return the funds to a customer's bank account using the Interac network. EMV Debit transactions require the XCharge Remote Client Manager to be installed on the local merchant PC and are only available to Global Canada merchants at this time.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebTransactionType.AliasDeleteTransaction">
            <summary>This transaction will allow the merchant to delete a pre-existing account number that is on-file at the Edge Gateway.</summary>
        </member>
        <member name="F:OpenDentBusiness.XWebTransactionType.Undefined">
            <summary>Value could not be parsed.</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.ProvBar">
            <summary>Stores the shading info for the provider bars on the left of the appointments module</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.ColWidth">
            <summary>The width of each operatory.</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.TimeWidth">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.ProvWidth">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.LineH">
            <summary>Line height.  This is currently treated like a constant that the user has no control over.</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.ColCount">
            <summary>The number of columns.  Stays consistent even if weekly view.  The number of colums showing for one day.</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.ProvCount">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.RowsPerIncr">
            <summary>Based on the view.  If no view, then it is set to 1. Different computers can be showing different views.</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.MinPerIncr">
            <summary>Pulled from Prefs AppointmentTimeIncrement.  Either 5, 10, or 15. An increment can be one or more rows.</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.MinPerRow">
            <summary>Typical values would be 10,15,5,or 7.5.</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.RowsPerHr">
            <summary>Rows per hour, based on RowsPerIncr and MinPerIncr</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.SchedListPeriod">
            <summary>This gets set externally each time the module is selected.  It is the background schedule for the entire period.  Includes all types.</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.IsWeeklyView">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.NumOfWeekDaysToDisplay">
            <summary>Typically 5 or 7. Only used with weekview.</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.ColDayWidth">
            <summary>The width of an entire day if using week view.</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.ColAptWidth">
            <summary>Only used with weekview. The width of individual appointments within each day.  There might be rounding errors for now.</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.VisProvs">
            <summary>Visible provider bars in appt module.  This is a subset of the available provs.  You can't include a hidden prov in this list.</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.VisOps">
            <summary>Visible ops in appt module.  List of visible operatories.  This is a subset of the available ops.  You can't include a hidden op in this list.  If user has set View.OnlyScheduledProvs, and not isWeekly, then the only ops to show will be for providers that have schedules for the day and ops with no provs assigned.</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.DictOpNumToColumnNum">
            <summary>Previously, we looped through VisOps in order to find the 0-based column index for a given OpNum. This was too slow so we now use this helper dictionary to do the same lookup.</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.DictProvNumToColumnNum">
            <summary>Previously, we looped through VisProvs in order to find the 0-based column index for a given ProvNum. This was too slow so we now use this helper dictionary to do the same lookup.</summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.ApptSheetHeight">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.UI.ApptDrawing.ApptSheetWidth">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.DrawAllButAppts(System.Drawing.Graphics,System.Boolean,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Draws the entire Appt background.  Used for main Appt module, for printing, and for mobile app.  Pass start and stop times of 12AM for 24 hours.  Set colsPerPage to VisOps.Count unless printing.  Set pageColumn to 0 unless printing.  Default fontSize is 8 unless printing.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.DrawMainBackground(System.Drawing.Graphics,System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>Including the practice schedule.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.DrawBlockouts(System.Drawing.Graphics,System.DateTime,System.DateTime,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Draws all the blockouts for the entire period.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.GetIndexOp(System.Int64,System.Collections.Generic.List{OpenDentBusiness.Operatory})">
            <summary>Returns the index of the opNum within VisOps.  Returns -1 if not in VisOps.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.DrawProvScheds(System.Drawing.Graphics,System.DateTime,System.DateTime)">
            <summary>The background provider schedules for the provider bars on the left.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.DrawProvBars(System.Drawing.Graphics,System.DateTime,System.DateTime)">
            <summary>Not the schedule, but just the indicators of scheduling.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.DrawGridLines(System.Drawing.Graphics)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.DrawTimeIndicatorLine(System.Drawing.Graphics)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.DrawMinutes(System.Drawing.Graphics,System.DateTime,System.DateTime)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.ComputeColDayWidth">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.ComputeColAptWidth">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.SetLineHeight(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.XPosToOpIdx(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.XPosToDay(System.Int32)">
            <summary>If not weekview, then it always returns 0.  If weekview, then it gives the dayofweek as int. Always based on current view, so 0 will be first day showing.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.YPosToHour(System.Int32)">
            <summary>Called when mouse down anywhere on apptSheet. Automatically rounds down.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.YPosToMin(System.Int32)">
            <summary>Called when mouse down anywhere on apptSheet. This will give very precise minutes. It is not rounded for accuracy.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.ConvertToOp(System.Int32)">
            <summary>Used when dropping an appointment to a new location.  Converts x-coordinate to operatory index of ApptCatItems.VisOps, rounding to the nearest.  In this respect it is very different from XPosToOp.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.ConvertToDay(System.Int32)">
            <summary>Used when dropping an appointment to a new location.  Converts x-coordinate to day index.  Only used in weekly view.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.ConvertToHour(System.Int32)">
            <summary>Used when dropping an appointment to a new location. Rounds to the nearest increment.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.ConvertToMin(System.Int32)">
            <summary>Used when dropping an appointment to a new location. Rounds to the nearest increment.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.ComputeColWidth(System.Int32)">
            <summary>Called from ContrAppt.comboView_SelectedIndexChanged and ContrAppt.RefreshVisops. Set colCountOverride to 0 unless printing.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.GetIndexOp(System.Int64)">
            <summary>Returns the index of the opNum within VisOps.  Returns -1 if not in VisOps.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptDrawing.GetIndexProv(System.Int64)">
            <summary>Returns the index of the provNum within VisProvs.</summary>
        </member>
        <member name="T:OpenDentBusiness.UI.ApptSingle">
            <summary>A container class that holds info about one appointment for drawing purposes.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptSingleDrawing.DrawEntireAppt(System.Drawing.Graphics,System.Data.DataRow,System.String,System.Single,System.Single,System.Boolean,System.Boolean,System.Int64,System.Collections.Generic.List{OpenDentBusiness.ApptViewItem},OpenDentBusiness.ApptView,System.Data.DataTable,System.Data.DataTable,System.Int32,System.Boolean)">
            <summary>Set default fontSize to 8 unless printing.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptSingleDrawing.DrawElement(System.Drawing.Graphics,System.Int32,System.Drawing.Point,OpenDentBusiness.ApptViewStackBehavior,OpenDentBusiness.ApptViewAlignment,System.Drawing.Brush,System.Data.DataRow,System.Collections.Generic.List{OpenDentBusiness.ApptViewItem},System.Data.DataTable,System.Data.DataTable,System.Single,System.Single,System.Int32,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptSingleDrawing.SetLocation(System.Data.DataRow,System.Int32,System.Int32,System.Int32)">
            <summary>This is only called when viewing appointments on the Appt module.  For Planned apt and pinboard, use SetSize instead so that the location won't change.  Pass 0 for startHour unless printing.  Pass visible ops for colsPerPage unless printing.  Pass 0 for pageColumn unless printing.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptSingleDrawing.SetSize(System.Data.DataRow)">
            <summary>Used for Planned apt and pinboard instead of SetLocation so that the location won't be altered.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptSingleDrawing.ConvertToX(System.Data.DataRow,System.Int32,System.Int32)">
            <summary>Called from SetLocation to establish X position of control.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptSingleDrawing.ConvertToY(System.Data.DataRow,System.Int32)">
            <summary>Called from SetLocation to establish Y position of control.  Also called from ContrAppt.RefreshDay when determining ProvBar markings. Does not round to the nearest row.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptSingleDrawing.GetPatternShowing(System.String)">
            <summary>This converts the dbPattern in 5 minute interval into the pattern that will be viewed based on RowsPerIncrement and AppointmentTimeIncrement.  So it will always depend on the current view.Therefore, it should only be used for visual display purposes rather than within the FormAptEdit. If height of appointment allows a half row, then this includes an increment for that half row.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptSingleDrawing.ApptWithinTimeFrame(System.Data.DataRow,System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>Tests if the appt is in the allotted time frame and is in a visible operatory.  Returns false in order to skip drawing for apptointment printing.</summary>
        </member>
        <member name="M:OpenDentBusiness.UI.ApptSingleDrawing.DisposeObjects(System.Object[])">
            <summary>Disposes objects with typeof Brush, Pen, StringFormat or Bitmap.</summary>
        </member>
        <member name="P:OpenDentBusiness.ProgressBarHelper.LabelValue">
            <summary>Used to set the label on the left of the progress bar</summary>
        </member>
        <member name="P:OpenDentBusiness.ProgressBarHelper.PercentValue">
            <summary>Used to set the label on the right of the progress bar</summary>
        </member>
        <member name="P:OpenDentBusiness.ProgressBarHelper.BlockValue">
            <summary>Changes progress bar current block value</summary>
        </member>
        <member name="P:OpenDentBusiness.ProgressBarHelper.BlockMax">
            <summary>Changes progress bar max value</summary>
        </member>
        <member name="P:OpenDentBusiness.ProgressBarHelper.TagString">
            <summary>Used to uniquely identify this ODEvent for consumers. Can be null</summary>
        </member>
        <member name="P:OpenDentBusiness.ProgressBarHelper.ProgressStyle">
            <summary>Changes progress bar style</summary>
        </member>
        <member name="P:OpenDentBusiness.ProgressBarHelper.MarqueeSpeed">
            <summary>Changes progress bar marquee speed</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgressBarHelper.#ctor(System.String,System.String,System.Int32,System.Int32,OpenDentBusiness.ProgBarStyle,System.String,System.Int32)">
            <summary>Used as a shell to store information events need to update a progress window.</summary>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.Service1">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.#ctor">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.EstablishConnectionCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.RequestUpdateCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.RequestCustomerIDCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.RequestCustomerIDStrictCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.RequestEmailVerificationCodeCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.PostEmailCertificateCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.IsForeignRegKeyCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.RequestCodeSystemsCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.RequestCodeSystemDownloadCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.FeatureRequestGetListCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.FeatureRequestGetOneCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.FeatureRequestSubmitChangesCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.FeatureRequestDiscussSubmitCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.FeatureRequestDiscussGetListCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.RequestFeeSchedCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.PracticeTitleResetCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.GetErxAccessCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.RequestPatientPortalURLCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.ValidatePatientPortalOfficeCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.ValidateWebSchedCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.GetWebSchedURLsCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.customerUpdates.Service1.ValidateResellerCredentialsCompleted">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.EstablishConnection">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.EstablishConnectionAsync">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.EstablishConnectionAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestUpdate(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestUpdateAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestUpdateAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestCustomerID(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestCustomerIDAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestCustomerIDAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestCustomerIDStrict(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestCustomerIDStrictAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestCustomerIDStrictAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestEmailVerificationCode(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestEmailVerificationCodeAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestEmailVerificationCodeAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.PostEmailCertificate(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.PostEmailCertificateAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.PostEmailCertificateAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.IsForeignRegKey(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.IsForeignRegKeyAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.IsForeignRegKeyAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestCodeSystems(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestCodeSystemsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestCodeSystemsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestCodeSystemDownload(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestCodeSystemDownloadAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestCodeSystemDownloadAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.FeatureRequestGetList(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.FeatureRequestGetListAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.FeatureRequestGetListAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.FeatureRequestGetOne(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.FeatureRequestGetOneAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.FeatureRequestGetOneAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.FeatureRequestSubmitChanges(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.FeatureRequestSubmitChangesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.FeatureRequestSubmitChangesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.FeatureRequestDiscussSubmit(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.FeatureRequestDiscussSubmitAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.FeatureRequestDiscussSubmitAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.FeatureRequestDiscussGetList(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.FeatureRequestDiscussGetListAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.FeatureRequestDiscussGetListAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestFeeSched(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestFeeSchedAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestFeeSchedAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.PracticeTitleReset(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.PracticeTitleResetAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.PracticeTitleResetAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.GetErxAccess(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.GetErxAccessAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.GetErxAccessAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestPatientPortalURL(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestPatientPortalURLAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.RequestPatientPortalURLAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.ValidatePatientPortalOffice(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.ValidatePatientPortalOfficeAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.ValidatePatientPortalOfficeAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.ValidateWebSched(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.ValidateWebSchedAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.ValidateWebSchedAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.GetWebSchedURLs(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.GetWebSchedURLsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.GetWebSchedURLsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.ValidateResellerCredentials(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.ValidateResellerCredentialsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.ValidateResellerCredentialsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.customerUpdates.Service1.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.EstablishConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.EstablishConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.EstablishConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.RequestUpdateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.RequestUpdateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.RequestUpdateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.RequestCustomerIDCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.RequestCustomerIDCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.RequestCustomerIDCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.RequestCustomerIDStrictCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.RequestCustomerIDStrictCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.RequestCustomerIDStrictCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.RequestEmailVerificationCodeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.RequestEmailVerificationCodeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.RequestEmailVerificationCodeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.PostEmailCertificateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.PostEmailCertificateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.PostEmailCertificateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.IsForeignRegKeyCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.IsForeignRegKeyCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.IsForeignRegKeyCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.RequestCodeSystemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.RequestCodeSystemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.RequestCodeSystemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.RequestCodeSystemDownloadCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.RequestCodeSystemDownloadCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.RequestCodeSystemDownloadCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.FeatureRequestGetListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.FeatureRequestGetListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.FeatureRequestGetListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.FeatureRequestGetOneCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.FeatureRequestGetOneCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.FeatureRequestGetOneCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.FeatureRequestSubmitChangesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.FeatureRequestSubmitChangesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.FeatureRequestSubmitChangesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.FeatureRequestDiscussSubmitCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.FeatureRequestDiscussSubmitCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.FeatureRequestDiscussSubmitCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.FeatureRequestDiscussGetListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.FeatureRequestDiscussGetListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.FeatureRequestDiscussGetListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.RequestFeeSchedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.RequestFeeSchedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.RequestFeeSchedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.PracticeTitleResetCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.GetErxAccessCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.GetErxAccessCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.GetErxAccessCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.RequestPatientPortalURLCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.RequestPatientPortalURLCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.RequestPatientPortalURLCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.ValidatePatientPortalOfficeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.ValidatePatientPortalOfficeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.ValidatePatientPortalOfficeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.ValidateWebSchedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.ValidateWebSchedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.ValidateWebSchedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.GetWebSchedURLsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.GetWebSchedURLsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.GetWebSchedURLsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.ValidateResellerCredentialsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.customerUpdates.ValidateResellerCredentialsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.customerUpdates.ValidateResellerCredentialsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.Service1">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.#ctor">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.EstablishConnectionCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.RequestUpdateCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.RequestCustomerIDCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.RequestCustomerIDStrictCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.RequestEmailVerificationCodeCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.PostEmailCertificateCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.IsForeignRegKeyCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.RequestCodeSystemsCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.RequestCodeSystemDownloadCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.FeatureRequestGetListCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.FeatureRequestGetOneCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.FeatureRequestSubmitChangesCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.FeatureRequestDiscussSubmitCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.FeatureRequestDiscussGetListCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.RequestFeeSchedCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.PracticeTitleResetCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.GetErxAccessCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.RequestPatientPortalURLCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.ValidatePatientPortalOfficeCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.ValidateWebSchedCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.ValidateWebSchedNewPatApptCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.GetWebSchedURLsCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.localhost.Service1.ValidateResellerCredentialsCompleted">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.EstablishConnection">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.EstablishConnectionAsync">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.EstablishConnectionAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestUpdate(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestUpdateAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestUpdateAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestCustomerID(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestCustomerIDAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestCustomerIDAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestCustomerIDStrict(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestCustomerIDStrictAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestCustomerIDStrictAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestEmailVerificationCode(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestEmailVerificationCodeAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestEmailVerificationCodeAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.PostEmailCertificate(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.PostEmailCertificateAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.PostEmailCertificateAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.IsForeignRegKey(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.IsForeignRegKeyAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.IsForeignRegKeyAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestCodeSystems(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestCodeSystemsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestCodeSystemsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestCodeSystemDownload(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestCodeSystemDownloadAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestCodeSystemDownloadAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.FeatureRequestGetList(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.FeatureRequestGetListAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.FeatureRequestGetListAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.FeatureRequestGetOne(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.FeatureRequestGetOneAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.FeatureRequestGetOneAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.FeatureRequestSubmitChanges(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.FeatureRequestSubmitChangesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.FeatureRequestSubmitChangesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.FeatureRequestDiscussSubmit(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.FeatureRequestDiscussSubmitAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.FeatureRequestDiscussSubmitAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.FeatureRequestDiscussGetList(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.FeatureRequestDiscussGetListAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.FeatureRequestDiscussGetListAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestFeeSched(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestFeeSchedAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestFeeSchedAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.PracticeTitleReset(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.PracticeTitleResetAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.PracticeTitleResetAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.GetErxAccess(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.GetErxAccessAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.GetErxAccessAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestPatientPortalURL(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestPatientPortalURLAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.RequestPatientPortalURLAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.ValidatePatientPortalOffice(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.ValidatePatientPortalOfficeAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.ValidatePatientPortalOfficeAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.ValidateWebSched(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.ValidateWebSchedAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.ValidateWebSchedAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.ValidateWebSchedNewPatAppt(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.ValidateWebSchedNewPatApptAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.ValidateWebSchedNewPatApptAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.GetWebSchedURLs(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.GetWebSchedURLsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.GetWebSchedURLsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.ValidateResellerCredentials(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.ValidateResellerCredentialsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.ValidateResellerCredentialsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.localhost.Service1.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.EstablishConnectionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.EstablishConnectionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.EstablishConnectionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.RequestUpdateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.RequestUpdateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.RequestUpdateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.RequestCustomerIDCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.RequestCustomerIDCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.RequestCustomerIDCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.RequestCustomerIDStrictCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.RequestCustomerIDStrictCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.RequestCustomerIDStrictCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.RequestEmailVerificationCodeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.RequestEmailVerificationCodeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.RequestEmailVerificationCodeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.PostEmailCertificateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.PostEmailCertificateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.PostEmailCertificateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.IsForeignRegKeyCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.IsForeignRegKeyCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.IsForeignRegKeyCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.RequestCodeSystemsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.RequestCodeSystemsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.RequestCodeSystemsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.RequestCodeSystemDownloadCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.RequestCodeSystemDownloadCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.RequestCodeSystemDownloadCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.FeatureRequestGetListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.FeatureRequestGetListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.FeatureRequestGetListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.FeatureRequestGetOneCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.FeatureRequestGetOneCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.FeatureRequestGetOneCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.FeatureRequestSubmitChangesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.FeatureRequestSubmitChangesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.FeatureRequestSubmitChangesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.FeatureRequestDiscussSubmitCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.FeatureRequestDiscussSubmitCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.FeatureRequestDiscussSubmitCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.FeatureRequestDiscussGetListCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.FeatureRequestDiscussGetListCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.FeatureRequestDiscussGetListCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.RequestFeeSchedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.RequestFeeSchedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.RequestFeeSchedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.PracticeTitleResetCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.GetErxAccessCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.GetErxAccessCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.GetErxAccessCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.RequestPatientPortalURLCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.RequestPatientPortalURLCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.RequestPatientPortalURLCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.ValidatePatientPortalOfficeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.ValidatePatientPortalOfficeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.ValidatePatientPortalOfficeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.ValidateWebSchedCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.ValidateWebSchedCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.ValidateWebSchedCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.ValidateWebSchedNewPatApptCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.ValidateWebSchedNewPatApptCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.ValidateWebSchedNewPatApptCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.GetWebSchedURLsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.GetWebSchedURLsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.GetWebSchedURLsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.ValidateResellerCredentialsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.localhost.ValidateResellerCredentialsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.localhost.ValidateResellerCredentialsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.#ctor">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.PerformRefreshCacheCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GenerateWebAppUrlCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ValidateWebAppUrlCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildWebLanderUrlCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildWebSchedRecallURLsCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildWebSchedNewPatApptURLsCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildFeaturePortalUrlCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildConfirmationRequestUrlCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildOAuthUrlCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetDropboxAuthorizationUrlCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetDropboxAccessTokenCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ValidateVersionCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ConfirmationRequestSendCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ConfirmationRequestSignAgreementCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ConfirmationRequestCancelServiceCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.SmsSendCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.SmsSignAgreementCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.SmsCancelServiceCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.RequestListenerProxyPrefsCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetEConnectorTypeCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.SetEConnectorTypeCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ValidateEServiceCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetFeaturesForCustomerCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetFeaturesForEServiceCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.EnableAdditionalFeaturesCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.CheckFHIRAPIKeyCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GenerateFHIRAPIKeyCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetFHIRAPIKeysForOfficeCompleted">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.UpdateFHIRAPIKeysCompleted">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.PerformRefreshCache(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.PerformRefreshCacheAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.PerformRefreshCacheAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GenerateWebAppUrl(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GenerateWebAppUrlAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GenerateWebAppUrlAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ValidateWebAppUrl(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ValidateWebAppUrlAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ValidateWebAppUrlAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildWebLanderUrl(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildWebLanderUrlAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildWebLanderUrlAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildWebSchedRecallURLs(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildWebSchedRecallURLsAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildWebSchedRecallURLsAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildWebSchedNewPatApptURLs(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildWebSchedNewPatApptURLsAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildWebSchedNewPatApptURLsAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildFeaturePortalUrl(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildFeaturePortalUrlAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildFeaturePortalUrlAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildConfirmationRequestUrl(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildConfirmationRequestUrlAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildConfirmationRequestUrlAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildOAuthUrl(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildOAuthUrlAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.BuildOAuthUrlAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetDropboxAuthorizationUrl(System.Int64)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetDropboxAuthorizationUrlAsync(System.Int64)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetDropboxAuthorizationUrlAsync(System.Int64,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetDropboxAccessToken(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetDropboxAccessTokenAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetDropboxAccessTokenAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ValidateVersion(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ValidateVersionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ValidateVersionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ConfirmationRequestSend(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ConfirmationRequestSendAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ConfirmationRequestSendAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ConfirmationRequestSignAgreement(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ConfirmationRequestSignAgreementAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ConfirmationRequestSignAgreementAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ConfirmationRequestCancelService(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ConfirmationRequestCancelServiceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ConfirmationRequestCancelServiceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.SmsSend(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.SmsSendAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.SmsSendAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.SmsSignAgreement(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.SmsSignAgreementAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.SmsSignAgreementAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.SmsCancelService(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.SmsCancelServiceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.SmsCancelServiceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.RequestListenerProxyPrefs(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.RequestListenerProxyPrefsAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.RequestListenerProxyPrefsAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetEConnectorType(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetEConnectorTypeAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetEConnectorTypeAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.SetEConnectorType(System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.SetEConnectorTypeAsync(System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.SetEConnectorTypeAsync(System.String,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ValidateEService(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ValidateEServiceAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.ValidateEServiceAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetFeaturesForCustomer(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetFeaturesForCustomerAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetFeaturesForCustomerAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetFeaturesForEService(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetFeaturesForEServiceAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetFeaturesForEServiceAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.EnableAdditionalFeatures(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.EnableAdditionalFeaturesAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.EnableAdditionalFeaturesAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.CheckFHIRAPIKey(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.CheckFHIRAPIKeyAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.CheckFHIRAPIKeyAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GenerateFHIRAPIKey(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GenerateFHIRAPIKeyAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GenerateFHIRAPIKeyAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetFHIRAPIKeysForOffice(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetFHIRAPIKeysForOfficeAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.GetFHIRAPIKeysForOfficeAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.UpdateFHIRAPIKeys(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.UpdateFHIRAPIKeysAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.UpdateFHIRAPIKeysAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.WebServiceMainHQ.WebServiceMainHQ.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.PerformRefreshCacheCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.PerformRefreshCacheCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.PerformRefreshCacheCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.GenerateWebAppUrlCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.GenerateWebAppUrlCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.GenerateWebAppUrlCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.ValidateWebAppUrlCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.ValidateWebAppUrlCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.ValidateWebAppUrlCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.BuildWebLanderUrlCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.BuildWebLanderUrlCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.BuildWebLanderUrlCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.BuildWebSchedRecallURLsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.BuildWebSchedRecallURLsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.BuildWebSchedRecallURLsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.BuildWebSchedNewPatApptURLsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.BuildWebSchedNewPatApptURLsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.BuildWebSchedNewPatApptURLsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.BuildFeaturePortalUrlCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.BuildFeaturePortalUrlCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.BuildFeaturePortalUrlCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.BuildConfirmationRequestUrlCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.BuildConfirmationRequestUrlCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.BuildConfirmationRequestUrlCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.BuildOAuthUrlCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.BuildOAuthUrlCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.BuildOAuthUrlCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.GetDropboxAuthorizationUrlCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.GetDropboxAuthorizationUrlCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.GetDropboxAuthorizationUrlCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.GetDropboxAccessTokenCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.GetDropboxAccessTokenCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.GetDropboxAccessTokenCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.ValidateVersionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.ValidateVersionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.ValidateVersionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.ConfirmationRequestSendCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.ConfirmationRequestSendCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.ConfirmationRequestSendCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.ConfirmationRequestSignAgreementCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.ConfirmationRequestSignAgreementCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.ConfirmationRequestSignAgreementCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.ConfirmationRequestCancelServiceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.ConfirmationRequestCancelServiceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.ConfirmationRequestCancelServiceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.SmsSendCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.SmsSendCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.SmsSendCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.SmsSignAgreementCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.SmsSignAgreementCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.SmsSignAgreementCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.SmsCancelServiceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.SmsCancelServiceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.SmsCancelServiceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.RequestListenerProxyPrefsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.RequestListenerProxyPrefsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.RequestListenerProxyPrefsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.GetEConnectorTypeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.GetEConnectorTypeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.GetEConnectorTypeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.SetEConnectorTypeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.SetEConnectorTypeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.SetEConnectorTypeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.ValidateEServiceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.ValidateEServiceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.ValidateEServiceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.GetFeaturesForCustomerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.GetFeaturesForCustomerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.GetFeaturesForCustomerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.GetFeaturesForEServiceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.GetFeaturesForEServiceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.GetFeaturesForEServiceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.EnableAdditionalFeaturesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.EnableAdditionalFeaturesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.EnableAdditionalFeaturesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.CheckFHIRAPIKeyCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.CheckFHIRAPIKeyCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.CheckFHIRAPIKeyCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.GenerateFHIRAPIKeyCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.GenerateFHIRAPIKeyCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.GenerateFHIRAPIKeyCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.GetFHIRAPIKeysForOfficeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.GetFHIRAPIKeysForOfficeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.GetFHIRAPIKeysForOfficeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.UpdateFHIRAPIKeysCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.WebServiceMainHQ.UpdateFHIRAPIKeysCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.WebServiceMainHQ.UpdateFHIRAPIKeysCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="F:OpenDentBusiness.DropboxApi.MAX_FILE_SIZE_BYTES">
            <summary>If a file is greater than 2MB in size, we will break it up into chunks when uploading it to Dropbox.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.GetDropboxAuthorizationUrl(System.String)">
            <summary>Called by OAuth web app to display this URL in their browser.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.GetDropboxAccessToken(System.String,System.String,System.String)">
            <summary>Throws exception.  Called by Open Dental Web Services HQ to get the real access code form the code given by Dropbox.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.UploadAsync(System.String,System.String,System.String,System.Byte[],OpenDentBusiness.DropboxApi.ProgressHandler)">
            <summary>Asynchronous method.  Uploads the passed in file to Dropbox.  Will overwrite the passed in file if it already exists.
            Pass in onProgress to hook up to a progress bar.  If onProgress is null, this method will break.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.Upload(System.String,System.String,System.String,System.Byte[])">
            <summary>Synchronous.  Uploads the passed in file to Dropbox.  Will overwrite the passed in file if it already exists.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.DownloadAsync(System.String,System.String,System.String,OpenDentBusiness.DropboxApi.ProgressHandler)">
            <summary>Asynchronous.  Downloads the file from Dropbox with the passed in folder path and file name.
            Pass in onProgress to hook up to a progress bar.  If onProgress is null, this method will break.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.Download(System.String,System.String,System.String)">
            <summary>Synchronous.  Downloads the file from Dropbox with the passed in folder path and file name.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.DownloadByIDAsync(System.String,System.String,OpenDentBusiness.DropboxApi.ProgressHandler)">
            <summary>Asynchronous.  Downloads the file from Dropbox with the passed in file identifier.  
            Pass in onProgress to hook up to a progress bar.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.DownloadByID(System.String,System.String)">
            <summary>Synchronous.  Downloads the file from Dropbox with the passed in file identifier.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.MoveAsync(System.String,System.String,System.String,OpenDentBusiness.DropboxApi.ProgressHandler)">
            <summary>Asynchronous.  Use TaskStateMove to get the end result information from running Move.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.ListFolderContents(System.String,System.String)">
            <summary>Synchronous.  TaskStateListFolders will hold the result from the passed in path.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.GetThumbnail(System.String,System.String)">
            <summary>Synchronous.  TaskStateThumbnail holds the thumbnail in bytes after the task thread is finished.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.Delete(System.String,System.String,OpenDentBusiness.DropboxApi.ProgressHandler)">
            <summary>Synchronous.  TaskStateDelete holds the Ids for the deleted file(s).</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.FileExists(System.String,System.String)">
            <summary>Synchronous.  Returns true if the file for the given path exists.</summary>
        </member>
        <member name="T:OpenDentBusiness.DropboxApi.ODDropbox">
            <summary>Remoting role not necessary.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.ODDropbox.GetDropboxAuthorizationUrl(System.String)">
            <summary>Called by OAuth web app to display this URL in their browser.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.ODDropbox.GetDropboxAccessToken(System.String,System.String,System.String)">
            <summary>Called by Open Dental Proper to get the real access code form the code given by Dropbox.  Returns empty string if something went wrong.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.ODDropbox.UploadAsync(OpenDentBusiness.DropboxApi.TaskStateUpload)">
            <summary>Asynchronous.  Uploads the file using the passed in bytes for the passed in path and name.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.ODDropbox.Upload(OpenDentBusiness.DropboxApi.TaskStateUpload)">
            <summary>Synchronous.  Uploads the file using the passed in bytes for the passed in path and name.
            Waits a minimum of 10 seconds before timing out.  Could be longer depending on internet connection.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.ODDropbox.UploadLargeFileAsync(OpenDentBusiness.DropboxApi.TaskStateUpload)">
            <summary>Only called by Upload() when file is too large.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.ODDropbox.UploadLargeFile(OpenDentBusiness.DropboxApi.TaskStateUpload)">
            <summary>Synchronous.  Only called by Upload() when file is too large.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.ODDropbox.DownloadAsync(OpenDentBusiness.DropboxApi.TaskStateDownload)">
            <summary>Asynchronous.  Downloads the file using the passed in file path and name.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.ODDropbox.Download(OpenDentBusiness.DropboxApi.TaskStateDownload)">
            <summary>Synchronous.  Downloads the file using the passed in file path and name.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.ODDropbox.Delete(OpenDentBusiness.DropboxApi.TaskStateDelete)">
            <summary>Synchronous.  If path is a folder, all contents will be deleted.  Returns the I.D. for any file that was deleted.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.ODDropbox.GetThumbnail(OpenDentBusiness.DropboxApi.TaskStateThumbnail)">
            <summary>Files that are over 20MB large will not return thumbnails.
            Waits a minimum of 10 seconds before timing out.  Could be longer depending on internet connection.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.ODDropbox.ListFolderContents(OpenDentBusiness.DropboxApi.TaskStateListFolders)">
            <summary>Synchronous.  Returns the path of every file and folder for the passed in path.  
            Only returns the unique I.D. for files.
            Waits a minimum of 10 seconds before timing out.  Could be longer depending on internet connection.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.ODDropbox.MoveAsync(OpenDentBusiness.DropboxApi.TaskStateMove)">
            <summary>Asynchronous.  Moves the fromPath's contents to the toPath's location.  
            This will not work if the toPath location already exists.  This means if passing in two folders, the toPath folder can't exist.
            If trying to move a file, both paths must be a file path (i.e fromPath="/AtoZ/A/Albus/testfile.txt", toPath="/AtoZ/P/Peterson/testfile.txt".
            If one path is a folder, and the other is a file, it will fail.
            If toPath is a folder, it will attempt to move the entire directory with all of its contents along with it.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.ODDropbox.MoveFile(OpenDentBusiness.DropboxApi.TaskStateMove,System.String,System.String)">
            <summary>Synchronous.  The folder of the corresponding file to be downloaded.  
            fromPath and toPath should be specific file paths, not folder paths.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.ODDropbox.FileExists(Dropbox.Api.DropboxClient,System.String)">
            <summary>Synchronous.  Returns true if a file exists in the passed in filePath</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskState.HasError">
            <summary>A quick identifier for whether or not an error was thrown.  It is much easier than a null check when error handling.</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskState.DoCancel">
            <summary>This property allows the user with this TaskState to cancel an async task if they so choose.  
            This is usually wired up to a Cancel button in a progress form.</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateUpload.Folder">
            <summary>The folder of the corresponding file to be downloaded</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateUpload.FileName">
            <summary>The file name of the file to be downloaded.</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateUpload.FileContent">
            <summary>The file stored in bytes.  This value will grow while the download is still in progress.</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateUpload.FileId">
            <summary>Uniquely identifies this file in the Dropbox account.</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateDownload.Folder">
            <summary>The folder of the corresponding file to be downloaded</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateDownload.FileName">
            <summary>The file name of the file to be downloaded.</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateDownload.FileContent">
            <summary>The file stored in bytes.  This value will grow while the download is still in progress.</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateDownload.FileId">
            <summary>Uniquely identifies this file in the Dropbox account.</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateDownload.DownloadFileSize">
            <summary>The total size of the file that is being downloaded.</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateListFolders.FolderPath">
            <summary>The folder of the corresponding file to be downloaded</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateListFolders.ListFolderPathsDisplay">
            <summary>List of cased paths that were found in </summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateListFolders.ListFolderPathLower">
            <summary>List of folder and file paths that were found for the given folder path.
            PathLower is the preferred path for making transactions between Dropbox and Open Dental, as PathDisplay is used for UI.</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateListFolders.ListFileIds">
            <summary>List of file ids that were found for the given folder path.</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateMove.FromPath">
            <summary>The folder of the corresponding file to be downloaded</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateMove.ToPath">
            <summary>The folder of the corresponding file to be downloaded</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateMove.CountMoveFailed">
            <summary>Number of move attempts that failed and are still in the original folder.</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateMove.CountMoveSuccess">
            <summary>Number of move attempts that succeeded and have been removed from the original folder.</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateMove.CountMoveTotal">
            <summary>Number of total files to move from the original folder.</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateMove.ListFileIds">
            <summary>List of file ids that were successfully moved.</summary>
        </member>
        <member name="M:OpenDentBusiness.DropboxApi.TaskStateMove.AddToListFileId(System.String)">
            <summary>Thread-safely adds the string to ListFieldIds.</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateDelete.Path">
            <summary>The folder of the corresponding file to be downloaded</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateDelete.ListDeletedIds">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateDelete.HasFailed">
            <summary>This is a quick way to determine if there were complications with deleting the file.  
            The Error variable can provide more info.</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateThumbnail.FilePath">
            <summary>The folder of the corresponding file to be downloaded</summary>
        </member>
        <member name="P:OpenDentBusiness.DropboxApi.TaskStateThumbnail.FileContent">
            <summary>The thumbnail file in bytes.</summary>
        </member>
        <member name="T:OpenDentBusiness.Podium">
            <summary>RESTful bridge to podium service. Without using REST Sharp or JSON libraries this code might not work properly.</summary>
        </member>
        <member name="F:OpenDentBusiness.Podium.PodiumThreadIntervalMS">
            <summary>Amount of time to wait inbetween trying to send Podium review invitations.</summary>
        </member>
        <member name="M:OpenDentBusiness.Podium.#ctor">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Podium.ShowPage">
            <summary>Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.Podium.SendData(OpenDentBusiness.Patient,System.Int64)">
            <summary>Tries each of the phone numbers provided in the list one at a time until it succeeds.</summary>
        </member>
        <member name="T:OpenDentBusiness.WebServiceTests">
            <summary>These are only run from the Unit Testing framework</summary>
        </member>
        <member name="M:OpenDentBusiness.WebServiceTests.GetListMedLabsSpecialChars">
            <summary>Returns a list of MedLabs containing one MedLab object which has a list of MedLabResults containing one MedLabResult as a field.
            This will test whether or not we can handle a return value that is a list of objects with lists of objects as fields.
            Both the MedLab and the MedLabResult contain longs, the DirtyString, the NewLineString, an enum, and Date/DateTime fields.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.UseTestAccountOD">
            <summary>Only used for testing. Should always be false otherwise.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.UseTestAccountLoopback">
            <summary>Only used for testing. Should always be false otherwise.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.UseXWebTestGateway">
            <summary>USED BY DEBUGGING ONLY!!! Points the eConnector at XWeb test URLs.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.GetHpfUrlForPayment(System.Int64,System.String,System.Boolean,System.Double,System.Boolean)">
            <summary>Creates and returns the HPF URL and validation OTK which can be used to make a payment for an unspecified credit card.  Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.GetHpfUrlForCreditCardAlias(System.Int64,System.Boolean)">
            <summary>Creates and returns the HPF URL and validation OTK which can be used to create a credit card alias.  Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.MakePaymentWithAlias(System.Int64,System.String,System.Double,System.Int64)">
            <summary>Make a payment using HPF directly.  Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.VoidPayment(System.Int64,System.String,System.Int64)">
            <summary>Void a payment using DTG directly. This is only valid for payments on the same day on which they originated.  Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.ReturnPayment(System.Int64,System.String,System.Double,System.Int64)">
            <summary>Return a payment amount to a credit card using DTG directly.  Use this when void is not an option or you want to credit directly to the credit card without first having a transaction to void.  Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.DeleteCreditCard(System.Int64,System.Int64)">
            <summary>Delete a credit card from the database and delete it from XWeb repository using DTG directly.  Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.GetOtkStatus(System.Int64,System.String,System.Boolean)">
            <summary>Makes a web request to X-Charge to get the status for the OTK passed in.  Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.OnInputEvent(System.Object,System.String)">
            <summary>XWeb Gateway input event. Always sent as Verbose.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.OnOutputEvent(System.Object,System.String)">
            <summary>XWeb Gateway output event. Always sent as Verbose.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.OnWakeupMonitor(System.Object,System.EventArgs)">
            <summary>New OTK is available. Send wakeup event to EConnector so it will start processing immediately.</summary>
        </member>
        <member name="T:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs">
            <summary>Extend this class to interface the XWeb API with a specific web call.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs._xWebID">
            <summary>Required for all web requests. 12 digit ID given to the merchant once they have been enrolled in the system.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs._authKey">
            <summary>Required for all web requests. 32 alphanumeric string assigned by XWeb.  Merchant must present the key to authenticate itself to the Gateway.  Required unless UserID and Password are used instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs._terminalID">
            <summary>Required for all web requests. 8 digit ID given to the merchant once they have been enrolled in the system.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs._patNum">
            <summary>PatNum which this transaction is linked to.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs._provNum">
            <summary>ProvNum which this transaction is linked to. PriProv of _patNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs._clinicNum">
            <summary>ClinicNum which this transaction is linked to. 0 if not using clinics.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs._transactionType">
            <summary>Defines the type of transaction which is being created.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs.GatewayInput">
            <summary>Serialize the input XWeb transmission to bytes.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs._gatewayUrl">
            <summary>Returns the test or production URL for the XWeb gateway based on if the solution is configured for debugging.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs.GatewayParams">
            <summary>Provide key/value pairs for the XWeb transmission. X-Web program properties should be validated before calling this method.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs.ExtraGatewayParams">
            <summary>Extra key/value pairs specific to a given transmission.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs.XWebSpecVersion">
            <summary>Must either be XWeb3.6 (DTG) or XWebSecure3.6 (HPF).</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs.WakeupMonitorThread">
            <summary>Inidicates that calling GenerateOutput should in-turn cause WakeupMonitor event to be raised.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs.InsertResponseIntoDb">
            <summary>Inidicates that calling GenerateOutput should in-turn cause new row to be added to XWebResponse.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs.GenerateOutput">
            <summary>Interface the XWeb Gateway and return an instance of XWebResponse. Goes to db and/or cache to get patient info and ProgramProperties for XWeb.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs.PostProcessOutput(OpenDentBusiness.XWebResponse)">
            <summary>Once XWeb Gateway response had been generated, the inheritor of this class may process it and add it to by overriding this method.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs.CreateGatewayResponse(System.String)">
            <summary>Convert output (in xml) from the XWeb gateway to GatewayResponse.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs.UploadData(System.String)">
            <summary>Create a temporary WebClient connected to the XWeb gateway and perform UplodateData.</summary>
             <returns>The response from the url given the input.</returns>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputAbs.PrettyPrintXml(System.String)">
            <summary>Return formatted xml string.</summary>
        </member>
        <member name="T:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputOtkStatus">
            <summary>Interface XWeb API to poll for an existing OTK's status.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputOtkStatus._otk">
            <summary>Only used for hpf status polling. The previously generated one time key belonging to the transaction being polled.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputOtkStatus._blockUntilResponse">
            <summary>Only used for hpf status polling. Indicates if the call should block until a status is available. True=block, False=poll.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputOtkStatus.ExtraGatewayParams">
            <summary>Helper method that returns all of our customized parameters for the HPF status transaction request.  OTKs will be valid up to 24 hours for polling.  This method assumes IsXwebReady() was called prior to getting called.  Throws exceptions.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputOtkStatus.WakeupMonitorThread">
            <summary>Calling GenerateOutput should NOT cause WakeupMonitor event to be raised.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputOtkStatus.InsertResponseIntoDb">
            <summary>Calling GenerateOutput should NOT cause new row to be added to XWebResponse.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputOtkStatus.PostProcessOutput(OpenDentBusiness.XWebResponse)">
            <summary>No special processing for XWebInputOtkStatus.</summary>
        </member>
        <member name="T:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputHpfCreditCardAlias">
            <summary>Interface XWeb API to generate an OTK and an HPF to be used to create a credit card alias which can be stored and used later.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputHpfCreditCardAlias.ExtraHPFParams">
            <summary>No extra params needed for CC alias.</summary>
        </member>
        <member name="T:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputHpfPayment">
            <summary>Interface XWeb API to generate an OTK and an HPF to be used to make a payment.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputHpfPayment._amount">
            <summary>Only used for hpf generating. Amount length can be 1-7  digits.  E.g. 0.01 - 99999.99.  Pass in 0 to let the user decide what the amount should be.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputHpfPayment._payNote">
            <summary>Will be entered as Payment.PayNote once payment transaction has completed.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputHpfPayment._createAlias">
            <summary>Indicates if the CC transaction should create and return a reusable credit card alias.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputHpfPayment.ExtraHPFParams">
            <summary>Returns dictionary of all parameters needed for an OTK request.  Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputHpfPayment.PostProcessOutput(OpenDentBusiness.XWebResponse)">
            <summary>Adds amount to response.</summary>
        </member>
        <member name="T:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputHpf">
            <summary>Interface XWeb API to generate an OTK and an HPF.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputHpf._isMobile">
            <summary>Determines which Hpf form url will be used.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputHpf._formTimeout">
            <summary>Amount of time allowed between OTK creation and timeout being returned by HPF status polling.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputHpf._hpfUrlBase">
            <summary>Returns the URL for the XWeb form based on debug and mobile prefs.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputHpf.QueryStringArgs">
            <summary>Helper method that returns all of our customized parameters for the HPF URL creation.  These parameters will determine how the HPF will display to the end user.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputHpf.ExtraHPFParams">
            <summary>Extra key/value pairs specific to a given XWebInputHpf transmission.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputHpf.ExtraGatewayParams">
            <summary>Returns dictionary of all parameters needed for an OTK request.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputHpf.PostProcessOutput(OpenDentBusiness.XWebResponse)">
            <summary>Verifies OTK creation and creates HpfUrl.</summary>
        </member>
        <member name="T:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTG">
            <summary>Interface XWeb API to make a payment, void payment, or return payment.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTG._payNote">
            <summary>Will be entered as Payment.PayNote once payment transaction has completed.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTG.XWebSpecVersion">
            <summary>DTG does not use the secure gateway.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTG.WakeupMonitorThread">
            <summary>Calling GenerateOutput should NOT cause WakeupMonitor event to be raised.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTG.ExtraDTGParams">
            <summary>Extra key/value pairs specific to a given XWebInputDTG transmission.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTG.ExtraGatewayParams">
            <summary>Provide key/value pairs for the XWeb DTG transmission.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTG.PostProcessOutput(OpenDentBusiness.XWebResponse)">
            <summary>Verifies approval and sets response.PatNote.</summary>
        </member>
        <member name="T:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTGPaymentSale">
            <summary>Interface XWeb API to make a payment for the given amount using the given pre-authorized credit card alias. 
            Makes the call directly to the XWeb gateway (DTG) and does not involve HPF.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTGPaymentSale._amount">
            <summary>Amount to be charged for this transaction. Amount length can be 1-7  digits.  E.g. 0.01 - 99999.99.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTGPaymentSale._cc">
            <summary>Pre-authorized credit card to be used for this transaction. Must have previously been created by the user via AliasCreateTransaction.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTGPaymentSale.ExtraDTGParams">
            <summary>Provide key/value pairs for the XWeb transmission.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTGPaymentSale.PostProcessOutput(OpenDentBusiness.XWebResponse)">
            <summary>Performs base XWebInputDTGForPayment behavior and creates PaymentWeb row.</summary>
        </member>
        <member name="T:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTGPaymentVoid">
            <summary>Interface XWeb API to void a payment. Makes the call directly to the XWeb gateway (DTG) and does not involve HPF.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTGPaymentVoid._transactionID">
            <summary>Pre-authorized credit card alias to be used for this transaction. Must have previously been created by the user via AliasCreateTransaction.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTGPaymentVoid.ExtraDTGParams">
            <summary>Provide key/value pairs for the XWeb transmission.</summary>
        </member>
        <member name="T:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTGPaymentReturn">
            <summary>Interface XWeb API to post a return to the given credit card. Makes the call directly to the XWeb gateway (DTG) and does not involve HPF.</summary>
        </member>
        <member name="T:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTGDeleteAlias">
            <summary>Interface XWeb API to delete a credit card alias. Makes the call directly to the XWeb gateway (DTG) and does not involve HPF.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTGDeleteAlias._cc">
            <summary>Pre-authorized credit card to be deleted. Must have previously been created by the user via AliasCreateTransaction.</summary>
        </member>
        <member name="P:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTGDeleteAlias.ExtraDTGParams">
            <summary>Provide key/value pairs for the XWeb transmission.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.Shared.XWeb.XWebs.XWebInputDTGDeleteAlias.PostProcessOutput(OpenDentBusiness.XWebResponse)">
            <summary>Performs base XWebInputDTGForPayment behavior and deletes CreditCard row.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.WebSched.TimeSlot.TimeSlot.DateTimeStart">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.WebSched.TimeSlot.TimeSlot.DateTimeStop">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.WebTypes.WebSched.TimeSlot.TimeSlot.OperatoryNum">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.WebSched.TimeSlot.TimeSlots.GetAvailableWebSchedTimeSlots(System.Int64,System.DateTime,System.DateTime)">
            <summary>Gets up to 30 days of open time slots based on the recall passed in.
            Open time slots are found by looping through operatories flagged for Web Sched and finding openings that can hold the recall.
            The amount of time required to be considered "available" is dictated by the RecallType associated to the recall passed in.
            Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.WebSched.TimeSlot.TimeSlots.GetAvailableWebSchedTimeSlots(OpenDentBusiness.RecallType,System.Collections.Generic.List{OpenDentBusiness.Provider},OpenDentBusiness.Clinic,System.DateTime,System.DateTime,OpenDentBusiness.Recall)">
            <summary>Gets up to 30 days of open time slots based on the RecallType passed in.
            Open time slots are found by looping through operatories flagged for Web Sched and finding openings that can hold the RecallType.
            The RecallType passed in must be a valid recall type.
            Providers passed in will be the only providers considered when looking for available time slots.
            Passing in a null clinic will only consider operatories with clinics set to 0 (unassigned).
            The timeslots on and between the Start and End dates passed in will be considered and potentially returned as available.
            Optionally pass in a recall object in order to consider all other recalls due for the patient.  This will potentially affect the time pattern.
            Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.WebSched.TimeSlot.TimeSlots.GetAvailableNewPatApptTimeSlots(System.DateTime,System.DateTime,System.Int64)">
            <summary>Gets up to 30 days of open time slots for New Patient Appointments based on the timePattern passed in.
            Open time slots are found by looping through the passed in operatories and finding openings that can hold the entire appointment.
            Passing in a clinicNum of 0 will only consider unassigned operatories.
            The timeslots on and between the Start and End dates passed in will be considered and potentially returned as available.
            Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.WebSched.TimeSlot.TimeSlots.GetTimeSlotsForRange(System.DateTime,System.DateTime,System.String,System.Collections.Generic.List{System.Int64},System.Collections.Generic.List{OpenDentBusiness.Operatory},System.Collections.Generic.List{OpenDentBusiness.Schedule},OpenDentBusiness.Clinic)">
            <summary>Gets up to 30 days of open time slots based on the timePattern passed in.
            Open time slots are found by looping through the passed in operatories and finding openings that can hold the entire appointment.
            Providers passed in will be the only providers considered when looking for available time slots.
            Passing in a null clinic will only consider operatories with clinics set to 0 (unassigned).
            The timeslots on and between the Start and End dates passed in will be considered and potentially returned as available.
            Throws exceptions.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.WebSched.TimeSlot.TimeSlots.AddTimeSlotsFromSchedule(System.Collections.Generic.List{OpenDentBusiness.WebTypes.WebSched.TimeSlot.TimeSlot},OpenDentBusiness.Schedule,System.Int64,System.TimeSpan,System.TimeSpan,System.DateTime,System.Collections.Generic.List{OpenDentBusiness.Schedule},System.Collections.Generic.Dictionary{System.DateTime,System.Collections.Generic.List{OpenDentBusiness.ApptSearchProviderSchedule}},System.Collections.Generic.List{OpenDentBusiness.Appointment},System.String)">
            <summary>Adds valid time slots to listAvailableTimeSlots if the time slot found does NOT already exist within the list.
            This is a helper method to better break up the complexity of GetAvailableWebSchedTimeSlots() so that it is easier to follow.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.WebSched.TimeSlot.TimeSlots.IsApptPatternDoubleBooked(System.Collections.Generic.List{OpenDentBusiness.ApptSearchProviderSchedule},System.Int64,System.String,System.DateTime)">
            <summary>Checks to see if the provider has any double booking issues with the appointment time pattern passed in.
            Logic in this method ignores HYG conflicts purposefully for Web Sched. timePattern must be a time pattern in 5 minute increments.</summary>
        </member>
        <member name="M:OpenDentBusiness.WebTypes.WebSched.TimeSlot.TimeSlots.IsTimeOverlapping(System.TimeSpan,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>Checks if the two times passed in overlap.</summary>
        </member>
        <member name="T:OpenDentBusiness.WebTypes.WebBase">
            <summary>This is a base class for all classes that are not associated to a table in the database but both OpenDentBusiness and OpenDentalWebCore 
            need to know about.  Currently this class is used via reflection to quickly find all classes that extend this base class.</summary>
        </member>
        <member name="T:OpenDentBusiness.X834">
            <summary>X12 834 Benefit Enrollment and Maintenance.  This transaction is used to push insurance plan information to pseudo clearinghouses.</summary>
        </member>
        <member name="F:OpenDentBusiness.X834._listSegments">
            <summary>All segments within the current transaction set (ST) of the 834 report.</summary>
        </member>
        <member name="F:OpenDentBusiness.X834._segNum">
            <summary>The current segment within _listSegments.</summary>
        </member>
        <member name="F:OpenDentBusiness.X834.ListTransactions">
            <summary>List of all transactions (ST loops) within the 834.</summary>
        </member>
        <member name="F:OpenDentBusiness.X834._tranCur">
            <summary>The current transaction within ListTransactions.</summary>
        </member>
        <member name="P:OpenDentBusiness.X834._segCur">
            <summary>Shortcut to get current segment based on _segNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadMessage">
            <summary>See guide pages 22 and 208 for overview.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoopGS">
            <summary>GS: Functional Group.  Required.  Repeat unlimited.  Guide page 208.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoopST(System.Collections.Generic.List{OpenDentBusiness.X12Transaction})">
            <summary>ST: Transaction Set Header.  Required.  Repeat 1.  Guide pages 22, 31, 208.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoopST_BGN">
            <summary>BGN: Beginning Segment.  Required.  Repeat 1.  Guide page 32.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoopST_REF">
            <summary>REF: Transaction Set Policy Number.  Situational.  Repeat 1.  Guide page 36.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoopST_DTP">
            <summary>DTP: File Effictive Date.  Situational.  Repeat >1.  Guide page 37.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoopST_QTY">
            <summary>QTY: Transaction Set Control Totals.  Situational.  Repeat 3.  Guide page 38.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop1000A">
            <summary>Loop 1000A: Sponsor Name.  Repeat 1.  Guide page 22.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop1000A_N1">
            <summary>N1: Sponsor Name.  Required.  Repeat 1.  Guide page 39.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop1000B">
            <summary>Loop 1000B: Payer.  Repeat 1.  Guide page 22.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop1000B_N1">
            <summary>N1: Payer.  Required.  Repeat 1.  Guide page 41.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop1000C">
            <summary>Loop 1000C: TPA/Broker Name.  Repeat 2.  Guide page 22.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop1000C_N1(OpenDentBusiness.Hx834_Broker)">
            <summary>N1: TPA/Broker Name.  Situational.  Repeat 1.  Guide page 43.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop1100C(OpenDentBusiness.Hx834_Broker)">
            <summary>Loop 1100C: TPA/Broker Account.  Repeat 1.  Guide page 22.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop1100C_ACT(OpenDentBusiness.Hx834_Broker)">
            <summary>ACT: TPA/Broker Account Information.  Situational.  Repeat 1.  Guide page 45.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2000">
            <summary>Loop 2000: Member Level Detail.  Repeat >1.  Guide page 22.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2000_INS(OpenDentBusiness.Hx834_Member)">
            <summary>INS: Member Level Detail.  Required.  Repeat 1.  Guide page 47.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2000_REF_1(OpenDentBusiness.Hx834_Member)">
            <summary>REF: Subscriber Identifier.  Required.  Repeat 1.  Guide page 55.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2000_REF_2(OpenDentBusiness.Hx834_Member)">
            <summary>REF: Member Policy Number.  Situational.  Repeat 1.  Guide page 56.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2000_REF_3(OpenDentBusiness.Hx834_Member)">
            <summary>REF: Member Supplemental Identifier.  Situational.  Repeat 13.  Guide page 57.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2000_DTP(OpenDentBusiness.Hx834_Member)">
            <summary>DTP: Member Level Dates.  Situational.  Repeat 24.  Guide page 59.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100A(OpenDentBusiness.Hx834_Member)">
            <summary>Loop 2100A: Member Name.  Repeat 1.  Guide page 22.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100A_NM1(OpenDentBusiness.Hx834_Member)">
            <summary>NM1: Member Name.  Required.  Repeat 1.  Guide page 62.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100A_PER(OpenDentBusiness.Hx834_Member)">
            <summary>PER: Member Communications Numbers.  Situational.  Repeat 1.  Guide page 65.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100A_N3(OpenDentBusiness.Hx834_Member)">
            <summary>N3: Member Residence Street Address.  Situational.  Repeat 1.  Guide page 68.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100A_N4(OpenDentBusiness.Hx834_Member)">
            <summary>N4: Member City, State, Zip Code.  Situational.  Repeat 1.  Guide page 69.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100A_DMG(OpenDentBusiness.Hx834_Member)">
            <summary>DMG: Member Demographics.  Situational.  Repeat 1.  Guide page 72.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100A_EC(OpenDentBusiness.Hx834_Member)">
            <summary>EC: Employment Class.  Situational.  Repeat >1.  Guide page 76.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100A_ICM(OpenDentBusiness.Hx834_Member)">
            <summary>ICM: Member Income.  Situational.  Repeat 1.  Guide page 79.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100A_AMT(OpenDentBusiness.Hx834_Member)">
            <summary>AMT: Member Policy Amounts.  Situational.  Repeat 7.  Guide page 81.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100A_HLH(OpenDentBusiness.Hx834_Member)">
            <summary>HLH: Member Health Information.  Situational.  Repeat 1.  Guide page 82.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100A_LUI(OpenDentBusiness.Hx834_Member)">
            <summary>LUI: Member Language.  Situational.  Repeat >1.  Guide page 84.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100B(OpenDentBusiness.Hx834_Member)">
            <summary>Loop 2100B: Incorrect Member Name.  Repeat 1.  Guide page 22.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100B_NM1(OpenDentBusiness.Hx834_Member)">
            <summary>NM1: Incorrect Member Name.  Situational.  Repeat 1.  Guide page 86.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100B_DMG(OpenDentBusiness.Hx834_Member)">
            <summary>DMG: Incorrect Member Demographics.  Situational.  Repeat 1.  Guide page 89.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100C(OpenDentBusiness.Hx834_Member)">
            <summary>Loop 2100C: Member Mailing Address.  Repeat 1.  Guide page 22.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100C_NM1(OpenDentBusiness.Hx834_Member)">
            <summary>NM1: Member Mailing Address.  Situational.  Repeat 1.  Guide page 93.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100C_N3(OpenDentBusiness.Hx834_Member)">
            <summary>N3: Member Mail Street Address.  Required.  Repeat 1.  Guide page 95.  Overrides Loop 2100A if present.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100C_N4(OpenDentBusiness.Hx834_Member)">
            <summary>N4: Member Mail City, State, Zip Code.  Required.  Repeat 1.  Guide page 96.  Overrides Loop 2100A if present.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100D(OpenDentBusiness.Hx834_Member)">
            <summary>Loop 2100D: Member Employer.  Repeat 3.  Guide page 23.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100D_NM1(OpenDentBusiness.Hx834_Employer)">
            <summary>NM1: Member Employer.  Situational.  Repeat 1.  Guide page 98.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100D_PER(OpenDentBusiness.Hx834_Employer)">
            <summary>PER: Member Employer Communications Numbers.  Situational.  Repeat 1.  Guide page 101.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100D_N3(OpenDentBusiness.Hx834_Employer)">
            <summary>N3: Member Employer Street Address.  Situational.  Repeat 1.  Guide page 104.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100D_N4(OpenDentBusiness.Hx834_Employer)">
            <summary>N4: Member Employer City, State, Zip Code.  Situational.  Repeat 1.  Guide page 105.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100E(OpenDentBusiness.Hx834_Member)">
            <summary>Loop 2100E: Member School.  Repeat 3.  Guide page 23.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100E_NM1(OpenDentBusiness.Hx834_School)">
            <summary>NM1: Member School.  Situational.  Repeat 1.  Guide page 107.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100E_PER(OpenDentBusiness.Hx834_School)">
            <summary>PER: Member School Communications Numbers.  Situational.  Repeat 1.  Guide page 109.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100E_N3(OpenDentBusiness.Hx834_School)">
            <summary>N3: Member School Street Address.  Situational.  Repeat 1.  Guide page 112.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100E_N4(OpenDentBusiness.Hx834_School)">
            <summary>N4: Member School City, State, Zip Code.  Repeat 1.  Guide page 113.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100F(OpenDentBusiness.Hx834_Member)">
            <summary>Loop 2100F: Custodial Parent.  Repeat 1.  Guide page 23.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100F_NM1(OpenDentBusiness.Hx834_Member)">
            <summary>NM1: Custodial Parent.  Situational.  Repeat 1.  Guide page 115.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100F_PER(OpenDentBusiness.Hx834_Member)">
            <summary>PER: Custodial Parent Communications Numbers.  Situational.  Repeat 1.  Guide page 118.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100F_N3(OpenDentBusiness.Hx834_Member)">
            <summary>N3: Custodial Parent Street Address.  Situational.  Repeat 1.  Guide page 121.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100F_N4(OpenDentBusiness.Hx834_Member)">
            <summary>N4: Custodial Parent City, State, Zip Code.  Situational.  Repeat 1.  Guide page 122.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100G(OpenDentBusiness.Hx834_Member)">
            <summary>Loop 2100G: Responsible Person.  Repeat 13.  Guide page 23.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100G_NM1(OpenDentBusiness.Hx834_ResponsiblePerson)">
            <summary>NM1: Responsible Person.  Situational.  Repeat 1.  Guide page 124.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100G_PER(OpenDentBusiness.Hx834_ResponsiblePerson)">
            <summary>PER: Responsible Person Communications Numbers.  Situational.  Repeat 1.  Guide page 127.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100G_N3(OpenDentBusiness.Hx834_ResponsiblePerson)">
            <summary>N3: Responsible Person Street Address.  Situational.  Repeat 1.  Guide page 130.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100G_N4(OpenDentBusiness.Hx834_ResponsiblePerson)">
            <summary>N4: Responsible Person City, State, Zip Code.  Situational.  Repeat 1.  Guide page 131.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100H(OpenDentBusiness.Hx834_Member)">
            <summary>Loop 2100H: Drop Off Location.  Repeat 1.  Guide page 23.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100H_NM1(OpenDentBusiness.Hx834_Member)">
            <summary>NM1: Drop Off Location.  Situational.  Repeat 1.  Guide page 133.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100H_N3(OpenDentBusiness.Hx834_Member)">
            <summary>N3: Drop Off Location Street Address.  Situational.  Repeat 1.  Guide page 135.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2100H_N4(OpenDentBusiness.Hx834_Member)">
            <summary>N4: Drop Off Location City, State, Zip Code.  Situational.  Repeat 1.  Guide page 136.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2200(OpenDentBusiness.Hx834_Member)">
            <summary>Loop 2200: Disability Information.  Repeat >1.  Guide page 23.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2200_DSB(OpenDentBusiness.Hx834_DisabilityInformation)">
            <summary>DSB: Disability Information.  Situational.  Repeat 1.  Guide page 138.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2200_DTP(OpenDentBusiness.Hx834_DisabilityInformation)">
            <summary>DTP: Disability Eligibility Dates.  Situational.  Repeat 2.  Guide page 140.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2300(OpenDentBusiness.Hx834_Member)">
            <summary>Loop 2300: Health Coverage.  Repeat 99.  Guide page 23.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2300_HD(OpenDentBusiness.Hx834_HealthCoverage)">
            <summary>HD: Health Coverage.  Situational.  Repeat 1.  Guide page 141.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2300_DTP(OpenDentBusiness.Hx834_HealthCoverage)">
            <summary>DTP: Health Coverage Dates.  Required.  Repeat 6.  Guide page 145.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2300_AMT(OpenDentBusiness.Hx834_HealthCoverage)">
            <summary>AMT: Health Coverage Policy.  Situational.  Repeat 9.  Guide page 147.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2300_REF_1(OpenDentBusiness.Hx834_HealthCoverage)">
            <summary>REF: Health Coverage Policy Number.  Situational.  Repeat 14.  Guide page 148.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2300_REF_2(OpenDentBusiness.Hx834_HealthCoverage)">
            <summary>REF: Prior Coverage Months.  Situational.  Repeat 1.  Guide page 150.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2300_IDC(OpenDentBusiness.Hx834_HealthCoverage)">
            <summary>IDC: IDentification Card.  Situational.  Repeat 3.  Guide page 152.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2310(OpenDentBusiness.Hx834_HealthCoverage)">
            <summary>Loop 2310: Provider Information.  Repeat 30.  Guide page 23.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2310_LX(OpenDentBusiness.Hx834_Provider)">
            <summary>LX: Provider Information.  Situational.  Repeat 1.  Guide page 154.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2310_NM1(OpenDentBusiness.Hx834_Provider)">
            <summary>NM1: Provider Name.  Required.  Repeat 1.  Guide page 155.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2310_N3(OpenDentBusiness.Hx834_Provider)">
            <summary>N3: Provider Address. Situational.  Repeat 2.  Guide page 158.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2310_N4(OpenDentBusiness.Hx834_Provider)">
            <summary>N4: Provider City, State, Zip Code.  Situational.  Repeat 1.  Guide page 159.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2310_PER(OpenDentBusiness.Hx834_Provider)">
            <summary>PER: Provider Communications Numbers.  Situational.  Repeat 2.  Guide page 161.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2310_PLA(OpenDentBusiness.Hx834_Provider)">
            <summary>PLA: Provider Change Reason.  Situational.  Repeat 1.  Guide page 164.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2320(OpenDentBusiness.Hx834_HealthCoverage)">
            <summary>Loop 2320: Coordination of Benefits.  Repeat 5.  Guide page 23.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2320_COB(OpenDentBusiness.Hx834_Cob)">
            <summary>COB: Coordination of Benefits.  Situational.  Repeat 1.  Guide page 166.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2320_REF(OpenDentBusiness.Hx834_Cob)">
            <summary>REF: Additional Coordination of Benefits Identifiers.  Situational.  Repeat 4.  Guide page 168.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2320_DTP(OpenDentBusiness.Hx834_Cob)">
            <summary>DTP: Coordination of Benefits Eligibility Dates.  Situational.  Repeat 2.  Guide page 170.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2330(OpenDentBusiness.Hx834_Cob)">
            <summary>Loop 2330: Coordination of Benefits Related Entity.  Repeat 3.  Guide page 23.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2330_NM1(OpenDentBusiness.Hx834_CobRelatedEntity)">
            <summary>NM1: Coordination of Benefits Releated Entity.  Situational.  Repeat 1.  Guide page 171.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2330_N3(OpenDentBusiness.Hx834_CobRelatedEntity)">
            <summary>N3: Coordination of Benefits Related Entity Address.  Situational.  Repeat 1.  Guide page 173.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2330_N4(OpenDentBusiness.Hx834_CobRelatedEntity)">
            <summary>N4: Coordination of Benefits Other Insurance Company City, State, Zip Code.  Repeat 1.  Guide page 174.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2330_PER(OpenDentBusiness.Hx834_CobRelatedEntity)">
            <summary>PER: Administrative Communications Contact.  Situational.  Repeat 1.  Guide page 176.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2000_LS(OpenDentBusiness.Hx834_Member)">
            <summary>LS: Additional Reporting Categories.  Situational.  Repeat 1.  Guide page 178.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2700(OpenDentBusiness.Hx834_Member)">
            <summary>Loop 2700: Member Reporting Categories.  Repeat >1.  Guide page 24.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2700_LX(OpenDentBusiness.Hx834_MemberReportingCategory)">
            <summary>LX: Member Reporting Categories.  Situational.  Repeat 1.  Guide page 179.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2750(OpenDentBusiness.Hx834_MemberReportingCategory)">
            <summary>Loop 2750: Reporting Category.  Repeat 1.  Guide page 24.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2750_N1(OpenDentBusiness.Hx834_ReportingCategory)">
            <summary>N1: Reporting Category.  Situational.  Repeat 1.  Guide page 180.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2750_REF(OpenDentBusiness.Hx834_ReportingCategory)">
            <summary>REF: Reporting Category Reference.  Situational.  Repeat 1.  Guide page 181.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2750_DTP(OpenDentBusiness.Hx834_ReportingCategory)">
            <summary>DTP: Reporting Category Date.  Situational.  Repeat 1.  Guide page 183.</summary>
        </member>
        <member name="M:OpenDentBusiness.X834.ReadLoop2000_LE(OpenDentBusiness.Hx834_Member)">
            <summary>LE: Additional Reporting Categories Loop Termination.  Situational.  Repeat 1.  Guide page 185.</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx834_Broker">
            <summary>Loop 1000C</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Broker.Name">
            <summary>Loop 1000C N1</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Broker.TpaBrokerAccountInformation">
            <summary>Loop 1100C</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx834_Cob">
            <summary>Loop 2320</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Cob.CoordinationOfBenefits">
            <summary>Loop 2320 COB</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Cob.ListAdditionalCobIdentifiers">
            <summary>Loop 2320 REF.  Repeat 4.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Cob.ListCobEligibilityDates">
            <summary>Loop 2320 DTP.  Repeat 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Cob.ListCobRelatedEntities">
            <summary>Loop 2330.  Repeat 3.</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx834_CobRelatedEntity">
            <summary>Loop 2330</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_CobRelatedEntity.CobRelatedEntity">
            <summary>Loop 2330 NM1</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_CobRelatedEntity.CobRelatedEntityAddress">
            <summary>Loop 2330 N3</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_CobRelatedEntity.CobOtherInsurance">
            <summary>Loop 2330 N4</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_CobRelatedEntity.AdministrativeCommunicationsContact">
            <summary>Loop 2330 PER</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx834_DisabilityInformation">
            <summary>Loop 2200</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_DisabilityInformation.DisabilityInformation">
            <summary>Loop 2200 DSB</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_DisabilityInformation.ListDisabilityEligibilityDates">
            <summary>Loop 2200 DTP.  Repeat 2.</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx834_Employer">
            <summary>Loop 2100D</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Employer.MemberEmployer">
            <summary>Loop 2100D NM1</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Employer.MemberEmployerCommunicationsNumbers">
            <summary>Loop 2100D PER</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Employer.MemberEmployerStreetAddress">
            <summary>Loop 2100D N3</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Employer.MemberEmployerCityStateZipCode">
            <summary>Loop 2100D N4</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx834_HealthCoverage">
            <summary>Loop 2300</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_HealthCoverage.Member">
            <summary>A reference to the member who owns this health coverage.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_HealthCoverage.HealthCoverage">
            <summary>Loop 2300 HD</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_HealthCoverage.ListHealthCoverageDates">
            <summary>Loop 2300 DTP.  Repeat 6.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_HealthCoverage.ListHealthCoveragePolicies">
            <summary>Loop 2300 AMT.  Repeat 9.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_HealthCoverage.ListHealthCoveragePolicyNumbers">
            <summary>Loop 2300 REF_1.  Repeat 14.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_HealthCoverage.PriorCoverageMonths">
            <summary>Loop 2300 REF_2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_HealthCoverage.ListIdentificationCards">
            <summary>Loop2300 IDC.  Repeat 3.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_HealthCoverage.ListProviderInformation">
            <summary>Loop 2310.  Repeat 30.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_HealthCoverage.ListCoordinationOfBeneifts">
            <summary>Loop 2320.  Repeat 5.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_HealthCoverage.DateEffective">
            <summary>The date in which insurance coverage begins.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_HealthCoverage.DateTerm">
            <summary>The date in which insurance coverage ends.</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx834_Member">
            <summary>Loop 2000</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.Tran">
            <summary>A reference to the transaction who owns this member.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.MemberLevelDetail">
            <summary>Loop 2000 INS</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.SubscriberIdentifier">
            <summary>Loop 2000 REF_1</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.MemberPolicyNumber">
            <summary>Loop 2000 REF_2</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.ListMemberSupplementalIdentifiers">
            <summary>Loop 2000 REF_3 (repeat 13)</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.ListMemberLevelDates">
            <summary>Loop 2000 DTP (repeat 24)</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.MemberName">
            <summary>Loop 2100A NM1</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.MemberCommunicationsNumbers">
            <summary>Loop 2100A PER.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.MemberResidenceStreetAddress">
            <summary>Loop 2100A N3</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.MemberCityStateZipCode">
            <summary>Loop 2100A N4</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.MemberDemographics">
            <summary>Loop 2100A DMG</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.ListEmploymentClass">
            <summary>Loop 2100A EC</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.MemberIncome">
            <summary>Loop 2100A ICM</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.ListMemberPolicyAmounts">
            <summary>Loop 2100A AMT</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.MemberHealthInformation">
            <summary>Loop 2100A HLH</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.ListMemberLanguages">
            <summary>Loop 2100A LUI</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.IncorrectMemberName">
            <summary>Loop 2100B NM1</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.IncorrectMemberDemographics">
            <summary>Loop 2100B DMG</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.MemberMailingAddress">
            <summary>Loop 2100C NM1</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.MemberMailStreetAddress">
            <summary>Loop 2100C N3</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.MemberMailCityStateZipCode">
            <summary>Loop 2100C N4</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.ListMemberEmployers">
            <summary>Loop 2100D</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.ListMemberSchools">
            <summary>Loop 2100E</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.CustodialParent">
            <summary>Loop 2100F NM1</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.CustodialParentCommunicationsNumbers">
            <summary>Loop 2100F PER</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.CustodialParentStreetAddress">
            <summary>Loop 2100F N3</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.CustodialParentCityStateZipCode">
            <summary>Loop 2100F N4</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.ListResponsiblePerson">
            <summary>Loop 2100G</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.DropOffLocation">
            <summary>Loop 2100H NM1</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.DropOffLocationStreetAddress">
            <summary>Loop 2100H N3</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.DropOffLocationCityStateZipCode">
            <summary>Loop 2100H N4</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.ListDisabilityInformation">
            <summary>Loop 2200</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.ListHealthCoverage">
            <summary>Loop 2300</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.AdditionalReportingCategories">
            <summary>Loop 2000 LS</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.ListMemberReportingCategories">
            <summary>Loop 2700.  Repeat >1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.AdditionalReportingCategoriesLoopTermination">
            <summary>Loop 2000 LE</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.Pat">
            <summary>The patient when converted to an OD object.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.ListPatRaces">
            <summary>List of patient races.  Update db with these races when the patient is being updated.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.PlanRelat">
            <summary>Reltaionship to subscriber.  Specified at member level in format.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.InsFiling">
            <summary>Insurance filing code.  Specified at member level in format.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.IsReleaseInfo">
            <summary>Flag indicating if patient desires to release medical information.  Corresponds to inssub.ReleaseInfo.
            Specified at member level in format.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.SubscriberId">
            <summary>Subscriber ID for ins plan.  Specified at member level in format.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Member.GroupNum">
            <summary>The insurance plan group number.  Specified at member level in format.</summary>
        </member>
        <member name="M:OpenDentBusiness.Hx834_Member.GetPatMaintTypeDescript">
            <summary>Converts the code in MemberLevelDetail.MaintenanceTypeCode to a human readable string.</summary>
        </member>
        <member name="M:OpenDentBusiness.Hx834_Member.MergePatientIntoDbPatient(OpenDentBusiness.Patient)">
            <summary>Copies the data from applicable member fields into the given patDb and updates patDb in the database.</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx834_MemberReportingCategory">
            <summary>Loop 2700</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_MemberReportingCategory.MemberReportingCategories">
            <summary>Loop 2700 LX</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_MemberReportingCategory.ReportingCategory">
            <summary>Loop 2750.  Repeat 1.</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx834_Provider">
            <summary>Loop 2310</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Provider.ProviderInformation">
            <summary>Loop 2310 LX</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Provider.ProviderName">
            <summary>Loop 2310 NM1</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Provider.ListProviderAddresses">
            <summary>Loop 2310 N3.  Repeat 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Provider.ProviderCityStateZipCode">
            <summary>Loop 2310 N4</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Provider.ListProviderCommunicationsNumbers">
            <summary>Loop 2310 PER.  Repeat 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Provider.ProviderChangeReason">
            <summary>Loop 2310 PLA</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx834_ReportingCategory">
            <summary>Loop 2750</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_ReportingCategory.ReportingCategory">
            <summary>Loop 2750 N1</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_ReportingCategory.ReportingCategoryReference">
            <summary>Loop 2750 REF</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_ReportingCategory.ReportingCategoryDate">
            <summary>Loop 2750 DTP</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx834_ResponsiblePerson">
            <summary>Loop 2100G</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_ResponsiblePerson.ResponsiblePerson">
            <summary>Loop 2100G NM1</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_ResponsiblePerson.ResponsiblePersonCommunicationsNumbers">
            <summary>Loop 2100G PER</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_ResponsiblePerson.ResponsiblePersonStreetAddress">
            <summary>Loop 2100G N3</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_ResponsiblePerson.ResponsiblePersonCityStateZipCode">
            <summary>Loop 2100G N4</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx834_School">
            <summary>Loop 2100E</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_School.MemberSchool">
            <summary>Loop 2100E NM1</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_School.MemberSchoolCommunicationsNumbers">
            <summary>Loop 2100E PER</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_School.MemberSchoolStreetAddress">
            <summary>Loop 2100E N3</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_School.MemberSchoolCityStateZipCode">
            <summary>Loop 2100E N4</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx834_Tran">
            <summary>Loop ST</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Tran.BeginningSegment">
            <summary>Loop ST BGN</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Tran.TransactionSetPolicyNumber">
            <summary>Loop ST REF</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Tran.ListFileEffectiveDates">
            <summary>Loop ST DTP.  Repeat >1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Tran.ListTransactionSetControlTotals">
            <summary>Loop ST QTY</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Tran.SponsorName">
            <summary>Loop 1000A N1</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Tran.Payer">
            <summary>Loop 1000B N1</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Tran.ListBrokers">
            <summary>Loop 1000C N1 and Loop 1100C ACT.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx834_Tran.ListMembers">
            <summary>Loop 2000</summary>
        </member>
        <member name="T:OpenDentBusiness.X835">
            <summary>X12 835 Health Care Claim Payment/Advice. This transaction type is a response to an 837 claim submission. The 835 will always come after a 277 is received and a 277 will always come after a 999. Neither the 277 nor the 999 are required, so it is possible that an 835 will be received directly after the 837. The 835 is not required either, so it is possible that none of the 997, 999, 277 or 835 reports will be returned from the carrier.</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._tranSetId">
            <summary>ST02 Empty string if this instance corresponds to the first transaction (EOB) within the 835.  Otherwise, a specific Transaction Set Identifer for a particular transaction (EOB) within the 835.</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._listSegments">
            <summary>All segments within the 835 report.</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._listProvAdjustments">
            <summary>The list of all provider level adjustments (one level above the claim level) within this 835.</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._listClaimsPaid">
            <summary>The list of all claim EOBs within this 835.</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._transactionHandlingDescript">
            <summary>BPR01 converted into a human readable form.</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._insPaid">
            <summary>BPR02 converted to decimal.</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._isCredit">
            <summary>BPR03 converted to bool.</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._paymentMethodCode">
            <summary>BPR04 Payment Method Code.  Required.</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._payMethodDescript">
            <summary>BPR04 converted into a human readable form.</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._accountNumReceiving">
            <summary>BPR15 As many as 4 trailing digits of the account the payment was deposited into (only if payment was made electronically).  If not present, will be blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._dateEffective">
            <summary>BPR16 The date of EFT of the date the check was printed.  If not present, will be set to 01/01/0001.</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._transRefNum">
            <summary>TRN02 Even through TRN02 is called the transaction reference number, it can include other characters besides digits.</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._payerName">
            <summary>N1*PR N102</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._payerId">
            <summary>N1*PR N104</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._payerAddress">
            <summary>N3*PR N301</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._payerCity">
            <summary>N4*PR N401</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._payerState">
            <summary>N4*PR N402</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._payerZip">
            <summary>N4*PR N403</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._payerContactInfo">
            <summary>Represents all the data from the entire 1000A PER segment.</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._payeeName">
            <summary>N1*PE N102 loop 1000B.</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._payeeIdType">
            <summary>N1*PE N103 loop 1000B.</summary>
        </member>
        <member name="F:OpenDentBusiness.X835._payeeId">
            <summary>N1*PE N104 loop 1000B.  Usually the NPI number.</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.ListProvAdjustments">
            <summary>The list of all provider level adjustments (one level above the claim level) within this 835.</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.ListClaimsPaid">
            <summary>The list of all claim EOBs within this 835.</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.TransactionHandlingDescript">
            <summary>BPR01 converted into a human readable form.</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.InsPaid">
            <summary>BPR02 converted to decimal.</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.IsCredit">
            <summary>BPR03 converted to bool.</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.PayMethodDescript">
            <summary>BPR04 converted into a human readable form.</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.AccountNumReceiving">
            <summary>BPR15 As many as 4 trailing digits of the account the payment was deposited into (only if payment was made electronically).</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.DateEffective">
            <summary>BPR16 The date of EFT or the date the check was printed.  If not present, will be set to 01/01/0001.</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.TransRefNum">
            <summary>TRN02 Even through TRN02 is called the transaction reference number, it can include other characters besides digits.</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.PayerName">
            <summary>N1*PR N104</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.PayerId">
            <summary>N1*PR N104</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.PayerAddress">
            <summary>N3*PR N301</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.PayerCity">
            <summary>N4*PR N401</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.PayerState">
            <summary>N4*PR N402</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.PayerZip">
            <summary>N4*PR N403</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.PayerContactInfo">
            <summary>Represents all the data from the entire 1000A PER segment.</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.PayeeName">
            <summary>N1*PE N102 loop 1000B.</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.PayeeIdType">
            <summary>N1*PE N103 loop 1000B.</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.PayeeId">
            <summary>N1*PE N104 loop 1000B.  Usually the NPI number.</summary>
        </member>
        <member name="P:OpenDentBusiness.X835.DateReceived">
            <summary>If the 835 was paid electronically (EFT), then will return the effective date.  Otherwise, for physical checks, returns today's date.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.IsDentical(OpenDentBusiness.X12object)">
            <summary>Returns true if the required Application Sender's Code within the GS - Functional Group Header is "DENTICAL".
            Returns false if there is no FunctGroups or the sender's code is not "DENTICAL".</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.#ctor(System.String,System.String)">
            <summary>See guide page 62 for format outline.  Specify a specific Transaction Set Identifier (ST02) for a particular EOB within the 835.
            Or set tranSetId to empty string to load the first EOB in the 835.  This class is only capable of loading a single transaction (EOB).</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.ProcessAMT(System.Int32)">
            <summary>AMT segments are found both at the claim and procedure levels.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.ProcessBPR(System.Int32)">
            <summary>BPR: Financial Information.  Required.  Repeat 1.  Guide page 69.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.ProcessCAS(System.Int32)">
            <summary>Converts a CAS segment into a list of up to 6 adjustments.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.ProcessCLP(System.Int32,System.String)">
            <summary>2100 CLP: Claim Payment Information.  Required.  Repeat 1.  Guide page 123.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.ProcessLQ(System.Int32)">
            <summary>The LQ segment contains remark codes that must be converted into human readable text for it to be usable.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.ProcessMIA(System.Int32)">
            <summary>The MIA segment is for Medicare inpatient adjudication information.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.ProcessMOA(System.Int32)">
            <summary>The MOA segment is for Medicare outpatient adjudication information.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.ProcessN1_PR(System.Int32)">
            <summary>1000A N1*PR: Payer Identification.  Required.  Repeat 1.  Guide page 87.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.ProcessN1_PE(System.Int32)">
            <summary>1000B N1*PE: Payee identification.  Required.  Repeat 1.  Guide page 102.  We include this information because it could be helpful for those customers who are using clinics.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.ProcessN3_PR(System.Int32)">
            <summary>1000A N3: Payer Address.  Required.  Repeat 1.  Guide page 89.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.ProcessN4_PR(System.Int32)">
            <summary>1000A N4: Payer City, State, ZIP Code.  Required.  Repeat 1.  Guide page 90.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.ProcessNM1_Person(System.Int32)">
            <summary>Converts an NM1 segment for a person into a name object including the full name and identifier.
            All fields are optional, thus this function returns what is available.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.ProcessPER_BL(System.Int32)">
            <summary>Gets the contact information from segment PER*BL appended into a single string.
            Phone/email in PER04 or the contact phone/email in PER06 or both.
            If neither PER04 nor PER06 are present, then returns empty string.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.ProcessPLB(System.Int32)">
            <summary>PLB: Provider Admustment.  Situational.  Repeat >1.  Guide page 217.  Each PLB segment can return up to 6 adjustments.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.ProcessTRN(System.Int32)">
            <summary>TRN: Reassociation Trace Number.  Required.  Repeat 1.  Guide page 77.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.GetDescriptForProvAdjCode(System.String)">
            <summary>Used for the reason codes in the PLB segment.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.GetDescriptForTransactionHandlingCode(System.String)">
            <summary>Gets the description for the transaction handling code in Table 1 (Header) BPR01. Required.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.GetDescriptFrom139(System.String)">
            <summary>Code Source 139. Claim Adjustment Reason Codes.  http://www.wpc-edi.com/reference/codelists/healthcare/claim-adjustment-reason-codes/ .
            Used for claim and procedure reason codes.</summary>
        </member>
        <member name="M:OpenDentBusiness.X835.GetDescriptFrom411(System.String)">
            <summary>Code Source 411.  Remittance Advice Remark Codes.  https://www.wpc-edi.com/reference/codelists/healthcare/remittance-advice-remark-codes/ </summary>
        </member>
        <member name="T:OpenDentBusiness.Hx835_ProvAdj">
            <summary>Provider level adjustment corresponding to a PLB segment.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_ProvAdj.Npi">
            <summary>PLB01</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_ProvAdj.DateFiscalPeriod">
            <summary>PLB02</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_ProvAdj.ReasonCodeDescript">
            <summary>Description of the ReasonCode in human readable terms</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_ProvAdj.ReasonCode">
            <summary>PLB03-1 or PLB05-1 or PLB07-1 or PLB09-1 or PLB11-1 or PLB13-1</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_ProvAdj.RefIdentification">
            <summary>PLB03-2 or PLB05-2 or PLB07-2 or PLB09-2 or PLB11-2 or PLB13-2</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_ProvAdj.AdjAmt">
            <summary>PLB04</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx835_Claim">
            <summary>Information about a single EOB.  There can be many EOBs within a single 835.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.SegmentCount">
            <summary>The number of X12 segments that this claim and all data within it span.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.Npi">
            <summary>TS301.  Situational.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.ClaimTrackingNumber">
            <summary>CLP01 in loop 2100.  Referred to in this format as a Patient Control Number.
            The claim tracking numbers correspond to CLM01 exactly as submitted in the 837.
            We refer to CLM01 as the claim identifier on our end. We allow alphanumeric in our claim identifiers, so we must store as a string.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.PayerControlNumber">
            <summary>CLP07 The claim control number used to identify the claim in the insurance company's database.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.StatusCodeDescript">
            <summary>CLP02 A human readable copy of the claim status code.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.ClaimFee">
            <summary>CLP03 The total amount charged by the dentist for the claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.InsPaid">
            <summary>CLP04 The total amount insurance paid.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.PatientRespAmt">
            <summary>CLP05 A portion of the ChargeAmtTotal which the patient is responsible for.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.PatientDeductAmt">
            <summary>Patient deductible total for this claim.  This is an amount calculated based on the requirements in the standard.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.PatientName">
            <summary>NM1*QC of loop 2100.  Required for Dental and Medical.  Optional for Pharmacy.  For our purposes (Dental and Medical), this data will always be provided.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.SubscriberName">
            <summary>NM1*IL of loop 2100.  Required for Dental and Medical.  Optional for Pharmacy.  For our purposes (Dental and Medical), this data will always be provided.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.DateServiceStart">
            <summary>DTM*232 of loop 2100.  Situational, but if not present, then service lines will include service dates.  Service line dates override this date when both are present.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.DateServiceEnd">
            <summary>DTM*233 of loop 2100.  Situational, but if not present, then service lines will include service dates.  Service line dates override this date when both are present.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.DatePayerReceived">
            <summary>DTM*050 of loop 2100.  Situational.  Will be set to 0001/01/01 if not present for this claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.ListClaimAdjustments">
            <summary>CAS Adjustments made by the insurance company at the claim level.  These adjustments help explain part of the amount difference between the claim fee and the amount paid.
            There are also adjustments at the procedure level and the patient portion to account for when balancing.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.ListAdjudicationInfo">
            <summary>MIA and MOA segments.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.ListSupplementalInfo">
            <summary>AMT segments.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.ListProcs">
            <summary>SVC segments.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.ClaimAdjustmentTotal">
            <summary>The sum of all adjustment amounts in ListClaimAdjustments.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.AllowedAmt">
            <summary>AllowedAmt = (Claim InsPaid)+(Claim PatientRespAmt)</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.IsSplitClaim">
            <summary>True if remark code MA15 is used in either segment MIA or MOA (if present).
            Claim splits are intended to expedite payment when one or two procedures on the original claim are pending for an extended period of time.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Claim.DateReceived">
            <summary>Does not correspond to a particular segment in the 835, internally created based on 835 payment method and date effective.</summary>
        </member>
        <member name="P:OpenDentBusiness.Hx835_Claim.ClaimNum">
            <summary>Attempts to get the original ClaimNum corresponding to claim from the 835 in the database, or from cache.  Returns 0 if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Hx835_Claim.GetClaimFromDb">
            <summary>Attempts to get the original claim from the database.  Returns null if not found.</summary>
        </member>
        <member name="M:OpenDentBusiness.Hx835_Claim.GetPaymentsForClaimProcs(System.Collections.Generic.List{OpenDentBusiness.ClaimProc})">
            <summary>There could be multiple matches for a claimproc if the procedure was split or unbundled.
            For each claimproc in listClaimProcs, a list of Hx835_Procs will be returned.
            If there are no matches for a claimProc, then the list corresponding to that claimProc will be an empty list (not null).</summary>
        </member>
        <member name="M:OpenDentBusiness.Hx835_Claim.GetRemarks">
            <summary>Concats all adjustment descriptions from ListClaimAdjustments into a single string, separated by newlines.</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx835_Proc">
            <summary>Information about a single procedure on an EOB.  There can be many of these for each Hx835_Claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Proc.SegmentCount">
            <summary>The number of X12 segments that this claim and all data within it span.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Proc.ProcCodeAdjudicated">
            <summary>SVC1-2.  The adjudicated procedure code.  Can be different than the submitted procedure code in the case of bundling/unbundling and procedure splits.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Proc.ProcFee">
            <summary>SVC2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Proc.InsPaid">
            <summary>SVC3.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Proc.ProcCodeBilled">
            <summary>SVC6-2.  The procedure code submitted with the claim.  Helps identify the procedure the adjudication is regarding in case of bundling/unbundling and procedure splits.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Proc.DateServiceStart">
            <summary>DTM*150 or DTM*472 of loop 2110.  Situational.  If not present, then the procedure service start date is the same as the claim service start date.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Proc.DateServiceEnd">
            <summary>DTM*151 of loop 2110.  Situational.  If not present, then the procedure service end date is the same as the claim service end date.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Proc.ProcNum">
            <summary>REF*6R from the 837, or zero for older claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Proc.PatRespTotal">
            <summary>The sum of all adjustment amounts in ListProcAdjustments where CAS01=PR, including but not limited to deductibles.
            PatRespTotal=PatientPortionAmt+DeductibleAmt</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Proc.PatientPortionAmt">
            <summary>The sum of all adjustment amounts in ListProcAdjustments where CAS01=PR and CAS02!=1.
            PatientPortionAmt=PatRespTotal-DeductibleAmt</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Proc.DeductibleAmt">
            <summary>The sum of all adjustment amounts in ListProcAdjustments where CAS01=PR and CAS02=1.
            DeductibleAmt=PatRespTotal-PatientPortionAmt</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Proc.AllowedAmt">
            <summary>AllowedAmt = (InsPay)+(PatRespTotal)</summary>
        </member>
        <member name="M:OpenDentBusiness.Hx835_Proc.GetRemarks">
            <summary>Concats all remarks in ListRemarks into a single string.</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx835_Adj">
            <summary>Corresponds to a CAS segment.  Both the claim level and procedure level include CAS segments.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Adj.AdjCode">
            <summary>Will be one of these 4 values: CO=Contractual Obligations, PI=Payer Initiated Reduction, PR=Patient Responsibility, OA=Other Adjustment.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Adj.IsDeductible">
            <summary>True when CAS01 = PR and (CAS02 or CAS05 or CAS08 or CAS11 or CAS14 or CAS17) is 1.
            See code source 139 at http://www.wpc-edi.com/reference/codelists/healthcare/claim-adjustment-reason-codes/. 
            The most useful values in code source 139 are: 1=Deductible Amount, 2=Coinsurance Amount, 3=Co-payment Amount.</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx835_Info">
            <summary>The values loaded into this class come from multiple segments, including the MIA, MOA, and AMT segments.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Info.FieldValue">
            <summary>The user display value of FieldValueRaw.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Info.FieldValueRaw">
            <summary>For logic, not for display.</summary>
        </member>
        <member name="F:OpenDentBusiness.Hx835_Info.IsRemarkCode">
            <summary>True if is a claim payment remark code.</summary>
        </member>
        <member name="T:OpenDentBusiness.Hx835_Name">
            <summary>Corresponds to various NM1 segments.</summary>
        </member>
        <member name="T:OpenDentBusiness.X277">
            <summary>X12 277 Unsolicited Claim Status Notification. There is only one type of 277, but a 277 can be sent out unsolicited (without sending a request) or as a response to a 276 request.</summary>
        </member>
        <member name="F:OpenDentBusiness.X277.segNumInfoSourceNM101">
            <summary>NM1 of loop 2100A.</summary>
        </member>
        <member name="F:OpenDentBusiness.X277.segNumInfoReceiverNM101">
            <summary>NM1 of loop 2100B.</summary>
        </member>
        <member name="F:OpenDentBusiness.X277.segNumsBillingProviderNM1">
            <summary>NM1 of loop 2100C.</summary>
        </member>
        <member name="F:OpenDentBusiness.X277.segNumsPatientDetailNM1">
            <summary>NM1 of loop 2100D.</summary>
        </member>
        <member name="F:OpenDentBusiness.X277.segNumsClaimTrackingNumberTRN">
            <summary>TRN of loop 2200D.</summary>
        </member>
        <member name="M:OpenDentBusiness.X277.GetInformationSourceType">
            <summary>NM101 of loop 2100A.</summary>
        </member>
        <member name="M:OpenDentBusiness.X277.GetInformationSourceName">
            <summary>NM103 of loop 2100A.</summary>
        </member>
        <member name="M:OpenDentBusiness.X277.GetInformationSourceReceiptDate">
            <summary>DTP03 of loop 2200A.</summary>
        </member>
        <member name="M:OpenDentBusiness.X277.GetInformationSourceProcessDate">
            <summary>DTP03 of loop 2200A.</summary>
        </member>
        <member name="M:OpenDentBusiness.X277.GetSegNumLastSTC2200B">
            <summary>Last STC segment in loop 2200B. Returns -1 on error.</summary>
        </member>
        <member name="M:OpenDentBusiness.X277.GetQuantityAccepted">
            <summary>QTY02 of loop 2200B.</summary>
        </member>
        <member name="M:OpenDentBusiness.X277.GetQuantityRejected">
            <summary>QTY02 of loop 2200B.</summary>
        </member>
        <member name="M:OpenDentBusiness.X277.GetAmountAccepted">
            <summary>AMT02 of loop 2200B.</summary>
        </member>
        <member name="M:OpenDentBusiness.X277.GetAmountRejected">
            <summary>AMT02 of loop 2200B.</summary>
        </member>
        <member name="M:OpenDentBusiness.X277.GetClaimTrackingNumbers">
            <summary>TRN02 in loop 2200D. Do this first to get a list of all claim tracking numbers that are contained within this 277.  Then, for each claim tracking number, we can later retrieve the AckCode for that single claim. The claim tracking numbers correspond to CLM01 exactly as submitted in the 837. We refer to CLM01 as the claim identifier on our end. We allow more than just digits in our claim identifiers, so we must return a list of strings.</summary>
        </member>
        <member name="M:OpenDentBusiness.X277.GetClaimInfo(System.String)">
            <summary>Result will contain strings in the following order: 0 Patient Last Name (NM103), 1 Patient First Name (NM104), 2 Patient Middle Name (NM105), 
            3 Claim Status (STC03), 4 Payor's Claim Control Number (REF02), 5 Institutional Type of Bill (REF02), 6 Claim Date Service Start (DTP03), 
            7 Claim Date Service End (DTP03), 8 Reason (STC01-2), 9 Amount (STC04), 10 SubscriberId (NM109)</summary>
        </member>
        <member name="M:OpenDentBusiness.X277.GetStringForExternalSourceCode507(System.String)">
            <summary>Code source 507. Since we only send batches, we can only get status codes starting with "A" returned to us.  Returns empty string if no matches. 
            The codes are pulled from the Washington Publishing Company website (the makers of X12). http://www.wpc-edi.com/reference/codelists/healthcare/claim-status-category-codes. </summary>
        </member>
        <member name="M:OpenDentBusiness.X277.GetStringForExternalSourceCode508(System.String)">
            <summary>Convert the given source code to a string. Only 0 to 56 included so far. All codes listed at http://www.wpc-edi.com/reference/codelists/healthcare/claim-status-codes. </summary>
        </member>
        <member name="T:OpenDentBusiness.X999">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.X999.GetBatchNumber">
            <summary>In X12 lingo, the batchNumber is known as the functional group.</summary>
        </member>
        <member name="M:OpenDentBusiness.X999.GetTransNums">
            <summary>Do this first to get a list of all trans nums that are contained within this 999.  Then, for each trans num, we can later retrieve the AckCode for that single trans num.</summary>
        </member>
        <member name="M:OpenDentBusiness.X999.GetAckForTrans(System.Int32)">
            <summary>Use after GetTransNums.  Will return A=Accepted, R=Rejected, or "" if can't determine.</summary>
        </member>
        <member name="M:OpenDentBusiness.X999.GetBatchAckCode">
            <summary>Will return "" if unable to determine.  But would normally return A=Accepted or R=Rejected or P=Partially accepted if only some of the transactions were accepted.</summary>
        </member>
        <member name="M:OpenDentBusiness.X999.GetHumanReadable">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.X837_5010">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.X837_5010.s">
            <summary>Data element separator character. Almost always '*', the ASCII hexadecimal value of 2A. For Denti-Cal, ASCII hexadecimal value of 1D which is an unprintable character.</summary>
        </member>
        <member name="F:OpenDentBusiness.X837_5010.isa16">
            <summary>Component element separator character. Almost always ':', the ASCII hexadecimal value of 3A. For Denti-Cal, ASCII hexadecimal value of 22 which is '"'.</summary>
        </member>
        <member name="F:OpenDentBusiness.X837_5010.endSegment">
            <summary>Segment terminator character.  We also add the newline to this variable, although we plan to move that into EndSegment() eventually.  Almost always '~', the ASCII hexadecimal value of 7E. For Denti-Cal, ASCII hexadecimal value of 1C which is an unprintable character.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.IsApex(OpenDentBusiness.Clearinghouse)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.IsClaimConnect(OpenDentBusiness.Clearinghouse)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.IsColoradoMedicaid(OpenDentBusiness.Clearinghouse)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.IsDentiCal(OpenDentBusiness.Clearinghouse)">
            <summary>DentiCal is a carrier.  Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.IsEmdeonDental(OpenDentBusiness.Clearinghouse)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.IsEmdeonMedical(OpenDentBusiness.Clearinghouse)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.IsEMS(OpenDentBusiness.Clearinghouse)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.IsETACTICS(OpenDentBusiness.Clearinghouse)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.IsInmediata(OpenDentBusiness.Clearinghouse)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.IsLindsayTechnicalConsultants(OpenDentBusiness.Clearinghouse)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.IsOfficeAlly(OpenDentBusiness.Clearinghouse)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.IsEDS(OpenDentBusiness.Clearinghouse)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.IsPassportHealthMedicaid(OpenDentBusiness.Clearinghouse,OpenDentBusiness.Carrier)">
            <summary>Contact information for this carrier is: (800)578-0775, P.O. BOX 7114 London Kentucky 40742-7114.
            Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.IsTesia(OpenDentBusiness.Clearinghouse)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.IsWashingtonMedicaid(OpenDentBusiness.Clearinghouse,OpenDentBusiness.Carrier)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.Write1000A_NM1(System.IO.StreamWriter,OpenDentBusiness.Clearinghouse)">
            <summary>Sometimes writes the name information for Open Dental. Sometimes it writes practice info.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.Write1000A_PER(System.IO.StreamWriter,OpenDentBusiness.Clearinghouse)">
            <summary>Usually writes the contact information for Open Dental. But for inmediata and AOS clearinghouses, it writes practice contact info.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.Write2010AASiteIDforEmdeon(System.IO.StreamWriter,OpenDentBusiness.Provider,System.String)">
            <summary>Generates SiteID REF G5 for Emdeon only.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.WriteProv_REFG2orLU(System.IO.StreamWriter,OpenDentBusiness.Provider,System.String)">
            <summary>This is depedent only on the electronic payor id # rather than the clearinghouse. Used for billing prov and also for treating prov.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.WriteNM1_DN(System.IO.StreamWriter,System.Int64)">
            <summary>A referring provider.  The loop has different numbers depending on med/inst/dent.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.WriteNM1Provider(System.String,System.IO.StreamWriter,OpenDentBusiness.Provider)">
            <summary>A generic function that is reused because there are many identical provider NM1 segments within the X12 specification.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.WriteNM1Provider(System.String,System.IO.StreamWriter,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>A generic function that is reused because there are many identical provider NM1 segments within the X12 specification.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.WritePRV_PE(System.IO.StreamWriter,OpenDentBusiness.Provider)">
            <summary>Rendering provider specialty information. The loop has different numbers in med/dent. Not used in inst.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.EndSegment(System.IO.StreamWriter)">
            <summary>Writes the segment terminator and a newline char to the stream and then increments the segment count.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.GetCarrierElectID(OpenDentBusiness.Carrier,OpenDentBusiness.Clearinghouse)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.GetRelat(OpenDentBusiness.Relat)">
            <summary>01 Spouse, 18 Self, 19 Child, 20 Employee, 21 Unknown, 39 Organ Donor, 40 Cadaver Donor, 53 Life Partner, G8 Other Relationship.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.GetSpecialProgramCode(OpenDentBusiness.EnumClaimSpecialProgram)">
            <summary>Will return blank if no special code.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.GetFilingCode(OpenDentBusiness.InsPlan)">
            <summary>This used to be an enumeration.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.GetArea(OpenDentBusiness.Procedure,OpenDentBusiness.ProcedureCode)">
            <summary>Used in SV304 (dental only).</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.GetDrugUnitCode(OpenDentBusiness.EnumProcDrugUnit)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.GetOrderingProviderForProc(OpenDentBusiness.Claim,OpenDentBusiness.Carrier,OpenDentBusiness.Procedure,OpenDentBusiness.Provider)">
            <summary>The logic for getting the ordering provider is complex.
            This helper function simplifies getting the ordering provider so we can ensure the same logic for validation and eclaim output.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.Sout(System.String,System.Int32,System.Int32)">
            <summary>Converts any string to an acceptable format for X12. Converts to all caps and strips off all invalid characters. Optionally shortens the string to the specified length and/or makes sure the string is long enough by padding with spaces.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.Sout(System.String,System.Int32)">
            <summary>Converts any string to an acceptable format for X12. Converts to all caps and strips off all invalid characters. Optionally shortens the string to the specified length and/or makes sure the string is long enough by padding with spaces.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.Sout(System.String)">
            <summary>Converts any string to an acceptable format for X12. Converts to all caps and strips off all invalid characters. Optionally shortens the string to the specified length and/or makes sure the string is long enough by padding with spaces.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.Validate(OpenDentBusiness.Clearinghouse,OpenDentBusiness.ClaimSendQueueItem)">
            <summary>Returns a string describing all missing data on this claim.
            Claim will not be allowed to be sent electronically unless this string comes back empty.
            There is also an out parameter containing any warnings.  Warnings will not block sending.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.AttachmentsWereSent(System.Int64)">
            <summary>Loops through the 837 to see if attachments were sent.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_5010.AmountToStrNoLeading(System.Double)">
            <summary>Removes leading zeros in numbers such as 0.00 or 0.99, for Emdeon and maybe others.</summary>
        </member>
        <member name="T:OpenDentBusiness.EB271">
            <summary>One EB segment from a 271.  Helps to organize a 271 for presentation to the user.</summary>
        </member>
        <member name="F:OpenDentBusiness.EB271.Benefitt">
            <summary>Can be null if the segment can't be translated to an appropriate benefit.  Many fields of the Benefit won't be used.  Just ones needed for display.</summary>
        </member>
        <member name="F:OpenDentBusiness.EB271.EB04">
            <summary>Since element 4 is descriptive rather than useful for import, we will leave it like this</summary>
        </member>
        <member name="F:OpenDentBusiness.EB271.SupplementalSegments">
            <summary>Some EB segments have a few segments that follow them which should all be considered together as one "benefit".  Eg dates, addresses.</summary>
        </member>
        <member name="M:OpenDentBusiness.EB271.GetDescription(System.Boolean)">
            <summary>The most human-readable description possible.  This is only used in one place, the 270/271 window.</summary>
        </member>
        <member name="M:OpenDentBusiness.EB271.GetDescriptionForCodeCovered">
            <summary>Informational only</summary>
        </member>
        <member name="M:OpenDentBusiness.EB271.GetDescriptionForPercentCode">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.EB271.GetDescript(System.Int32)">
            <summary>The most human-readable description possible for a single element.</summary>
        </member>
        <member name="M:OpenDentBusiness.EB271.GetDescript(System.Int32,System.Boolean)">
            <summary>The most human-readable description possible for a single element.</summary>
        </member>
        <member name="M:OpenDentBusiness.EB271.EB01MatchesCode(OpenDentBusiness.EB01)">
            <summary>Search predicate returns true if code matches.</summary>
        </member>
        <member name="M:OpenDentBusiness.EB271.EB02MatchesCode(OpenDentBusiness.EB02)">
            <summary>Search predicate returns true if code matches.</summary>
        </member>
        <member name="M:OpenDentBusiness.EB271.EB03MatchesCode(OpenDentBusiness.EB03)">
            <summary>Search predicate returns true if code matches.</summary>
        </member>
        <member name="M:OpenDentBusiness.EB271.EB06MatchesCode(OpenDentBusiness.EB06)">
            <summary>Search predicate returns true if code matches.</summary>
        </member>
        <member name="M:OpenDentBusiness.EB271.EB09MatchesCode(OpenDentBusiness.EB09)">
            <summary>Search predicate returns true if code matches.</summary>
        </member>
        <member name="M:OpenDentBusiness.EB271.ToString">
            <summary>Gives us a raw string of the original EB segment as well as all supplemental segments.  It's somewhat reconstructed rather than strictly the original.</summary>
        </member>
        <member name="T:OpenDentBusiness.EB06">
            <summary>Time period qualifier</summary>
        </member>
        <member name="T:OpenDentBusiness.EB09">
            <summary>Quantity qualifier</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Generator.GetISA06(OpenDentBusiness.Clearinghouse)">
            <summary>If clearinghouseClin.SenderTIN is blank, then 810624427 will be used to indicate Open Dental.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Generator.GetGS02(OpenDentBusiness.Clearinghouse)">
            <summary>Sometimes SenderTIN, sometimes OD's TIN.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Generator.GetTaxonomy(OpenDentBusiness.Provider)">
            <summary>Returns the Provider Taxonomy code for the given specialty. Always 10 characters, validated.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Generator.Sout(System.String,System.Int32,System.Int32)">
            <summary>Converts any string to an acceptable format for X12. Converts to all caps and strips off all invalid characters. Optionally shortens the string to the specified length and/or makes sure the string is long enough by padding with spaces.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Validate.ISA(OpenDentBusiness.Clearinghouse,System.Text.StringBuilder)">
            <summary>StringBuilder does not get altered if no invalid data.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Validate.Carrier(OpenDentBusiness.Carrier,System.Text.StringBuilder)">
            <summary>StringBuilder does not get altered if no invalid data.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Validate.BillProv(OpenDentBusiness.Provider,System.Text.StringBuilder)">
            <summary>StringBuilder does not get altered if no invalid data.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Validate.Clinic(OpenDentBusiness.Clinic,System.Text.StringBuilder)">
            <summary>Clinic passed in must not be null.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Validate.Subscriber(OpenDentBusiness.Patient,System.Text.StringBuilder)">
            <summary>Just subscriber address for now. Other fields (ex subscriber id) are checked elsewhere. We might want to move all subscriber checks here some day.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Validate.Subscriber2(OpenDentBusiness.Patient,System.Text.StringBuilder)">
            <summary>Just subscriber address for now. Other fields (ex subscriber id) are checked elsewhere. We might want to move all subscriber checks here some day.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Validate.GetNonAN(System.String)">
            <summary>Returns a string containing all characters not in the Basic Character Set from the given input.  AN stands for alphanumeric.</summary>
        </member>
        <member name="T:OpenDentBusiness.X271">
            <summary>A 271 is the eligibility response to a 270.</summary>
        </member>
        <member name="M:OpenDentBusiness.X271.GetListEB(System.Boolean)">
            <summary>In realtime mode, X12 limits the request to one patient.  We will always use the subscriber.  So all EB segments are for the subscriber.</summary>
        </member>
        <member name="M:OpenDentBusiness.X271.GetListDtpSubscriber">
            <summary>Only the DTP segments that come before the EB segments.  X12 loop 2100C.</summary>
        </member>
        <member name="M:OpenDentBusiness.X271.GetProcessingError">
            <summary>If there was no processing error (2100A, 2100B, 2100C, 2110C AAA segment), then this will return empty string.</summary>
        </member>
        <member name="M:OpenDentBusiness.X271.GetRejectReason(System.String)">
            <summary>Some of these codes are only found in certain loops.</summary>
        </member>
        <member name="M:OpenDentBusiness.X271.ValidateSettings">
            <summary>Returns a non-empty string if there would be a display issue due to invalid settings.
            Use the result to block the display from the user when needed.</summary>
        </member>
        <member name="T:OpenDentBusiness.X270">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.X270.GenerateMessageText(OpenDentBusiness.Clearinghouse,OpenDentBusiness.Carrier,OpenDentBusiness.Provider,OpenDentBusiness.Clinic,OpenDentBusiness.InsPlan,OpenDentBusiness.Patient,OpenDentBusiness.InsSub)">
            <summary>In progress.  Probably needs a different name.  Info must be validated first.</summary>
        </member>
        <member name="M:OpenDentBusiness.X270.Sout(System.String,System.Int32,System.Int32)">
            <summary>Converts any string to an acceptable format for X12. Converts to all caps and strips off all invalid characters. Optionally shortens the string to the specified length and/or makes sure the string is long enough by padding with spaces.</summary>
        </member>
        <member name="M:OpenDentBusiness.X270.Sout(System.String,System.Int32)">
            <summary>Converts any string to an acceptable format for X12. Converts to all caps and strips off all invalid characters. Optionally shortens the string to the specified length and/or makes sure the string is long enough by padding with spaces.</summary>
        </member>
        <member name="M:OpenDentBusiness.X270.Sout(System.String)">
            <summary>Converts any string to an acceptable format for X12. Converts to all caps and strips off all invalid characters. Optionally shortens the string to the specified length and/or makes sure the string is long enough by padding with spaces.</summary>
        </member>
        <member name="M:OpenDentBusiness.X270.IsClaimConnect(OpenDentBusiness.Clearinghouse)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X270.IsDentiCalCarrier(OpenDentBusiness.Carrier)">
            <summary>Checks carrier ElectIDs to match to Denti-Cal's unique ElectID.</summary>
        </member>
        <member name="M:OpenDentBusiness.X270.IsDentiCalClearinghouse(OpenDentBusiness.Clearinghouse)">
            <summary>DentiCal is a carrier.  Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X270.IsEmdeonDental(OpenDentBusiness.Clearinghouse)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="T:OpenDentBusiness.X837_4010">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.X837_4010.IsApex(OpenDentBusiness.Clearinghouse)">
            <sumarry>Pass in either a clinic or HG-level clearinghouse.</sumarry>
        </member>
        <member name="M:OpenDentBusiness.X837_4010.IsTesia(OpenDentBusiness.Clearinghouse)">
            <sumarry>Pass in either a clinic or HG-level clearinghouse.</sumarry>
        </member>
        <member name="M:OpenDentBusiness.X837_4010.Write1000A_NM1(System.IO.StreamWriter,OpenDentBusiness.Clearinghouse)">
            <summary>Sometimes writes the name information for Open Dental. Sometimes it writes practice info.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_4010.Write1000A_PER(System.IO.StreamWriter,OpenDentBusiness.Clearinghouse)">
            <summary>Usually writes the contact information for Open Dental. But for inmediata and AOS clearinghouses, it writes practice contact info.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_4010.WriteProv_REF(System.IO.StreamWriter,OpenDentBusiness.Provider,System.String)">
            <summary>This is depedent only on the electronic payor id # rather than the clearinghouse.  Used for billing prov and also for treating prov. Returns the number of segments written</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_4010.GetCarrierElectID(OpenDentBusiness.Carrier,OpenDentBusiness.Clearinghouse)">
            <summary>Pass in either a clinic or HQ-level clearinghouse.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_4010.GetFilingCode(OpenDentBusiness.InsPlan)">
            <summary>This used to be an enumeration.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_4010.Sout(System.String,System.Int32,System.Int32)">
            <summary>Converts any string to an acceptable format for X12. Converts to all caps and strips off all invalid characters. Optionally shortens the string to the specified length and/or makes sure the string is long enough by padding with spaces.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_4010.Sout(System.String,System.Int32)">
            <summary>Converts any string to an acceptable format for X12. Converts to all caps and strips off all invalid characters. Optionally shortens the string to the specified length and/or makes sure the string is long enough by padding with spaces.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_4010.Sout(System.String)">
            <summary>Converts any string to an acceptable format for X12. Converts to all caps and strips off all invalid characters. Optionally shortens the string to the specified length and/or makes sure the string is long enough by padding with spaces.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_4010.Validate(OpenDentBusiness.Clearinghouse,OpenDentBusiness.ClaimSendQueueItem)">
            <summary>Returns a string describing all missing data on this claim.
            Claim will not be allowed to be sent electronically unless this string comes back empty.
            There is also an out parameter containing any warnings.  Warnings will not block sending.</summary>
        </member>
        <member name="M:OpenDentBusiness.X837_4010.AttachmentsWereSent(System.Int64)">
            <summary>Loops through the 837 to see if attachments were sent.</summary>
        </member>
        <member name="T:OpenDentBusiness.X997">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.X997.GetBatchNumber">
            <summary>In X12 lingo, the batchNumber is known as the functional group.</summary>
        </member>
        <member name="M:OpenDentBusiness.X997.GetTransNums">
            <summary>Do this first to get a list of all trans nums that are contained within this 997.  Then, for each trans num, we can later retrieve the AckCode for that single trans num.</summary>
        </member>
        <member name="M:OpenDentBusiness.X997.GetAckForTrans(System.Int32)">
            <summary>Use after GetTransNums.  Will return A=Accepted, R=Rejected, or "" if can't determine.</summary>
        </member>
        <member name="M:OpenDentBusiness.X997.GetBatchAckCode">
            <summary>Will return "" if unable to determine.  But would normally return A=Accepted or R=Rejected or P=Partially accepted if only some of the transactions were accepted.</summary>
        </member>
        <member name="M:OpenDentBusiness.X997.GetHumanReadable">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ODDataTableCollection">
            <summary></summary>
        </member>
        <member name="P:OpenDentBusiness.ODDataTableCollection.Item(System.String)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.PIn">
            <summary>"P" stands for Parameter.  Converts strings coming in from user input into the appropriate type.</summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.Bitmap(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.Bool(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.Byte(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.ByteArray(System.Object)">
            <summary>Some versions of MySQL return a GROUP_CONCAT as a string, and other versions return it as a byte array.  This method handles either way, making it work smoothly with different versions.</summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.Date(System.String)">
            <summary>Processes dates incoming from db that look like "4/29/2013", and dates from textboxes where users entered and which have usually been validated.</summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.DateT(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.Decimal(System.String)">
            <summary>If blank or invalid, returns 0. Otherwise, parses.</summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.Double(System.String)">
            <summary>If blank or invalid, returns 0. Otherwise, parses.</summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.Int(System.String,System.Boolean)">
            <summary>Set has exceptions to false to supress exceptions and return 0 if the input string is not an int.</summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.Float(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.Long(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.Short(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.Enum``1(System.String,System.Boolean)">
            <summary>Strongly types the value provided to the enumeration value of declared enum type (T).
            When isEnumAsString is false, value should be the integer value of the desired enum item.  E.g. T = ApptStatus, value = "5", retVal = ApptStatus.Broken
            When isEnumAsString is true, value must be the enum item name.  E.g. T = ProgramName, value = programCur.ProgName, retVal = ProgramName.Podium
            This will mainly get called to circumvent double casting.  E.g. ApptStatus stat=(ApptStatus)PIn(table["ApptStatus"].ToString());</summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.Enum``1(System.Int32)">
            <summary>Strongly types the integer provided to the enumeration value of the declaraed enum type (T).</summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.Sound(System.String,System.String)">
            <summary>Saves the string representation of a sound into a .wav file.  The timing of this is different than with the other "P" functions, and is only used by the export button in FormSigElementDefEdit</summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.String(System.String)">
            <summary>Currently does nothing.</summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.TSpan(System.String)">
            <summary>Timespans that might be invalid time of day.  Can be + or - and can be up to 800+ hours.  Stored in Oracle as varchar2.</summary>
        </member>
        <member name="M:OpenDentBusiness.PIn.Time(System.String)">
            <summary>Used for Timespans that are guaranteed to always be a valid time of day.  No negatives or hours over 24.  Stored in Oracle as datetime.</summary>
        </member>
        <member name="T:OpenDentBusiness.POut">
            <summary>Converts various datatypes into strings formatted correctly for MySQL. "P" was originally short for Parameter because this class was written specifically to replace parameters in the mysql queries. Using strings instead of parameters is much easier to debug. I would rather not ever depend on the mysql connector for this because the authors of the connector have been known to suddenly change its behavior.</summary>
        </member>
        <member name="M:OpenDentBusiness.POut.Bool(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.POut.Byte(System.Byte)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.POut.DateT(System.DateTime)">
            <summary>Always encapsulates the result, depending on the current database connection.</summary>
        </member>
        <member name="M:OpenDentBusiness.POut.DateT(System.DateTime,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.POut.Date(System.DateTime)">
            <summary>Converts a date to yyyy-MM-dd format which is the format required by MySQL. myDate is the date you want to convert. encapsulate is true for the first overload, making the result look like this: 'yyyy-MM-dd' for MySQL.</summary>
        </member>
        <member name="M:OpenDentBusiness.POut.TSpan(System.TimeSpan)">
            <summary>Timespans that might be invalid time of day.  Can be + or - and can be up to 800+ hours.  Stored in Oracle as varchar2.  Never encapsulates</summary>
        </member>
        <member name="M:OpenDentBusiness.POut.Time(System.TimeSpan)">
            <summary>Timespans that are guaranteed to always be a valid time of day.  No negatives or hours over 24.  Stored in Oracle as datetime.  Encapsulated by default.</summary>
        </member>
        <member name="M:OpenDentBusiness.POut.Time(System.TimeSpan,System.Boolean)">
            <summary>Timespans that are guaranteed to always be a valid time of day.  No negatives or hours over 24.  Stored in Oracle as datetime.  Encapsulated by default.</summary>
        </member>
        <member name="M:OpenDentBusiness.POut.Double(System.Double)">
            <summary>Rounds input up to max of 2 decimal places. EG: .0047 will return "0.00"; .0051 will return "0.01".</summary>
        </member>
        <member name="M:OpenDentBusiness.POut.Decimal(System.Decimal)">
            <summary>Rounds input up to max of 2 decimal places. EG: .0047 will return "0.00"; .0051 will return "0.01".</summary>
        </member>
        <member name="M:OpenDentBusiness.POut.Long(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.POut.Int(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.POut.Float(System.Single)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.POut.String(System.String)">
            <summary>Escapes all necessary characters.</summary>
        </member>
        <member name="M:OpenDentBusiness.POut.StringNote(System.String)">
            <summary>Should never be used outside of the crud.  Used for large columns (larger than varchar, i.e. text, mediumtext, longtext) where it is possible to enter too many consecutive new line characters for the windows control to draw.  This can cause a graphics memory error.  If there are more than 50 consecutive new line characters, this will replace them with a single new line.  This is called for TextIsClob column types that are sent as parameters.  This does not escape any characters like POut.String does because escaping characters is not required when using parameters.</summary>
        </member>
        <member name="M:OpenDentBusiness.POut.Bitmap(System.Drawing.Bitmap,System.Drawing.Imaging.ImageFormat)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.POut.Sound(System.String)">
            <summary>Converts the specified wav file into a string representation.  The timing of this is a little different than with the other "P" functions and is only used by the import button in FormSigElementDefEdit.  After that, the wav spends the rest of it's life as a string until "played" or exported.</summary>
        </member>
        <member name="M:OpenDentBusiness.POut.Base64(System.String)">
            <summary>The supplied string should already be in safe base64 format, and should not need any special escaping.  The purpose of this function is to enforce that the supplied string meets these requirements.  This is done quickly.</summary>
        </member>
        <member name="T:OpenDentBusiness.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.ApptBackTest">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.CannotOverridePrimaryKey">
            <summary>
              Looks up a localized string similar to The primary key could not be overriden, because either the object is not new and has been loaded from the database or the object does not contain an Identity key..
            </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.CannotSaveDeletedObject">
            <summary>
              Looks up a localized string similar to The object has been deleted, and can not be saved again to the database..
            </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.DataTypeNotSupportedByPIn">
            <summary>
              Looks up a localized string similar to The current data type is not supported by the PIn class..
            </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.DataTypeNotSupportedByPOut">
            <summary>
              Looks up a localized string similar to The current data type ({0}) is not supported by the POut class..
            </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.DtoNotSupportedException">
            <summary>
              Looks up a localized string similar to A DTO of type {0} is not supported..
            </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.NoFields">
            <summary>
              Looks up a localized string similar to The current object does not contain any data fields..
            </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.NotASinglePrimaryKey">
            <summary>
              Looks up a localized string similar to This object has a primary key that consists of multiple columns..
            </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.ObjectAlreadyDeleted">
            <summary>
              Looks up a localized string similar to The object has already been deleted, and cannot be deleted twice..
            </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.ObjectNotSaved">
            <summary>
              Looks up a localized string similar to The object does not exist in the database, and can therefore not be deleted..
            </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.Patient_Info">
            <summary>
              Looks up a localized resource of type System.Drawing.Bitmap.
            </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.PaymentPlan">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;SheetDef xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
              &lt;IsNew&gt;false&lt;/IsNew&gt;
              &lt;SheetDefNum&gt;22&lt;/SheetDefNum&gt;
              &lt;Description&gt;Payment Plan&lt;/Description&gt;
              &lt;SheetType&gt;PaymentPlan&lt;/SheetType&gt;
              &lt;FontSize&gt;9&lt;/FontSize&gt;
              &lt;FontName&gt;Arial&lt;/FontName&gt;
              &lt;Width&gt;850&lt;/Width&gt;
              &lt;Height&gt;1100&lt;/Height&gt;
              &lt;IsLandscape&gt;false&lt;/IsLandscape&gt;
              &lt;PageCount&gt;1&lt;/PageCount&gt;
              &lt;IsMultiPage&gt;false&lt;/IsMultiPage&gt;
              &lt;SheetFieldDefs&gt;
             [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.PrimaryKeyNotAnInteger">
            <summary>
              Looks up a localized string similar to The primary key is not of the type Integer..
            </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.RXMulti">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;SheetDef xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
              &lt;IsNew&gt;false&lt;/IsNew&gt;
              &lt;SheetDefNum&gt;13&lt;/SheetDefNum&gt;
              &lt;Description&gt;RxMulti I DONT KNOWS&lt;/Description&gt;
              &lt;SheetType&gt;PatientLetter&lt;/SheetType&gt;
              &lt;FontSize&gt;8&lt;/FontSize&gt;
              &lt;FontName&gt;Microsoft Sans Serif&lt;/FontName&gt;
              &lt;Width&gt;850&lt;/Width&gt;
              &lt;Height&gt;1100&lt;/Height&gt;
              &lt;IsLandscape&gt;true&lt;/IsLandscape&gt;
              &lt;PageCount&gt;2&lt;/PageCount&gt;
              &lt;IsMultiPage&gt;false&lt;/IsMultiPag [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.TooManyDataFieldAttributes">
            <summary>
              Looks up a localized string similar to An attribute of type &quot;DataFieldAttribute&quot; can only be specified once..
            </summary>
        </member>
        <member name="P:OpenDentBusiness.Properties.Resources.TreatmentPlan">
             <summary>
               Looks up a localized string similar to &lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;
            &lt;SheetDef xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;&gt;
              &lt;IsNew&gt;false&lt;/IsNew&gt;
              &lt;SheetDefNum&gt;13&lt;/SheetDefNum&gt;
              &lt;Description&gt;Treatment Plan&lt;/Description&gt;
              &lt;SheetType&gt;TreatmentPlan&lt;/SheetType&gt;
              &lt;FontSize&gt;9&lt;/FontSize&gt;
              &lt;FontName&gt;Arial&lt;/FontName&gt;
              &lt;Width&gt;850&lt;/Width&gt;
              &lt;Height&gt;1100&lt;/Height&gt;
              &lt;IsLandscape&gt;false&lt;/IsLandscape&gt;
              &lt;PageCount&gt;1&lt;/PageCount&gt;
              &lt;IsMultiPage&gt;false&lt;/IsMultiPage&gt;
              &lt;SheetFieldDef [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="F:OpenDentBusiness.RemotingClient._remotingRole">
            <summary>This dll will be in one of these three roles.  There can be a dll on the client and a dll on the server, both involved in the logic.  This keeps track of which one is which.</summary>
        </member>
        <member name="F:OpenDentBusiness.RemotingClient._serverUri">
            <summary>If ClientWeb, then this is the URL to the server.</summary>
        </member>
        <member name="F:OpenDentBusiness.RemotingClient.MidTierProxyAddress">
            <summary>If ClientWeb (middle tier user), proxy settings can be picked up from MiddleTierProxyConfig.xml.</summary>
        </member>
        <member name="F:OpenDentBusiness.RemotingClient.MidTierProxyUserName">
            <summary>If ClientWeb (middle tier user), proxy settings can be picked up from MiddleTierProxyConfig.xml.</summary>
        </member>
        <member name="F:OpenDentBusiness.RemotingClient.MidTierProxyPassword">
            <summary>If ClientWeb (middle tier user), proxy settings can be picked up from MiddleTierProxyConfig.xml.</summary>
        </member>
        <member name="F:OpenDentBusiness.RemotingClient._remotingRoleT">
            <summary>Thread static version of RemotingRole</summary>
        </member>
        <member name="F:OpenDentBusiness.RemotingClient._serverUriT">
            <summary>Thread static version of ServerURI</summary>
        </member>
        <member name="P:OpenDentBusiness.RemotingClient.RemotingRole">
            <summary>Returns either the thread specific RemotingRole or the globally set RemotingRole.</summary>
        </member>
        <member name="P:OpenDentBusiness.RemotingClient.ServerURI">
            <summary>Returns either the thread specific Server URI or the globally set Server URI.</summary>
        </member>
        <member name="M:OpenDentBusiness.RemotingClient.ProcessGetDS(OpenDentBusiness.DtoGetDS)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RemotingClient.ProcessGetLong(OpenDentBusiness.DtoGetLong)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RemotingClient.ProcessGetInt(OpenDentBusiness.DtoGetInt)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RemotingClient.ProcessGetDouble(OpenDentBusiness.DtoGetDouble)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RemotingClient.ProcessGetVoid(OpenDentBusiness.DtoGetVoid)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RemotingClient.ProcessGetObject``1(OpenDentBusiness.DtoGetObject)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RemotingClient.ProcessGetString(OpenDentBusiness.DtoGetString)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RemotingClient.ProcessGetBool(OpenDentBusiness.DtoGetBool)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.RemotingClient.ThrowExceptionForDto(OpenDentBusiness.DtoException)">
            <summary>Open Dental can require specific exceptions to be thrown.  This is a helper method that throws the correct exception type.
            Add this function directly into a throw statement, so that the calling code knows that the code path will not need to return a value.</summary>
        </member>
        <member name="M:OpenDentBusiness.Reports.GetTable(System.String)">
            <summary>Gets a table of data using low permissions.</summary>
        </member>
        <member name="T:OpenDentBusiness.SheetTypeEnum">
            <Summary>Different types of sheets that can be used.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.LabelPatient">
            <Summary>0-Requires SheetParameter for PatNum. Does not get saved to db.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.LabelCarrier">
            <Summary>1-Requires SheetParameter for CarrierNum. Does not get saved to db.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.LabelReferral">
            <Summary>2-Requires SheetParameter for ReferralNum. Does not get saved to db.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.ReferralSlip">
            <Summary>3-Requires SheetParameters for PatNum,ReferralNum.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.LabelAppointment">
            <Summary>4-Requires SheetParameter for AptNum. Does not get saved to db.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.Rx">
            <Summary>5-Requires SheetParameter for RxNum.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.Consent">
            <summary>6-Requires SheetParameter for PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.PatientLetter">
            <summary>7-Requires SheetParameter for PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.ReferralLetter">
            <summary>8-Requires SheetParameters for PatNum,ReferralNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.PatientForm">
            <Summary>9-Requires SheetParameter for PatNum.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.RoutingSlip">
            <Summary>10-Requires SheetParameter for AptNum.  Does not get saved to db.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.MedicalHistory">
            <Summary>11-Requires SheetParameter for PatNum.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.LabSlip">
            <Summary>12-Requires SheetParameter for PatNum, LabCaseNum.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.ExamSheet">
            <Summary>13-Requires SheetParameter for PatNum.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.DepositSlip">
            <summary>14-Requires SheetParameter for DepositNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.Statement">
            <summary>15-Requires SheetParameter for PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.MedLabResults">
            <summary>16-Requires SheetParameters for PatNum,MedLab,MedLabResult.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.TreatmentPlan">
            <summary>17-Requires SheetParameters for PatNum,TreatmentPlan.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.Screening">
            <summary>18-Requires SheetParameter for ScreenNum.  
            Optional SheetParameter for PatNum if screening is associated to a patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.PaymentPlan">
            <summary>19-Used for Payment Plans to Sheets.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetTypeEnum.RxMulti">
            <summary>20-Requires SheetParameters for ListRxSheet and ListRxNums.</summary>
        </member>
        <member name="T:OpenDentBusiness.GrowthBehaviorEnum">
            <summary>For sheetFields</summary>
        </member>
        <member name="F:OpenDentBusiness.GrowthBehaviorEnum.None">
            <Summary>Not allowed to grow.  Max size would be Height and Width.</Summary>
        </member>
        <member name="F:OpenDentBusiness.GrowthBehaviorEnum.DownLocal">
            <Summary>Can grow down if needed, and will push nearby objects out of the way so that there is no overlap.</Summary>
        </member>
        <member name="F:OpenDentBusiness.GrowthBehaviorEnum.DownGlobal">
            <Summary>Can grow down, and will push down all objects on the sheet that are below it.  Mostly used when drawing grids.</Summary>
        </member>
        <member name="T:OpenDentBusiness.SheetFieldType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldType.OutputText">
            <Summary>0-Pulled from the database to be printed on the sheet.  Or also possibly just generated at runtime even though not pulled from the database.   User still allowed to change the output text as they are filling out the sheet so that it can different from what was initially generated.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldType.InputField">
            <Summary>1-A blank box that the user is supposed to fill in.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldType.StaticText">
            <Summary>2-This is text that is defined as part of the sheet and will never change from sheet to sheet.  </Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldType.Parameter">
            <summary>3-Stores a parameter other than the PatNum.  Not meant to be seen on the sheet.  Only used for SheetField, not SheetFieldDef.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldType.Image">
            <Summary>4-Any image of any size, typically a background image for a form.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldType.Drawing">
            <summary>5-One sequence of dots that makes a line.  Continuous without any breaks.  Each time the pen is picked up, it creates a new field row in the database.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldType.Line">
            <Summary>6-A simple line drawn from x,y to x+width,y+height.  So for these types, we must allow width and height to be negative or zero.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldType.Rectangle">
            <Summary>7-A simple rectangle outline.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldType.CheckBox">
            <summary>8-A clickable area on the screen.  It's a form of input, so treated similarly to an InputField.  The X will go from corner to corner of the rectangle specified.  It can also behave like a radio button</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldType.SigBox">
            <summary>9-A signature box, either Topaz pad or directly on the screen with stylus/mouse.  The signature is encrypted based an a hash of all other field values in the entire sheet, excluding other SigBoxes.  The order is critical.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldType.PatImage">
            <Summary>10-An image specific to one patient.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldType.Special">
            <Summary>11-Special: Currently only used for Toothgrid</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldType.Grid">
            <summary>12-Grid: Placable grids similar to ODGrids. Used primarily in statements.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldType.ComboBox">
            <summary>13-ComboBox: Placeable combo box for selecting filled options.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldType.ScreenChart">
            <summary>14-ScreenChart: A tooth chart that is desiged for screenings.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetInternalType.MedLabResults">
            <summary>Users are NEVER allowed to use this sheet type. It is for internal use only. It should be hidden in all lists and unselectable.</summary>
        </member>
        <member name="T:OpenDentBusiness.FeeSched">
            <summary>Fee schedule names used to be in the definition table, but now they have their own table.  We are about to have many many more fee schedules as we start automating allowed fees.</summary>
        </member>
        <member name="F:OpenDentBusiness.FeeSched.FeeSchedNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.FeeSched.Description">
            <summary>The name of the fee schedule.</summary>
        </member>
        <member name="F:OpenDentBusiness.FeeSched.FeeSchedType">
            <summary>Enum:FeeScheduleType </summary>
        </member>
        <member name="F:OpenDentBusiness.FeeSched.ItemOrder">
            <summary>Unlike with the old definition table, this ItemOrder is not as critical in the caching of data.  The item order is only for fee schedules of the same type.</summary>
        </member>
        <member name="F:OpenDentBusiness.FeeSched.IsHidden">
            <summary>True if the fee schedule is hidden.  Can't delete fee schedules or change their type once created.</summary>
        </member>
        <member name="F:OpenDentBusiness.FeeSched.IsGlobal">
            <summary>True if the fee schedule is used globally and linked to the HQ. (Localization of the fees are not allowed)</summary>
        </member>
        <member name="F:OpenDentBusiness.FeeSched.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.FeeSched.SecDateEntry">
            <summary>Timestamp automatically generated and user not allowed to change.  The actual date of entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.FeeSched.SecDateTEdit">
            <summary>Automatically updated by MySQL every time a row is added or changed. Could be changed due to user editing, custom queries or program
            updates.  Not user editable with the UI.</summary>
        </member>
        <member name="T:OpenDentBusiness.FeeScheduleType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.FeeScheduleType.Normal">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.FeeScheduleType.CoPay">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.FeeScheduleType.OutNetwork">
            <summary>2, Formerly named "Allowed"</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7Msg">
            <summary>HL7 messages sent and received.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Msg.HL7MsgNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Msg.HL7Status">
            <summary>Enum:HL7MessageStatus Out/In are relative to Open Dental.  This is in contrast to the names of the old ecw folders, which were relative to the other program.  OutPending, OutSent, InReceived, InProcessed.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Msg.MsgText">
            <summary>The actual HL7 message in its entirity.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Msg.AptNum">
            <summary>FK to appointment.AptNum.  Many of the messages contain "Visit ID" which is equivalent to our AptNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Msg.DateTStamp">
            <summary>Used to determine which messages are old so that they can be cleaned up.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Msg.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7Msg.Note">
            <summary>Maximum size 2000 characters.</summary>
        </member>
        <member name="T:OpenDentBusiness.HL7MessageStatus">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.HL7MessageStatus.OutPending">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7MessageStatus.OutSent">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7MessageStatus.OutFailed">
            <summary>2-Tried to send, but there was a problem.  Will keep trying.</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7MessageStatus.InProcessed">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.HL7MessageStatus.InFailed">
            <summary>4</summary>
        </member>
        <member name="T:OpenDentBusiness.ScheduleOp">
            <summary>Links one schedule block to one operatory.  So for a schedule block to show, it must be linked to one or more operatories.</summary>
        </member>
        <member name="F:OpenDentBusiness.ScheduleOp.ScheduleOpNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ScheduleOp.ScheduleNum">
            <summary>FK to schedule.ScheduleNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ScheduleOp.OperatoryNum">
            <summary>FK to operatory.OperatoryNum.</summary>
        </member>
        <member name="T:OpenDentBusiness.PlannedAppt">
            <summary>Links one planned appointment to one patient.  Allows multiple planned appointments per patient.  Also see the PlannedIsDone field. A planned appointment is an appointment that will show in the Chart module and in the Planned appointment tracker. It will never show in the Appointments module. In other words, it is the suggested next appoinment rather than an appointment that has already been scheduled.</summary>
        </member>
        <member name="F:OpenDentBusiness.PlannedAppt.PlannedApptNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PlannedAppt.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PlannedAppt.AptNum">
            <summary>FK to appointment.AptNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PlannedAppt.ItemOrder">
            <summary>One-indexed order of item in group of planned appts.</summary>
        </member>
        <member name="T:OpenDentBusiness.RecallTrigger">
            <summary>Links one procedurecode to one recalltype.  The presence of this trigger is used when determining DatePrevious in the recall table.</summary>
        </member>
        <member name="F:OpenDentBusiness.RecallTrigger.RecallTriggerNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.RecallTrigger.RecallTypeNum">
            <summary>FK to recalltype.RecallTypeNum</summary>
        </member>
        <member name="F:OpenDentBusiness.RecallTrigger.CodeNum">
            <summary>FK to procedurecode.CodeNum</summary>
        </member>
        <member name="T:OpenDentBusiness.RecallType">
            <summary>All recalls are based on these recall types.  Recall triggers are in their own table.</summary>
        </member>
        <member name="F:OpenDentBusiness.RecallType.RecallTypeNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.RecallType.Description">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.RecallType.DefaultInterval">
            <summary>The interval between recalls.  The Interval struct combines years, months, weeks, and days into a single integer value.</summary>
        </member>
        <member name="F:OpenDentBusiness.RecallType.TimePattern">
            <summary>Stores the length of the appointment in /'s and X's.  Used when scheduling the appointment.
            Each / or X represents one unit in regards to the global 'Time Increments' appointment view setting.
            This means that recall appointment lengths change along with the 'Time Increments' preference.  /X/ could rep 15 mins, 30 mins, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.RecallType.Procedures">
            <summary>What procedures to put on the recall appointment.  Comma delimited set of ProcCodes.  (We may change this to CodeNums).</summary>
        </member>
        <member name="T:OpenDentBusiness.DeletedObject">
            <summary>When some objects are deleted, we sometimes need a way to track them for synching purposes.  Other objects already have fields for IsHidden or PatStatus which track deletions just fine.  Those types of objects will not use this table.</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObject.DeletedObjectNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObject.ObjectNum">
            <summary>Foreign key to a number of different tables, depending on which type it is.</summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObject.ObjectType">
            <summary>Enum:DeletedObjectType </summary>
        </member>
        <member name="F:OpenDentBusiness.DeletedObject.DateTStamp">
            <summary>Updated any time the row is altered in any way.</summary>
        </member>
        <member name="T:OpenDentBusiness.SheetDef">
            <summary>A definition (template) for a sheet.  Can be pulled from the database, or it can be internally defined.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetDef.SheetDefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetDef.Description">
            <summary>The description of this sheetdef.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetDef.SheetType">
            <summary>Enum:SheetTypeEnum</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetDef.FontSize">
            <summary>The default fontSize for the sheet.  The actual font must still be saved with each sheetField.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetDef.FontName">
            <summary>The default fontName for the sheet.  The actual font must still be saved with each sheetField.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetDef.Width">
            <summary>Width of each page in the sheet in pixels, 100 pixels per inch.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetDef.Height">
            <summary>Height of each page in the sheet in pixels, 100 pixels per inch.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetDef.IsLandscape">
            <summary>Set to true to print landscape.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetDef.PageCount">
            <summary>Amount of editable space. Actual size when filling sheet may be different.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetDef.IsMultiPage">
            <summary>If false, forces old single page behavior which ignores page breaks.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetDef.Parameters">
            <Summary>A collection of all parameters for this sheetdef.  There's usually only one parameter.  The first parameter will be a List long if it's a batch.  If a sheet has already been filled, saved to the database, and printed, then there is no longer any need for the parameters in order to fill the data.  So a retrieved sheet will have no parameters, signalling a skip in the fill phase.  There will still be parameters tucked away in the Field data in the database, but they won't become part of the sheet.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetDef.SheetFieldDefs">
            <Summary></Summary>
        </member>
        <member name="P:OpenDentBusiness.SheetDef.HeightPage">
            <summary>Vertical height per page taking into account the IsLandscape flag.</summary>
        </member>
        <member name="P:OpenDentBusiness.SheetDef.WidthPage">
            <summary>Horizontal width per page taking into account the IsLandscape flag.</summary>
        </member>
        <member name="P:OpenDentBusiness.SheetDef.HeightTotal">
            <summary>Takes into account IsLandscape and PageCount. Sets the size of the editable area, This does not represent printed height, as some controls may grow.</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetDef.GetFont">
            <Summary></Summary>
        </member>
        <member name="P:OpenDentBusiness.SheetDef.SheetFieldDefsXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="T:OpenDentBusiness.SheetFieldDef">
            <summary>One field on a sheetDef.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.SheetFieldDefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.SheetDefNum">
            <summary>FK to sheetdef.SheetDefNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.FieldType">
            <summary>Enum:SheetFieldType  OutputText, InputField, StaticText,Parameter(only used for SheetField, not SheetFieldDef),Image,Drawing,Line,Rectangle,CheckBox,SigBox,PatImage.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.FieldName">
            <summary>FieldName is used differently for different FieldTypes. 
            <para>For OutputText, each sheet typically has a main datatable type. For example statements correspond to the statment table. See SheetFieldsAvailable.GetList() for available values.</para>
            <para>     If the output field exactly matches a column from the main table this will be the &lt;ColumnName>. For example, "FName" on patient Forms.</para>
            <para>     If the output field exactly matches a column from a different table this will be the &lt;tablename>.&lt;ColumnName>. For example, appt.Note on Routing Slips.</para>
            <para>     If the output field is not a database column it must start with a lowercase letter. For example, "statementReceiptInvoice" on Statements.</para>
            <para>For InputField, these are hardcoded to correspond to DB fields, for example "FName" corresponsds to patient.FName. See SheetFieldsAvailable.GetList() for available values.</para>
            <para>For Image, this file name with extention, for example "image1.jpg". Some image names are handled specially, for example "Patient Info.gif". Images are stored in &lt;imagefolder>\SheetImages\image1.jpg.</para>
            <para>For CheckBox, this groups checkboxes together so that only one per group can be checked.</para>
            <para>For PatImage, this is the name of the DocCategory.</para>
            <para>For Special, identifies the type of special field. Currently only ToothChart and ToothChartLegend.</para>
            <para>For Grid, this is the specific type of grid. See SheetUtil.GetDataTableForGridType() for values. For example "StatementPayPlan".</para>
            <para>For all other fieldtypes, FieldName is blank or irrelevant.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.FieldValue">
            <summary>For StaticText, this text can include bracketed fields, like [nameLF].
            <para>For OutputText and InputField, this will be blank.  </para>
            <para>For CheckBoxes, either X or blank.  Even if the checkbox is set to behave like a radio button.  </para>
            <para>For Pat Images, this is blank.  The filename of a PatImage will later be stored in SheetField.FieldValue.</para>
            <para>For ComboBoxes, the chosen option, semicolon, then a pipe delimited list of options such as: March;January|February|March|April</para>
            <para>For ScreenCharts, a semicolon delimited list of comma separated surfaces.  It may look like S,P,N;S,S,S;... etc.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.FontSize">
            <summary>The fontSize for this field regardless of the default for the sheet.  The actual font must be saved with each sheetField.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.FontName">
            <summary>The fontName for this field regardless of the default for the sheet.  The actual font must be saved with each sheetField.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.FontIsBold">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.XPos">
            <summary>In pixels.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.YPos">
            <summary>In pixels.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.Width">
            <summary>The field will be constrained horizontally to this size.  Not allowed to be zero.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.Height">
            <summary>The field will be constrained vertically to this size.  Not allowed to be 0.  It's not allowed to be zero so that it will be visible on the designer.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.GrowthBehavior">
            <summary>Enum:GrowthBehaviorEnum</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.RadioButtonValue">
            <summary>This is only used for checkboxes that you want to behave like radiobuttons.  Set the FieldName the same for each Checkbox in the group.  The FieldValue will likely be X for one of them and empty string for the others.  Each of them will have a different RadioButtonValue.  Whichever box has X, the RadioButtonValue for that box will be used when importing.  This field is not used for "misc" radiobutton groups.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.RadioButtonGroup">
            <summary>Name which identifies the group within which the radio button belongs. FieldName must be set to "misc" in order for the group to take effect.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.IsRequired">
            <summary>Set to true if this field is required to have a value before the sheet is closed.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.ImageData">
            <summary>The Bitmap should be converted to Base64 using POut.Bitmap() before placing in this field.  Not stored in the database.  Only used when uploading SheetDefs to the web server.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.TabOrder">
            <summary>Tab stop order for all fields. One-based.  Only checkboxes and input fields can have values other than 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.ReportableName">
            <summary>Allows reporting on misc fields.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.TextAlign">
            <summary>Text Alignment for text fields.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.IsPaymentOption">
            <summary>Used to determine if the field should be hidden when printing statements.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetFieldDef.ItemColor">
            <summary>Text color, line color, rectangle color.</summary>
        </member>
        <member name="P:OpenDentBusiness.SheetFieldDef.ItemColorXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFieldDef.#ctor(OpenDentBusiness.SheetFieldType,System.Int32,System.Int32,System.Int32,System.Int32,System.Drawing.Font,System.String)">
            <summary>Simple constructor, useful in conjunction with initializer.</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFieldDef.GetFont">
            <Summary></Summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFieldDef.NewStaticText(System.String,System.Single,System.String,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32,OpenDentBusiness.GrowthBehaviorEnum,System.Boolean,System.Drawing.KnownColor,System.Windows.Forms.HorizontalAlignment)">
            <summary>Use named parameters if you only need to use some of the optional parameters.</summary>
        </member>
        <member name="P:OpenDentBusiness.SheetFieldDef.Bounds">
            <Summary>Should only be called after FieldValue has been set, due to GrowthBehavior.</Summary>
        </member>
        <member name="P:OpenDentBusiness.SheetFieldDef.BoundsF">
            <Summary>Should only be called after FieldValue has been set, due to GrowthBehavior.</Summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFieldsAvailable.GetList(OpenDentBusiness.SheetTypeEnum,OpenDentBusiness.OutInCheck)">
            <Summary>This is the list of input, output, or checkbox fieldnames for user to pick from.</Summary>
        </member>
        <member name="M:OpenDentBusiness.SheetFieldsAvailable.GetRadio(System.String)">
            <summary>For a given fieldName, return all the allowed radioButtonValues.  Will frequently be an empty list if a checkbox with this fieldname is not allowed to act as a radiobutton.</summary>
        </member>
        <member name="T:OpenDentBusiness.SheetParameter">
            <Summary></Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetParameter.IsRequired">
            <Summary></Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetParameter.ParamName">
            <Summary>Usually, a columnName.</Summary>
        </member>
        <member name="F:OpenDentBusiness.SheetParameter.ParamValue">
            <Summary>This is the value which must be set in order to obtain data from the database. It is usually an int primary key.  If running a batch, this may be an array of int.</Summary>
        </member>
        <member name="M:OpenDentBusiness.SheetParameter.#ctor">
            <summary>Do not directly use this constructor.</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetParameter.GetForType(OpenDentBusiness.SheetTypeEnum)">
            <Summary>Every sheet has at least one required parameter, usually the primary key of an important table.</Summary>
        </member>
        <member name="M:OpenDentBusiness.SheetsInternal.MedicalCheckboxRowYN(OpenDentBusiness.SheetDef,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>This will add two check box rows.  Set the prefix string to "allergy:" or "problem:", item1 and item2 should be set to the desired allergy/med in the row. Leave item2 blank for just one check box in the row.</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetsInternal.TreatmentPlan">
            <summary>Deprecated. Now stored in XML resource file.</summary>
        </member>
        <member name="M:OpenDentBusiness.SheetsInternal.PayPlanAgreement">
            <summary>Deprecated. Now stored in XML resource file.</summary>
        </member>
        <member name="T:OpenDentBusiness.Account">
            <summary>Used in the accounting section in chart of accounts.  Not related to patient accounts in any way.</summary>
        </member>
        <member name="F:OpenDentBusiness.Account.AccountNum">
            <summary>Primary key..</summary>
        </member>
        <member name="F:OpenDentBusiness.Account.Description">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Account.AcctType">
            <summary>Enum:AccountType Asset, Liability, Equity,Revenue, Expense</summary>
        </member>
        <member name="F:OpenDentBusiness.Account.BankNumber">
            <summary>For asset accounts, this would be the bank account number for deposit slips.</summary>
        </member>
        <member name="F:OpenDentBusiness.Account.Inactive">
            <summary>Set to true to not normally view this account in the list.</summary>
        </member>
        <member name="F:OpenDentBusiness.Account.AccountColor">
            <summary>.</summary>
        </member>
        <member name="M:OpenDentBusiness.Account.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.AccountingAutoPay">
            <summary>In the accounting section, this automates entries into the database when user enters a payment into a patient account.  This table presents the user with a picklist specific to that payment type.  For example, a cash payment would create a picklist of cashboxes for user to put the cash into.</summary>
        </member>
        <member name="F:OpenDentBusiness.AccountingAutoPay.AccountingAutoPayNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.AccountingAutoPay.PayType">
            <summary>FK to definition.DefNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.AccountingAutoPay.PickList">
            <summary>FK to account.AccountNum.  AccountNums separated by commas.  No spaces.</summary>
        </member>
        <member name="M:OpenDentBusiness.AccountingAutoPay.Clone">
            <summary>Returns a copy of this AccountingAutoPay.</summary>
        </member>
        <member name="T:OpenDentBusiness.Adjustment">
            <summary>An adjustment in the patient account.  Usually, adjustments are very simple, just being assigned to one patient and provider.  But they can also be attached to a procedure to represent a discount on that procedure.  Attaching adjustments to procedures is not automated, so it is not very common.</summary>
        </member>
        <member name="F:OpenDentBusiness.Adjustment.AdjNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Adjustment.AdjDate">
            <summary>The date that the adjustment shows in the patient account.</summary>
        </member>
        <member name="F:OpenDentBusiness.Adjustment.AdjAmt">
            <summary>Amount of adjustment.  Can be pos or neg.</summary>
        </member>
        <member name="F:OpenDentBusiness.Adjustment.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Adjustment.AdjType">
            <summary>FK to definition.DefNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Adjustment.ProvNum">
            <summary>FK to provider.ProvNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Adjustment.AdjNote">
            <summary>Note for this adjustment.</summary>
        </member>
        <member name="F:OpenDentBusiness.Adjustment.ProcDate">
            <summary>Procedure date.  Not when the adjustment was entered.</summary>
        </member>
        <member name="F:OpenDentBusiness.Adjustment.ProcNum">
            <summary>FK to procedurelog.ProcNum.  Only used if attached to a procedure.  Otherwise, 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.Adjustment.DateEntry">
            <summary>Timestamp automatically generated and user not allowed to change.  The actual date of entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.Adjustment.ClinicNum">
            <summary>FK to clinic.ClinicNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Adjustment.StatementNum">
            <summary>FK to statement.StatementNum.  Only used when the statement in an invoice.</summary>
        </member>
        <member name="F:OpenDentBusiness.Adjustment.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.Adjustment.SecDateTEdit">
            <summary>Automatically updated by MySQL every time a row is added or changed. Could be changed due to user editing, custom queries or program
            updates.  Not user editable with the UI.</summary>
        </member>
        <member name="M:OpenDentBusiness.Adjustment.Clone">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Appointment">
            <summary>Appointments can show in the Appointments module, or they can be on the unscheduled list.  An appointment object is also used to store the Planned appointment.  The planned appointment never gets scheduled, but instead gets copied.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.AptNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.PatNum">
            <summary>FK to patient.PatNum.  The patient that the appointment is for.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.AptStatus">
            <summary>Enum:ApptStatus .</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.Pattern">
            <summary>Time pattern, X for Dr time, / for assist time. Stored in 5 minute increments.  Converted as needed to 10 or 15 minute representations for display.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.Confirmed">
            <summary>FK to definition.DefNum.  This field can also be used to show patient arrived, in chair, etc.  The Category column in the definition table is DefCat.ApptConfirmed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.TimeLocked">
            <summary>If true, then the program will not attempt to reset the user's time pattern and length when adding or removing procedures.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.Op">
            <summary>FK to operatory.OperatoryNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.Note">
            <summary>Note.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.ProvNum">
            <summary>FK to provider.ProvNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.ProvHyg">
            <summary>FK to provider.ProvNum.  Optional.  Only used if a hygienist is assigned to this appt.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.AptDateTime">
            <summary>Appointment Date and time.  If you need just the date or time for an SQL query, you can use DATE(AptDateTime) and TIME(AptDateTime) in your query.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.NextAptNum">
            <summary>FK to appointment.AptNum.  A better description of this field would be PlannedAptNum.  Only used to show that this apt is derived from specified planned apt. Otherwise, 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.UnschedStatus">
            <summary>FK to definition.DefNum.  The definition.Category in the definition table is DefCat.RecallUnschedStatus.  Only used if this is an Unsched or Planned appt.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.IsNewPatient">
            <summary>This is the first appoinment this patient has had at this office.  Somewhat automated.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.ProcDescript">
            <summary>A one line summary of all procedures.  Can be used in various reports, Unscheduled list, and Planned appointment tracker.  Not user editable right now, so it doesn't show on the screen.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.Assistant">
            <summary>FK to employee.EmployeeNum.  You can assign an assistant to the appointment.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.ClinicNum">
            <summary>FK to clinic.ClinicNum.  0 if no clinic.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.IsHygiene">
            <summary>Set true if this is a hygiene appt.  The only purpose of this flag is to cause the hygiene provider's color to show.  This flag is frequently not set even when it is a hygiene appointment because some offices want the dentist color on the appointments.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.DateTStamp">
            <summary>Automatically updated by MySQL every time a row is added or changed. Could be changed due to user editing, custom queries or program updates.  Not user editable.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.DateTimeArrived">
            <summary>The date and time that the patient checked in.  Date is largely ignored since it should be the same as the appt.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.DateTimeSeated">
            <summary>The date and time that the patient was seated in the chair in the operatory.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.DateTimeDismissed">
            <summary>The date and time that the patient got up out of the chair.  Date is largely ignored since it should be the same as the appt.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.InsPlan1">
            <summary>FK to insplan.PlanNum for the primary insurance plan at the time the appointment is set complete. May be 0. We can't tell later which subscriber is involved; only the plan.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.InsPlan2">
            <summary>FK to insplan.PlanNum for the secoondary insurance plan at the time the appointment is set complete. May be 0. We can't tell later which subscriber is involved; only the plan.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.DateTimeAskedToArrive">
            <summary>Date and time patient asked to arrive, or minval if patient not asked to arrive at a different time than appt.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.ProcsColored">
            <summary>Stores XML for the procs colors</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.ColorOverride">
            <summary>If set to anything but 0, then this will override the graphic color for the appointment.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.AppointmentTypeNum">
            <summary>FK to appointmenttype.AppointmentTypeNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.Appointment.SecDateEntry">
            <summary>Timestamp automatically generated and user not allowed to change.  The actual date of entry.</summary>
        </member>
        <member name="P:OpenDentBusiness.Appointment.ColorOverrideXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="M:OpenDentBusiness.Appointment.Copy">
            <summary>Returns a copy of the appointment.</summary>
        </member>
        <member name="T:OpenDentBusiness.AppointmentRule">
            <summary>For now, the rule is simple. It simply blocks all double booking of the specified code range.  The double booking would have to be for the same provider.  This can later be extended to provide more complex rules, such as partial double booking, time limitations, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.AppointmentRule.AppointmentRuleNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.AppointmentRule.RuleDesc">
            <summary>The description of the rule which will be displayed to the user.</summary>
        </member>
        <member name="F:OpenDentBusiness.AppointmentRule.CodeStart">
            <summary>The procedure code of the start of the range.</summary>
        </member>
        <member name="F:OpenDentBusiness.AppointmentRule.CodeEnd">
            <summary>The procedure code of the end of the range.</summary>
        </member>
        <member name="F:OpenDentBusiness.AppointmentRule.IsEnabled">
            <summary>Usually true.  But this does allow you to turn off a rule temporarily without losing the settings.</summary>
        </member>
        <member name="M:OpenDentBusiness.AppointmentRule.Clone">
            <summary>Returns a copy of this AppointmentRule.</summary>
        </member>
        <member name="T:OpenDentBusiness.ApptView">
            <summary>Enables viewing a variety of operatories or providers.  This table holds the views that the user picks between.  The apptviewitem table holds the items attached to each view.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptView.ApptViewNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptView.Description">
            <summary>Description of this view.  Gets displayed in Appt module.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptView.ItemOrder">
            <summary>0-based order to display in lists. Every view must have a unique itemorder, but it is acceptable to have some missing itemorders in the sequence.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptView.RowsPerIncr">
            <summary>Number of rows per time increment.  Usually 1 or 2.  Programming note: Value updated to ApptDrawing.RowsPerIncr to track current state.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptView.OnlyScheduledProvs">
            <summary>If set to true, then the only operatories that will show will be for providers that have schedules for the day, ops with no provs assigned.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptView.OnlySchedBeforeTime">
            <summary>If OnlyScheduledProvs is set to true, and this time is not 0:00, then only provider schedules with start or stop time before this time will be included.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptView.OnlySchedAfterTime">
            <summary>If OnlyScheduledProvs is set to true, and this time is not 0:00, then only provider schedules with start or stop time after this time will be included.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptView.StackBehavUR">
            <summary>Enum:ApptViewStackBehavior </summary>
        </member>
        <member name="F:OpenDentBusiness.ApptView.StackBehavLR">
            <summary>Enum:ApptViewStackBehavior </summary>
        </member>
        <member name="F:OpenDentBusiness.ApptView.ClinicNum">
            <summary>FK to clinic.ClinicNum.  0=All clinics.  This appointment view will only be visible when the current clinic showing is set to this clinic.  Within the appointment edit window, this setting is used to filter the list of available operatories.  Also used in conjunction with 'OnlyScheduledProvs' (when enabled) in order to filter the visible operatories within the Appt module.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptView.ApptTimeScrollStart">
            <summary>Time the appointment module's view will scroll to on load.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptView.IsScrollStartDynamic">
            <summary>If set to true, the appointment view scrolls to the first scheduled operatory start time or the first scheduled appointment.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptView.IsApptBubblesDisabled">
            <summary>If set to true, the appointment view will not show appointment bubbles.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptView.Copy">
            <summary>Returns a copy of this ApptView.</summary>
        </member>
        <member name="P:OpenDentBusiness.ApptView.ApptTimeScrollStartXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="P:OpenDentBusiness.ApptView.OnlySchedBeforeTimeXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="P:OpenDentBusiness.ApptView.OnlySchedAfterTimeXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="T:OpenDentBusiness.ApptViewStackBehavior">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ApptViewStackBehavior.Vertical">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ApptViewStackBehavior.Horizontal">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ApptViewItem">
            <summary>Each item is attached to a row in the apptview table.  Each item specifies ONE of: OpNum, ProvNum, ElementDesc, or ApptFieldDefNum.  The other three will be 0 or "".</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptViewItem.ApptViewItemNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptViewItem.ApptViewNum">
            <summary>FK to apptview.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptViewItem.OpNum">
            <summary>FK to operatory.OperatoryNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptViewItem.ProvNum">
            <summary>FK to provider.ProvNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptViewItem.ElementDesc">
            <summary>Must be one of the hard coded strings picked from the available list.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptViewItem.ElementOrder">
            <summary>If this is a row Element, then this is the 0-based order within its area.  For example, UR starts over with 0 ordering.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptViewItem.ElementColor">
            <summary>If this is an element, then this is the color.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptViewItem.ElementAlignment">
            <summary>Enum:ApptViewAlignment If this is an element, then this is the alignment of the element within the appointment.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptViewItem.ApptFieldDefNum">
            <summary>FK to apptfielddef.ApptFieldDefNum.  If this is an element, and the element is an appt field, then this tells us which one.</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptViewItem.PatFieldDefNum">
            <summary>FK to patfielddef.PatFieldDefNum.  If this is an element, and the element is an appt field, then this tells us which one.  Not implemented yet.</summary>
        </member>
        <member name="M:OpenDentBusiness.ApptViewItem.#ctor(System.String,System.Byte,System.Drawing.Color)">
            <summary>this constructor is just used in GetForCurView when no view selected.</summary>
        </member>
        <member name="P:OpenDentBusiness.ApptViewItem.ElementColorXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="T:OpenDentBusiness.ApptViewAlignment">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ApptViewAlignment.Main">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptViewAlignment.UR">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.ApptViewAlignment.LR">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.AutoCode">
            <summary>An autocode automates entering procedures.  The user only has to pick composite, for instance, and the autocode figures out the code based on the number of surfaces, and posterior vs. anterior.  Autocodes also enforce and suggest changes to a procedure code if the number of surfaces or other properties change.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCode.AutoCodeNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCode.Description">
            <summary>Displays meaningful decription, like "Amalgam".</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCode.IsHidden">
            <summary>User can hide autocodes</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCode.LessIntrusive">
            <summary>This will be true if user no longer wants to see this autocode message when closing a procedure. This makes it less intrusive, but it can still be used in procedure buttons.</summary>
        </member>
        <member name="T:OpenDentBusiness.AutoCodeCond">
            <summary>AutoCode condition.  Always attached to an AutoCodeItem, which is then, in turn, attached to an autocode.  There is usually only one or two conditions for a given AutoCodeItem.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCodeCond.AutoCodeCondNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCodeCond.AutoCodeItemNum">
            <summary>FK to autocodeitem.AutoCodeItemNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCodeCond.Cond">
            <summary>Enum:AutoCondition </summary>
        </member>
        <member name="T:OpenDentBusiness.AutoCodeItem">
            <summary>Corresponds to the autocodeitem table in the database.  There are multiple AutoCodeItems for a given AutoCode.  Each Item has one ADA code.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCodeItem.AutoCodeItemNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCodeItem.AutoCodeNum">
            <summary>FK to autocode.AutoCodeNum</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCodeItem.OldCode">
            <summary>Do not use</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCodeItem.CodeNum">
            <summary>FK to procedurecode.CodeNum</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoCodeItem.ListConditions">
            <summary>Only used in the validation section when closing FormAutoCodeEdit.  Will normally be empty.</summary>
        </member>
        <member name="T:OpenDentBusiness.AutoNote">
            <summary>A single autonote template.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoNote.AutoNoteNum">
            <summary>Primary key</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoNote.AutoNoteName">
            <summary>Name of AutoNote</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoNote.MainText">
            <summary>Was 'ControlsToInc' in previous versions.</summary>
        </member>
        <member name="M:OpenDentBusiness.AutoNote.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.AutoNoteControl">
            <summary>In the program, this is now called an autonote prompt.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoNoteControl.AutoNoteControlNum">
            <summary>Primary key</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoNoteControl.Descript">
            <summary>The description of the prompt as it will be referred to from other windows.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoNoteControl.ControlType">
            <summary>'Text', 'OneResponse', or 'MultiResponse'.  More types to be added later.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoNoteControl.ControlLabel">
            <summary>The prompt text.</summary>
        </member>
        <member name="F:OpenDentBusiness.AutoNoteControl.ControlOptions">
            <summary>For TextBox, this is the default text.  For a ComboBox, this is the list of possible responses, one per line.</summary>
        </member>
        <member name="M:OpenDentBusiness.AutoNoteControl.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Benefit">
            <summary>Corresponds to the benefit table in the database which replaces the old covpat table.  A benefit is usually a percentage, deductible, 
            limitation, max, or similar. Each row represents a single benefit.  A benefit can have a value in EITHER PlanNum OR PatPlanNum.  If it is for a 
            PlanNum, the most common, then the benefit is attached to an insurance plan.  If it is for a PatPlanNum, then it overrides the plan benefit, 
            usually a percentage, for a single patient.  Benefits we can't handle yet include posterior composites, COB duplication, amounts used, in/out 
            of plan network, authorization required, missing tooth exclusion, and any date related limitations like waiting periods.<br/>
            <para>Here are examples of typical usage which parallel X12 usage.</para>
            <para>Example fields shown in this order:</para>
            <para>CovCat, ProcCode(- indicates blank), BenefitType, Percent, MonetaryAmt, TimePeriod, QuantityQualifier, Quantity, CoverageLevel</para>
            <para>Annual Max Indiv $1000: None/General,-,Limitations,-1,1000,CalendarYear,None,0,Individual</para>
            <para>Restorative 80%: Restorative,-,CoInsurance,80,-1,CalendarYear,None,0,None</para>
            <para>$50 deductible: None/General,-,Deductible,-1,50,CalendarYear,None,0,Individual</para>
            <para>Deductible waived on preventive: Preventive,-,Deductible,-1,0,CalendarYear,None,0,Individual</para>
            <para>1 pano every 5 years: None,D0330,Limitations,-1,-1,Years?,Years,5,None</para>
            <para>2 exams per year: Preventive(or Diagnostic),-,Limitations,-1,-1,BenefitYear,NumberOfServices,2,None</para>
            <para>Fluoride limit 18yo: None, D1204, Limitations, -1, -1, CalendarYear/None, AgeLimit, 18,None (might require a second identical entry for D1205)</para>
            <para>4BW every 6 months: None, D0274, Limitations, -1, -1, None, Months, 6,None.</para>
            <para>The text above might be difficult to read.  We are trying to improve the white spacing.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.Benefit.BenefitNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Benefit.PlanNum">
            <summary>FK to insplan.PlanNum.  Most benefits should be attached using PlanNum.  The exception would be if each patient has a different percentage.  If PlanNum is used, then PatPlanNum should be 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.Benefit.PatPlanNum">
            <summary>FK to patplan.PatPlanNum.  It is rare to attach benefits this way.  Usually only used to override percentages for patients.   In this case, PlanNum should be 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.Benefit.CovCatNum">
            <summary>FK to covcat.CovCatNum.  Corresponds to X12 EB03- Service Type code.  Situational, so it can be 0.  Will probably be 0 for general deductible and annual max.  There are very specific categories covered by X12. Users should set their InsCovCats to the defaults we provide.</summary>
        </member>
        <member name="F:OpenDentBusiness.Benefit.BenefitType">
            <summary>Enum:InsBenefitType Corresponds to X12 EB01. Examples: 0=ActiveCoverage, 1=CoInsurance, 2=Deductible, 3=CoPayment, 4=Exclusions, 5=Limitations. ActiveCoverage doesn't really provide meaningful information.</summary>
        </member>
        <member name="F:OpenDentBusiness.Benefit.Percent">
            <summary>Only used if BenefitType=CoInsurance.  Valid values are 0 to 100.  -1 indicates empty, which is almost always true if not CoInsurance.  The percentage that insurance will pay on the procedure.  Note that benefits coming from carriers are usually backwards, indicating the percetage that the patient is responsible for.</summary>
        </member>
        <member name="F:OpenDentBusiness.Benefit.MonetaryAmt">
            <summary>Used for CoPayment, Limitations, and Deductible.  -1 indicates empty</summary>
        </member>
        <member name="F:OpenDentBusiness.Benefit.TimePeriod">
            <summary>Enum:BenefitTimePeriod Corresponds to X12 EB06, Time Period Qualifier.  Examples: 0=None,1=ServiceYear,2=CalendarYear,3=Lifetime,4=Years. Might add Visit and Remaining.</summary>
        </member>
        <member name="F:OpenDentBusiness.Benefit.QuantityQualifier">
            <summary>Enum:BenefitQuantity Corresponds to X12 EB09. Not used very much. Examples: 0=None,1=NumberOfServices,2=AgeLimit,3=Visits,4=Years,5=Months</summary>
        </member>
        <member name="F:OpenDentBusiness.Benefit.Quantity">
            <summary>Corresponds to X12 EB10. Qualify the quantity using QuantityQualifier.</summary>
        </member>
        <member name="F:OpenDentBusiness.Benefit.CodeNum">
            <summary>FK to procedurecode.CodeNum.  Typical uses include fluoride, sealants, etc.  If a specific code is used here, then the CovCat should be None.</summary>
        </member>
        <member name="F:OpenDentBusiness.Benefit.CoverageLevel">
            <summary>Enum:BenefitCoverageLevel Corresponds to X12 EB02.  None, Individual, or Family.  Individual and Family are commonly used for deductibles and maximums.  None is commonly used for percentages and copays.</summary>
        </member>
        <member name="M:OpenDentBusiness.Benefit.CompareTo(System.Object)">
            <summary>IComparable.CompareTo implementation.  This is used to order benefit lists as well as to group benefits if the type is essentially equal.  It doesn't compare values such as percentages or amounts.  It only compares types.</summary>
        </member>
        <member name="M:OpenDentBusiness.Benefit.Copy">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Benefit.IsSimilar(OpenDentBusiness.Benefit)">
            <summary>Returns true if most of the fields match except BenefitNum</summary>
        </member>
        <member name="T:OpenDentBusiness.BenefitArraySorter">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.BenefitArraySorter.System#Collections#IComparer#Compare(System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Carrier">
            <summary>Every InsPlan has a Carrier.  The carrier stores the name and address.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.CarrierNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.CarrierName">
            <summary>Name of the carrier.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.Address">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.Address2">
            <summary>Second line of address.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.City">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.State">
            <summary>2 char in the US.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.Zip">
            <summary>Postal code.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.Phone">
            <summary>Includes any punctuation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.ElectID">
            <summary>E-claims electronic payer id.  5 char in USA.  6 digits in Canada.  I've seen an ID this long before: "LA-DHH-MEDICAID".  The user interface currently limits length to 20, although db limits length to 255.  X12 requires length between 2 and 80.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.NoSendElect">
            <summary>Do not send electronically.  It's just a default; you can still send electronically.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.IsCDA">
            <summary>Canada: True if a CDAnet carrier.  This has significant implications:  1. It can be filtered for in the list of carriers.  2. An ElectID is required.  3. The ElectID can never be used by another carrier.  4. If the carrier is attached to any etrans, then the ElectID cannot be changed (and, of course, the carrier cannot be deleted or combined).</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.CDAnetVersion">
            <summary>The version of CDAnet supported.  Either 02 or 04.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.CanadianNetworkNum">
            <summary>FK to canadiannetwork.CanadianNetworkNum.  Only used in Canada.  Right now, there is no UI to the canadiannetwork table in our db.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.IsHidden">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.CanadianEncryptionMethod">
            <summary>1=No Encryption, 2=CDAnet standard #1, 3=CDAnet standard #2.  Field A10.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.CanadianSupportedTypes">
            <summary>Bit flags.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.SecDateEntry">
            <summary>Timestamp automatically generated and user not allowed to change.  The actual date of entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.SecDateTEdit">
            <summary>Automatically updated by MySQL every time a row is added or changed. Could be changed due to user editing, custom queries or program
            updates.  Not user editable with the UI.</summary>
        </member>
        <member name="F:OpenDentBusiness.Carrier.TIN">
            <summary>Tax ID Number.  Not user editable.  No UI for this field.
            Used in when importing insurance plans from 834s to uniquely identify carriers.</summary>
        </member>
        <member name="T:OpenDentBusiness.CanSupTransTypes">
            <summary>Type 23, Predetermination EOB (regular and embedded) are not included because they are not part of the testing scripts.  The three required types are not included: ClaimTransaction_01, ClaimAcknowledgement_11, and ClaimEOB_21.  Can't find specs for PredeterminationEobEmbedded.</summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.None">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.EligibilityTransaction_08">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.EligibilityResponse_18">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.CobClaimTransaction_07">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.ClaimAckEmbedded_11e">
            <summary>ClaimAck_11 is not here because it's required by all carriers.</summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.ClaimEobEmbedded_21e">
            <summary>ClaimEob_21 is not here because it's required by all carriers.</summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.ClaimReversal_02">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.ClaimReversalResponse_12">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.PredeterminationSinglePage_03">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.PredeterminationMultiPage_03">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.PredeterminationAck_13">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.PredeterminationAckEmbedded_13e">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.RequestForOutstandingTrans_04">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.OutstandingTransAck_14">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.EmailTransaction_24">
            <summary>Response</summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.RequestForSummaryReconciliation_05">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.SummaryReconciliation_15">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.RequestForPaymentReconciliation_06">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CanSupTransTypes.PaymentReconciliation_16">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Claim">
            <summary>The claim table holds information about individual claims.  Each row represents one claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.ClaimNum">
            <summary>Primary key</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.DateService">
            <summary>Usually the same date as the procedures, but it can be changed if you wish.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.DateSent">
            <summary>Usually the date it was created.  It might be sent a few days later if you don't send your e-claims every day.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.ClaimStatus">
            <summary>Single char: U,H,W,P,S,or R.  U=Unsent, H=Hold until pri received, W=Waiting in queue, S=Sent, R=Received.  A(adj) is no longer used.  P(prob sent) is no longer used.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.DateReceived">
            <summary>Date the claim was received.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.PlanNum">
            <summary>FK to insplan.PlanNum.  Every claim is attached to one plan.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.ProvTreat">
            <summary>FK to provider.ProvNum.  Treating provider for dental claims.  For institutional claims, this is called the attending provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.ClaimFee">
            <summary>Total fee of claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.InsPayEst">
            <summary>Amount insurance is estimated to pay on this claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.InsPayAmt">
            <summary>Amount insurance actually paid.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.DedApplied">
            <summary>Deductible applied to this claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.PreAuthString">
            <summary>The predetermination of benefits number received from ins.  In X12, REF G3.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.IsProsthesis">
            <summary>Single char for No, Initial, or Replacement.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.PriorDate">
            <summary>Date prior prosthesis was placed.  Note that this is only for paper claims.  E-claims have a date field on each individual procedure.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.ReasonUnderPaid">
            <summary>Note for patient for why insurance didn't pay as expected.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.ClaimNote">
            <summary>Note to be sent to insurance. Max 255 char.  E-claims also have notes on each procedure.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.ClaimType">
            <summary>"P"=primary, "S"=secondary, "PreAuth"=preauth, "Other"=other, "Cap"=capitation.  Not allowed to be blank. Might need to add "Med"=medical claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.ProvBill">
            <summary>FK to provider.ProvNum.  Billing provider.  Assignment can be automated from the setup section.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.ReferringProv">
            <summary>FK to referral.ReferralNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.RefNumString">
            <summary>Referral number for this claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.PlaceService">
            <summary>Enum:PlaceOfService .</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.AccidentRelated">
            <summary>blank or A=Auto, E=Employment, O=Other.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.AccidentDate">
            <summary>Date of accident, if applicable.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.AccidentST">
            <summary>Accident state.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.EmployRelated">
            <summary>Enum:YN .</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.IsOrtho">
            <summary>True if is ortho.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.OrthoRemainM">
            <summary>Remaining months of ortho.  Valid values are 1-36, although we allow greater than or equal to 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.OrthoDate">
            <summary>Date ortho appliance placed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.PatRelat">
            <summary>Enum:Relat  Relationship to subscriber.  The relationship is copied from InsPlan when the claim is created.  It might need to be changed in both places.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.PlanNum2">
            <summary>FK to insplan.PlanNum.  Other coverage plan number.  0 if none.  This provides the user with total control over what other coverage shows. This obviously limits the coverage on a single claim to two insurance companies.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.PatRelat2">
            <summary>Enum:Relat  The relationship to the subscriber for other coverage on this claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.WriteOff">
            <summary>Sum of ClaimProc.Writeoff for this claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.Radiographs">
            <summary>The number of x-rays enclosed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.ClinicNum">
            <summary>FK to clinic.ClinicNum.  0 if no clinic.  Since one claim cannot have procs from multiple clinics, the clinicNum is set when creating the claim and then cannot be changed.  The claim would have to be deleted and recreated.  Otherwise, if changing at the claim level, a feature would have to be added that synched all procs, claimprocs, and probably some other tables.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.ClaimForm">
            <summary>FK to claimform.ClaimFormNum.  0 if not assigned to use the claimform for the insplan.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.AttachedImages">
            <summary>The number of intraoral images attached.  Not the number of files attached.  This is the value that goes on the 2006 claimform.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.AttachedModels">
            <summary>The number of models attached.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.AttachedFlags">
            <summary>A comma-delimited set of flag keywords.  Can have one or more of the following: EoB,Note,Perio,Misc.  Must also contain one of these: Mail or Elect.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.AttachmentID">
            <summary>Example: NEA#1234567.  If present, and if the claim note does not already start with this Id, then it will be prepended to the claim note for both e-claims and mail.  If using e-claims, this same ID will be used for all PWK segements.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CanadianMaterialsForwarded">
            <summary>A08.  Any combination of E(email), C(correspondence), M(models), X(x-rays), and I(images).  So up to 5 char.  Gets converted to a single char A-Z for e-claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CanadianReferralProviderNum">
            <summary>B05.  Optional. The 9-digit CDA number of the referring provider, or identifier of referring party up to 10 characters in length.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CanadianReferralReason">
            <summary>B06.  A number 0(none) through 13.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CanadianIsInitialLower">
            <summary>F18.  Y, N, or X(not a lower denture, crown, or bridge).</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CanadianDateInitialLower">
            <summary>F19.  Mandatory if F18 is N.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CanadianMandProsthMaterial">
            <summary>F21.  If crown, not required.  If denture or bridge, required if F18 is N.  Single digit number code, 0-6.  We added type 7, which is crown.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CanadianIsInitialUpper">
            <summary>F15.  Y, N, or X(not an upper denture, crown, or bridge).</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CanadianDateInitialUpper">
            <summary>F04.  Mandatory if F15 is N.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CanadianMaxProsthMaterial">
            <summary>F20.  If crown, not required.  If denture or bridge, required if F15 is N.  0 indicates empty response.  Single digit number code, 1-6.  We added type 7, which is crown.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.InsSubNum">
            <summary>FK to inssub.InsSubNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.InsSubNum2">
            <summary>FK to inssub.InsSubNum.  The fk to the 'Other' insurance subscriber.  For a primary claim, this will be the secondary insurance
            subscriber.  For a secondary claim, this will be primary insurance subscriber.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CanadaTransRefNum">
            <summary>G01 assigned by carrier/network and returned in acks.  Used for claim reversal.  For Claim Acknowledgements, this can sometimes
            be a series of spaces, which means the number is effectively empty.  This happens when the Claim Acknowledgement is forwarded to the carrier
            as part of a batch.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CanadaEstTreatStartDate">
            <summary>F37 Used for predeterminations.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CanadaInitialPayment">
            <summary>F28 Used for predeterminations.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CanadaPaymentMode">
            <summary>F29 Used for predeterminations.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CanadaTreatDuration">
            <summary>F30 Used for predeterminations.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CanadaNumAnticipatedPayments">
            <summary>F31 Used for predeterminations.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CanadaAnticipatedPayAmount">
            <summary>F32 Used for predeterminations.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.PriorAuthorizationNumber">
            <summary>This is NOT the predetermination of benefits number.  In X12, this is REF G1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.SpecialProgramCode">
            <summary>Enum:EnumClaimSpecialProgram  This is used to track EPSDT.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.UniformBillType">
            <summary>A three digit number used on 837I.  Aka Bill Code.  UBO4 4.  Examples: 321,823,131,652.  The third digit is claim frequency code.  If this is used, then our CorrectionType should be 0=original.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.MedType">
            <summary>Enum:EnumClaimMedType 0=Dental, 1=Medical, 2=Institutional</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.AdmissionTypeCode">
            <summary>Used for inst claims. Single digit.  X12 2300 CL101.  UB04 14.  Should only be required for IP, but X12 clearly states required for all.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.AdmissionSourceCode">
            <summary>Used for inst claims. Single char.  X12 2300 CL102.  UB04 15.  Should only be required for IP, but X12 clearly states required for all.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.PatientStatusCode">
            <summary>Used for inst claims. Two digit.  X12 2300 CL103.  UB04 17.  Should only be required for IP, but X12 clearly states required for all.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CustomTracking">
            <summary>FK to definition.DefNum. Most users will leave this blank.  Some offices may set up tracking statuses such as 'review', 'hold', 'riskmanage', etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.DateResent">
            <summary>Used for historical purposes only, not sent electronically. Automatically set when CorrectionType is not original and the claim is resent.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.CorrectionType">
            <summary>X12 CLM05-3. Usually set to original, but can be used to resubmit claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.ClaimIdentifier">
            <summary>X12 CLM01. Semi-unique identifier for the claim within the current database. Defaults to PatNum/ClaimNum, but can be edited by user, and is often modified by the clearinghouse to ensure uniqueness on their end.
            This also set for PreAuth claims.  The ClaimIdentifier for a PreAuth will probably not match the ClaimIdentifier for a regular claim, which makes ERA claim matching more straight forward for both PreAuths and regular claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.OrigRefNum">
            <summary>X12 2300 REF (F8). Used when resending claims to refer to the original claim. The user must type this value in after reading it from the original claim response report.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.ProvOrderOverride">
            <summary>FK to provider.ProvNum.  Ordering provider override.  Goes hand-in-hand with OrderingReferralNum.  Medical eclaims only.
            Defaults to zero.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.OrthoTotalM">
            <summary>Total estimated months of ortho.  Valid values are 1-36, although we allow greater than or equal to 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.ShareOfCost">
            <summary>Sum of all amounts paid specifically to this claim by the patient or family.
            Goes out in X12 4010/5010 loop 2300 AMT segment if greater than zero.  Default value is 0, thus will not go out by default unless the user
            enters a value.  This field was added for Denti-Cal certification, but can go out for any clearinghouse.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.SecDateEntry">
            <summary>Timestamp automatically generated and user not allowed to change.  The actual date of entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.SecDateTEdit">
            <summary>Automatically updated by MySQL every time a row is added or changed. Could be changed due to user editing, custom queries or program
            updates.  Not user editable with the UI.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.OrderingReferralNum">
            <summary>FK to referral.ReferralNum.  Goes hand-in-hand with ProvOrderOverride.  Medical eclaims only.  Defaults to zero.
            If set, and the ProvOrderOverride is not set, then this referral will go out at the ordering provider on medical e-claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.Claim.Attachments">
            <summary>Not a data column.</summary>
        </member>
        <member name="M:OpenDentBusiness.Claim.Copy">
            <summary>Returns a copy of the claim.</summary>
        </member>
        <member name="T:OpenDentBusiness.EnumClaimMedType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumClaimMedType.Dental">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumClaimMedType.Medical">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumClaimMedType.Institutional">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.EnumClaimSpecialProgram">
            <summary>0=none, 1=EPSDT_1, 2=Handicapped_2, 3=SpecialFederal_3, (no 4), 5=Disability_5, 9=SecondOpinion_9</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumClaimSpecialProgram.none">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumClaimSpecialProgram.EPSDT_1">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumClaimSpecialProgram.Handicapped_2">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumClaimSpecialProgram.SpecialFederal_3">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumClaimSpecialProgram.Disability_5">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumClaimSpecialProgram.SecondOpinion_9">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimCorrectionType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimCorrectionType.Original">
            <summary>0 - X12 1. Use for claims that are not ongoing.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimCorrectionType.Replacement">
            <summary>1 - X12 7. Use to entirely replace an original claim. A claim reference number will be required.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimCorrectionType.Void">
            <summary>2 - X12 8. Use to undo an original claim. A claim reference number will be required.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimCondCodeLog">
            <summary>There is either one or zero per claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimCondCodeLog.ClaimCondCodeLogNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimCondCodeLog.ClaimNum">
            <summary>FK to claim.ClaimNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimCondCodeLog.Code0">
            <summary>Corresponds with condition code 18 on the UB04.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimCondCodeLog.Code1">
            <summary>Corresponds with condition code 19 on the UB04.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimCondCodeLog.Code2">
            <summary>Corresponds with condition code 20 on the UB04.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimCondCodeLog.Code3">
            <summary>Corresponds with condition code 21 on the UB04.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimCondCodeLog.Code4">
            <summary>Corresponds with condition code 22 on the UB04.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimCondCodeLog.Code5">
            <summary>Corresponds with condition code 23 on the UB04.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimCondCodeLog.Code6">
            <summary>Corresponds with condition code 24 on the UB04.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimCondCodeLog.Code7">
            <summary>Corresponds with condition code 25 on the UB04.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimCondCodeLog.Code8">
            <summary>Corresponds with condition code 26 on the UB04.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimCondCodeLog.Code9">
            <summary>Corresponds with condition code 27 on the UB04.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimCondCodeLog.Code10">
            <summary>Corresponds with condition code 28 on the UB04.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimForm">
            <summary>Stores the information for printing different types of claim forms.  Each claimform has many claimformitems attached to it, one for each field on the claimform.  This table has nothing to do with the actual claims.  It just describes how to print them.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimForm.ClaimFormNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimForm.Description">
            <summary>eg. ADA2002 or CA Medicaid</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimForm.IsHidden">
            <summary>If true, then it will not be displayed in various claim form lists as a choice.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimForm.FontName">
            <summary>Valid font name for all text on the form.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimForm.FontSize">
            <summary>Font size for all text on the form.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimForm.UniqueID">
            <summary>For instance OD12 or JoeDeveloper9.  If you are a developer releasing claimforms, then this should be your name or company followed by a unique number.  This will later make it easier for you to maintain your claimforms for your customers.  All claimforms that we release will be of the form OD##.  Forms that the user creates will have this field blank, protecting them from being changed by us.  So far, we have built the following claimforms: ADA2002=OD1, Denti-Cal=OD2, ADA2000=OD3, HCFA1500=OD4, HCFA1500preprinted=OD5, Canadian=OD6, Belgian=OD7, ADA2006=OD8, 1500 version 05/08=OD9, UB04=OD10, ADA2012=OD11, 1500 version 02/12=OD12</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimForm.PrintImages">
            <summary>Set to false to not print images.  This removes the background for printing on premade forms.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimForm.OffsetX">
            <summary>Shifts all items by x/100th's of an inch to compensate for printer, typically less than 1/4 inch.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimForm.OffsetY">
            <summary>Shifts all items by y/100th's of an inch to compensate for printer, typically less than 1/4 inch.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimForm.Items">
            <summary>This is not a database column.  It is an array of all claimformItems that are attached to this ClaimForm.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimForm.Copy">
            <summary>Returns a copy of the claimform including the Items.  Only used in FormClaimForms.butCopy_Click.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimFormItem">
            <summary>One item is needed for each field on a claimform.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimFormItem.ClaimFormItemNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimFormItem.ClaimFormNum">
            <summary>FK to claimform.ClaimFormNum</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimFormItem.ImageFileName">
            <summary>If this item is an image.  Usually only one per claimform.  eg ADA2002.emf.  Otherwise it MUST be left blank, or it will trigger an error that the image cannot be found.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimFormItem.FieldName">
            <summary>Must be one of the hardcoded available fieldnames for claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimFormItem.FormatString">
            <summary>For dates, the format string. ie MM/dd/yyyy or M d y among many other possibilities.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimFormItem.XPos">
            <summary>The x position of the item on the claim form.  In pixels. 100 pixels per inch.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimFormItem.YPos">
            <summary>The y position of the item.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimFormItem.Width">
            <summary>Limits the printable area of the item. Set to zero to not limit.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimFormItem.Height">
            <summary>Limits the printable area of the item. Set to zero to not limit.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimFormItem.Copy">
            <summary>Returns a copy of the claimformitem.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimPayment">
            <summary>Each row represents a single check from the insurance company.  The amount may be split between patients using claimprocs.  The amount of the check must always exactly equal the sum of all the claimprocs attached to it.  There might be only one claimproc.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPayment.ClaimPaymentNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPayment.CheckDate">
            <summary>Date the check was entered into this system, not the date on the check.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPayment.CheckAmt">
            <summary>The amount of the check.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPayment.CheckNum">
            <summary>The check number.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPayment.BankBranch">
            <summary>Bank and branch.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPayment.Note">
            <summary>Note for this check if needed.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPayment.ClinicNum">
            <summary>FK to clinic.ClinicNum.  0 if no clinic.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPayment.DepositNum">
            <summary>FK to deposit.DepositNum.  0 if not attached to any deposits.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPayment.CarrierName">
            <summary>Descriptive name of the carrier just for reporting purposes.  We use this because the CarrierNums could conceivably be different for the different claimprocs attached.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPayment.DateIssued">
            <summary>Date that the carrier issued the check. Date on the check.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPayment.IsPartial">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPayment.PayType">
            <summary>FK to definition.DefNum.  0 if not attached to any definitions</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPayment.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPayment.SecDateEntry">
            <summary>Timestamp automatically generated and user not allowed to change.  The actual date of entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPayment.SecDateTEdit">
            <summary>Automatically updated by MySQL every time a row is added or changed. Could be changed due to user editing, custom queries or program
            updates.  Not user editable with the UI.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimPayment.PayGroup">
            <summary>FK to definition.DefNum.  The payment group for this claim payment.</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimPayment.Copy">
            <summary>Returns a copy of this ClaimPayment.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimProc">
            <summary>Links procedures to claims.  Also links ins payments to procedures or claims.  Also used for estimating procedures even if no claim yet.  Warning: One proc might be linked twice to a given claim if insurance made two payments.  Many of the important fields are actually optional.  For instance, ProcNum is only required if itemizing ins payment, and ClaimNum is blank if Status=adjustment,cap,or estimate.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.ClaimProcNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.ProcNum">
            <summary>FK to procedurelog.ProcNum.  Is 0 for payments by total.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.ClaimNum">
            <summary>FK to claim.ClaimNum.  Is 0 for estimates, adjustments and capitation (CapClaim and CapComplete).</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.ProvNum">
            <summary>FK to provider.ProvNum.  At least one office has been manually setting their claimproc provider to a different provider when entering payments as a means to track provider income.  So we can't force this to always be the same as the procedure.  We also don't want to change any historical data, so only synched when setting appt complete or if an estimate.  Right now on e-claims, we are sending the prov from the procedure.  When we have time, we will change e-claims to send the prov from the ClaimProc.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.FeeBilled">
            <summary>Fee billed to insurance. Might not be the same as the actual fee.  The fee billed can be different than the actual procedure.  For instance, if you have set the insurance plan to bill insurance using UCR fees, then this field will contain the UCR fee instead of the fee that the patient was charged.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.InsPayEst">
            <summary>Only if attached to a claim.  Actual amount this carrier is expected to pay, after taking everything else into account. Considers annual max, override, percentAmt, copayAmt, deductible, etc. This estimate is computed automatically when sent to ins.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.DedApplied">
            <summary>0 if blank.  Deductible applied to this procedure only. Only for procedures attached to claims.  Otherwise, the DedEst and DedEstOverride are used.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.Status">
            <summary>Enum:ClaimProcStatus .</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.InsPayAmt">
            <summary>Amount insurance actually paid.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.Remarks">
            <summary>The remarks that insurance sends in the EOB about procedures.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.ClaimPaymentNum">
            <summary>FK to claimpayment.ClaimPaymentNum(the insurance check).</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.PlanNum">
            <summary>FK to insplan.PlanNum</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.DateCP">
            <summary>This is the date that is used for payment reports and tracks the payment date.  Always exactly matches the date of the ClaimPayment it's attached to.  See the note under Ledgers.ComputePayments.  This will eventually not be used for aging. The ProcDate will instead be used. See ProcDate.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.WriteOff">
            <summary>Amount not covered by ins which is written off.  The writeoff estimate goes in a different column.  This is filled with the WriteOffEst value when a claim is created.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.CodeSent">
            <summary>The procedure code that was sent to insurance. This is not necessarily the usual procedure code.  It will already have been trimmed to 5 char if it started with "D", or it could be the alternate code.  Not allowed to be blank if it is procedure.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.AllowedOverride">
            <summary>The allowed fee (not the override) is a complex calculation which is performed on the fly in Procedure.ComputeEstimates/ClaimProc.ComputeBaseEst.  It is the amount that the percentage is based on.  If this carrier has a lower UCR than the office, then the allowed fee is where that is handled.  It can be pulled from an allowed fee schedule.  It is also where substitutions for posterior composites are handled.  The AllowedOverride allows the user to override the calculation.  -1 indicates blank.  A new use of this field is for when entering insurance payments.  On the eob, it will tell you what the allowed/UCR fee is.  The user will now be able to enter this information into the AllowedOverride field.  They will simultaneously pass the info to the allowed fee schedule.  AllowedOverride is never changed automatically by the program except to sometimes set it to -1 if NoBillIns.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.Percentage">
            <summary>-1 if blank.  Otherwise a number between 0 and 100.  The percentage that insurance pays on this procedure, as determined from insurance categories. Not user editable.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.PercentOverride">
            <summary>-1 if blank.  Otherwise a number between 0 and 100.  Can only be changed by user.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.CopayAmt">
            <summary>-1 if blank. Calculated automatically. User cannot edit but can use CopayOverride instead.  Opposite of InsEst, because this is the patient portion estimate.  Two different uses: 1. For capitation, this automates calculation of writeoff. 2. For any other insurance, it gets deducted during calculation as shown in the edit window. Neither use directly affects patient balance.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.NoBillIns">
            <summary>Set to true to not bill to this insurance plan.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.PaidOtherIns">
            <summary>-1 if blank. The amount paid or estimated to be paid by another insurance.  This amount is then subtracted from what the current insurance would pay.  When running the calculation and considering other claimprocs, it will ignore any patPlan with a higher ordinal.  So, always blank for primary claims.  User cannot edit, but can use PaidOtherInsOverride.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.BaseEst">
            <summary>Always has a value. Used in TP, etc. The base estimate is the ((fee or allowedOverride)-Copay) x (percentage or percentOverride). Does not include all the extras like ded, annualMax,and paidOtherIns that InsEstTotal holds.  BaseEst cannot be overridden by the user.  Instead, the following fields can be manipulated: allowedOverride, CopayOverride, PercentOverride.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.CopayOverride">
            <summary>-1 if blank.  See description of CopayAmt.  This lets the user set a copay that will never be overwritten by automatic calculations.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.ProcDate">
            <summary>Date of the procedure.  Displayed in Edit Claim window procedures grid.  Currently only used for tracking annual insurance benefits remaining. Important in Adjustments to benefits.  For total claim payments, MUST be the date of the procedures to correctly figure benefits.  Will eventually transition to use this field to actually calculate aging.  See the note under Ledgers.ComputePayments.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.DateEntry">
            <summary>Date that it was changed to status received or supplemental.  It is usually attached to a claimPayment at that point, but not if user forgets.  This is still the date that it becomes important financial data.  Only applies if Received or Supplemental.  Otherwise, the date is disregarded.  User may never edit. Important in audit trail.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.LineNumber">
            <summary>Assigned when claim is created as a way to order the procs showing on a claim.  Indireclty goes out in X12 loop 2400.
            Used in Canadian eclaims (field F07).</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.DedEst">
            <summary>-1 if blank.  Not sure why we need to allow -1.  Calculated automatically.  User cannot edit, but can use DedEstOverride instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.DedEstOverride">
            <summary>-1 if blank.  Overrides the DedEst value.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.InsEstTotal">
            <summary>Always has a value.  BaseEst-(DedEst or DedEstOverride)-PaidOtherIns-OverAnnualMax.  User cannot edit, but can instead use InsEstTotalOverride. Recalculated each time TP is viewed, is saved as the value calculated for the last viewed TP. This variable should probably just be moved to memory and removed as a DB field.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.InsEstTotalOverride">
            <summary>-1 if blank.  Overrides the InsEstTotal value.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.PaidOtherInsOverride">
            <summary>-1 if blank.  Overrides the PaidOtherIns value.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.EstimateNote">
            <summary>An automatically generated note that displays information about over max, exclusions, and other limitations for which there are no fields.  Only applies to estimate.  Once it's attached to a claim, similar information can go in the remarks field.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.WriteOffEst">
            <summary>-1 if blank.  The estimated writeoff as calculated by OD.  Usually only used for PPOs. </summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.WriteOffEstOverride">
            <summary>-1 if blank.  Overrides WriteOffEst.  Usually only used for PPOs.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.ClinicNum">
            <summary>FK to clinic.ClinicNum.  Can be zero.  No user interface for editing.  Forced to always be the same as the procedure, or if no procedure, then the claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.InsSubNum">
            <summary>FK to inssub.InsSubNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.PaymentRow">
            <summary>1-indexed.  Allows user to sort the order of payments on an EOB.  All claimprocs for a payment will have the same PaymentRow value.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.DoDelete">
            <summary>Not a database column.  Used to help manage passing lists around.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.PayPlanNum">
            <summary>FK to payplan.PayPlanNum.  0 if not attached to a payplan.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.ClaimPaymentTracking">
            <summary>FK to definition.DefNum.  Connected to the ClaimPaymentTracking DefCat.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.SecDateEntry">
            <summary>Timestamp automatically generated and user not allowed to change.  The actual date of entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.SecDateTEdit">
            <summary>Automatically updated by MySQL every time a row is added or changed. Could be changed due to user editing, custom queries or program
            updates.  Not user editable with the UI.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimProc.DateSuppReceived">
            <summary>The date the claim proc was first set to received or supplemental. If status is set to something other than received/supplemental,
            this field will be set to DateTime.MinValue if DateSuppReceived is today.  If DateSuppReceived is set to a day in the past and the status is 
            changed from received/supplemental to something else, the field will not be cleared or updated.  Db only field used by one customer and this is
            how they requested it.  PatNum #19191</summary>
        </member>
        <member name="M:OpenDentBusiness.ClaimProc.Copy">
            <summary>Returns a copy of this ClaimProc.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimValCodeLog">
            <summary>Value codes for institutional 'claims'.  Can have up to 12 per claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimValCodeLog.ClaimValCodeLogNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimValCodeLog.ClaimNum">
            <summary>FK to claim.ClaimNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimValCodeLog.ClaimField">
            <summary>Descriptive abbreviation to help place field on form (Ex: "FL55" for field 55).</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimValCodeLog.ValCode">
            <summary>Value Code. 2 char.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimValCodeLog.ValAmount">
            <summary>Value Code Amount.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimValCodeLog.Ordinal">
            <summary>Order of Value Code</summary>
        </member>
        <member name="T:OpenDentBusiness.Clearinghouse">
            <summary>Since we can send e-claims to multiple clearinghouses, this table keeps track of each clearinghouse.  Will eventually be used for individual carriers as well if they accept </summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.ClearinghouseNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.Description">
            <summary>Description of this clearinghouse</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.ExportPath">
            <summary>The path to export the X12 file to. \ is now optional.  Can be overridden by clinic-level clearinghouses.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.Payors">
            <summary>A list of all payors which should have claims sent to this clearinghouse. Comma delimited with no spaces.  Not necessary if IsDefault.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.Eformat">
            <summary>Enum:ElectronicClaimFormat The format of the file that gets sent electronically.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.ISA05">
            <summary>Sender ID Qualifier. Usually ZZ, sometimes 30. Seven other values are allowed as specified in X12 document, but probably never used.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.SenderTIN">
            <summary>Used in ISA06, GS02, 1000A NM1, and 1000A PER.  If blank, then 810624427 is used to indicate Open Dental.
            Can be overridden by clinic-level clearinghouses.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.ISA07">
            <summary>Receiver ID Qualifier.  Usually ZZ, sometimes 30. Seven other values are allowed as specified in X12 document, but probably never used.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.ISA08">
            <summary>Receiver ID. Also used in GS03. Provided by clearinghouse. Examples: BCBSGA or 0135WCH00(webMD)</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.ISA15">
            <summary>"P" for Production or "T" for Test.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.Password">
            <summary>Password is usually combined with the login ID for user validation.  Can be overridden by clinic-level clearinghouses.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.ResponsePath">
            <summary>The path that all incoming response files will be saved to. \ is now optional.
            Can be overridden by clinic-level clearinghouses.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.CommBridge">
            <summary>Enum:EclaimsCommBridge  One of the included hard-coded communications briges.  Or none to just create the claim files without uploading.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.ClientProgram">
            <summary>If applicable, this is the name of the client program to launch.  It is even used by the hard-coded comm bridges,
            because the user may have changed the installation directory or exe name.  Can be overridden by clinic-level clearinghouses.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.LastBatchNumber">
            <summary>Each clearinghouse increments their batch numbers by one each time a claim file is sent.  User never sees this number.  Maxes out at 999, then loops back to 1.  This field must NOT be cached and must be ignored in the code except where it explicitly retrieves it from the db.  Defaults to 0 for brand new clearinghouses, which causes the first batch to go out as #1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.ModemPort">
            <summary>Was not used.  1,2,3,or 4. The port that the modem is connected to if applicable. Always uses 9600 baud and standard settings. Will crash if port or modem not valid.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.LoginID">
            <summary>A clearinghouse usually has a login ID that is used with the password in order to access the remote server.
            This value is not usualy used within the actual claim.  Can be overridden by clinic-level clearinghouses.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.SenderName">
            <summary>Used in 1000A NM1 and 1000A PER.  But if SenderTIN is blank, then OPEN DENTAL SOFTWARE is used instead.
            Can be overridden by clinic-level clearinghouses.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.SenderTelephone">
            <summary>Used in 1000A PER.  But if SenderTIN is blank, then 8776861248 is used instead.  10 digit phone is required by WebMD and is 
            universally assumed, so for now, this must be either blank or 10 digits.  Can be overridden by clinic-level clearinghouses.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.GS03">
            <summary>Usually the same as ISA08, but at least one clearinghouse uses a different number here.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.ISA02">
            <summary>Authorization information. Almost always blank. Used for Denti-Cal.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.ISA04">
            <summary>Security information. Almost always blank. Used for Denti-Cal.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.ISA16">
            <summary>X12 component element separator. Two digit hexadecimal string representing an ASCII character or blank. Usually blank, implying 3A which represents ':'. For Denti-Cal, hexadecimal value 22 must be used, corresponding to '"'.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.SeparatorData">
            <summary>X12 data element separator. Two digit hexadecimal string representing an ASCII character or blank. Usually blank, implying 2A which represents '*'. For Denti-Cal, hexadecimal value 1D must be used, corresponding to the "group separator" character which has no visual representation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.SeparatorSegment">
            <summary>X12 segment terminator. Two digit hexadecimal string representing an ASCII character or blank. Usually blank, implying 7E which represents '~'. For Denti-Cal, hexadecimal value 1C must be used, corresponding to the "file separator" character which has no visual representation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.ClinicNum">
            <summary>FK to clinic.ClinicNum.  ClinicNum=0 for HQ.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clearinghouse.HqClearinghouseNum">
            <summary>FK to ClearinghouseNum.  Never 0.  Points to the HQ copy of this clearinghouse.
            If this copy is the HQ copy, then HqClearinghouseNum=ClearinghouseNum.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clearinghouse.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Clinic">
            <summary>A clinic is usually a separate physical office location.  If multiple clinics are sharing one database, then this is used.  Patients, Operatories, Claims, and many other types of objects can be assigned to a clinic.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.ClinicNum">
            <summary>Primary key.  Used in patient,payment,claimpayment,appointment,procedurelog, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.Description">
            <summary>Use Abbr for all user-facing forms.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.Address">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.Address2">
            <summary>Second line of address.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.City">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.State">
            <summary>2 char in the US.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.Zip">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.BillingAddress">
            <summary>Overrides Address on claims if not blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.BillingAddress2">
            <summary>Second line of billing address.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.BillingCity">
            <summary>Overrides City on claims if BillingAddress is not blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.BillingState">
            <summary>Overrides State on claims if BillingAddress is not blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.BillingZip">
            <summary>Overrides Zip on claims if BillingAddress is not blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.PayToAddress">
            <summary>Overrides practice PayTo address if not blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.PayToAddress2">
            <summary>Second line of PayTo address.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.PayToCity">
            <summary>Overrides practice PayToCity if PayToAddress is not blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.PayToState">
            <summary>Overrides practice PayToState if PayToAddress is not blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.PayToZip">
            <summary>Overrides practice PayToZip if PayToAddress is not blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.Phone">
            <summary>Does not include any punctuation.  Exactly 10 digits or blank in USA and Canada.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.BankNumber">
            <summary>The account number for deposits.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.DefaultPlaceService">
            <summary>Enum:PlaceOfService Usually 0 unless a mobile clinic for instance.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.InsBillingProv">
            <summary>FK to provider.ProvNum.  0=Default practice provider, -1=Treating provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.Fax">
            <summary>Does not include any punctuation.  Exactly 10 digits or empty in USA and Canada.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.EmailAddressNum">
            <summary>FK to EmailAddress.EmailAddressNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.DefaultProv">
            <summary>FK to provider.ProvNum.  Used in place of the default practice provider when making new patients.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.SmsContractDate">
            <summary>DateSMSContract was signed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.SmsMonthlyLimit">
            <summary>Always stored in USD, this is the desired limit for SMS out for a given month.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.IsMedicalOnly">
            <summary>True if this clinic is a medical clinic.  Used to hide/change certain areas of Open Dental, like hiding the tooth chart and changing
            'dentist' to 'provider'.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.UseBillAddrOnClaims">
            <summary>True if this clinic's billing address should be used on outgoing claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.Region">
            <summary>FK to definition.DefNum when definition.DefCat is Regions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.ItemOrder">
            <summary>0 based.  Clinics cache is sorted by ItemOrder if the preference ClinicListIsAlphabetical is false.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.IsInsVerifyExcluded">
            <summary>True if this clinic should be excluded from showing up in the Insurance Verification List.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.Abbr">
            <summary>Abbreviation for the Clinic's description.  Sorted by Abbr if ClinicListIsAlphabetical is true.  Use this for all user-facing forms.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.MedLabAccountNum">
            <summary>FK to medlab.PatAccountNum.  Used to filter MedLab results by the MedLab Account Number assigned to each clinic.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.IsConfirmEnabled">
            <summary>Clinic level preference. (Better Name is "IsAutomationEnabled" but that conflicts with other definitions of what Automation means. 
            Determines if automated reminders and confirmations should be sent for/from this clinic.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.IsConfirmDefault">
            <summary>Clinic level preference. If true then this clinic is using the default automated reminder/confirmation settings as defined by the user.</summary>
        </member>
        <member name="F:OpenDentBusiness.Clinic.IsNewPatApptExcluded">
            <summary>Indicates whether or not the New Patient Appointment version of Web Sched is excluded for this specifc clinic.</summary>
        </member>
        <member name="M:OpenDentBusiness.Clinic.Copy">
            <summary>Returns a copy of this Clinic.</summary>
        </member>
        <member name="T:OpenDentBusiness.ClockEvent">
            <summary>One clock-in / clock-out pair.  Of, if the pair is a break, then it's an out/in pair.  With normal clock in/out pairs, we want to know how long the employee was working.  It's the opposite with breaks.  We want to know how long they were not working, so the pair is backwards.  This means that a normal clock in is left incomplete when the clock out for break is created.  And once both are finished, the regular in/out will surround the break.  Breaks cannot be viewed easily on the same grid as regular clock events for this reason.  And since breaks do not affect pay, they should not clutter the normal grid.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockEvent.ClockEventNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockEvent.EmployeeNum">
            <summary>FK to employee.EmployeeNum</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockEvent.TimeEntered1">
            <summary>The actual time that this entry was entered.  Cannot be 01-01-0001.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockEvent.TimeDisplayed1">
            <summary>The time to display and to use in all calculations.  Cannot be 01-01-0001.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockEvent.ClockStatus">
            <summary>Enum:TimeClockStatus  Home, Lunch, or Break.  The status really only applies to the clock out.  Except the Break status applies to both out and in.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockEvent.Note">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockEvent.TimeEntered2">
            <summary>The user can never edit this, but the program has to be able to edit this when user clocks out.  Can be 01-01-0001 if not clocked out yet.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockEvent.TimeDisplayed2">
            <summary>User can edit. Can be 01-01-0001 if not clocked out yet.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockEvent.OTimeHours">
            <summary>This is a manual override for OTimeAuto.  Typically -1 hour (-01:00:00) to indicate no override.  When used as override, allowed values are zero or positive.  This is an alternative to using a TimeAdjust row.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockEvent.OTimeAuto">
            <summary>Automatically calculated OT.  Will be zero if none.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockEvent.Adjust">
            <summary>This is a manual override of AdjustAuto.  Ignored unless AdjustIsOverridden set to true.  When used as override, it's typically negative, although zero and positive are also allowed.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockEvent.AdjustAuto">
            <summary>Automatically calculated Adjust.  Will be zero if none.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockEvent.AdjustIsOverridden">
            <summary>True if AdjustAuto is overridden by Adjust.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockEvent.Rate2Hours">
            <summary>This is a manual override for Rate2Auto.  Typically -1 hour (-01:00:00) to indicate no override.  When used as override, allowed values are zero or positive.  This is the portion of the hours worked which are at Rate2, so it's not in addition to the hours worked.  Also used to calculate the Rate2 OT.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockEvent.Rate2Auto">
            <summary>Automatically calculated rate2 pay.  Will be zero if none.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClockEvent.ClinicNum">
            <summary>FK to clinic.ClinicNum.  The clinic the ClockEvent was entered at.</summary>
        </member>
        <member name="P:OpenDentBusiness.ClockEvent.OTimeHoursXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="P:OpenDentBusiness.ClockEvent.OTimeAutoXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="P:OpenDentBusiness.ClockEvent.AdjustXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="P:OpenDentBusiness.ClockEvent.AdjustAutoXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="P:OpenDentBusiness.ClockEvent.DiffHoursXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="P:OpenDentBusiness.ClockEvent.DiffAutoXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="M:OpenDentBusiness.ClockEvent.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Commlog">
            <summary>Tracks all forms of communications with patients, including emails, phonecalls, postcards, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.Commlog.CommlogNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Commlog.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Commlog.CommDateTime">
            <summary>Date and time of entry</summary>
        </member>
        <member name="F:OpenDentBusiness.Commlog.CommType">
            <summary>FK to definition.DefNum. This will be 0 if IsStatementSent.  Used to be an enumeration in previous versions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Commlog.Note">
            <summary>Note for this commlog entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.Commlog.Mode_">
            <summary>Enum:CommItemMode Phone, email, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.Commlog.SentOrReceived">
            <summary>Enum:CommSentOrReceived Neither=0,Sent=1,Received=2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Commlog.UserNum">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Commlog.Signature">
            <summary>Signature.  For details, see procedurelog.Signature.</summary>
        </member>
        <member name="F:OpenDentBusiness.Commlog.SigIsTopaz">
            <summary>True if signed using the Topaz signature pad, false otherwise.</summary>
        </member>
        <member name="F:OpenDentBusiness.Commlog.DateTStamp">
            <summary>Automatically updated by MySQL every time a row is added or changed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Commlog.DateTimeEnd">
            <summary>Date and time when commlog ended.  Mainly for internal use.</summary>
        </member>
        <member name="F:OpenDentBusiness.Commlog.CommSource">
            <summary>Enum:CommItemSource Set to the source of the entity that created this commlog.  E.g. WebSched.</summary>
        </member>
        <member name="F:OpenDentBusiness.Commlog.ProgramNum">
            <summary>FK to program.ProgramNum.  This will be 0 unless CommSource is set to ProgramLink.</summary>
        </member>
        <member name="M:OpenDentBusiness.Commlog.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.CommItemMode">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.CommItemMode.None">
            <summary>0- </summary>
        </member>
        <member name="F:OpenDentBusiness.CommItemMode.Email">
            <summary>1- </summary>
        </member>
        <member name="F:OpenDentBusiness.CommItemMode.Mail">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.CommItemMode.Phone">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.CommItemMode.InPerson">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.CommItemMode.Text">
            <summary>5</summary>
        </member>
        <member name="T:OpenDentBusiness.CommSentOrReceived">
            <summary>0=neither, 1=sent, 2=received.</summary>
        </member>
        <member name="F:OpenDentBusiness.CommSentOrReceived.Neither">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.CommSentOrReceived.Sent">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.CommSentOrReceived.Received">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.CommItemSource">
            <summary>0=neither, 1=sent, 2=received.</summary>
        </member>
        <member name="F:OpenDentBusiness.CommItemSource.User">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.CommItemSource.WebSched">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.CommItemSource.ProgramLink">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.CommItemSource.ApptReminder">
            <summary>3</summary>
        </member>
        <member name="T:OpenDentBusiness.Computer">
            <summary>Keeps track of the computers in an office.  The list will eventually become cluttered with the names of old computers that are no longer in service.  The old rows can be safely deleted.  Although the primary key is used in at least one table, this will probably be changed, and the computername will become the primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Computer.ComputerNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Computer.CompName">
            <summary>Name of the computer.</summary>
        </member>
        <member name="F:OpenDentBusiness.Computer.LastHeartBeat">
            <summary>Allows use to tell which computers are running.  All workstations record a heartbeat here at an interval of 3 minutes.  And when they shut down, they set this value to min.  So if the heartbeat is fairly fresh, then that's an accurate indicator of whether Open Dental is running on that computer.</summary>
        </member>
        <member name="T:OpenDentBusiness.ComputerPref">
            <summary>Enables preference specification for individual computers on a customer network.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.ComputerPrefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.ComputerName">
            <summary>The human-readable name of the computer on the network (not the IP address).</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.GraphicsUseHardware">
            <summary>Set to true if the tooth chart is to use a hardware accelerated OpenGL window when available. Set to false to use software rendering when available. Of course, the final pixel format on the customer machine depends on the list of available formats. Best match pixel format is always used. This option only applies if GraphicsSimple is set to false.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.GraphicsSimple">
            <summary>Enum:DrawingMode Set to 1 to use the low-quality 2D tooth chart in the chart module. Set to 0 to use a 3D DirectX based tooth chart in the chart module. This option helps the program run even when the local graphics hardware is buggy or unavailable.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.SensorType">
            <summary>Indicates the type of Suni sensor connected to the local computer (if any). This can be a value of A, B, C, or D.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.SensorBinned">
            <summary>Indicates wether or not the Suni sensor uses binned operation.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.SensorPort">
            <summary>Indicates which Suni box port to connect with. There are 2 ports on a box (ports 0 and 1).</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.SensorExposure">
            <summary>Indicates the exposure level to use when capturing from a Suni sensor. Values can be 1 through 7.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.GraphicsDoubleBuffering">
            <summary>Indicates if the user prefers double-buffered 3D tooth-chart (where applicable).</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.PreferredPixelFormatNum">
            <summary>Indicates the current pixel format by number which the user prefers.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.AtoZpath">
            <summary>The path of the A-Z folder for the specified computer.  Overrides the officewide default.  Used when multiple locations are on a single virtual database and they each want to look to the local data folder for images.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.TaskKeepListHidden">
            <summary>If the global setting for showing the Task List is on, this controls if it should be hidden on this specified computer</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.TaskDock">
            <summary>Dock task bar on bottom (0) or right (1).</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.TaskX">
            <summary>X pos for right docked task list.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.TaskY">
            <summary>Y pos for bottom docked task list.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.DirectXFormat">
            <summary>Holds a semi-colon separated list of enumeration names and values representing a DirectX format. If blank, then
            no format is currently set and the best theoretical foramt will be chosen at program startup. If this value is set to
            'opengl' then this computer is using OpenGL and a DirectX format will not be picked.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.ScanDocSelectSource">
            <summary>Show the select scanner dialog when scanning documents.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.ScanDocShowOptions">
            <summary>Show the scanner options dialog when scanning documents.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.ScanDocDuplex">
            <summary>Attempt to scan in duplex mode when scanning multipage documents with an ADF.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.ScanDocGrayscale">
            <summary>Scan in gray scale when scanning documents.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.ScanDocResolution">
            <summary>Scan at the specified resolution when scanning documents.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.ScanDocQuality">
            <summary>0-100. Quality of jpeg after compression when scanning documents.  100 indicates full quality.  Opposite of compression.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.ClinicNum">
            <summary>FK to clinic.ClinicNum.  The most recent clinic for this computer.  Determines which clinic is used when loading Open Dental.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.ApptViewNum">
            <summary>FK to apptview.ApptViewNum.  The most recent appt view num for this computer.  Used when opening with the Appts module in conjunction with ClinicNum if this ApptViewNum is associated to the ClinicNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.RecentApptView">
            <summary>Deprecated.  The index of the most recent appt view for this computer.  Uses it when opening.  This column cannot be dropped due to older versions using it upon opening (prior to calling the update file copier code) so they will throw a UE if this column is ever dropped.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.PatSelectSearchMode">
            <summary>Enum:SearchMode The search mode that is used when loading the patient select window, and while typing.
            When 0 the patient select window will use the DB wide pref PatientSelectUsesSearchButton.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.NoShowDecimal">
            <summary>If true, don't warn user if the region's decimal setting is not 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.ComputerPref.ComputerOS">
            <summary>The current operating system platform for the computer.</summary>
        </member>
        <member name="T:OpenDentBusiness.DrawingMode">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DrawingMode.DirectX">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.DrawingMode.Simple2D">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.DrawingMode.OpenGL">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.SearchMode">
            <summary>The search mode that is used when loading the patient select window, and while typing</summary>
        </member>
        <member name="F:OpenDentBusiness.SearchMode.Default">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.SearchMode.UseSearchButton">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.SearchMode.RefreshWhileTyping">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.PlatformOD">
            <summary>Mimics .NET enum PlatformID.</summary>
        </member>
        <member name="F:OpenDentBusiness.PlatformOD.Undefined">
            <summary>Only happens when workstation has not ran through convert script yet.</summary>
        </member>
        <member name="F:OpenDentBusiness.PlatformOD.Win32S">
            <summary>The operating system is Win32s. Win32s is a layer that runs on 16-bit versions of Windows to provide access to 32-bit applications.</summary>
        </member>
        <member name="F:OpenDentBusiness.PlatformOD.Win32Windows">
            <summary> The operating system is Windows 95 or Windows 98.</summary>    
        </member>
        <member name="F:OpenDentBusiness.PlatformOD.Win32NT">
            <summary>The operating system is Windows NT or later.</summary>
        </member>
        <member name="F:OpenDentBusiness.PlatformOD.WinCE">
            <summary>The operating system is Windows CE.</summary>
        </member>
        <member name="F:OpenDentBusiness.PlatformOD.Unix">
            <summary>The operating system is Unix.</summary>
        </member>
        <member name="F:OpenDentBusiness.PlatformOD.MacOSX">
            <summary>The operating system is Macintosh.</summary>
        </member>
        <member name="T:OpenDentBusiness.Contact">
            <summary>Like a rolodex for businesses that the office interacts with.  Used to store pharmacies, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.Contact.ContactNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Contact.LName">
            <summary>Last name or, frequently, the entire name.</summary>
        </member>
        <member name="F:OpenDentBusiness.Contact.FName">
            <summary>First name is optional.</summary>
        </member>
        <member name="F:OpenDentBusiness.Contact.WkPhone">
            <summary>Work phone.</summary>
        </member>
        <member name="F:OpenDentBusiness.Contact.Fax">
            <summary>Fax number.</summary>
        </member>
        <member name="F:OpenDentBusiness.Contact.Category">
            <summary>FK to definition.DefNum</summary>
        </member>
        <member name="F:OpenDentBusiness.Contact.Notes">
            <summary>Note for this contact.</summary>
        </member>
        <member name="T:OpenDentBusiness.CanadianNetwork">
            <summary>Not user-editable.</summary>
        </member>
        <member name="F:OpenDentBusiness.CanadianNetwork.CanadianNetworkNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.CanadianNetwork.Abbrev">
            <summary>This will also be the folder name</summary>
        </member>
        <member name="F:OpenDentBusiness.CanadianNetwork.Descript">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.CanadianNetwork.CanadianTransactionPrefix">
            <summary>A01.  Up to 12 char.</summary>
        </member>
        <member name="F:OpenDentBusiness.CanadianNetwork.CanadianIsRprHandler">
            <summary>Set to true if this network is in charge of handling all Request for Payment Reconciliation (RPR) transactions for all carriers within this network, as opposed to the individual carriers wihtin the network processing the RPR transactions themselves.</summary>
        </member>
        <member name="M:OpenDentBusiness.CanadianNetwork.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ClaimAttach">
            <summary>Keeps track of one image file attached to a claim.  Multiple files can be attached to a claim using this method.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimAttach.ClaimAttachNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimAttach.ClaimNum">
            <summary>FK to claim.ClaimNum</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimAttach.DisplayedFileName">
            <summary>The name of the file that shows on the claim.  For example: tooth2.jpg.</summary>
        </member>
        <member name="F:OpenDentBusiness.ClaimAttach.ActualFileName">
            <summary>The actual file is stored in the A-Z folder in EmailAttachments.  (yes, even though it's not actually an email attachment)  The files are named automatically based on Date/time along with a random number.  This ensures that they will be sequential as well as unique.</summary>
        </member>
        <member name="T:OpenDentBusiness.SheetField">
            <summary>One field on a sheet.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.SheetFieldNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.SheetNum">
            <summary>FK to sheet.SheetNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.FieldType">
            <summary>Enum:SheetFieldType  OutputText, InputField, StaticText,Parameter(only used for SheetField, not SheetFieldDef),Image,Drawing,Line,Rectangle,CheckBox,SigBox,PatImage.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.FieldName">
            <summary><para>Mostly for OutputText and InputField types.  Each sheet typically has a main datatable type.</para>
            <para>OutputText: FieldName is usually the string representation of the database column for the main table.  For other tables, it can be of the form table.Column.  There may also be extra fields available that are not strictly pulled from the database.  Extra fields will start with lowercase to indicate that they are not pure database fields.  The list of available fields for each type in SheetFieldsAvailable.  Users can pick from that list.  </para>
            <para>InputField: are internally tied to actions to persist the data.  So they are also hard coded and are available in SheetFieldsAvailable.  </para>
            <para>Static images: this is the full file name including extension, but without path.  Static images paths are reconstructed by looking in the AtoZ folder, SheetImages folder.  </para>
            <para>PatImage: This is the DefNum for the document category. This is used in SheetFiller to find a document num, this is translated in FormSheetFillEdit to a human readable name. Example: 113 (if 113 is the defnum for photos). In FormSheetFillEdit,  this will display as PatImg:photos.</para>
            <para>Parameter: the FieldName stores the name of the parameter.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.FieldValue">
            <summary><para>For OutputText, this value is set before printing.  This is the data obtained from the database and ready to print.  For StaticText, this is copied from the sheetFieldDef, but in-line fields like [this] will have been filled.  For an archived sheet retrieved from the database (all SheetField rows), this value will have been saved and will not be filled again automatically.</para>
            <para>Parameter fieldtype: this will store the value of the parameter.</para>
            <para>Drawing fieldtype: this will be the point data for the lines.  The format would look similar to this: 45,68;48,70;49,72;0,0;55,88;etc.  It's simply a sequence of points, separated by semicolons.</para>
            <para>CheckBox: it will either be an X or empty.</para>
            <para>SigBox: the first char will be 0 or 1 to indicate SigIsTopaz, and all subsequent chars will be the Signature itself.</para>
            <para>PatImage: Docnum or blank, FK to document.DocNum.</para>
            <para>ComboBox: The chosen option, semicolon, then a pipe delimited list of options such as: March;January|February|March|April</para>
            <para>ScreenChart: Contains a semicolon delimited list of a single number followed by groups of comma separated surfaces.
            The first digit represents what type of ScreenChart it is.  0 = Permanent, 1 = Primary
            It may look like 0;S,P,N;S,S,S;... etc.</para></summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.FontSize">
            <summary>The fontSize for this field regardless of the default for the sheet.  The actual font must be saved with each sheetField.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.FontName">
            <summary>The fontName for this field regardless of the default for the sheet.  The actual font must be saved with each sheetField.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.FontIsBold">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.XPos">
            <summary>In pixels.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.YPos">
            <summary>In pixels.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.Width">
            <summary>The field will be constrained horizontally to this size.  Not allowed to be zero.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.Height">
            <summary>The field will be constrained vertically to this size.  Not allowed to be stored as 0.  It's not allowed to be zero so that it will be visible on the designer. Set to 0 in memory by SheetUtil.CalculateHeights if image is innacessible for printing.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.GrowthBehavior">
            <summary>Enum:GrowthBehaviorEnum</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.RadioButtonValue">
            <summary>This is only used for checkboxes that you want to behave like radiobuttons.  Set the FieldName the same for each Checkbox in the group.  The FieldValue will likely be X for one of them and empty string for the others.  Each of them will have a different RadioButtonValue.  Whichever box has X, the RadioButtonValue for that box will be used when importing.  This field is not used for "misc" radiobutton groups.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.RadioButtonGroup">
            <summary>Name which identifies the group within which the radio button belongs. FieldName must be set to "misc" in order for the group to take effect.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.IsRequired">
            <summary>Set to true if this field is required to have a value before the sheet is closed.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.TabOrder">
            <summary>Tab stop order for all fields. Only checkboxes and input fields can have values other than 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.ReportableName">
            <summary>Allows reporting on misc fields.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.TextAlign">
            <summary>Text Alignment for text fields.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.ItemColor">
            <summary>Text color, line color, rectangle color.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.SigKey">
            <summary>Used to store the key to display signature box when printing.  Not stored in DB.</summary>
        </member>
        <member name="F:OpenDentBusiness.SheetField.DateTimeSig">
            <summary>DateTime that a sheet was signed.</summary>
        </member>
        <member name="P:OpenDentBusiness.SheetField.ItemColorXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="P:OpenDentBusiness.SheetField.Bounds">
            <Summary>Should only be called after FieldValue has been set, due to GrowthBehavior.</Summary>
        </member>
        <member name="P:OpenDentBusiness.SheetField.BoundsF">
            <Summary>Should only be called after FieldValue has been set, due to GrowthBehavior.</Summary>
        </member>
        <member name="T:OpenDentBusiness.Pharmacy">
            <summary>An individual pharmacy store.</summary>
        </member>
        <member name="F:OpenDentBusiness.Pharmacy.PharmacyNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Pharmacy.PharmID">
            <summary>NCPDPID assigned by NCPDP.  Not used yet.</summary>
        </member>
        <member name="F:OpenDentBusiness.Pharmacy.StoreName">
            <summary>For now, it can just be a common description.  Later, it might have to be an official designation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Pharmacy.Phone">
            <summary>Includes all punctuation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Pharmacy.Fax">
            <summary>Includes all punctuation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Pharmacy.Address">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Pharmacy.Address2">
            <summary>Optional.</summary>
        </member>
        <member name="F:OpenDentBusiness.Pharmacy.City">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Pharmacy.State">
            <summary>Two char, uppercase.</summary>
        </member>
        <member name="F:OpenDentBusiness.Pharmacy.Zip">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Pharmacy.Note">
            <summary>A freeform note for any info that is needed about the pharmacy, such as hours.</summary>
        </member>
        <member name="F:OpenDentBusiness.Pharmacy.DateTStamp">
            <summary>The last date and time this row was altered.  Not user editable.</summary>
        </member>
        <member name="T:OpenDentBusiness.Sheet">
            <summary>One sheet for one patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.SheetNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.SheetType">
            <summary>Enum:SheetTypeEnum</summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.PatNum">
            <summary>FK to patient.PatNum.  A saved sheet is always attached to a patient (except deposit slip).  There are a few sheets that are so minor that they don't get saved, such as a Carrier label.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.DateTimeSheet">
            <summary>The date and time of the sheet as it will be displayed in the commlog.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.FontSize">
            <summary>The default fontSize for the sheet.  The actual font must still be saved with each sheetField.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.FontName">
            <summary>The default fontName for the sheet.  The actual font must still be saved with each sheetField.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.Width">
            <summary>Width of each page in the sheet in pixels, 100 pixels per inch.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.Height">
            <summary>Height of each page in the sheet in pixels, 100 pixels per inch.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.IsLandscape">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.InternalNote">
            <summary>An internal note for the use of the office staff regarding the sheet.  Not to be printed on the sheet in any way.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.Description">
            <summary>Copied from the SheetDef description.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.ShowInTerminal">
            <summary>The order that this sheet will show in the patient terminal for the patient to fill out.  Or zero if not set.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.IsWebForm">
            <summary>True if this sheet was downloaded from the webforms service.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.IsMultiPage">
            <summary>Forces old single page behavior, ignoring page breaks.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.IsDeleted">
            <summary>Indicates whether or not this sheet has been marked deleted.</summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.Parameters">
            <Summary>A collection of all parameters for this sheetdef.  There's usually only one parameter.  The first parameter will be a List long if it's a batch.  If a sheet has already been filled, saved to the database, and printed, then there is no longer any need for the parameters in order to fill the data.  So a retrieved sheet will have no parameters, signalling a skip in the fill phase.  There will still be parameters tucked away in the Field data in the database, but they won't become part of the sheet.</Summary>
        </member>
        <member name="F:OpenDentBusiness.Sheet.SheetFields">
            <Summary></Summary>
        </member>
        <member name="P:OpenDentBusiness.Sheet.HeightPage">
            <summary>Vertical height per page taking into account the IsLandscape flag.</summary>
        </member>
        <member name="P:OpenDentBusiness.Sheet.WidthPage">
            <summary>Horizontal width per page taking into account the IsLandscape flag.</summary>
        </member>
        <member name="P:OpenDentBusiness.Sheet.HeightLastField">
            <summary>Finds the lowest lower bound of all of the SheeFields. Recalculated every time this property is called.</summary>
        </member>
        <member name="P:OpenDentBusiness.Sheet.SheetFieldsXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="T:OpenDentBusiness.Site">
            <summary>Generally used by mobile clinics to track the temporary locations where treatment is performed, such as schools, nursing homes, and community centers.  Replaces the old school table.</summary>
        </member>
        <member name="F:OpenDentBusiness.Site.SiteNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Site.Description">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Site.Note">
            <summary>Notes could include phone, contacts, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.Site.Address">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Site.Address2">
            <summary>Optional second address line.</summary>
        </member>
        <member name="F:OpenDentBusiness.Site.City">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Site.State">
            <summary>2 Char in USA.  Used to store province for Canadian users.</summary>
        </member>
        <member name="F:OpenDentBusiness.Site.Zip">
            <summary>Postal code.</summary>
        </member>
        <member name="F:OpenDentBusiness.Site.ProvNum">
            <summary>FK to provider.ProvNum.  Default provider for the site.</summary>
        </member>
        <member name="F:OpenDentBusiness.Site.PlaceService">
            <summary>Enum:PlaceOfService Describes where the site is located.</summary>
        </member>
        <member name="T:OpenDentBusiness.Statement">
            <summary>Represents one statement for one family.  Usually already sent, but could still be waiting to send.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.StatementNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.PatNum">
            <summary>FK to patient.PatNum. Typically the guarantor.  Can also be the patient for walkout statements.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.SuperFamily">
            <summary>FK to patient.PatNum.  Typically zero unless a super family statement is desired.
            Will be non-zero if the patient is associated with a super family and a super family statement is desired.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.DateSent">
            <summary>This will always be a valid and reasonable date regardless of whether it's actually been sent yet.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.DateRangeFrom">
            <summary>Typically 45 days before dateSent</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.DateRangeTo">
            <summary>Any date >= year 2200 is considered max val.  We generally try to automate this value to be the same date as the statement rather than the max val.  This is so that when payment plans are displayed, we can add approximately 10 days to effectively show the charge that will soon be due.  Adding the 10 days is not done until display time.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.Note">
            <summary>Can include line breaks.  This ordinary note will be in the standard font.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.NoteBold">
            <summary>More important notes may go here.  Font will be bold.  Color and size of text will be customizable in setup.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.Mode_">
            <summary>Enum:StatementMode Mail, InPerson, Email, Electronic.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.HidePayment">
            <summary>Set true to hide the credit card section, and the please pay box.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.SinglePatient">
            <summary>One patient on statement instead of entire family.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.Intermingled">
            <summary>If entire family, then this determines whether they are all intermingled into one big grid, or whether they are all listed in separate grids.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.IsSent">
            <summary>True</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.DocNum">
            <summary>FK to document.DocNum when a pdf has been archived.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.DateTStamp">
            <summary>Date/time last altered.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.IsReceipt">
            <summary>The only effect of this flag is to change the text at the top of a statement from "statement" to "receipt".  It might later do more.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.IsInvoice">
            <summary>This flag is for marking a statement as Invoice.  In this case, it must have procedures and/or adjustments attached.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.IsInvoiceCopy">
            <summary>Only used if IsInvoice=true.  The first printout will not be a copy.  Subsequent printouts will show "copy" on them.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.EmailSubject">
            <summary>Empty string by default.  Only used to override BillingEmailSubject pref when emailing statements.  Only set when statements are created from the Billing Options window.  No UI for editing.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.EmailBody">
            <summary>Empty string by default.  Only used to override BillingEmailBodyText pref when emailing statements.  Only set when statements are created from the Billing Options window.  No UI for editing.  Limit in db: 16M char.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.IsBalValid">
            <summary>True for statements generated in version 16.1 or greater. Older statements did not store InsEst or BalTotal. </summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.InsEst">
            <summary>Insurance Estimate for entire family, taken from garantor at time of statement being sent/saved.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.BalTotal">
            <summary>Total balance for entire family before insurance estimate.  
            Not the same as the sum of the 4 aging balances because this can be negative.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement.StatementType">
            <summary>Enum:StmtType Statement, Receipt, Invoice, LimitedStatement.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement._listAdjNums">
            <summary>List of attached adjustment.AdjNums for this statement.  Limit in db: 16M char.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement._listPaySplitNums">
            <summary>List of attached paysplit.PaySplitNums for this statement.  Limit in db: 16M char.</summary>
        </member>
        <member name="F:OpenDentBusiness.Statement._listProcNums">
            <summary>List of attached procedure.ProcNums for this statement.  Limit in db: 16M char.</summary>
        </member>
        <member name="P:OpenDentBusiness.Statement.ListAdjNums">
            <summary>Set list to null to force refresh.</summary>
        </member>
        <member name="P:OpenDentBusiness.Statement.ListPaySplitNums">
            <summary>Set list to null to force refresh.</summary>
        </member>
        <member name="P:OpenDentBusiness.Statement.ListProcNums">
            <summary>Set list to null to force refresh.</summary>
        </member>
        <member name="T:OpenDentBusiness.StmtType">
            <summary>The type of this statement.  This will eventually replace IsReceipt and IsInvoice. Stored as EnumAsString.</summary>
        </member>
        <member name="F:OpenDentBusiness.StmtType.NotSet">
            <summary>Regular statement.</summary>
        </member>
        <member name="F:OpenDentBusiness.StmtType.LimitedStatement">
            <summary>Contains information about specific procedures.</summary>
        </member>
        <member name="T:OpenDentBusiness.TaskAncestor">
            <summary>Represents one ancestor of one task.  Each task will have at least one ancestor unless it is directly on a main trunk.  An ancestor is defined as a tasklist that is higher in the heirarchy for the task, regardless of how many levels up it is.  This allows us to mark task lists as having "new" tasks, and it allows us to quickly check for new tasks for a user on startup.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskAncestor.TaskAncestorNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskAncestor.TaskNum">
            <summary>FK to task.TaskNum</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskAncestor.TaskListNum">
            <summary>FK to tasklist.TaskListNum</summary>
        </member>
        <member name="T:OpenDentBusiness.TaskSubscription">
            <summary>A subscription of one user to either a tasklist or to a task.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskSubscription.TaskSubscriptionNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskSubscription.UserNum">
            <summary>FK to userod.UserNum</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskSubscription.TaskListNum">
            <summary>FK to tasklist.TaskListNum</summary>
        </member>
        <member name="T:OpenDentBusiness.SupplyOrderItem">
            <summary>One item on one supply order.  This table links supplies to orders as well as storing a small amount of additional info.</summary>
        </member>
        <member name="F:OpenDentBusiness.SupplyOrderItem.SupplyOrderItemNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SupplyOrderItem.SupplyOrderNum">
            <summary>FK to supplyorder.supplyOrderNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.SupplyOrderItem.SupplyNum">
            <summary>FK to supply.SupplyNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.SupplyOrderItem.Qty">
            <summary>How many were ordered.</summary>
        </member>
        <member name="F:OpenDentBusiness.SupplyOrderItem.Price">
            <summary>Price per unit on this order.</summary>
        </member>
        <member name="T:OpenDentBusiness.SupplyOrder">
            <summary>One supply order to one supplier.  Contains SupplyOrderItems.</summary>
        </member>
        <member name="F:OpenDentBusiness.SupplyOrder.SupplyOrderNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SupplyOrder.SupplierNum">
            <summary>FK to supplier.SupplierNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.SupplyOrder.DatePlaced">
            <summary>A date greater than 2200 (eg 2500), is considered a max date.  A max date is used for an order that was started but has not yet been placed.  This puts it at the end of the list where it belongs, but it will display as blank.  Only one unplaced order is allowed per supplier.</summary>
        </member>
        <member name="F:OpenDentBusiness.SupplyOrder.Note">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.SupplyOrder.AmountTotal">
            <summary>The sum of all the amounts of each item on the order.  If any of the item prices are zero, then it won't auto calculate this total.  This will allow the user to manually put in the total without having it get deleted.</summary>
        </member>
        <member name="T:OpenDentBusiness.Supply">
            <summary>A dental supply or office supply item.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supply.SupplyNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supply.SupplierNum">
            <summary>FK to supplier.SupplierNum</summary>
        </member>
        <member name="F:OpenDentBusiness.Supply.CatalogNumber">
            <summary>The catalog item number that the supplier uses to identify the supply.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supply.Descript">
            <summary>The description can be similar to the catalog, but not required.  Typically includes qty per box/case, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supply.Category">
            <summary>FK to definition.DefNum.  User can define their own categories for supplies.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supply.ItemOrder">
            <summary>The zero-based order of this supply within it's category.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supply.LevelDesired">
            <summary>The level that a fresh order should bring item back up to.  Can include fractions.  If this is 0, then it will be displayed as having this field blank rather than showing 0.  This simply gives a cleaner look.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supply.IsHidden">
            <summary>If hidden, then this supply item won't normally show in the main list.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supply.Price">
            <summary>The price per unit that the supplier charges for this supply.  If this is 0.00, then no price will be displayed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supply.BarCodeOrID">
            <summary>Scanned code from a reader.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supply.DispDefaultQuant">
            <summary>Only used for dental schools.  This is the typical quantity dispensed at the window.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supply.DispUnitsCount">
            <summary>Only used in dental schools.  For example, 20 capsules composite per container.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supply.DispUnitDesc">
            <summary>Only used in dental schools.  Description of the units when dispensing for use.  For example: Capsule, cartridge, carpule, glove, or needle.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supply.LevelOnHand">
            <summary>Quantity of the supply available.</summary>
        </member>
        <member name="M:OpenDentBusiness.Supply.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Supplier">
            <summary>A company that provides supplies for the office, typically dental supplies.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supplier.SupplierNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supplier.Name">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supplier.Phone">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supplier.CustomerId">
            <summary>The customer ID that this office uses for transactions with the supplier</summary>
        </member>
        <member name="F:OpenDentBusiness.Supplier.Website">
            <summary>Full address to website.  We might make it clickable.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supplier.UserName">
            <summary>The username used to log in to the supplier website.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supplier.Password">
            <summary>The password to log in to the supplier website.  Not encrypted or hidden in any way.</summary>
        </member>
        <member name="F:OpenDentBusiness.Supplier.Note">
            <summary>Any note regarding supplier.  Could hold address, CC info, etc.</summary>
        </member>
        <member name="T:OpenDentBusiness.SupplyNeeded">
            <summary>A supply freeform typed in by a user.</summary>
        </member>
        <member name="F:OpenDentBusiness.SupplyNeeded.SupplyNeededNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SupplyNeeded.Description">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.SupplyNeeded.DateAdded">
            <summary>.</summary>
        </member>
        <member name="T:OpenDentBusiness.Popup">
            <summary>If an existing popup message gets changed, then an archive first gets created that's a copy of the original.  This is so that we can track historical changes.  When a new one gets created, all the archived popups will get automatically repointed to the new one.  If you "delete" a popup, it actually archives that popup.  All the other archives of that popup still point to the newly archived popup, but now there is no popup in that group with the IsArchived flag not set.</summary>
        </member>
        <member name="F:OpenDentBusiness.Popup.PopupNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Popup.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Popup.Description">
            <summary>The text of the popup.</summary>
        </member>
        <member name="F:OpenDentBusiness.Popup.IsDisabled">
            <summary>If true, then the popup won't automatically show when a patient is selected.  Kind of useless except for offices that want to still show historical popups.</summary>
        </member>
        <member name="F:OpenDentBusiness.Popup.PopupLevel">
            <summary>Enum:EnumPopupLevel 0=Patient, 1=Family, 2=Superfamily. If Family, then this Popup will apply to the entire family.  
            If Superfamily, then this popup will apply to the entire superfamily.</summary>
        </member>
        <member name="F:OpenDentBusiness.Popup.UserNum">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Popup.DateTimeEntry">
            <summary>The server time that this note was entered.  Cannot be changed by user.  Does not get changed automatically when level or isDisabled gets changed.  If note itself changes, then a new popup is created along with a new DateTimeEntry. Current popup's edit date gets set to the previous entry's DateTimeEntry</summary>
        </member>
        <member name="F:OpenDentBusiness.Popup.IsArchived">
            <summary>Indicates that this is not the most current popup and that it is an archive.  True for any archived or "deleted" popups.</summary>
        </member>
        <member name="F:OpenDentBusiness.Popup.PopupNumArchive">
            <summary>This will be zero for current popups that show when a patient is selected.  Archived popups will have a value which is the FK to its parent Popup.  The parent popup could be the most recent popup or another archived popup.  Will be zero for current and "deleted" popups.</summary>
        </member>
        <member name="T:OpenDentBusiness.EnumPopupLevel">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumPopupLevel.Patient">
            <summary>0=Patient</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumPopupLevel.Family">
            <summary>1=Family</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumPopupLevel.SuperFamily">
            <summary>2=SuperFamily</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumPopupLevel.Automation">
            <summary>3=Automation</summary>
        </member>
        <member name="T:OpenDentBusiness.DisplayField">
            <summary>Allows customization of which fields display in various lists and grids.  For now, the only grid is ProgressNotes.  Will also eventually let users set column widths and translate titles.  For now, the selections are the same for all computers.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayField.DisplayFieldNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayField.InternalName">
            <summary>This is the internal name that OD uses to identify the field within this category.  This will be the default description if the user doesn't specify an alternate.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayField.ItemOrder">
            <summary>Order to display in the grid or list. Every entry must have a unique itemorder.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayField.Description">
            <summary>Optional alternate description to display for field.  Can be in another language.  For the ortho category, this is the 'key', since InternalName is blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayField.ColumnWidth">
            <summary>For grid columns, this lets user override the column width.  Especially useful for foreign languages.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayField.Category">
            <summary>Enum:DisplayFieldCategory If category is 0, then this is attached to a ChartView.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayField.ChartViewNum">
            <summary>FK to chartview.ChartViewNum. 0 if attached to a category.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayField.PickList">
            <summary>Newline delimited string which contains the selectable options in combo box dropdowns.  Specifically for the Ortho chart.</summary>
        </member>
        <member name="M:OpenDentBusiness.DisplayField.Copy">
            <summary>Returns a copy.</summary>
        </member>
        <member name="T:OpenDentBusiness.DisplayFieldCategory">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayFieldCategory.None">
            <summary>0- This indicates progress notes.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayFieldCategory.PatientSelect">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayFieldCategory.PatientInformation">
            <summary>2- Family module.</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayFieldCategory.AccountModule">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayFieldCategory.RecallList">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayFieldCategory.ChartPatientInformation">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayFieldCategory.ProcedureGroupNote">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayFieldCategory.TreatmentPlanModule">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayFieldCategory.OrthoChart">
            <summary>8</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayFieldCategory.AppointmentBubble">
            <summary>9</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayFieldCategory.AccountPatientInformation">
            <summary>10- Account module patient information</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayFieldCategory.StatementMainGrid">
            <summary>11</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayFieldCategory.FamilyRecallGrid">
            <summary>12</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayFieldCategory.AppointmentEdit">
            <summary>13</summary>
        </member>
        <member name="F:OpenDentBusiness.DisplayFieldCategory.PlannedAppointmentEdit">
            <summary>14</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcCodeNote">
            <summary>Stores the default note and time increments for one procedure code for one provider.  That way, an unlimited number of providers can each have different notes and times.  These notes and times override the defaults which are part of the procedurecode table.  So, for single provider offices, there will be no change to the current interface.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcCodeNote.ProcCodeNoteNum">
            <summary>Primary Key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcCodeNote.CodeNum">
            <summary>FK to procedurecode.CodeNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcCodeNote.ProvNum">
            <summary>FK to provider.ProvNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcCodeNote.Note">
            <summary>The note.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcCodeNote.ProcTime">
            <summary>X's and /'s describe Dr's time and assistant's time in the same increments as the user has set.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcCodeNote.Copy">
            <summary>Returns a copy of this ProcCodeNote</summary>
        </member>
        <member name="T:OpenDentBusiness.ReqStudent">
            <summary>For Dental Schools.  The purpose of this table changed significantly in version 4.5.  This now only stores completed requirements.  There can be multiple completed requirements of each ReqNeededNum.  No need to synchronize any longer.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReqStudent.ReqStudentNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReqStudent.ReqNeededNum">
            <summary>FK to reqneeded.ReqNeededNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReqStudent.Descript">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReqStudent.SchoolCourseNum">
            <summary>FK to schoolcourse.SchoolCourseNum.  Never 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReqStudent.ProvNum">
            <summary>FK to provider.ProvNum.  The student.  Never 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReqStudent.AptNum">
            <summary>FK to appointment.AptNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReqStudent.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.ReqStudent.InstructorNum">
            <summary>FK to provider.ProvNum</summary>
        </member>
        <member name="F:OpenDentBusiness.ReqStudent.DateCompleted">
            <summary>The date that the requirement was completed.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReqStudent.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ReqNeeded">
            <summary>For Dental Schools.  Requirements needed in order to complete a course.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReqNeeded.ReqNeededNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReqNeeded.Descript">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReqNeeded.SchoolCourseNum">
            <summary>FK to schoolcourse.SchoolCourseNum.  Never 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.ReqNeeded.SchoolClassNum">
            <summary>FK to schoolclass.SchoolClassNum.  Never 0.</summary>
        </member>
        <member name="M:OpenDentBusiness.ReqNeeded.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.LabTurnaround">
            <summary>The amount of time it takes for a lab case to be processed at the lab.  Used to compute due dates.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabTurnaround.LabTurnaroundNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabTurnaround.LaboratoryNum">
            <summary>FK to laboratory.LaboratoryNum. The lab that this item is attached to.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabTurnaround.Description">
            <summary>The description of the service that the lab is performing.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabTurnaround.DaysPublished">
            <summary>The number of days that the lab publishes as the turnaround time for the service.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabTurnaround.DaysActual">
            <summary>The actual number of days.  Might be longer than DaysPublished due to travel time.  This is what the actual calculations will be done on.</summary>
        </member>
        <member name="T:OpenDentBusiness.LabCase">
            <summary>A lab case.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabCase.LabCaseNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabCase.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabCase.LaboratoryNum">
            <summary>FK to laboratory.LaboratoryNum. The lab that the case gets sent to.  Required.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabCase.AptNum">
            <summary>FK to appointment.AptNum.  This is how a lab case is attached to a scheduled appointment. 1:1 relationship for now.  Only one labcase per appointment, and (obviously) only one appointment per labcase.  Labcase can exist without being attached to any appointments at all, making this zero.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabCase.PlannedAptNum">
            <summary>FK to appointment.AptNum.  This is how a lab case is attached to a planned appointment in addition to the scheduled appointment.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabCase.DateTimeDue">
            <summary>The due date that is put on the labslip.  NOT when you really need the labcase back, which is usually a day or two later and is the date of the appointment this case is attached to.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabCase.DateTimeCreated">
            <summary>When this lab case was created. User can edit.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabCase.DateTimeSent">
            <summary>Time that it actually went out to the lab.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabCase.DateTimeRecd">
            <summary>Date/time received back from the lab.  If this is filled, then the case is considered received.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabCase.DateTimeChecked">
            <summary>Date/time that quality was checked.  It is now completely ready for the patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabCase.ProvNum">
            <summary>FK to provider.ProvNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabCase.Instructions">
            <summary>The text instructions for this labcase.</summary>
        </member>
        <member name="F:OpenDentBusiness.LabCase.LabFee">
            <summary>There is no UI built yet for this field.  Plugins might be making use of this field.</summary>
        </member>
        <member name="T:OpenDentBusiness.Laboratory">
            <summary>A dental laboratory. Will be attached to lab cases.</summary>
        </member>
        <member name="F:OpenDentBusiness.Laboratory.LaboratoryNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Laboratory.Description">
            <summary>Description of lab.</summary>
        </member>
        <member name="F:OpenDentBusiness.Laboratory.Phone">
            <summary>Freeform text includes punctuation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Laboratory.Notes">
            <summary>Any notes.  No practical limit to amount of text.</summary>
        </member>
        <member name="F:OpenDentBusiness.Laboratory.Slip">
            <summary>FK to sheetdef.SheetDefNum.  Lab slips can be set for individual laboratories.  If zero, then the default internal lab slip will be used instead of a custom lab slip.</summary>
        </member>
        <member name="F:OpenDentBusiness.Laboratory.Address">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Laboratory.City">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Laboratory.State">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Laboratory.Zip">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Laboratory.Email">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Laboratory.WirelessPhone">
            <summary>.</summary>
        </member>
        <member name="T:OpenDentBusiness.Mount">
            <summary>A mount shows in the images module just like other images in the tree.  But it is just a container for images within it rather than an actual image itself.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mount.MountNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mount.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.Mount.DocCategory">
            <summary>FK to definition.DefNum. Categories for documents.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mount.DateCreated">
            <summary>The date at which the mount itself was created. Has no bearing on the creation date of the images the mount houses.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mount.Description">
            <summary>Used to provide a document description in the image module tree-view.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mount.Note">
            <summary>To allow the user to enter specific information regarding the exam and tooth numbers, as well as points on interest in the xray images.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mount.ImgType">
            <summary>Enum:ImageType This is so that an image can be properly associated with the mount in the image module tree-view.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mount.Width">
            <summary>The static width of the mount, in pixels.</summary>
        </member>
        <member name="F:OpenDentBusiness.Mount.Height">
            <summary>The static height of the mount, in pixels.</summary>
        </member>
        <member name="M:OpenDentBusiness.Mount.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.MountItem">
            <summary>These are always attached to a mount and are constant. Should not be deleted, but rather updated if geometry changes.  Documents are then attached to MountItems using Document.MountItemNum field.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountItem.MountItemNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountItem.MountNum">
            <summary>FK to mount.MountNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountItem.Xpos">
            <summary>The x position, in pixels, of the item on the mount.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountItem.Ypos">
            <summary>The y position, in pixels, of the item on the mount.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountItem.OrdinalPos">
            <summary>The ordinal position of the item on the mount.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountItem.Width">
            <summary>The scaled or unscaled width of the mount item in pixels.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountItem.Height">
            <summary>The scaled or unscaled height of the mount item in pixels.</summary>
        </member>
        <member name="M:OpenDentBusiness.MountItem.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.MountItemDef">
            <summary>THIS TABLE IS NOT BEING USED.  These are always attached to mountdefs.  Can be deleted without any problems.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountItemDef.MountItemDefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountItemDef.MountDefNum">
            <summary>FK to mountdef.MountDefNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountItemDef.Xpos">
            <summary>The x position, in pixels, of the item on the mount.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountItemDef.Ypos">
            <summary>The y position, in pixels, of the item on the mount.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountItemDef.Width">
            <summary>Ignored if mount IsRadiograph.  For other mounts, the image will be scaled to fit within this space.  Any cropping, rotating, etc, will all be defined in the original image itself.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountItemDef.Height">
            <summary>Ignored if mount IsRadiograph.  For other mounts, the image will be scaled to fit within this space.  Any cropping, rotating, etc, will all be defined in the original image itself.</summary>
        </member>
        <member name="M:OpenDentBusiness.MountItemDef.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.MountDef">
            <summary>THIS TABLE IS NOT BEING USED.  These can be freely deleted, renamed, moved, etc. without affecting any patient info.  mountitemdef</summary>
        </member>
        <member name="F:OpenDentBusiness.MountDef.MountDefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountDef.Description">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountDef.ItemOrder">
            <summary>The order that the mount defs will show in various lists.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountDef.IsRadiograph">
            <summary>Set to true if this is just xrays.  If true, this prevents image from being scaled to fit inside the mount.  If false (composite photographs for example) then the images will be scaled to fit inside the mount. Later, the basic appearance or background color might be set based on this flag as well.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountDef.Width">
            <summary>The width of the mount, in pixels.  For radiograph mounts, this could be very large.  It must be large enough for the radiographs to fit in the mount without scaling.  For photos, it should also be large so that the scaling won't be too noticeable.  Shrinking to view or print will always produce nicer results than enlarging to view or print.</summary>
        </member>
        <member name="F:OpenDentBusiness.MountDef.Height">
            <summary>Height of the mount in pixels.</summary>
        </member>
        <member name="M:OpenDentBusiness.MountDef.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Etrans">
            <summary>One electronic transaction.  Typically, one claim or response.  Or one benefit request or response.  Is constantly being expanded to include more types of transactions with clearinghouses.  Also stores printing of paper claims.  Sometimes stores a copy of what was sent.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.EtransNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.DateTimeTrans">
            <summary>The date and time of the transaction.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.ClearingHouseNum">
            <summary>FK to clearinghouse.ClearinghouseNum .  Can be 0 if no clearinghouse was involved.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.Etype">
            <summary>Enum:EtransType</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.ClaimNum">
            <summary>FK to claim.ClaimNum if a claim. Otherwise 0.  Warning.  Original claim might have been deleted.  But if Canadian claim was successfully sent, then deletion will be blocked.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.OfficeSequenceNumber">
            <summary>For Canada.  Unique for every transaction sent.  Increments by one until 999999, then resets to 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.CarrierTransCounter">
            <summary>For Canada.  Separate counter for each carrier.  Increments by one until 99999, then resets to 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.CarrierTransCounter2">
            <summary>For Canada.  If this claim includes secondary, then this is the counter for the secondary carrier.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.CarrierNum">
            <summary>FK to carrier.CarrierNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.CarrierNum2">
            <summary>FK to carrier.CarrierNum Only used if secondary insurance info is provided on a claim.  Necessary for Canada.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.PatNum">
            <summary>FK to patient.PatNum This is useful in case the original claim has been deleted.  Now, we can still tell who the patient was.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.BatchNumber">
            <summary>Maxes out at 999, then loops back to 1.  This is not a good key, but is a restriction of (canadian?).  So dates must also be used to isolate the correct BatchNumber key.  Specific to one clearinghouse.  Only used with e-claims.  Claim will have BatchNumber, and 997 will have matching BatchNumber. (In X12 lingo, it's a functional group number)</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.AckCode">
            <summary>A=Accepted, R=Rejected, blank if not able to parse, Recd=Received (835s only).  More options will be added later.  The incoming 997 or 999 sets this flag automatically.  To find the 997 or 999, look for a matching BatchNumber with a similar date, since both the claims and the 997 or 999 will both have the same batch number.  The 997 or 999 does not have this flag set on itself.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.TransSetNum">
            <summary>For sent e-claims, within each batch (functional group), each carrier gets it's own transaction set.  Since 997s and 999s acknowledge transaction sets rather than batches, we need to keep track of which transaction set each claim is part of as well as which batch it's part of.  This field can't be set as part of 997 or 999, because one 997 or 999 refers to multiple trans sets.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.Note">
            <summary>Typical uses include indicating that the report was printed, the claim was resent, reason for rejection, etc.  For a 270, this contains the automatically generated short summary of the response.  The response could include the reason for failure, or it could be a short summary of the 271.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.EtransMessageTextNum">
            <summary>FK to etransmessagetext.EtransMessageTextNum.  Can be 0 if there is no message text.  Multiple Etrans objects can refer to the same message text, very common in a batch.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.AckEtransNum">
            <summary>FK to etrans.EtransNum.  Only has a non-zero value if there exists an ack etrans, like a 997, 999, 277ack, 271, 835, or ackError.  There can be only one ack for any given etrans, but one ack can apply to multiple etran's that were sent as one batch.  999 FK can be replaced by 277ack FK, and then by 835 FK. This column does triple duty.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.PlanNum">
            <summary>FK to insplan.PlanNum.  Used if EtransType.BenefitInquiry270 and BenefitResponse271 and Eligibility_CA.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.InsSubNum">
            <summary>FK to inssub.InsSubNum.  Used if EtransType.BenefitInquiry270 and BenefitResponse271 and Eligibility_CA.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.TranSetId835">
            <summary>X12 ST02 Transaction Set Identifier for an 835.  Specifies the unique transaction id within the 835 that this etrans record corresponds to.  This column will always be set for 835s imported in version 14.3 or greater.  For 835s imported in version 14.2, this column will alway be blank.  If blank, and there is more than one transaction id within the 835, then FormEtrans835PickEob will show and allow the user to select the desired EOB from a list.  The X12 guide states that there is only one transaction (EOB) allowed per 835, but ClaimConnect returns multiple transactions (EOBs) within a single 835 and other clearinghouses probably do as well.  When an 835 is imported, it is examined to determine the number of transactions within it.  One etrans entry is created for each EOB within the 835.  We may have a similar issue with multiple transactions within 277s as well, but we have not seen any evidence yet.  Our current 277 implementation expects a single transaction, just as the X12 standard specifies.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.CarrierNameRaw">
            <summary>Only used if the CarrierNum is 0.  If CarrierNum is not 0, the name associated to CarrierNum will override
            CarrierNameRaw in the FormClaimsSend history grid.  Added for 835s so that customer databases are not cluttered with dummy carriers and
            so there is no extra processing time when FormClaimsSend is loading.  Size is 60 bytes to match 835 carrier name length.</summary>
        </member>
        <member name="F:OpenDentBusiness.Etrans.PatientNameRaw">
            <summary>Only used if the PatNum is 0.  If PatNum is not 0, the name associated to PatNum will override PatientNameRaw
            in the FormClaimsSend history grid.  Added for 835s so that there is no extra processing time when FormClaimsSend is loading,
            and so text representing the patient count can be used instead of an actual patient name.  Size is 133 bytes to match X12 specs for 
            last name (60), first name (35), middle name (25), suffix (10), and spaces in between (3).</summary>
        </member>
        <member name="M:OpenDentBusiness.Etrans.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.EtransType">
            <summary>The _CA of some types should get stripped off when displaying to users.</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.ClaimSent">
            <summary>0 X12-837.  Should we differenitate between different kinds of 837s and 4010 vs 5010?</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.ClaimPrinted">
            <summary>1 claim</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.Claim_CA">
            <summary>2 Canada. Type 01</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.Claim_Ren">
            <summary>3 Renaissance</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.ClaimAck_CA">
            <summary>4 Canada. Type 11</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.ClaimEOB_CA">
            <summary>5 Canada. Type 21</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.Eligibility_CA">
            <summary>6 Canada. Type 08</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.EligResponse_CA">
            <summary>7 Canada. Type 18. V02 type 10.</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.ClaimReversal_CA">
            <summary>8 Canada. Type 02</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.Predeterm_CA">
            <summary>9 Canada. Type 03</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.RequestOutstand_CA">
            <summary>10 Canada. Type 04</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.RequestSumm_CA">
            <summary>11 Canada. Type 05</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.RequestPay_CA">
            <summary>12 Canada. Type 06</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.ClaimCOB_CA">
            <summary>13 Canada. Type 07</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.ReverseResponse_CA">
            <summary>14 Canada. Type 12</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.PredetermAck_CA">
            <summary>15 Canada. Type 13</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.PredetermEOB_CA">
            <summary>16 Canada. Type 23</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.OutstandingAck_CA">
            <summary>17 Canada. Type 14</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.EmailResponse_CA">
            <summary>18 Canada. Type 24</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.PaymentResponse_CA">
            <summary>19 Canada. Type 16</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.SummaryResponse_CA">
            <summary>20 Canada. Type 15</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.Acknowledge_997">
            <summary>21 Ack from clearinghouse. X12-997.</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.StatusNotify_277">
            <summary>22 X12-277. Unsolicited claim status notification.</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.TextReport">
            <summary>23 Text report from clearinghouse in human readable format.</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.BenefitInquiry270">
            <summary>24 X12-270.</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.BenefitResponse271">
            <summary>25 X12-271</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.AckError">
            <summary>26 When a Canadian message is sent, and an error comes back instead of a message.  This stores information about the error.  The etrans with this type is attached it to the original etrans as an ack.</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.ERA_835">
            <summary>27 X12-835. Electronic Remittance Advice (ERA).  Also known an an electronic EOB.</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.Acknowledge_999">
            <summary>28 Ack from clearinghouse. X12-999.</summary>
        </member>
        <member name="F:OpenDentBusiness.EtransType.Ack_Interchange">
            <summary>29 Simple and generic ack from clearinghouse which is used to replace 997s, 999s, or 277s.</summary>
        </member>
        <member name="T:OpenDentBusiness.FormPat">
            <summary>One form or questionnaire filled out by a patient.  Each patient can have multiple forms.</summary>
        </member>
        <member name="F:OpenDentBusiness.FormPat.FormPatNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.FormPat.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.FormPat.FormDateTime">
            <summary>The date and time that this questionnaire was filled out.</summary>
        </member>
        <member name="F:OpenDentBusiness.FormPat.QuestionList">
            <summary>Not a database field.</summary>
        </member>
        <member name="M:OpenDentBusiness.FormPat.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="M:OpenDentBusiness.FormPat.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.County">
            <summary>Used in public health.</summary>
        </member>
        <member name="F:OpenDentBusiness.County.CountyNum">
            <summary>Primary Key.</summary>
        </member>
        <member name="F:OpenDentBusiness.County.CountyName">
            <summary>Frequently used as the primary key of this table.  But it's allowed to change.  Change is programmatically synchronized.</summary>
        </member>
        <member name="F:OpenDentBusiness.County.CountyCode">
            <summary>Optional. Usage varies.</summary>
        </member>
        <member name="F:OpenDentBusiness.County.OldCountyName">
            <summary>Not a database field. This is the unaltered CountyName. Used for Update.</summary>
        </member>
        <member name="T:OpenDentBusiness.CovCat">
            <summary>Insurance coverage categories.  They need to look like in the manual for the American calculations to work properly.</summary>
        </member>
        <member name="F:OpenDentBusiness.CovCat.CovCatNum">
            <summary>Primary key.  Only used in Benefit and CovSpan tables.</summary>
        </member>
        <member name="F:OpenDentBusiness.CovCat.Description">
            <summary>Description of this category.</summary>
        </member>
        <member name="F:OpenDentBusiness.CovCat.DefaultPercent">
            <summary>Default percent for this category. -1 to skip this category and not apply a percentage.</summary>
        </member>
        <member name="F:OpenDentBusiness.CovCat.CovOrder">
            <summary>The order in which the categories are displayed.  Includes hidden categories. 0-based.</summary>
        </member>
        <member name="F:OpenDentBusiness.CovCat.IsHidden">
            <summary>If true, this category will be hidden.</summary>
        </member>
        <member name="F:OpenDentBusiness.CovCat.EbenefitCat">
            <summary>Enum:EbenefitCategory  The X12 benefit categories.  Each CovCat can link to one X12 category.  Default is 0 (unlinked).</summary>
        </member>
        <member name="M:OpenDentBusiness.CovCat.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.CovSpan">
            <summary>Always attached to covcats, this describes the span of procedure codes to which the category applies.</summary>
        </member>
        <member name="F:OpenDentBusiness.CovSpan.CovSpanNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.CovSpan.CovCatNum">
            <summary>FK to covcat.CovCatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.CovSpan.FromCode">
            <summary>Lower range of the span.  Does not need to be a valid code.</summary>
        </member>
        <member name="F:OpenDentBusiness.CovSpan.ToCode">
            <summary>Upper range of the span.  Does not need to be a valid code.</summary>
        </member>
        <member name="M:OpenDentBusiness.CovSpan.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Def">
            <summary>The info in the definition table is used by other tables extensively.  Almost every table in the database links to definition.  Almost all links to this table will be to a DefNum.  Using the DefNum, you can find any of the other fields of interest, usually the ItemName.  Make sure to look at the Defs class to see how the definitions are used.  Loaded into memory ahead of time for speed.  Some types of info such as operatories started out life in this table, but then got moved to their own table when more complexity was needed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Def.DefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Def.Category">
            <summary>Enum:DefCat</summary>
        </member>
        <member name="F:OpenDentBusiness.Def.ItemOrder">
            <summary>Order that each item shows on various lists. 0-indexed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Def.ItemName">
            <summary>Each category is a little different.  This field is usually the common name of the item.</summary>
        </member>
        <member name="F:OpenDentBusiness.Def.ItemValue">
            <summary>This field can be used to store extra info about the item.</summary>
        </member>
        <member name="F:OpenDentBusiness.Def.ItemColor">
            <summary>Some categories include a color option.</summary>
        </member>
        <member name="F:OpenDentBusiness.Def.IsHidden">
            <summary>If hidden, the item will not show on any list, but can still be referenced.</summary>
        </member>
        <member name="P:OpenDentBusiness.Def.ItemColorXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="M:OpenDentBusiness.Def.Copy">
            <summary>Returns a copy of the def.</summary>
        </member>
        <member name="T:OpenDentBusiness.DefCat">
            <summary>Definition Category. Go to the definition setup window in the program to see how each of these categories is used.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.AccountColors">
            <summary>0- Colors to display in Account module.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.AdjTypes">
            <summary>1- Adjustment types.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.ApptConfirmed">
            <summary>2- Appointment confirmed types.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.ApptProcsQuickAdd">
            <summary>3- Procedure quick add list for appointments.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.BillingTypes">
            <summary>4- Billing types.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.ClaimFormats">
            <summary>5- Not used.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.DunningMessages">
            <summary>6- Not used.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.FeeSchedNamesOld">
            <summary>7- Not used.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.MedicalNotes">
            <summary>8- Medical notes for quick paste.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.OperatoriesOld">
            <summary>9- No longer used</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.PaymentTypes">
            <summary>10- Payment types.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.ProcCodeCats">
            <summary>11- Procedure code categories.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.ProgNoteColors">
            <summary>12- Progress note colors.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.RecallUnschedStatus">
            <summary>13- Statuses for recall, unscheduled, and next appointments.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.ServiceNotes">
            <summary>14- Service notes for quick paste.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.DiscountTypes">
            <summary>15- Discount types.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.Diagnosis">
            <summary>16- Diagnosis types.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.AppointmentColors">
            <summary>17- Colors to display in the Appointments module.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.ImageCats">
            <summary>18- Image categories.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.ApptPhoneNotes">
            <summary>19- Quick add notes for the ApptPhoneNotes, which is getting phased out.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.TxPriorities">
            <summary>20- Treatment plan priority names.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.MiscColors">
            <summary>21- Miscellaneous color options.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.ChartGraphicColors">
            <summary>22- Colors for the graphical tooth chart.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.ContactCategories">
            <summary>23- Categories for the Contact list.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.LetterMergeCats">
            <summary>24- Categories for Letter Merge.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.BlockoutTypes">
            <summary>25- Types of Schedule Blockouts.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.ProcButtonCats">
            <summary>26- Categories of procedure buttons in Chart module</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.CommLogTypes">
            <Summary>27- Types of commlog entries.</Summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.SupplyCats">
            <summary>28- Categories of Supplies</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.PaySplitUnearnedType">
            <summary>29- Types of unearned income used in accrual accounting.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.Prognosis">
            <summary>30- Prognosis types.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.ClaimCustomTracking">
            <summary>31- Custom Tracking, statuses such as 'review', 'hold', 'riskmanage', etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.InsurancePaymentType">
            <summary>32- PayType for claims such as 'Check', 'EFT', etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.TaskPriorities">
            <summary>33- Categories of priorities for tasks.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.FeeColors">
            <summary>34- Categories for fee override colors.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.ProviderSpecialties">
            <summary>35- Provider specialties.  General, Hygienist, Pediatric, Primary Care Physician, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.ClaimPaymentTracking">
            <summary>36- Reason why a claim proc was rejected. This must be set on each individual claim proc.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.AccountQuickCharge">
            <summary>37- Procedure quick charge list for patient accounts.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.InsuranceVerificationStatus">
            <summary>38- Insurance verification status such as 'Verified', 'Unverified', 'Pending Verification'.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.Regions">
            <summary>39- Regions that clinics can be assigned to.</summary>
        </member>
        <member name="F:OpenDentBusiness.DefCat.ClaimPaymentGroups">
            <summary>40- ClaimPayment Payment Groups.</summary>
        </member>
        <member name="T:OpenDentBusiness.Deposit">
            <summary>A deposit slip.  Contains multiple insurance and patient checks.</summary>
        </member>
        <member name="F:OpenDentBusiness.Deposit.DepositNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Deposit.DateDeposit">
            <summary>The date of the deposit.</summary>
        </member>
        <member name="F:OpenDentBusiness.Deposit.BankAccountInfo">
            <summary>User editable.  Usually includes name on the account and account number.  Possibly the bank name as well.</summary>
        </member>
        <member name="F:OpenDentBusiness.Deposit.Amount">
            <summary>Total amount of the deposit. User not allowed to directly edit.</summary>
        </member>
        <member name="F:OpenDentBusiness.Deposit.Memo">
            <summary>Short description to help identify the deposit.</summary>
        </member>
        <member name="M:OpenDentBusiness.Deposit.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Disease">
            <summary>Each row is one disease that one patient has.  Now called a problem in the UI.  Must have a DiseaseDefNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Disease.DiseaseNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Disease.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.Disease.DiseaseDefNum">
            <summary>FK to diseasedef.DiseaseDefNum.  The disease description is in that table.</summary>
        </member>
        <member name="F:OpenDentBusiness.Disease.PatNote">
            <summary>Any note about this disease that is specific to this patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.Disease.DateTStamp">
            <summary>The last date and time this row was altered.  Not user editable.</summary>
        </member>
        <member name="F:OpenDentBusiness.Disease.ProbStatus">
            <summary>Enum:ProblemStatus Active=0, Resolved=1, Inactive=2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Disease.DateStart">
            <summary>Date that the disease was diagnosed.  Can be minval if unknown.</summary>
        </member>
        <member name="F:OpenDentBusiness.Disease.DateStop">
            <summary>Date that the disease was set resolved or inactive.  Will be minval if still active.  ProbStatus should be used to determine if it is active or not.</summary>
        </member>
        <member name="F:OpenDentBusiness.Disease.SnomedProblemType">
            <summary>FK to snomed.SnomedCode.  Used in EHR CCD export/import only.  Must be one of the following SNOMED codes:
            Problem/Concern (55607006 or blank), Finding (404684003), Complaint (409586006), Dignosis (282291009), Condition (64572001), FunctionalLimitation (248536006), Symptom (418799008).</summary>
        </member>
        <member name="F:OpenDentBusiness.Disease.FunctionStatus">
            <summary>Enum:FunctionalStatus  Used to export EHR CCD functional status and/or cognitive status information only.</summary>
        </member>
        <member name="M:OpenDentBusiness.Disease.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.FunctionalStatus">
            <summary>Used in EHR to export patient functional and cognitive statuses on CCD documents.</summary>
        </member>
        <member name="F:OpenDentBusiness.FunctionalStatus.Problem">
            <summary>0 - Default value.  If not using EHR, then each diseasedef will use this value.</summary>
        </member>
        <member name="F:OpenDentBusiness.FunctionalStatus.CognitiveResult">
            <summary>1 - This clinical statement contains details of an evaluation or assessment of a patient’s cognitive status. The evaluation may include assessment of a patient's mood, memory, and ability to make decisions. The statement will include, if present, supporting caregivers, non-medical devices, and the time period for which the evaluation and assessment were performed.</summary>
        </member>
        <member name="F:OpenDentBusiness.FunctionalStatus.CognitiveProblem">
            <summary>2 - A cognitive status problem observation is a clinical statement that describes a patient's cognitive condition, findings or symptoms. Examples of cognitive problem observations are inability to recall, amnesia, dementia, and aggressive behavior. A cognitive problem observation is a finding or medical condition. This is different from a cognitive result observation, which is a response to a question that provides insight to the patient's cognitive status. It reflects findings that provide information about a medical condition, while a result observation reflects responses to questions in a cognitive test or those that provide information about a person's judgement, comprehension ability, and response speed.</summary>
        </member>
        <member name="F:OpenDentBusiness.FunctionalStatus.FunctionalResult">
            <summary>3 - This clinical statement represents details of an evaluation or assessment of a patient’s functional status. The evaluation may include assessment of a patient's  language, vision, hearing, activities of daily living, behavior, general function, mobility and self-care status. The statement will include, if present, supporting caregivers, non-medical devices, and the time period for which the evaluation and assessment were performed.</summary>
        </member>
        <member name="F:OpenDentBusiness.FunctionalStatus.FunctionalProblem">
            <summary>4 - A functional status problem observation is a clinical statement that represents a patient’s functional perfomance and ability.</summary>
        </member>
        <member name="T:OpenDentBusiness.DiseaseDef">
            <summary>A list of diseases that can be assigned to patients.  Cannot be deleted if in use by any patients.</summary>
        </member>
        <member name="F:OpenDentBusiness.DiseaseDef.DiseaseDefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.DiseaseDef.DiseaseName">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.DiseaseDef.ItemOrder">
            <summary>0-based.  The order that the diseases will show in various lists.</summary>
        </member>
        <member name="F:OpenDentBusiness.DiseaseDef.IsHidden">
            <summary>If hidden, the disease will still show on any patient that it was previously attached to, but it will not be available for future patients.</summary>
        </member>
        <member name="F:OpenDentBusiness.DiseaseDef.DateTStamp">
            <summary>The last date and time this row was altered.  Not user editable.</summary>
        </member>
        <member name="F:OpenDentBusiness.DiseaseDef.ICD9Code">
            <summary>FK to icd9.Icd9Code.  Example: 250.00 for diabetes.  User not allowed to enter any string anymore, must pick one from the Icd9Code table.  Some may exist in the databases without linking to a valid Icd9Code table entry if the ConvertDatabase could not find the user typed string in the list of valid Icd9Codes.</summary>
        </member>
        <member name="F:OpenDentBusiness.DiseaseDef.SnomedCode">
            <summary>FK to snomed.SnomedCode.  Example: 230572002 for diabetic neuropathy.  User not allowed to enter any string anymore, must pick from the Snomed table.  Some may exist in the databases without linking to a valid Snomed table entry if the ConvertDatabase could find the user typed string in the list of valid SnomedCodes.</summary>
        </member>
        <member name="F:OpenDentBusiness.DiseaseDef.Icd10Code">
            <summary>FK to icd10.Icd10Code.  Example: E10.1 for 'Type 1 diabetes mellitus with ketoacidosis'. User not allowed to enter any string anymore, must pick one from the Icd10Code table.</summary>
        </member>
        <member name="M:OpenDentBusiness.DiseaseDef.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Document">
            <summary>Represents a single document in the images module.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.DocNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.Description">
            <summary>Description of the document.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.DateCreated">
            <summary>Date/time created.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.DocCategory">
            <summary>FK to definition.DefNum. Categories for documents.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.PatNum">
            <summary>FK to patient.PatNum.  The document will be located in the patient folder of this patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.FileName">
            <summary>The name of the file. Does not include any directory info.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.ImgType">
            <summary>Enum:ImageType eg. document, radiograph, photo, file</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.IsFlipped">
            <summary>True if flipped horizontally. A vertical flip would be stored as a horizontal flip plus a 180 rotation.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.DegreesRotated">
            <summary>Only allowed 0,90,180, and 270.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.ToothNumbers">
            <summary>Incomplete.  An optional list of tooth numbers separated by commas.  The tooth numbers will be in American format and must be processed for display.  When displayed, dashes will be used for sequences of 3 or more tooth numbers.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.Note">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.SigIsTopaz">
            <summary>True if the signature is in Topaz format rather than OD format.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.Signature">
            <summary>The encrypted and bound signature in base64 format.  The signature is bound to the byte sequence of the original image.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.CropX">
            <summary>Crop rectangle X in original image pixel coordinates.  May be negative.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.CropY">
            <summary>Crop rectangle Y in original image pixel coordinates.  May be negative.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.CropW">
            <summary>Crop rectangle Width in original image pixel coordinates.  May be zero if no cropping.  May be greater than original image width.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.CropH">
            <summary>Crop rectangle Height in original image pixel coordinates.  May be zero if no cropping.  May be greater than original image height.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.WindowingMin">
            <summary>The lower value of the "windowing" (contrast/brightness) for radiographs.  Default is 0.  Max is 255.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.WindowingMax">
            <summary>The upper value of the "windowing" (contrast/brightness) for radiographs.  Default is 0(no windowing).  Max is 255.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.MountItemNum">
            <summary>FK to mountitem.MountItemNum. If set, then this image will only show on a mount, not in the main tree. If set to 0, then no mount item is associated with this document.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.DateTStamp">
            <summary>Date/time last altered.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.RawBase64">
            <summary>The raw file data encoded as base64.  Only used if there is no AtoZ folder.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.Thumbnail">
            <summary>Thumbnail encoded as base64.  Only present if not using AtoZ folder. 100x100 pixels, jpg, takes around 5.5k.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.ExternalGUID">
            <summary>The primary key associated to a document hosted on an external source.</summary>
        </member>
        <member name="F:OpenDentBusiness.Document.ExternalSource">
            <summary>Enum:ExternalSourceType The source for the corresponding ExternalGUID.</summary>
        </member>
        <member name="M:OpenDentBusiness.Document.Copy">
            <summary>Returns a copy of this Document.</summary>
        </member>
        <member name="T:OpenDentBusiness.ExternalSourceType">
            <summary>Supported sources that help identify what the corresponding ExternalGUID column should be used for.</summary>
        </member>
        <member name="F:OpenDentBusiness.ExternalSourceType.None">
            <summary>This is a document that is not stored in an external source.  All documents stored by Open Dental will be this type.</summary>
        </member>
        <member name="F:OpenDentBusiness.ExternalSourceType.Dropbox">
            <summary>This document can be found in a corresponding Dropbox account.</summary>
        </member>
        <member name="T:OpenDentBusiness.Dunning">
            <summary>A message that will show on certain patient statements when printing bills.  Criteria must be met in order for the dunning message to show.</summary>
        </member>
        <member name="F:OpenDentBusiness.Dunning.DunningNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Dunning.DunMessage">
            <summary>The actual dunning message that will go on the patient bill.</summary>
        </member>
        <member name="F:OpenDentBusiness.Dunning.BillingType">
            <summary>FK to definition.DefNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Dunning.AgeAccount">
            <summary>Program forces only 0,30,60,or 90.</summary>
        </member>
        <member name="F:OpenDentBusiness.Dunning.InsIsPending">
            <summary>Enum:YN Set Y to only show if insurance is pending.</summary>
        </member>
        <member name="F:OpenDentBusiness.Dunning.MessageBold">
            <summary>A message that will be copied to the NoteBold field of the Statement.</summary>
        </member>
        <member name="F:OpenDentBusiness.Dunning.EmailSubject">
            <summary>An override for the default email subject.</summary>
        </member>
        <member name="F:OpenDentBusiness.Dunning.EmailBody">
            <summary>An override for the default email body. Limit in db: 16M char.</summary>
        </member>
        <member name="F:OpenDentBusiness.Dunning.DaysInAdvance">
            <summary>The number of days before an account reaches AgeAccount to include this dunning message on statements.
            Example: If DaysInAdvance=3 and AgeAccount=90, an account that is 87 days old when bills are generated will include this message.</summary>
        </member>
        <member name="M:OpenDentBusiness.Dunning.Copy">
            <summary>Returns a copy of this Dunning.</summary>
        </member>
        <member name="T:OpenDentBusiness.ElectID">
            <summary>Corresponds to the electid table in the database. Helps with entering elecronic/payor id's as well as keeping track of the specific carrier requirements. Only used by the X12 format.</summary>
        </member>
        <member name="F:OpenDentBusiness.ElectID.ElectIDNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ElectID.PayorID">
            <summary>aka Electronic ID.  A simple string.</summary>
        </member>
        <member name="F:OpenDentBusiness.ElectID.CarrierName">
            <summary>Used when doing a search.</summary>
        </member>
        <member name="F:OpenDentBusiness.ElectID.IsMedicaid">
            <summary>True if medicaid. Then, the billing and treating providers will have their Medicaid ID's attached.</summary>
        </member>
        <member name="F:OpenDentBusiness.ElectID.ProviderTypes">
            <summary>Integers separated by commas. Each long represents a ProviderSupplementalID type that is required by this insurance. Usually only used for BCBS or other carriers that require supplemental provider id's.  Even if we don't put the supplemental types in here, the user can still add them.  This just helps by doing an additional check for known required types.</summary>
        </member>
        <member name="F:OpenDentBusiness.ElectID.Comments">
            <summary>Any comments. Usually includes enrollment requirements and descriptions of how to use the provider id's supplied by the carrier because they might call them by different names.</summary>
        </member>
        <member name="T:OpenDentBusiness.EmailAttach">
            <summary>Keeps track of one file attached to an email.  Multiple files can be attached to an email using this method.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAttach.EmailAttachNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAttach.EmailMessageNum">
            <summary>FK to emailmessage.EmailMessageNum.  0 if EmailTemplateNum is set, otherwise must have a value.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAttach.DisplayedFileName">
            <summary>The name of the file that shows on the email.  For example: tooth2.jpg.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAttach.ActualFileName">
            <summary>The actual file is stored in the A-Z folder in EmailAttachments.  This field stores the name of the file.  The files are named automatically based on Date/time along with a random number.  This ensures that they will be sequential as well as unique.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailAttach.EmailTemplateNum">
            <summary>FK to emailtemplate.EmailTemplateNum.  0 if EmailMessageNum is set, otherwise must have a value.</summary>
        </member>
        <member name="T:OpenDentBusiness.EmailMessage">
            <summary>Stores both sent and received emails, as well as saved emails which are still in composition.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessage.EmailMessageNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessage.PatNum">
            <summary>FK to patient.PatNum. The patient whom is sending this message. May be sent by a guarantor on behalf of a dependent.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessage.ToAddress">
            <summary>Either a single email address or a comma-delimited list of addresses.  
            For web mail messages, this will not be an email address.  Instead, it will be the name of the corresponding patient or provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessage.FromAddress">
            <summary>Valid email address.  For web mail messages, this will not be an email address.  Instead, it will be the name of the corresponding patient or provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessage.Subject">
            <summary>Subject line.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessage.BodyText">
            <summary>Body of the email</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessage.MsgDateTime">
            <summary>Date and time the message was sent. Automated at the UI level.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessage.SentOrReceived">
            <summary>Enum:EmailSentOrReceived Neither, Received, Read, WebMailReceived, WebMailRecdRead, WebMailSent, WebMailSentRead, SentDirect, ReceivedEncrypted, ReceivedDirect, ReadDirect, AckDirectProcessed, AckDirectNotSent</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessage.RecipientAddress">
            <summary>Copied from the EmailAddress.EmailUsername field when a message is received into the inbox.
            Similar to the ToAddress, except the ToAddress could contain multiple recipient addresses
            or group email address instead. The recipient address helps match the an email to a particular EmailAddress.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessage.RawEmailIn">
            <summary>For incomming email only.  The raw email contents for encrypted email or email which we had trouble parsing.
            For unencrypted (clear text) email, this will be similar to the raw email except the attachments will be dissolved to prevent db bloating. 
            Can be used for debugging if there are any issues parsing the content.
            This will bloat the database a little bit, but we need it for now to ensure our inbox is working in real world scenarios.
            Might be blank for a few emails downloaded immediately after the email inbox feature was created.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessage.Attachments">
            <summary>Not a database column.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessage.ProvNumWebMail">
            <summary>FK to provider.ProvNum.  The provider to whom this message was sent or from whom this message was sent.  Only used when EmailSentOrReceived is WebMailReceived, WebMailRecdRead, WebMailSent, or WebMailSentRead.  Will be 0 if not a web mail message.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessage.PatNumSubj">
            <summary>FK to patient.PatNum. Represents the patient to whom this email message is addressed, or from whom it is being sent on behalf of. If guarantor is sending on behalf of self then this field will match PatNum field.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessage.CcAddress">
            <summary>Single address or comma-delimited list of addresses.  User may enter multiple email addresses for visible carbon copies.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessage.BccAddress">
            <summary>Single email address or comma-delimited list of addresses.  User may enter multiple email addresses for blind carbon copies.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailMessage.HideIn">
            <summary>Enum:HideInFlags None=0,EmailInbox=1.  Indicates which places in the program that should not show this email message.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailMessage.#ctor">
            <summary>Constructor</summary>
        </member>
        <member name="T:OpenDentBusiness.EmailSentOrReceived">
            <summary>0=Neither, 1=Sent, 2=Received, 3=Read, 4=WebMailReceived, 5=WebMailRecdRead, 6=WebMailSent, 7=WebMailSentRead, 8=SentDirect, 9=ReceivedEncrypted, 10=ReceivedDirect, 11=ReadDirect, 12=AckDirectProcessed, 13=AckDirectNotSent</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailSentOrReceived.Neither">
            <summary>0 Unsent</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailSentOrReceived.Sent">
            <summary>1 For regular email only.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailSentOrReceived.Received">
            <summary>2 For regular email only.  Shows in Inbox.  Once it's attached to a patient it will also show in Chart module.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailSentOrReceived.Read">
            <summary>3 For received regular email only.  Has been read.  Shows in Inbox.  Once it's attached to a patient it will also show in Chart module.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailSentOrReceived.WebMailReceived">
            <summary>4 WebMail received from patient portal.  Shows in OD Inbox and in pt Chart module.  Also shows in PP as a sent and unread WebMail msg.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailSentOrReceived.WebMailRecdRead">
            <summary>5 WebMail received from patient portal that has been marked read.  Shows in the OD Inbox and in pt Chart module.  Also shows in PP as a sent and read WebMail.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailSentOrReceived.WebMailSent">
            <summary>6 Webmail sent from provider to patient.  Shows in Chart module and also shows in PP as a received and unread WebMail msg.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailSentOrReceived.WebMailSentRead">
            <summary>7 Webmail sent from provider to patient and read by patient.  Shows in Chart module and also shows in PP as a received and read WebMail msg.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailSentOrReceived.SentDirect">
            <summary>8 Sent and encrypted using Direct. Required for counting messages in EHR modules g.1 and g.2, Automated Measure Calculation.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailSentOrReceived.ReceivedEncrypted">
            <summary>9 Received email matches application/pkcs7-mime mime type, but could not be decrypted.  Shows in Inbox.  The user can decrypt from FormEmailMessageEdit.  If the user has the correct private key, then the status will change to Read.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailSentOrReceived.ReceivedDirect">
            <summary>10 Received email matches application/pkcs7-mime mime type and has been decrypted.  Shows in Inbox.  Once it's attached to a patient it will also show in Chart module.  When viewing inside of FormEmailMessageEdit, the XML body of the message shows as xhtml instead of raw.  Still need to work on supporting collapsing and expanding, as required for meaningful use in 2014.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailSentOrReceived.ReadDirect">
            <summary>11 For received direct messages.  Has been read.  Shows in Inbox.  Once it's attached to a patient it will also show in Chart module.  When viewing inside of FormEmailMessageEdit, the XML body of the message shows as xhtml.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailSentOrReceived.AckDirectProcessed">
            <summary>12 Message Delivery Notification (MDN) processed.  Always outgoing.  Indicates to sender that a Direct message was received and decrypted, but not necessarily displayed for the user.  Does not show in patient Chart.  Attached to the same patient as the incoming email which caused the MDN to be sent.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailSentOrReceived.AckDirectNotSent">
            <summary>13 Message Delivery Notification (MDN) created and saved to db, but not sent yet.  Does not show in patient Chart.  Attached to the same patient as the incoming email which caused the MDN to be created.
            This status is used to try resending MDNs if they fail to send.  The MDN is saved to the db so the unset MDNs can be found easily, and also because MDNs are hard to rebuild again later.</summary>
        </member>
        <member name="T:OpenDentBusiness.HideInFlags">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.HideInFlags.None">
            <summary>0 - None</summary>
        </member>
        <member name="F:OpenDentBusiness.HideInFlags.EmailInbox">
            <summary>1 - Hide email from inbox view</summary>
        </member>
        <member name="T:OpenDentBusiness.EmailTemplate">
            <summary>A template email which can be used as the basis for a new email.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailTemplate.EmailTemplateNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailTemplate.Subject">
            <summary>Default subject line.</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailTemplate.BodyText">
            <summary>Body of the email</summary>
        </member>
        <member name="F:OpenDentBusiness.EmailTemplate.Description">
            <summary>Different than Subject.  The description of the email template.  This is what the user sees in the list.</summary>
        </member>
        <member name="M:OpenDentBusiness.EmailTemplate.Copy">
            <summary>Returns a copy of this EmailTemplate.</summary>
        </member>
        <member name="T:OpenDentBusiness.Employee">
            <summary>An employee at the dental office.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employee.EmployeeNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employee.LName">
            <summary>Employee's last name.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employee.FName">
            <summary>First name.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employee.MiddleI">
            <summary>Middle initial or name.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employee.IsHidden">
            <summary>If hidden, the employee will not show on the list.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employee.ClockStatus">
            <summary>This is just text used to quickly display the clockstatus.  eg Working,Break,Lunch,Home, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employee.PhoneExt">
            <summary>The phone extension for the employee.  e.g. 101,102,etc.  This field is only visible for user editing if the pref DockPhonePanelShow is true (1).</summary>
        </member>
        <member name="F:OpenDentBusiness.Employee.PayrollID">
            <summary>Used to store the payroll identification number used to generate payroll reports. ADP uses six digit number between 000051 and 999999.</summary>
        </member>
        <member name="M:OpenDentBusiness.Employee.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Employer">
            <summary>Most insurance plans are organized by employer.  This table keeps track of the list of employers.  The address fields were added at one point, but I don't know why they don't show in the program in order to edit.  Nobody has noticed their absence even though it's been a few years, so for now we are just using the EmpName and not the address.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employer.EmployerNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employer.EmpName">
            <summary>Name of the employer.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employer.Address">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employer.Address2">
            <summary>Second line of address.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employer.City">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employer.State">
            <summary>2 char in the US.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employer.Zip">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Employer.Phone">
            <summary>Includes any punctuation.</summary>
        </member>
        <member name="T:OpenDentBusiness.Fee">
            <summary>There is one entry in this table for each fee for a single procedurecode.  So if there are 5 different fees stored for one procedurecode, then there will be five entries here.</summary>
        </member>
        <member name="F:OpenDentBusiness.Fee.FeeNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Fee.Amount">
            <summary>The amount usually charged.  If an amount is unknown, then the entire Fee entry is deleted from the database.  
            The absence of a fee is shown in the user interface as a blank entry.
            For clinic and/or provider fees, amount can be set to -1 which indicates that their fee should be blank and not use the default fee.</summary>
        </member>
        <member name="F:OpenDentBusiness.Fee.OldCode">
            <summary>Do not use.</summary>
        </member>
        <member name="F:OpenDentBusiness.Fee.FeeSched">
            <summary>FK to feesched.FeeSchedNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Fee.UseDefaultFee">
            <summary>Not used.</summary>
        </member>
        <member name="F:OpenDentBusiness.Fee.UseDefaultCov">
            <summary>Not used.</summary>
        </member>
        <member name="F:OpenDentBusiness.Fee.CodeNum">
            <summary>FK to procedurecode.CodeNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Fee.ClinicNum">
            <summary>FK to clinic.ClinicNum.  (Used if localization of fees for a feesched is enabled)</summary>
        </member>
        <member name="F:OpenDentBusiness.Fee.ProvNum">
            <summary>FK to provider.ProvNum.  (Used if localization of fees for a feesched is enabled)</summary>
        </member>
        <member name="F:OpenDentBusiness.Fee.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.Fee.SecDateEntry">
            <summary>Timestamp automatically generated and user not allowed to change.  The actual date of entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.Fee.SecDateTEdit">
            <summary>Automatically updated by MySQL every time a row is added or changed. Could be changed due to user editing, custom queries or program
            updates.  Not user editable with the UI.</summary>
        </member>
        <member name="M:OpenDentBusiness.Fee.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.GroupPermission">
            <summary>Every user group has certain permissions.  This defines a permission for a group.  The absense of permission would cause that row to be deleted from this table.</summary>
        </member>
        <member name="F:OpenDentBusiness.GroupPermission.GroupPermNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.GroupPermission.NewerDate">
            <summary>Only granted permission if newer than this date.  Can be Minimum (01-01-0001) to always grant permission.</summary>
        </member>
        <member name="F:OpenDentBusiness.GroupPermission.NewerDays">
            <summary>Can be 0 to always grant permission.  Otherwise, only granted permission if item is newer than the given number of days.  1 would mean only if entered today.</summary>
        </member>
        <member name="F:OpenDentBusiness.GroupPermission.UserGroupNum">
            <summary>FK to usergroup.UserGroupNum.  The user group for which this permission is granted.  If not authorized, then this groupPermission will have been deleted.</summary>
        </member>
        <member name="F:OpenDentBusiness.GroupPermission.PermType">
            <summary>Enum:Permissions</summary>
        </member>
        <member name="M:OpenDentBusiness.GroupPermission.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Permissions">
            <summary>A hard-coded list of permissions which may be granted to usergroups.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.None">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AppointmentsModule">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.FamilyModule">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AccountModule">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.TPModule">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ChartModule">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ImagesModule">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ManageModule">
            <summary>7</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.Setup">
            <summary>8. Currently covers a wide variety of setup functions. </summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.RxCreate">
            <summary>9</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ProcComplEdit">
            <summary>10. Uses date restrictions.  Covers editing AND deleting of completed procs.  Deleting non-completed procs is covered by ProcDelete.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ChooseDatabase">
            <summary>11</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.Schedules">
            <summary>12</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.Blockouts">
            <summary>13</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ClaimSentEdit">
            <summary>14. Uses date restrictions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.PaymentCreate">
            <summary>15</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.PaymentEdit">
            <summary>16. Uses date restrictions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AdjustmentCreate">
            <summary>17</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AdjustmentEdit">
            <summary>18. Uses date restrictions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.UserQuery">
            <summary>19</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.StartupSingleUserOld">
            <summary>20.  Not used anymore.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.StartupMultiUserOld">
            <summary>21 Not used anymore.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.Reports">
            <summary>22</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ProcComplCreate">
            <summary>23. Includes setting procedures complete.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.SecurityAdmin">
            <summary>24. At least one user must have this permission.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AppointmentCreate">
            <summary>25. </summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AppointmentMove">
            <summary>26</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AppointmentEdit">
            <summary>27</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.Backup">
            <summary>28</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.TimecardsEditAll">
            <summary>29</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.DepositSlips">
            <summary>30</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AccountingEdit">
            <summary>31. Uses date restrictions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AccountingCreate">
            <summary>32. Uses date restrictions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.Accounting">
            <summary>33</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AnesthesiaIntakeMeds">
            <summary>34</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AnesthesiaControlMeds">
            <summary>35</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.InsPayCreate">
            <summary>36</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.InsPayEdit">
            <summary>37. Uses date restrictions. Edit Batch Insurance Payment.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.TreatPlanEdit">
            <summary>38. Uses date restrictions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ReportProdInc">
            <summary>39</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.TimecardDeleteEntry">
            <summary>40. Uses date restrictions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.EquipmentDelete">
            <summary>41. Uses date restrictions. All other equipment functions are covered by .Setup.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.SheetEdit">
            <summary>42. Uses date restrictions. Also used in audit trail to log web form importing.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.CommlogEdit">
            <summary>43. Uses date restrictions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ImageDelete">
            <summary>44. Uses date restrictions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.PerioEdit">
            <summary>45. Uses date restrictions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ProcEditShowFee">
            <summary>46. Shows the fee textbox in the proc edit window.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AdjustmentEditZero">
            <summary>47</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.EhrEmergencyAccess">
            <summary>48</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ProcDelete">
            <summary>49. Uses date restrictions.  This only applies to non-completed procs.  Deletion of completed procs is covered by ProcComplEdit.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.EhrKeyAdd">
            <summary>50 - Only used at OD HQ.  No user interface.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.Providers">
            <summary>51- Allows user to edit all providers. This is not fine-grained enough for extremely large organizations such as dental schools, so other permissions are being added as well.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.EcwAppointmentRevise">
            <summary>52</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ProcedureNote">
            <summary>53</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ReferralAdd">
            <summary>54</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.InsPlanChangeSubsc">
            <summary>55</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.RefAttachAdd">
            <summary>56</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.RefAttachDelete">
            <summary>57</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.CarrierCreate">
            <summary>58</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.GraphicalReports">
            <summary>59</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AutoNoteQuickNoteEdit">
            <summary>60</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.EquipmentSetup">
            <summary>61</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.Billing">
            <summary>62</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ProblemEdit">
            <summary>63</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ProcFeeEdit">
            <summary>64- There is no user interface in the security window for this permission.  It is only used for tracking.  FK to CodeNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.InsPlanChangeCarrierName">
            <summary>65- There is no user interface in the security window for this permission.  It is only used for tracking.  Only tracks changes to carriername, not any other carrier info.  FK to PlanNum for tracking.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.TaskNoteEdit">
            <summary>66- (Was named TaskEdit prior to version 14.2.39) When editing an existing task: delete the task, edit original description, or double click on note rows.  Even if you don't have the permission, you can still edit your own task description (but not the notes) as long as it's in your inbox and as long as nobody but you has added any notes. </summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.WikiListSetup">
            <summary>67- Add or delete lists and list columns..</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.Copy">
            <summary>68- There is no user interface in the security window for this permission.  It is only used for tracking.  Tracks copying of patient information.  Required by EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.Printing">
            <summary>69- There is no user interface in the security window for this permission.  It is only used for tracking.  Tracks printing of patient information.  Required by EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.MedicalInfoViewed">
            <summary>70- There is no user interface in the security window for this permission.  It is only used for tracking.  Tracks viewing of patient medical information.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.PatProblemListEdit">
            <summary>71- There is no user interface in the security window for this permission.  It is only used for tracking.  Tracks creation and editing of patient problems.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.PatMedicationListEdit">
            <summary>72- There is no user interface in the security window for this permission.  It is only used for tracking.  Tracks creation and edting of patient medications.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.PatAllergyListEdit">
            <summary>73- There is no user interface in the security window for this permission.  It is only used for tracking.  Tracks creation and editing of patient allergies.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.PatFamilyHealthEdit">
            <summary>74- There is no user interface in the security window for this permission.  It is only used for tracking.  Tracks creation and editing of patient family health history.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.PatientPortal">
            <summary>75- There is no user interface in the security window for this permission.  It is only used for tracking.  Patient Portal access of patient information.  Required by EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.RxEdit">
            <summary>76</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AdminDentalStudents">
            <summary>77- Assign this permission to a staff person who will administer setting up and editing Dental School Students in the system.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AdminDentalInstructors">
            <summary>78- Assign this permission to an instructor who will be allowed to assign Grades to Dental School Students as well as manage classes assigned to them.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.OrthoChartEdit">
            <summary>79- Uses date restrictions.  Has a unique audit trail so that users can track specific ortho chart edits.  FK to OrthoChartNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.PatientFieldEdit">
            <summary>80- There is no user interface in the security window for this permission.  It is only used for tracking.  Mainly used for ortho clinics.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AdminDentalEvaluations">
            <summary>81- Assign this permission to a staff person who will edit evaluations in case of an emergency.  This is not meant to be a permanent permission given to a group.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.TreatPlanDiscountEdit">
            <summary>82- There is no user interface in the security window for this permission.  It is only used for tracking.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.UserLogOnOff">
            <summary>83- There is no user interface in the security window for this permission.  It is only used for tracking.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.TaskEdit">
            <summary>84- Allows user to edit other users' tasks.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.EmailSend">
            <summary>85- Allows user to send unsecured email</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.WebMailSend">
            <summary>86- Allows user to send webmail</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.UserQueryAdmin">
            <summary>87- Allows user to run command queries. Command queries are any non-SELECT queries for any non-temporary table.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.InsPlanChangeAssign">
            <summary>88- Security permission for assignment of benefits.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ImageEdit">
            <summary>89- Audit trail for images and documents in the image module.  There is no user interface in the security window for this permission because it is only used for tracking.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.EhrMeasureEventEdit">
            <summary>90- Allows editing of all measure events.  Also used to track changes made to events.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.EServicesSetup">
            <summary>91- Allows users to edit settings in the eServices Setup window.  Also causes the Listener Service monitor thread to start upon logging in.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.FeeSchedEdit">
            <summary>92- There is no user interface in the security window for this permission.  It is only used for tracking.  Tracks editing of fee schedule properties.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ProviderFeeEdit">
            <summary>93- Allows user to edit and delete provider specific fees overrides.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.PatientMerge">
            <summary>94- Allows user to merge patients.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ClaimHistoryEdit">
            <summary>95- Only used in Claim History Status Edit</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AppointmentCompleteEdit">
            <summary>96- Allows user to edit a completed appointment.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.WebMailDelete">
            <summary>97- Audit trail for deleting webmail messages.  There is no user interface in the security window for this permission.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.RequiredFields">
            <summary>98- Audit trail for saving a patient with required fields missing.  There is no user interface in the security window for this 
            permission.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ReferralMerge">
            <summary>99- Allows user to merge referrals.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ProcEdit">
            <summary>100- There is no user interface in the security window for this permission.  It is only used for tracking.
            Currently only used for tracking automatically changing the IsCpoe flag on procedures.  Can be enhanced to do more in the future.
            There is only one place where we could have automatically changed IsCpoe without a corresponding log of a different permission.
            That place is in the OnClosing of the Procedure Edit window.  We update this flag even when the user Cancels out of it.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ProviderMerge">
            <summary>101- Allows user to use the provider merge tool.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.MedicationMerge">
            <summary>102- Allows user to use the medication merge tool.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AccountProcsQuickAdd">
            <summary>103- Allow users to use the Quick Add tool in the Account module.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ClaimSend">
            <summary>104- Allow users to send claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.TaskListCreate">
            <summary>105- Allow users to create new task lists.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.PatientCreate">
            <summary>106 - Audit when a new patient is added.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.GraphicalReportSetup">
            <summary>107- Allows changing the settings for graphical repots.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.PatientEdit">
            <summary>108 - Audit when a patient is edited.  Currently only used in X12 834 insurance plan import.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.InsPlanCreate">
            <summary>109 - Audit when an insurance plan is created.  Currently only used in X12 834 insurance plan import.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.InsPlanEdit">
            <summary>110 - Audit when an insurance plan is edited.  Currently only used in X12 834 insurance plan import.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.InsPlanCreateSub">
            <summary>111 - Audit when an insurance subscriber is created.  The naming convention of this permission was decided upon by Nathan and Derek
            based on the following existing permissions: InsPlanChangeSubsc, InsPlanChangeCarrierName, InsPlanChangeAssign.
            Currently only used in X12 834 insurance plan import.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.InsPlanEditSub">
            <summary>112 - Audit when an insurance subscriber is edited.  The naming convention of this permission was decided upon by Nathan and Derek
            based on the following existing permissions: InsPlanChangeSubsc, InsPlanChangeCarrierName, InsPlanChangeAssign.
            Currently only used in X12 834 insurance plan import.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.InsPlanAddPat">
            <summary>113 - Audit when a patient is added to an insurance plan.  The naming convention of this permission was decided upon by Nathan and
            Derek based on the following existing permissions: InsPlanChangeSubsc, InsPlanChangeCarrierName, InsPlanChangeAssign.
            Currently only used in X12 834 insurance plan import.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.InsPlanDropPat">
            <summary>114 - Audit when a patient is dropped from an insurance plan.  The naming convention of this permission was decided upon by Nathan and
            Derek based on the following existing permissions: InsPlanChangeSubsc, InsPlanChangeCarrierName, InsPlanChangeAssign.
            Currently only used in X12 834 insurance plan import.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.InsPlanVerifyList">
            <summary>115 - Allows users to be assigned Insurance Verifications.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.SplitCreatePastLockDate">
            <summary>116 - Allows users to bypass the global lock date to add paysplits.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ProcComplEditLimited">
            <summary>117 - Uses date restrictions.  Covers editing some fields of completed procs.  Limited list includes treatment area, diagnosis,
            add adjustment, Do Not Bill To Ins, Hide Graphics, Misc tab, Medical tab, E-claim note, and the Prosthesis Replacement group box.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ClaimDelete">
            <summary>118 - Uses date restrictions based on the SecDateEntry field as the claim date.  Covers deleting a claim of any status
            (Sent, Waiting to Send, Received, etc).</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.InsWriteOffEdit">
            <summary>119 - Covers editing the Write Off and Write Off Override fields for claimprocs as well as deleting/creating claimprocs.
            <para>Uses date/days restriction based on the attached proc.DateEntryC; unless it's a total payment, then uses claimproc.SecDateEntry.</para>
            <para>Applies to all plan types (i.e. PPO, Category%, Capitation, etc).</para></summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ApptConfirmStatusEdit">
            <summary>120 - Allows users to change appointment confirmation status.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.GraphicsRemoteEdit">
            <summary>121 - Audit trail for when users change graphical settings for another workstation in FormGraphics.cs.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.AuditTrail">
            <summary>122 - Audit Trail (Separated from SecurityAdmin permission)</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.TreatPlanPresenterEdit">
            <summary>123 - Allows the user to change the presenter on a treatment plan.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ProviderAlphabetize">
            <summary>124 - Allows users to use the Alphabetize Provider button from FormProviderSetup to permanently re-order providers.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.ClaimProcReceivedEdit">
            <summary>125 - Allows editing of claimprocs that are marked as received status.</summary>
        </member>
        <member name="F:OpenDentBusiness.Permissions.StatementPatNumMismatch">
            <summary>126 - Used to diagnose an error in statement creation. Audit Trail Permission Only</summary>
        </member>
        <member name="T:OpenDentBusiness.InsPlan">
            <summary>Subscribers can share insplans by using the InsSub table.  The patplan table determines coverage for individual patients.  InsPlans can also exist without any subscriber. </summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.PlanNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.GroupName">
            <summary>Optional</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.GroupNum">
            <summary>Optional.  In Canada, this is called the Plan Number.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.PlanNote">
            <summary>Note for this plan.  Same for all subscribers.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.FeeSched">
            <summary>FK to feesched.FeeSchedNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.PlanType">
            <summary>""=percentage(the default),"p"=ppo_percentage,"f"=flatCopay,"c"=capitation.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.ClaimFormNum">
            <summary>FK to claimform.ClaimFormNum. eg. "1" for ADA2002.  For ADA2006, it varies by office.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.UseAltCode">
            <summary>0=no,1=yes.  could later be extended if more alternates required</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.ClaimsUseUCR">
            <summary>Fee billed on claim should be the UCR fee for the patient's provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.CopayFeeSched">
            <summary>FK to feesched.FeeSchedNum. Not usually used. This fee schedule holds only co-pays(patient portions).  Only used for Capitation or for fixed copay plans.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.EmployerNum">
            <summary>FK to employer.EmployerNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.CarrierNum">
            <summary>FK to carrier.CarrierNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.AllowedFeeSched">
            <summary>FK to feesched.FeeSchedNum. Not usually used.  This fee schedule holds amounts allowed by carriers.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.TrojanID">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.DivisionNo">
            <summary>Only used in Canada. It's a suffix to the plan number (group number).</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.IsMedical">
            <summary>True if this is medical insurance rather than dental insurance.  When creating a claim, this, along with pref.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.FilingCode">
            <summary>FK to insfilingcode.InsFilingCodeNum.  Used for e-claims.  Also used for some complex reports in public health.  The e-claim usage might become obsolete when PlanID implemented by HIPAA.  Can be 0 to indicate none.  Then 'CI' will go out on claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.DentaideCardSequence">
            <summary>Canadian e-claim field. D11 and E07.  Zero indicates empty.  Mandatory value for Dentaide.  Not used for all others.  2 digit.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.ShowBaseUnits">
            <summary>If checked, the units Qty will show the base units assigned to a procedure on the claim form.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.CodeSubstNone">
            <summary>Set to true to not allow procedure code downgrade substitution on this insurance plan.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.IsHidden">
            <summary>Set to true to hide it from the pick list and from the main list.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.MonthRenew">
            <summary>The month, 1 through 12 when the insurance plan renews.  It will renew on the first of the month.  To indicate calendar year, set renew month to 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.FilingCodeSubtype">
            <summary>FK to insfilingcodesubtype.InsFilingCodeSubtypeNum</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.CanadianPlanFlag">
            <summary>Canadian C12.  Single char, usually blank.  If non-blank, then it's one of three kinds of Provincial Medical Plans.  A=Newfoundland MCP Plan.  V=Veteran's Affairs Plan.  N=NIHB.  N and V are not yet in use, so they will result in blank being sent instead.  See Elig5.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.CanadianDiagnosticCode">
            <summary>Canadian C39. Required when CanadianPlanFlag is 'A'.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.CanadianInstitutionCode">
            <summary>Canadian C40. Required when CanadianPlanFlag is 'A'.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.RxBIN">
            <summary>BIN location number.  Only used with EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.CobRule">
            <summary>Enum:EnumCobRule 0=Basic, 1=Standard, 2=CarveOut. </summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.SopCode">
            <summary>FK to sop.SopCode. Examples: 121, 3115, etc.  Acts as default for all patients using this insurance.  When code is changed for an insplan, it should change automatically for patients having that primary insurance. </summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.SecDateEntry">
            <summary>Timestamp automatically generated and user not allowed to change.  The actual date of entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.SecDateTEdit">
            <summary>Automatically updated by MySQL every time a row is added or changed. Could be changed due to user editing, custom queries or program
            updates.  Not user editable with the UI.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.HideFromVerifyList">
            <summary>Is false if this plan needs to be verified.</summary>
        </member>
        <member name="F:OpenDentBusiness.InsPlan.NumberSubscribers">
            <summary>This is not a database column.  It is just used to display the number of plans with the same info.</summary>
        </member>
        <member name="M:OpenDentBusiness.InsPlan.Copy">
            <summary>Returns a copy of this InsPlan.</summary>
        </member>
        <member name="T:OpenDentBusiness.EnumCobRule">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumCobRule.Basic">
            <summary>0=Basic</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumCobRule.Standard">
            <summary>1=Standard</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumCobRule.CarveOut">
            <summary>2=CarveOut</summary>
        </member>
        <member name="T:OpenDentBusiness.Interval">
            <summary>Currently used in recall interval. Uses all four values together to establish an interval between two dates, letting the user have total control.  Will later be used for such things as lab cases, appointment scheduling, etc.  Includes a way to combine all four values into one number to be stored in the database (as an int32).  Each value has a max of 255, except years has a max of 127.</summary>
        </member>
        <member name="F:OpenDentBusiness.Interval.Years">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Interval.Months">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Interval.Weeks">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Interval.Days">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Interval.#ctor(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Interval.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Interval.op_Equality(OpenDentBusiness.Interval,OpenDentBusiness.Interval)">
            <summary>Define the == operator.</summary>
        </member>
        <member name="M:OpenDentBusiness.Interval.op_Inequality(OpenDentBusiness.Interval,OpenDentBusiness.Interval)">
            <summary>Define the != operator.</summary>
        </member>
        <member name="M:OpenDentBusiness.Interval.Equals(System.Object)">
            <summary>Required to override Equals since we defined == and !=</summary>
        </member>
        <member name="M:OpenDentBusiness.Interval.GetHashCode">
            <summary>Required to override since we defined == and !=</summary>
        </member>
        <member name="M:OpenDentBusiness.Interval.op_Addition(System.DateTime,OpenDentBusiness.Interval)">
            <summary>Specify a date and an interval to return a new date based on adding the interval to the original date.</summary>
        </member>
        <member name="M:OpenDentBusiness.Interval.ToInt">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Interval.ToString">
            <summary>Example: 1y3m1w1d</summary>
        </member>
        <member name="T:OpenDentBusiness.JournalEntry">
            <summary>Used in accounting to represent a single credit or debit entry.  There will always be at least 2 journal enties attached to every transaction.  All transactions balance to 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.JournalEntry.JournalEntryNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.JournalEntry.TransactionNum">
            <summary>FK to transaction.TransactionNum</summary>
        </member>
        <member name="F:OpenDentBusiness.JournalEntry.AccountNum">
            <summary>FK to account.AccountNum</summary>
        </member>
        <member name="F:OpenDentBusiness.JournalEntry.DateDisplayed">
            <summary>Always the same for all journal entries within one transaction.</summary>
        </member>
        <member name="F:OpenDentBusiness.JournalEntry.DebitAmt">
            <summary>Negative numbers never allowed.</summary>
        </member>
        <member name="F:OpenDentBusiness.JournalEntry.CreditAmt">
            <summary>Negative numbers never allowed.</summary>
        </member>
        <member name="F:OpenDentBusiness.JournalEntry.Memo">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.JournalEntry.Splits">
            <summary>A human-readable description of the splits.  Used only for display purposes.</summary>
        </member>
        <member name="F:OpenDentBusiness.JournalEntry.CheckNumber">
            <summary>Any user-defined string.  Usually a check number, but can also be D for deposit, Adj, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.JournalEntry.ReconcileNum">
            <summary>FK to reconcile.ReconcileNum. 0 if not attached to a reconcile. Not allowed to alter amounts if attached.</summary>
        </member>
        <member name="M:OpenDentBusiness.JournalEntry.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Language">
            <summary>This is a list of phrases that need to be translated.  The primary key is a combination of the ClassType and the English phrase.  This table is currently filled dynmically at run time, but the plan is to fill it using a tool that parses the code.</summary>
        </member>
        <member name="F:OpenDentBusiness.Language.LanguageNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Language.EnglishComments">
            <summary>No longer used.</summary>
        </member>
        <member name="F:OpenDentBusiness.Language.ClassType">
            <summary>A string representing the class where the translation is used. Maximum length is 25 characters.</summary>
        </member>
        <member name="F:OpenDentBusiness.Language.English">
            <summary>The English version of the phrase, case sensitive.</summary>
        </member>
        <member name="F:OpenDentBusiness.Language.IsObsolete">
            <summary>As this gets more sophisticated, we will use this field to mark some phrases obsolete instead of just deleting them outright.  That way, translators will still have access to them.  For now, this is not used at all.</summary>
        </member>
        <member name="T:OpenDentBusiness.LanguageForeign">
            <summary>Will usually only contain translations for a single foreign language, although more are allowed.  The primary key is a combination of the ClassType and the English phrase and the culture.</summary>
        </member>
        <member name="F:OpenDentBusiness.LanguageForeign.LanguageForeignNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.LanguageForeign.ClassType">
            <summary>A string representing the class where the translation is used.</summary>
        </member>
        <member name="F:OpenDentBusiness.LanguageForeign.English">
            <summary>The English version of the phrase.  Case sensitive.</summary>
        </member>
        <member name="F:OpenDentBusiness.LanguageForeign.Culture">
            <summary>The specific culture name.  Almost always in 5 digit format like this: en-US.</summary>
        </member>
        <member name="F:OpenDentBusiness.LanguageForeign.Translation">
            <summary>The foreign translation.  Remember we use Unicode-8, so this translation can be in any language, including Russian, Hebrew, and Chinese.</summary>
        </member>
        <member name="F:OpenDentBusiness.LanguageForeign.Comments">
            <summary>Comments for other translators for the foreign language.</summary>
        </member>
        <member name="M:OpenDentBusiness.LanguageForeign.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Letter">
            <summary>These are templates that are used to send simple letters to patients.</summary>
        </member>
        <member name="F:OpenDentBusiness.Letter.LetterNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Letter.Description">
            <summary>Description of the Letter.</summary>
        </member>
        <member name="F:OpenDentBusiness.Letter.BodyText">
            <summary>Text of the letter</summary>
        </member>
        <member name="T:OpenDentBusiness.LetterMerge">
            <summary>Describes the templates for letter merges to Word.</summary>
        </member>
        <member name="F:OpenDentBusiness.LetterMerge.LetterMergeNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.LetterMerge.Description">
            <summary>Description of this letter.</summary>
        </member>
        <member name="F:OpenDentBusiness.LetterMerge.TemplateName">
            <summary>The filename of the Word template. eg MyTemplate.doc.</summary>
        </member>
        <member name="F:OpenDentBusiness.LetterMerge.DataFileName">
            <summary>The name of the data file. eg MyTemplate.txt.</summary>
        </member>
        <member name="F:OpenDentBusiness.LetterMerge.Category">
            <summary>FK to definition.DefNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.LetterMerge.Fields">
            <summary>Not a database column.  Filled using fk from the lettermergefields table.  A collection of strings representing field names.</summary>
        </member>
        <member name="T:OpenDentBusiness.LetterMergeField">
            <summary>When doing a lettermerge, a data file is created with certain fields.  This is a list of those fields for each lettermerge.</summary>
        </member>
        <member name="F:OpenDentBusiness.LetterMergeField.FieldNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.LetterMergeField.LetterMergeNum">
            <summary>FK to lettermerge.LetterMergeNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.LetterMergeField.FieldName">
            <summary>One of the preset available field names.</summary>
        </member>
        <member name="T:OpenDentBusiness.Medication">
            <summary>A list of medications, not attached to any particular patient.  Not allowed to delete if in use by a patient.  Not allowed to edit name once created due to possibility of damage to patient record.</summary>
        </member>
        <member name="F:OpenDentBusiness.Medication.MedicationNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Medication.MedName">
            <summary>Name of the medication.  User can change this.  If an RxCui is present, the RxNorm string can be pulled from the in-memory table for UI display in addition to the MedName.</summary>
        </member>
        <member name="F:OpenDentBusiness.Medication.GenericNum">
            <summary>FK to medication.MedicationNum.  Cannot be zero.
            If this is a generic drug, then the GenericNum will be the same as the MedicationNum.
            Otherwise, if this is a brand drug, then the GenericNum will be a non-zero value corresponding to another medicaiton.</summary>
        </member>
        <member name="F:OpenDentBusiness.Medication.Notes">
            <summary>Notes.</summary>
        </member>
        <member name="F:OpenDentBusiness.Medication.DateTStamp">
            <summary>The last date and time this row was altered.  Not user editable.</summary>
        </member>
        <member name="F:OpenDentBusiness.Medication.RxCui">
            <summary>RxNorm Code identifier.  We should have used a string type.  Used by EHR in CQM.  But the queries should use medicationpat.RxCui, NOT this RxCui, because all medicationpats (meds and orders) coming back from NewCrop will not have a FK to this medication table.  When this RxCui is modified by the user, then medicationpat.RxCui is automatically updated where medicationpat.MedicationNum matches this medication.</summary>
        </member>
        <member name="M:OpenDentBusiness.Medication.Copy">
            <summary>Returns a copy of this Medication.</summary>
        </member>
        <member name="T:OpenDentBusiness.MedicationPat">
            <summary>Links medications to patients.  For ehr, some of these can be considered 'medication orders', but only if they contain a PatNote (instructions), a ProvNum, and a DateStart.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicationPat.MedicationPatNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicationPat.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicationPat.MedicationNum">
            <summary>FK to medication.MedicationNum.  If 0, implies that the medication order came from NewCrop or was a Manual Rx order.  This was done to allow MU2 measures to be set by either creating a medication from the medical window, or by creating an manual prescription.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicationPat.PatNote">
            <summary>Medication notes specific to this patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicationPat.DateTStamp">
            <summary>The last date and time this row was altered.  Not user editable.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicationPat.DateStart">
            <summary>Date that the medication was started.  Can be minval if unknown.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicationPat.DateStop">
            <summary>Date that the medication was stopped.  Can be minval if unknown.  If minval, then the medication is not "discontinued".  If prior to today, then the medication is "discontinued".  If today or a future date, then not discontinued yet.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicationPat.ProvNum">
            <summary>FK to provider.ProvNum. Can be 0. Gets set to the patient's primary provider when adding a new med.  If adding the med from EHR, gets set to the ProvNum of the logged-in user.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicationPat.MedDescript">
            <summary>Only use when MedicationNum=0.  For medication orders pulled back from NewCrop during synch.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicationPat.RxCui">
            <summary>For NewCrop medical orders, corresponds to the RxCui of the prescription (NewCrop only returns a value sometimes).  Otherwise, this field is synched with the medication.RxCui field based on medication.MedicationNum.  We should have used a string type.  The only purpose of this field is so that when CCDs are created, we have structured data to put in the XML, not just plain text.  Allergies exported in CCD do not look at this table, but only at the medication table.  Medications require MedicationPat.RxCui or Medication.RxCui to be exported on CCD.</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicationPat.NewCropGuid">
            <summary>Only use when MedicationNum=0.  For medication orders pulled back from NewCrop during synch.  The NewCrop GUID which uniquely identifies the prescription corresponding to the medical order. Allows us to update existing NewCrop medical orders when refreshing prescriptions in the Chart (similar to how prescriptions are updated).</summary>
        </member>
        <member name="F:OpenDentBusiness.MedicationPat.IsCpoe">
            <summary>If NewCrop is used to prescribe a medication, a medication order is imported automatically into Open Dental.  If a provider is logged in, then this is CPOE (Computerized Provider Order Entry), and this will be true.   Or, if a provider is logged in and Rx entered through OD, it's also CPOE.  If a staff person is logged in, and enters an Rx through NewCrop or OD, then this is non-CPOE, so false.</summary>
        </member>
        <member name="T:OpenDentBusiness.Operatory">
            <summary>Each row is a single operatory or column in the appts module.</summary>
        </member>
        <member name="F:OpenDentBusiness.Operatory.OperatoryNum">
            <summary>Primary key</summary>
        </member>
        <member name="F:OpenDentBusiness.Operatory.OpName">
            <summary>The full name to show in the column.</summary>
        </member>
        <member name="F:OpenDentBusiness.Operatory.Abbrev">
            <summary>5 char or less. Not used much.</summary>
        </member>
        <member name="F:OpenDentBusiness.Operatory.ItemOrder">
            <summary>The order that this op column will show.  Changing views only hides some ops; it does not change their order.  Zero based.</summary>
        </member>
        <member name="F:OpenDentBusiness.Operatory.IsHidden">
            <summary>Used instead of deleting to hide an op that is no longer used.</summary>
        </member>
        <member name="F:OpenDentBusiness.Operatory.ProvDentist">
            <summary>FK to provider.ProvNum.  The dentist assigned to this op.  If more than one dentist might be assigned to an op, then create a second op and use one for each dentist. If 0, then no dentist is assigned.</summary>
        </member>
        <member name="F:OpenDentBusiness.Operatory.ProvHygienist">
            <summary>FK to provider.ProvNum.  The hygienist assigned to this op.  If 0, then no hygienist is assigned.</summary>
        </member>
        <member name="F:OpenDentBusiness.Operatory.IsHygiene">
            <summary>Set true if this is a hygiene operatory.  The hygienist will then be considered the main provider for this op.</summary>
        </member>
        <member name="F:OpenDentBusiness.Operatory.ClinicNum">
            <summary>FK to clinic.ClinicNum.  0 if no clinic.</summary>
        </member>
        <member name="F:OpenDentBusiness.Operatory.SetProspective">
            <summary>If true patients put into this operatory will have status set to prospective.</summary>
        </member>
        <member name="F:OpenDentBusiness.Operatory.IsWebSched">
            <summary>Operatories with IsWebSched set to true will be the ONLY operatories considered when searching for available time slots.</summary>
        </member>
        <member name="F:OpenDentBusiness.Operatory.IsNewPatAppt">
            <summary>Operatories with IsNewPatAppt set to true will be the ONLY operatories considered when searching for available time slots.
            This is in regards to the New Patient Appointment portion of the Web Sched web application.</summary>
        </member>
        <member name="M:OpenDentBusiness.Operatory.Copy">
            <summary>Returns a copy of this Operatory.</summary>
        </member>
        <member name="T:OpenDentBusiness.PatField">
            <summary>These are custom fields added and managed by the user.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatField.PatFieldNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatField.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.PatField.FieldName">
            <summary>FK to patfielddef.FieldName.  The full name is shown here for ease of use when running queries.  But the user is only allowed to change fieldNames in the patFieldDef setup window.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatField.FieldValue">
            <summary>Any text that the user types in.  For picklists, this will contain the picked text.  For dates, this is stored as the user typed it, after validating that it could be parsed.  So queries that involve dates won't work very well.  If we want better handling of date fields, we should add a column to this table.  Checkbox will either have a value of 1, or else the row will be deleted from the db.  Currency is handled in a culture neutral way, just like other currency in the db.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatField.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatField.SecDateEntry">
            <summary>Timestamp automatically generated and user not allowed to change.  The actual date of entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatField.SecDateTEdit">
            <summary>Automatically updated by MySQL every time a row is added or changed. Could be changed due to user editing, custom queries or program
            updates.  Not user editable with the UI.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatField.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.PatFieldDef">
            <summary>These are the definitions for the custom patient fields added and managed by the user.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatFieldDef.PatFieldDefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatFieldDef.FieldName">
            <summary>The name of the field that the user will be allowed to fill in the patient info window.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatFieldDef.FieldType">
            <summary>Enum:PatFieldType Text=0,PickList=1,Date=2,Checkbox=3,Currency=4</summary>
        </member>
        <member name="F:OpenDentBusiness.PatFieldDef.PickList">
            <summary>The text that contains pick list values.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatFieldDef.ItemOrder">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatFieldDef.IsHidden">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.PatFieldDef.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.PatFieldType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PatFieldType.Text">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.PatFieldType.PickList">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.PatFieldType.Date">
            <summary>2-Stored in db as entered, already localized.  For example, it could be 2/04/11, 2/4/11, 2/4/2011, or any other variant.  This makes it harder to create queries that filter by date, but easier to display dates as part of results.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatFieldType.Checkbox">
            <summary>3-If checked, value stored as "1".  If unchecked, row deleted.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatFieldType.Currency">
            <summary>4-This seems to have been added without implementing.  Not sure what will happen if someone tries to use it.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatFieldType.InCaseOfEmergency">
            <summary>5 - DEPRECATED. (Only used 16.3.1, deprecated by 16.3.4)</summary>
        </member>
        <member name="T:OpenDentBusiness.Patient">
            <summary>One row for each patient.  Includes deleted patients.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.PatNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.LName">
            <summary>Last name.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.FName">
            <summary>First name.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.MiddleI">
            <summary>Middle initial or name.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Preferred">
            <summary>Preferred name, aka nickname.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.PatStatus">
            <summary>Enum:PatientStatus</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Gender">
            <summary>Enum:PatientGender</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Position">
            <summary>Enum:PatientPosition Marital status would probably be a better name for this column.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Birthdate">
            <summary>Age is not stored in the database.  Age is always calculated as needed from birthdate.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.SSN">
            <summary>In the US, this is 9 digits, no dashes. For all other countries, any punctuation or format is allowed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Address">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Address2">
            <summary>Optional second address line.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.City">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.State">
            <summary>2 Char in USA.  Used to store province for Canadian users.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Zip">
            <summary>Postal code.  For Canadian claims, it must be ANANAN.  No validation gets done except there.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.HmPhone">
            <summary>Home phone. Includes any punctuation</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.WkPhone">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.WirelessPhone">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Guarantor">
            <summary>FK to patient.PatNum.  Head of household.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient._age">
            <summary>Derived from Birthdate.  Not in the database table.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.CreditType">
            <summary>Single char. Shows at upper right corner of appointments.  Suggested use is A,B,or C to designate creditworthiness, 
            but it can actually be used for any purpose.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Email">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Salutation">
            <summary>Dear __.  This field does not include the "Dear" or a trailing comma.  If this field is blank, then the typical salutation is 
            FName.  Or, if a Preferred name is present, that is used instead of FName.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.EstBalance">
            <summary>Current patient balance.(not family). Never subtracts insurance estimates.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.PriProv">
            <summary>FK to provider.ProvNum.  The patient's primary provider.  Required.  The database maintenance tool ensures that every patient 
            always has this number set, so the program no longer has to handle 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.SecProv">
            <summary>FK to provider.ProvNum.  Secondary provider (hygienist). Optional.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.FeeSched">
            <summary>FK to feesched.FeeSchedNum.  Fee schedule for this patient.  Usually not used.  If missing, the practice default fee schedule is 
            used. If patient has insurance, then the fee schedule for the insplan is used.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.BillingType">
            <summary>FK to definition.DefNum.  Must have a value, or the patient will not show on some reports.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.ImageFolder">
            <summary>Name of folder where images will be stored. Not editable for now.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.AddrNote">
            <summary>Address or phone note.  Unlimited length in order to handle data from other programs during a conversion.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.FamFinUrgNote">
            <summary>Family financial urgent note.  Only stored with guarantor, and shared for family.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.MedUrgNote">
            <summary>Individual patient note for Urgent medical.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.ApptModNote">
            <summary>Individual patient note for Appointment module note.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.StudentStatus">
            <summary>Single char.  Nonstudent='N' or blank, Parttime='P', Fulltime='F'.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.SchoolName">
            <summary>College name.  If Canadian, then this is field C10 and must be filled if C9 (patient.CanadianEligibilityCode) is 1 and patient 
            is 18 or older.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.ChartNumber">
            <summary>Max 15 char.  Used for reference to previous programs.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.MedicaidID">
            <summary>Optional. The Medicaid ID for this patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Bal_0_30">
            <summary>Aged balance from 0 to 30 days old. Aging numbers are for entire family.  Only stored with guarantor.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Bal_31_60">
            <summary>Aged balance from 31 to 60 days old. Aging numbers are for entire family.  Only stored with guarantor.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Bal_61_90">
            <summary>Aged balance from 61 to 90 days old. Aging numbers are for entire family.  Only stored with guarantor.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.BalOver90">
            <summary>Aged balance over 90 days old. Aging numbers are for entire family.  Only stored with guarantor.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.InsEst">
            <summary>Insurance Estimate for entire family.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.BalTotal">
            <summary>Total balance for entire family before insurance estimate.  Not the same as the sum of the 4 aging balances because this can be 
            negative.  Only stored with guarantor.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.EmployerNum">
            <summary>FK to employer.EmployerNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.EmploymentNote">
            <summary>Not used since version 2.8.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.County">
            <summary>FK to county.CountyName, although it will not crash if key absent.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.GradeLevel">
            <summary>Enum:PatientGrade Gradelevel.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Urgency">
            <summary>Enum:TreatmentUrgency Used in public health screenings.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.DateFirstVisit">
            <summary>The date that the patient first visited the office.  Automated.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.ClinicNum">
            <summary>FK to clinic.ClinicNum. Can be zero if not attached to a clinic or no clinics set up.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.HasIns">
            <summary>For now, an 'I' indicates that the patient has insurance.  This is only used when displaying appointments.  
            It will later be expanded.  User can't edit.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.TrophyFolder">
            <summary>The Trophy bridge is inadequate, this attempts to make it usable for offices that have invested in Trophy hardware.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.PlannedIsDone">
            <summary>This simply indicates whether the 'done' box is checked in the chart module.  Used to be handled as a -1 in the NextAptNum field,
            but now that field is unsigned.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Premed">
            <summary>Set to true if patient needs to be premedicated for appointments, includes PAC, halcion, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Ward">
            <summary>Only used in hospitals.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.PreferConfirmMethod">
            <summary>Enum:ContactMethod. Used for eCR, which includes eReminders eConfirmations.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.PreferContactMethod">
            <summary>Enum:ContactMethod</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.PreferRecallMethod">
            <summary>Enum:ContactMethod</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.SchedBeforeTime">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.SchedAfterTime">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.SchedDayOfWeek">
            <summary>We do not use this, but some users do, so here it is. 0=none. Otherwise, 1-7 for day.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Language">
            <summary>The primary language of the patient.  Typically eng (English), fra (French), spa (Spanish), or similar.  
            If it's a custom language, then it might look like Tahitian.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.AdmitDate">
            <summary>Used in hospitals.  It can be before the first visit date.  It typically gets set automatically by the hospital system.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Title">
            <summary>Includes any punctuation.  For example, Mr., Mrs., Miss, Dr., etc.  
            There is no selection mechanism yet for user; they must simply type it in.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.PayPlanDue">
            <summary>Amount "due now" for all payment plans such that someone in this family is the payment plan guarantor.  
            This is the total of all payment plan charges past due (taking into account the PayPlansBillInAdvanceDays setting) subtract the amount 
            already paid for the payment plans.  Only stored with family guarantor.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.SiteNum">
            <summary>FK to site.SiteNum. Can be zero. Replaces the old GradeSchool field with a proper foreign key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.DateTStamp">
            <summary>Automatically updated by MySQL every time a row is added or changed. Could be changed due to user editing, custom queries or 
            program updates.  Not user editable.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.ResponsParty">
            <summary>FK to patient.PatNum. Can be zero.  Person responsible for medical decisions rather than finances.  Guarantor is still responsible
            for finances.  This is useful for nursing home residents.  Part of public health.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.CanadianEligibilityCode">
            <summary>C09.  Eligibility Exception Code.  A number between 1-4.  0 is not acceptable for e-claims.
            1=FT student, 2=disabled, 3=disabled student, 4=code not applicable.  Warning.  4 is a 0 if using CDAnet version 02. 
            This column should have been created as an int. </summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.AskToArriveEarly">
            <summary>Number of minutes patient is asked to come early to appointments.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.PreferContactConfidential">
            <summary>Enum:ContactMethod  Used for EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.SuperFamily">
            <summary>FK to patient.PatNum.  If this is the same as PatNum, then this is a SuperHead.  If zero, then not part of a superfamily.  
            Synched for entire family.  If family is part of a superfamily, then the guarantor for this family will show in the superfamily list in the
            Family module for anyone else who is in the superfamily.  Only a guarantor can be a superfamily head.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.TxtMsgOk">
            <summary>Enum:YN</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.SmokingSnoMed">
            <summary>EHR smoking status as a SNOMED code.  Will always be the most recent smoking status for the patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.Country">
            <summary>Country name.  Only used by HQ to add country names to statements.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.DateTimeDeceased">
            <summary>Needed for EHR syndromic surveillance messaging.  Used in HL7 PID-29.  Also for feature request #3040.  Date and time because we 
            need precision to the minute in syndromic surveillence messging.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.BillingCycleDay">
            <summary>A number between 1 and 31 that is the day of month that repeat charges should be applied to this account. 
            Previously this was determined by the start date of the repeate charges.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.SecDateEntry">
            <summary>Timestamp automatically generated and user not allowed to change.  The actual date of entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.Patient.HasSuperBilling">
            <summary>0 by default.  If true, this guarantor should be included in superbilling statements.</summary>
        </member>
        <member name="P:OpenDentBusiness.Patient.SchedBeforeTimeXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="P:OpenDentBusiness.Patient.SchedAfterTimeXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="M:OpenDentBusiness.Patient.Copy">
            <summary>Returns a copy of this Patient.</summary>
        </member>
        <member name="P:OpenDentBusiness.Patient.Age">
            <summary>Calculated from birthdate.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patient.GetNameLF">
            <summary>LName, 'Preferred' FName M</summary>
        </member>
        <member name="M:OpenDentBusiness.Patient.GetNameLFnoPref">
            <summary>LName, FName M</summary>
        </member>
        <member name="M:OpenDentBusiness.Patient.GetNameFL">
            <summary>FName 'Preferred' M LName</summary>
        </member>
        <member name="M:OpenDentBusiness.Patient.GetNameFLnoPref">
            <summary>FName M LName</summary>
        </member>
        <member name="M:OpenDentBusiness.Patient.GetNameFirstOrPrefL">
            <summary>FName/Preferred LName</summary>
        </member>
        <member name="M:OpenDentBusiness.Patient.GetNameFirstOrPrefML">
            <summary>FName/Preferred M. LName</summary>
        </member>
        <member name="M:OpenDentBusiness.Patient.GetNameFLFormal">
            <summary>Title FName M LName</summary>
        </member>
        <member name="M:OpenDentBusiness.Patient.GetNameFirst">
            <summary>Includes preferred.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patient.GetNameFirstOrPreferred">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Patient.GetNameFirstOrPreferredOrLast">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Patient.GetSalutation">
            <summary>Dear __.  Does not include the "Dear" or the comma.</summary>
        </member>
        <member name="M:OpenDentBusiness.Patient.CompareTo(System.Object)">
            <summary>Useful for sorting and binary searching.  The X12 834 implementation uses this for binary searching to improve efficiency.
            If this function is changed in the future, it will heavily impact our X12 834 implementation.  Be cautious.  In the end, this function
            will probably not need to change anyway, since it will only be used for comparing patients when the PatNums are not known.</summary>
        </member>
        <member name="T:OpenDentBusiness.PatientNote">
            <summary>Essentially more columns in the patient table.  They are stored here because these fields can contain a lot of information, and we want to try to keep the size of the patient table a bit smaller.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientNote.PatNum">
            <summary>FK to patient.PatNum.  Also the primary key for this table. Always one to one relationship with patient table.  A new patient might not have an entry here until needed.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientNote.FamFinancial">
            <summary>Only one note per family stored with guarantor.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientNote.ApptPhone">
            <summary>No longer used.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientNote.Medical">
            <summary>Medical Summary</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientNote.Service">
            <summary>Service notes</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientNote.MedicalComp">
            <summary>Complete current Medical History</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientNote.Treatment">
            <summary>Shows in the Chart module just below the graphical tooth chart.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientNote.ICEName">
            <summary>In Case of Emergency Name.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatientNote.ICEPhone">
            <summary>In Case of Emergency Phone.</summary>
        </member>
        <member name="T:OpenDentBusiness.PatPlan">
            <summary>Each row represents the linking of one insplan to one patient for current coverage.  Dropping a plan will delete the entry in this table.  Deleting a plan will delete the actual insplan (if no dependencies).</summary>
        </member>
        <member name="F:OpenDentBusiness.PatPlan.PatPlanNum">
            <summary>Primary key</summary>
        </member>
        <member name="F:OpenDentBusiness.PatPlan.PatNum">
            <summary>FK to  patient.PatNum.  The patient who currently has the insurance.  Not the same as the subscriber.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatPlan.Ordinal">
            <summary>Number like 1, 2, 3, etc.  Represents primary ins, secondary ins, tertiary ins, etc. 0 is not used</summary>
        </member>
        <member name="F:OpenDentBusiness.PatPlan.IsPending">
            <summary>For informational purposes only. For now, we lose the previous feature which let us set isPending without entering a plan.  Now, you have to enter the plan in order to check this box.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatPlan.Relationship">
            <summary>Enum:Relat Remember that this may need to be changed in the Claim also, if already created.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatPlan.PatID">
            <summary>An optional patient ID which will override the insplan.SubscriberID on eclaims.  For Canada, this holds the Dependent Code, C17 and E17, and in that use it doesn't override subscriber id, but instead supplements it.</summary>
        </member>
        <member name="F:OpenDentBusiness.PatPlan.InsSubNum">
            <summary>FK to inssub.InsSubNum.  Gives info about the subscriber.</summary>
        </member>
        <member name="M:OpenDentBusiness.PatPlan.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Payment">
            <summary>A patient payment.  Always has at least one split.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.PayNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.PayType">
            <summary>FK to definition.DefNum.  This will be 0 if this is an income transfer to another provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.PayDate">
            <summary>The date that the payment displays on the patient account.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.PayAmt">
            <summary>Amount of the payment.  Must equal the sum of the splits.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.CheckNum">
            <summary>Check number is optional.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.BankBranch">
            <summary>Bank-branch for checks.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.PayNote">
            <summary>Any admin note.  Not for patient to see.  Length 4000.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.IsSplit">
            <summary>Set to true to indicate that a payment is split.  Just makes a few functions easier.  Might be eliminated.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.PatNum">
            <summary>FK to patient.PatNum.  The patient where the payment entry will show.  But only the splits affect account balances.  This has a value even if the 'payment' is actually an income transfer to another provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.ClinicNum">
            <summary>FK to clinic.ClinicNum.  Can be 0. Copied from patient.ClinicNum when creating payment, but user can override.  Not used in provider income transfers.  Cannot be used in financial reporting when grouping by clinic, because payments may be split between clinics.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.DateEntry">
            <summary>The date that this payment was entered.  Not user editable.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.DepositNum">
            <summary>FK to deposit.DepositNum.  0 if not attached to any deposits.  Cash does not usually get attached to a deposit; only checks.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.Receipt">
            <summary>Text of printed receipt if the payment was done electronically. Allows reprinting if needed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.IsRecurringCC">
            <summary>True if this was an automatically added recurring CC charge rather then one entered by the user.  This was set to true for all historical entries before version 11.1, but will be accurate after that.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.SecDateTEdit">
            <summary>Automatically updated by MySQL every time a row is added or changed. Could be changed due to user editing, custom queries or program
            updates.  Not user editable with the UI.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.PaymentSource">
            <summary>Enum:CreditCardSource Indicates the origin of the payment if the payment came from a credit card. Will be 'None' if this payment 
            did not use a credit card.</summary>
        </member>
        <member name="F:OpenDentBusiness.Payment.ProcessStatus">
            <summary>Enum:ProcessStat Flags whether a payment came from online and needs to be processed.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcessStat.OfficeProcessed">
            <summary>0 - Payment made within the OD program.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcessStat.OnlineProcessed">
            <summary>1 - Payment made from the Patient Portal and has been processed within OD.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcessStat.OnlinePending">
            <summary>2 - Payment made from the Patient Portal and needs to be processed within OD.</summary>
        </member>
        <member name="T:OpenDentBusiness.PayPeriod">
            <summary>Used to view employee timecards.  Timecard entries are not linked to a pay period.  Instead, payperiods are setup, and the user can only view specific pay periods.  So it feels like they are linked, but it's date based.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPeriod.PayPeriodNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPeriod.DateStart">
            <summary>The first day of the payperiod</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPeriod.DateStop">
            <summary>The last day of the payperiod.  Inclusive, ignoring time of day.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPeriod.DatePaycheck">
            <summary>The date that paychecks will be dated.  A few days after the dateStop.  Optional.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPeriod.Copy">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PayPeriodInterval.Weekly">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPeriodInterval.BiWeekly">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPeriodInterval.Monthly">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.PayPlan">
            <summary>Each row represents one signed agreement to make payments. </summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlan.PayPlanNum">
            <summary>Primary key</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlan.PatNum">
            <summary>FK to patient.PatNum.  The patient who had the treatment done.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlan.Guarantor">
            <summary>FK to patient.PatNum.  The person responsible for the payments.  Does not need to be in the same family as the patient.  
            Not necessarily the same as the guarantor on the PayPlanCharge.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlan.PayPlanDate">
            <summary>Date that the payment plan will display in the account.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlan.APR">
            <summary>Annual percentage rate.  eg 18.  This does not take into consideration any late payments, but only the percentage used to calculate the amortization schedule.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlan.Note">
            <summary>Generally used to archive the terms when the amortization schedule is created.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlan.PlanNum">
            <summary>FK to insplan.PlanNum.  Will be 0 if standard payment plan.  But if this is being used to track expected insurance payments, then this will be the foreign key to insplan.PlanNum, and Guarantor will be 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlan.CompletedAmt">
            <summary>The amount of the treatment that has already been completed.  This should match the sum of the principal amounts for most situations.  But if the procedures have not yet been completed, and the payment plan is to make any sense, then this number must be changed.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlan.InsSubNum">
            <summary>FK to inssub.InsSubNum.  Will be 0 if standard payment plan.  But if this is being used to track expected insurance payments, then this will be the foreign key to inssub.InsSubNum, and Guarantor will be 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlan.PaySchedule">
            <summary>Enum:PaymentSchedule How often payments are scheduled to be made.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlan.NumberOfPayments">
            <summary>The number of payments that will be made to complete the payment plan.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlan.PayAmt">
            <summary>Payment amount due per payment plan charge.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlan.DownPayment">
            <summary>The amount paid toward the payment plan when it was first opened.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlan.IsClosed">
            <summary>True if this payment plan is closed.  Closed should not be edited.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlan.Signature">
            <summary>The encrypted and bound signature in base64 format.  The signature is bound to the concatenation of the Total Amount,APR,Number of Payments,Payment Amount </summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlan.SigIsTopaz">
            <summary>True if the signature is in Topaz format rather than OD format.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlan.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.PaymentSchedule">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PaymentSchedule.Monthly">
            <summary>0 - Pay 1 time every month.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaymentSchedule.MonthlyDayOfWeek">
            <summary>1 - Pay 1 time every month on a certain day of the week.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaymentSchedule.Weekly">
            <summary>2 - Pay every week per month.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaymentSchedule.BiWeekly">
            <summary>3 - Pay every other week per times per month.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaymentSchedule.Quarterly">
            <summary>4 - Pay 4 times per year.</summary>
        </member>
        <member name="T:OpenDentBusiness.PayPlanCharge">
            <summary>One of the dated charges attached to a payment plan.  This has nothing to do with payments, but rather just causes the amount due to increase on the date of the charge.  The amount of the charge is the sum of the principal and the interest.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlanCharge.PayPlanChargeNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlanCharge.PayPlanNum">
            <summary>FK to payplan.PayPlanNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlanCharge.Guarantor">
            <summary>FK to patient.PatNum.  The guarantor account that each charge will affect.  Does not have to match the guarantor of the payment plan.
            This column doesn't even have to point to a guarantor at all.  
            E.g. Credits and Closeout debits will be linked to the patient, not guarantor.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlanCharge.PatNum">
            <summary>FK to patient.PatNum.  The patient account that the principal gets removed from.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlanCharge.ChargeDate">
            <summary>The date that the charge will show on the patient account.  Any charge with a future date will not show on the account yet and will not affect the balance.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlanCharge.Principal">
            <summary>For Debits, this is the principal charge amount.  For Credits (version 2 only), then this is the credit amount.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlanCharge.Interest">
            <summary>For Debits, this is the interest portion of this payment.  Always 0 for Credits.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlanCharge.Note">
            <summary>Any note about this particular payment plan charge</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlanCharge.ProvNum">
            <summary>FK to provider.ProvNum.  Since there is no ProvNum field at the payplan level, the provider must be the same for all payplancharges.  
            It's initially assigned as the patient priProv.  Payments applied should be to this provnum, 
            although the current user interface does not help with this.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlanCharge.ClinicNum">
            <summary>FK to clinic.ClinicNum.  Since there is no ClincNum field at the payplan level, the clinic must be the same for all payplancharges.  It's initially assigned using the patient clinic.  Payments applied should be to this clinic, although the current user interface does not help with this.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlanCharge.ChargeType">
            <summary>Enum: The charge type of the payment plan. 0 - Debit, 1 - Credit.  Only relevant for those on Payment Plan Version 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlanCharge.ProcNum">
            <summary>FK to procedurelog.ProcNum.  The procedure that this payplancharge is attached to.  Only applies to credits.
            Always 0 for debits.  Can be 0 for credits not attached to a procedure.</summary>
        </member>
        <member name="M:OpenDentBusiness.PayPlanCharge.Copy">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlanChargeType.Debit">
            <summary>0 - Debit</summary>
        </member>
        <member name="F:OpenDentBusiness.PayPlanChargeType.Credit">
            <summary>1 - Credit</summary>
        </member>
        <member name="T:OpenDentBusiness.PaySplit">
            <summary>Always attached to a payment.  Always affects exactly one patient account and one provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.SplitNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.SplitAmt">
            <summary>Amount of split.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.PatNum">
            <summary>FK to patient.PatNum.
            Can be the PatNum of the guarantor if this is a split for a payment plan and the guarantor is in another family.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.ProcDate">
            <summary>Procedure date.  Typically only used if tied to a procedure.  In older versions (before 7.0), this was the date that showed on the account.  Frequently the same as the date of the payment, but not necessarily.  Not when the payment was made.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.PayNum">
            <summary>FK to payment.PayNum.  Every paysplit must be linked to a payment.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.IsDiscount">
            <summary>No longer used.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.DiscountType">
            <summary>No longer used</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.ProvNum">
            <summary>FK to provider.ProvNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.PayPlanNum">
            <summary>FK to payplan.PayPlanNum.  0 if not attached to a payplan.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.DatePay">
            <summary>Date always in perfect synch with Payment date.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.ProcNum">
            <summary>FK to procedurelog.ProcNum.  0 if not attached to a procedure.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.DateEntry">
            <summary>Date this paysplit was created.  User not allowed to edit.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.UnearnedType">
            <summary>FK to definition.DefNum.  Usually 0 unless this is a special unearned split.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.ClinicNum">
            <summary>FK to clinic.ClinicNum.  Can be 0.  Need not match the ClinicNum of the Payment, because a payment can be split between clinics.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.SecDateTEdit">
            <summary>Automatically updated by MySQL every time a row is added or changed. Could be changed due to user editing, custom queries or program
            updates.  Not user editable with the UI.</summary>
        </member>
        <member name="F:OpenDentBusiness.PaySplit.PrepaymentNum">
            <summary>FK to paysplit.SplitNum.  Can be 0.  Indicates that this paysplit is meant to counteract a prepayment paysplit.</summary>
        </member>
        <member name="M:OpenDentBusiness.PaySplit.Copy">
            <summary>Returns a copy of this PaySplit.</summary>
        </member>
        <member name="T:OpenDentBusiness.PerioExam">
            <summary>One perio exam for one patient on one date.  Has lots of periomeasures attached to it.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioExam.PerioExamNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioExam.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioExam.ExamDate">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioExam.ProvNum">
            <summary>FK to provider.ProvNum.</summary>
        </member>
        <member name="T:OpenDentBusiness.PerioMeasure">
            <summary>One row can hold up to six measurements for one tooth, all of the same type.  Always attached to a perioexam.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioMeasure.PerioMeasureNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioMeasure.PerioExamNum">
            <summary>FK to perioexam.PerioExamNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioMeasure.SequenceType">
            <summary>Enum:PerioSequenceType  eg probing, mobility, recession, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioMeasure.IntTooth">
            <summary>Valid values are 1-32. Every measurement must be associated with a tooth.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioMeasure.ToothValue">
            <summary>This is used when the measurement does not apply to a surface(mobility and skiptooth).  Valid values for all surfaces are 0 through 19, or -1 to represent no measurement taken.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioMeasure.MBvalue">
            <summary>-1 represents no measurement. Values of 100+ represent negative values (only used for Gingival Margins). e.g. To use a value of 105, subtract it from 100. (100 - 105 = -5)</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioMeasure.Bvalue">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioMeasure.DBvalue">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioMeasure.MLvalue">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioMeasure.Lvalue">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioMeasure.DLvalue">
            <summary>.</summary>
        </member>
        <member name="T:OpenDentBusiness.BleedingFlags">
            <summary>Blood,pus,plaque,and calculus. Used in ContrPerio.PerioCell</summary>
        </member>
        <member name="F:OpenDentBusiness.BleedingFlags.None">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.BleedingFlags.Blood">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.BleedingFlags.Suppuration">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.BleedingFlags.Plaque">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.BleedingFlags.Calculus">
            <summary>8</summary>
        </member>
        <member name="T:OpenDentBusiness.PerioSurf">
            <summary>Currently, only six surfaces are supported, but more can always be added.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioSurf.None">
            <summary>Might be used for things such as mobility or missing tooth.</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioSurf.MB">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioSurf.B">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioSurf.DB">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioSurf.ML">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioSurf.L">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.PerioSurf.DL">
            <summary>6</summary>
        </member>
        <member name="T:OpenDentBusiness.Pref">
            <summary>Stores small bits of data for a wide variety of purposes.  Any data that's too small to warrant its own table will usually end up here.</summary>
        </member>
        <member name="F:OpenDentBusiness.Pref.PrefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Pref.PrefName">
            <summary>The text 'key' in the key/value pairing.</summary>
        </member>
        <member name="F:OpenDentBusiness.Pref.ValueString">
            <summary>The stored value.</summary>
        </member>
        <member name="F:OpenDentBusiness.Pref.Comments">
            <summary>Documentation on usage and values of each pref.  Mostly deprecated now in favor of using XML comments in the code.</summary>
        </member>
        <member name="M:OpenDentBusiness.Pref.Copy">
            <summary>Returns a copy of the pref.</summary>
        </member>
        <member name="T:OpenDentBusiness.PrefName">
            <summary>Because this enum is stored in the database as strings rather than as numbers, we can do the order alphabetically.  This enum must exactly match the prefs in the database.  Deprecated preferences will start with "Deprecated" in the summary section.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AccountingSoftware">
            <summary>Enum:AccountingSoftware 0=None, 1=Open Dental, 2=QuickBooks</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AccountShowCompletedPaymentPlans">
            <summary>Defaulted to off, determines whether completed payment plans are visible in the account module.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AccountShowQuestionnaire">
            <summary>Show questionnaire button in account module toolbar.  Set in FormShowFeatures.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AccountShowTrojanExpressCollect">
            <summary>Show TrojanCollect button in account module toolbar.  Set in FormShowFeatures.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AdjustmentsForceAttachToProc">
            <summary>When set to true, the user will not be able to save a new adjustment without first attaching a procedure to it.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ADPCompanyCode">
            <summary>Enum:ADPCompanyCode Used to generate the export file from FormTimeCardManage. Set in FormTimeCardSetup.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AgingBeginDateTime">
            <summary>Stored as DateTime, but cleared when aging finishes.  The DateTime will be used as a flag to signal other connections that aging
            calculations have started and prevents another connection from running simultaneously.  In order to run aging, this will have to be cleared,
            either by the connection that set the flag when aging finishes, or by the user overriding the lock and manually clearing this pref.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AgingIsEnterprise">
            <summary>If true, aging will use the intermediate table famaging for calculating aging.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AllergiesIndicateNone">
            <summary>FK to allergydef.AllergyDefNum</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AppointmentSearchBehavior">
            <summary>Enum:SearchBehaviorCriteria 0=ProviderTime, 1=ProviderTimeOperatory</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AppointmentTimeIncrement">
            <summary>The number of minutes that the appointment schedule is broken up into.  E.g. "10" represents 10 minute increments.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AppointmentTimeIsLocked">
            <summary>Set to true if appointment times are locked by default.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AppointmentTimeLineColor">
            <summary>Used to set the color of the time indicator line in the appt module.  Stored as an int.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AppointmentTypeShowPrompt">
            <summary>Controls whether or not creating new appointments prompt to select an appointment type.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AppointmentTypeShowWarning">
            <summary>Controls whether or not a warning will be displayed when selecting an appointment type would detach procedures from an appointment..</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptModuleAdjustmentsInProd">
            <summary>Boolean defaults to 0.  If true, adds the adjustment total to the net production in appointment module.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptModuleDefaultToWeek">
            <summary>Boolean defaults to 0, when true appt module will default to week view</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptModuleShowOrthoChartItem">
            <summary>Boolean defaults to 1 if there is relevant ortho chart info, when true appt menu will have an ortho chart item.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptModuleRefreshesEveryMinute">
            <summary>Keeps the waiting room indicator times current.  Initially 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptPrintColumnsPerPage">
            <summary>Integer</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptPrintFontSize">
            <summary>Float</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptPrintTimeStart">
            <summary>Stored as DateTime.  Currently the date portion is not used but might be used in future versions.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptPrintTimeStop">
            <summary>Stored as DateTime.  Currently the date portion is not used but might be used in future versions.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptEConfirmStatusSent">
            <summary>FKey to definition.DefNum.  If using automated confirmations, appointment set to this status when confirmation is sent.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptEConfirmStatusAccepted">
            <summary>FKey to definition.DefNum.  If using automated confirmations, appointment set to this status when confirmation is confirmed.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptEConfirmStatusDeclined">
            <summary>FKey to definition.DefNum.  If using automated confirmations, Anything that is not "Accepted" or "Sent".</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptEConfirmStatusSendFailed">
            <summary>FKey to definition.DefNum.  If using automated confirmations, when failed by HQ for some reason.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptConfirmAutoEnabled">
            <summary>True if automated appointment confirmations are enabled for the entire DB. See ApptReminderRules for setup details.
            Permissions are still checked here at HQ so manually overriding this value will only make the program behave annoyingly, but won't break anything.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptConfirmEnableForClinicZero">
            <summary>Bool; Only if using clinics, when true causes automation to skip appointments not assigned to a clinic.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptConfirmExcludeEConfirm">
            <summary>Comma delimited list of FKey to definition.DefNum. Every appointment with a confirmed status that is in this list will be excluded from EConfirmation RSVP updates.
            Prevents overwriting manual Confirmation status.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptConfirmExcludeESend">
            <summary>Comma delimited list of FKey to definition.DefNum. Every appointment with a confirmed status that is in this list will be excluded from sending an EConfirmation.
            Prevents overwriting manual Confirmation status.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptRemindAutoEnabled">
            <summary>True if automated appointment reminders are enabled for the entire DB. See ApptReminderRules for setup details.
            Permissions are still checked here at HQ so manually overriding this value will only make the program behave annoyingly, but won't break anything.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptReminderDayInterval">
            <summary>DEPRECATED.  See ApptReminderRule table instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptReminderDayMessage">
            <summary>DEPRECATED.  See ApptReminderRule table instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptReminderEmailMessage">
            <summary>DEPRECATED.  See ApptReminderRule table instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptReminderHourInterval">
            <summary>DEPRECATED.  See ApptReminderRule table instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptReminderHourMessage">
            <summary>DEPRECATED.  See ApptReminderRule table instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptReminderSendAll">
            <summary>DEPRECATED.  See ApptReminderRule table instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptReminderSendOrder">
            <summary>DEPRECATED.  See ApptReminderRule table instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ApptSecondaryProviderConsiderOpOnly">
            <summary>Bool; False by default.  When true, the secondary provider used when scheduling an appointment will use the Operatory's secondary provider no matter what.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AsteriskServerIp">
            <summary>Used by OD HQ.  Not added to db convert script.  Used to store the IP address of the asterisk phone server for the phone comms and voice mails.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AtoZfolderNotRequired">
            <summary>Deprecated, but must remain here to avoid breaking updates.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AtoZfolderUsed">
            <summary>Enum - Enumerations.DataStorageType.  Normally 1 (AtoZ).  This used to be called AtoZfolderNotRequired, but that name was confusing.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AuditTrailEntriesDisplayed">
            <summary>The number of audit trail entries that are displayed in the grid.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AutomaticCommunicationTimeStart">
            <summary>Used to determine the runtime of the threads that do automatic communication in the listener.  Stored as a DateTime.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AutomaticCommunicationTimeEnd">
            <summary>Used to determine the runtime of the threads that do automatic communication in the listener.  Stored as a DateTime.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.AutomaticSummaryOfCareWebmail">
            <summary>Boolean.  Defaults to same value as ShowFeatureEhr.  Used to determine whether automatic summary of care webmails are sent.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BillingChargeOrFinanceIsDefault">
            <summary>Value is a string, either Billing or Finance.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BillingElectBatchMax">
            <summary>Value is an integer, identifying the max number of statements that can be sent per batch.  Default of 0, which indicates no limit.
            This preference is used for both printed statements and electronic ones.  It was decided to not rename the pref.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BillingElectClientAcctNumber">
            <summary>Deprecated.  Use ebill.ClientAcctNumber instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BillingElectCreatePDF">
            <summary>Boolean, true by default.  Indicates if electronic billing should generate a PDF document.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BillingElectPassword">
            <summary>Deprecated.  Use ebill.ElectPassword instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BillingElectSaveHistory">
            <summary>No UI, can only be manually enabled by a programmer.  Only used for debugging electronic statements, because it will bloat the OpenDentImages folder.  Originally created to help with the "missing brackets bug" for EHG billing.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BillingElectStmtOutputPathClaimX">
            <summary>Output path for ClaimX EStatments.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BillingElectStmtOutputPathEds">
            <summary>Output path for EDS EStatments.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BillingElectStmtOutputPathPos">
            <summary>Output path for POS EStatments.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BillingElectStmtUploadURL">
            <summary>URL that EStatments are uploaded to for Dental X Change. Previously hardcoded in version 16.2.18 and below.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BillingElectUserName">
            <summary>Deprecated.  Use ebill.ElectUserName instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BillingUseBillingCycleDay">
            <summary>Used with repeat charges to apply repeat charges to patient accounts on billing cycle date.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BillingShowSendProgress">
            <summary>Boolean.  Defaults to true.  Determines if the billing window shows progress when sending statements.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BillingUseElectronic">
            <summary>0=no,1=EHG,2=POS(xml file),3=ClaimX(xml file),4=EDS(xml file)</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BrokenAppointmentAdjustmentType">
            <summary>FK to definition.DefNum.  The adjustment type that will be used on the adjustment that is automatically created when an appointment is broken.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BrokenApptProcedure">
            <summary>Boolean.  Default to true if D9986 is present.
            When true, creates a broken appointment procedure when an appointment is broken.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BrokenApptCommLogNotAdjustment">
            <summary>Deprecated.  Boolean.  0 by default.  When true, makes a commlog, otherwise makes an adjustment.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BrokenApptCommLog">
            <summary>Boolean.  0 by default.  When true, makes a commlog when an appointment is broken.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.BrokenApptAdjustment">
            <summary>Boolean.  0 by default.  When true, makes an adjustment when an appointment is broken.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.CanadaODAMemberNumber">
            <summary>For Ontario Dental Association fee schedules.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.CanadaODAMemberPass">
            <summary>For Ontario Dental Association fee schedules.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.CentralManagerSecurityLock">
            <summary>Boolean.  0 by default.  If enabled, only CEMT can edit certain security settings.  Currently only used for global lock date.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.CentralManagerPassHash">
            <summary>This is the hash of the password that is needed to open the Central Manager tool.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.CentralManagerSyncCode">
            <summary>Blank by default.  Contains a key for the CEMT.  Each CEMT database contains a unique sync code.  Syncing from the CEMT will skip any databases without the correct sync code.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ChartQuickAddHideAmalgam">
            <summary>Deprecated.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ChartAddProcNoRefreshGrid">
            <summary>Deprecated. If set to true (1), then after adding a proc, a row will be added to datatable instead of rebuilding entire datatable by making queries to the database.
            This preference was never fully implemented and should not be used.  We may revisit some day.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ChartNonPatientWarn">
            <summary>Preference to warn users when they have a nonpatient selected.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ClaimMedProvTreatmentAsOrdering">
            <summary>When true, the default ordering provider on medical eclaim procedures will be set to the procedure treating provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ClaimProcsNotBilledToInsAutoGroup">
            <summary>For the Procedures Not Billed to Insurance report.  If true, when creating new claims from the report window, will group procedures
            by clinic and site.  If false, will block user from creating claims if the selected procedures for a specific patient have different
            clinis or different sites.  Default value is true to encourage automation.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ClaimReportComputerName">
            <summary>Blank by default.  Computer name to receive reports from automatically.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ClaimReportReceiveInterval">
            <summary>Report receive interval.  30 by default.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ClaimReportReceiveLastDateTime">
            <summary>Stores last time the reports were ran.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ClaimsSendWindowValidatesOnLoad">
            <summary>Boolean.  0 by default.  If enabled, the Send Claims window will automatically validate e-claims upon loading the window.
            Validating all claims on load was old behavior that was significantly slowing down the loading of the send claims window.
            Several offices complained that we took away the validation until they attempt sending the claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ClaimSnapshotEnabled">
            <summary>Boolean.  0 by default.  If enabled, snapshots of claimprocs are created when claims are created.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ClaimSnapshotRunTime">
            <summary>DateTime where the time is the only useful part. 
            Stores the time of day that the eConnector should create a claimsnapshot.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ClaimSnapshotTriggerType">
            <summary>Enumeration of type "ClaimSnapshotTrigger".  ClaimCreate by default.  This preference determines how ClaimSnapshots get created. Stored as the enumeration.ToString().</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ClearinghouseDefaultEligibility">
            <summary>FK to clearinghouse.ClearingHouseNum.  Allows a different clearinghouse to be used for checking eligibility.
            Defaults to the current dental (or medical) clearinghouse which preserves old behavior.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ClinicListIsAlphabetical">
            <summary>Boolean.  0 by default.  If enabled, lists clinics in alphabetical order.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ClinicTrackLast">
            <summary>String, "Workstation"(default), "User", "None". See FormMisc. Determines how recently viewed clinics should be tracked.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ConfirmStatusEmailed">
            <summary>FK to definition.DefNum.  Initially 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ConfirmStatusTextMessaged">
            <summary>FK to definition.DefNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ConfirmTextMessage">
            <summary>The message that goes out to patients when doing a batch confirmation.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ConnGroupCEMT">
            <summary>Selected connection group within the CEMT.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.CorruptedDatabase">
            <summary>Boolean.  Typically set to true when an update is in progress and will be set to false when finished.  Otherwise true means that the database is in a corrupt state.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.CQMDefaultEncounterCodeValue">
            <summary>This is the default encounter code used for automatically generating encounters when specific actions are performed in Open Dental.  The code is displayed/set in FormEhrSettings.  We will set it and give the user a list of 9 suggested codes to use such that the encounters generated will cause the pateint to be considered part of the initial patient population in the 9 clinical quality measures tracked by OD.  CQMDefaultEncounterCodeSystem will identify the code system this code is from and the code value will be a FK to that code system.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.CustListenerConnectionRequestTimeoutMS">
            <summary>Used by OD HQ.  Not added to db convert script.  Allowable timeout for Negotiator to establish a connection with Listener. Different than SocketTimeoutMS and TransmissionTimeoutMS.  Specifies the allowable timeout for Patient Portal Negotiator to establish a connection with Listener.  Negotiator will only wait this long to get an acknowledgement that the Listener is available for a transmission before timing out.  Initially 10000</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.CustListenerHeartbeatFrequencyMinutes">
            <summary>Used by OD HQ.  Not added to db convert script.  Will be passed to OpenDentalEConnector when service initialized.  Specifies the time (in minutes) between each time that the listener service will upload it's current heartbeat to HQ.  Initially 360</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.CustListenerPort">
            <summary>Used by OpenDentalEConnector.  String specifies which port the OpenDentalWebService should look for on the customer's server in order to create a socket connection.  Initially 25255</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.CustListenerSocketTimeoutMS">
            <summary>Used by OD HQ.  Not added to db convert script.  Will be passed to OpenDentalEConnector when service initialized.  Specifies the read/write socket timeout.  Initially 3000</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.CustListenerTransmissionTimeoutMS">
            <summary>Used by OD HQ.  Not added to db convert script.  Specifies the entire wait time alloted for a transmission initiated by the patient portal.  Negotiator will only wait this long for a valid response back from Listener before timing out.  Initially 30000</summary>		
        </member>
        <member name="F:OpenDentBusiness.PrefName.DistributorKey">
            <summary>Boolean.  Set to 1 to indicate that this database holds customers instead of patients.  Used by OD HQ.  Used for showing extra phone numbers, showing some extra buttons for tools that only we use, behavior of checkboxes in repeating charge window, etc.  But phone panel visibility is based on DockPhonePanelShow.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.DocPath">
            <summary>The AtoZ folder path.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.DxIcdVersion">
            <summary>The ICD Diagnosis Code version primarily used by the practice.  Value of '9' for ICD-9, and '10' for ICD-10.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.EasyHideAdvancedIns">
            <summary>Depricated.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.EConnectorEnabled">
            <summary>Boolean, false by default.  Will be set to true when the update server successfully upgrades the CustListener service to the 
            eConnector service.  This only needs to happen once.  This will automatically happen after upgrading past v15.4.
            If automatically upgrading the CustListener service to the eConnector service fails, they can click Install in eService Setup.
            NEVER programmatically set this preference back to false.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.EHREmailToAddress">
            <summary>This pref is hidden, so no practical way for user to turn this on.  Only used for ehr testing.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ElectronicRxDateStartedUsing131">
            <summary>Date when user upgraded to 13.1.14 and started using NewCrop Guids on Rxs.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.EmailDefaultAddressNum">
            <summary>FK to EmailAddress.EmailAddressNum.  It is not required that a default be set.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.EmailInboxComputerName">
            <summary>The name of the only computer allowed to get new email messages from an email inbox (including Direct messages).</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.EmailInboxCheckInterval">
            <summary>Time interval in minutes describing how often to automatically check the email inbox for new messages. Default is 5 minutes.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.EmailNotifyAddressNum">
            <summary>FK to EmailAddress.EmailAddressNum.  Used for webmail notifications (Patient Portal).</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.EmailPassword">
            <summary>Deprecated. Use emailaddress.EmailPassword instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.EmailPort">
            <summary>Deprecated. Use emailaddress.ServerPort instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.EmailSenderAddress">
            <summary>Deprecated. Use emailaddress.SenderAddress instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.EmailSMTPserver">
            <summary>Deprecated. Use emailaddress.SMTPserver instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.EmailUsername">
            <summary>Deprecated. Use emailaddress.EmailUsername instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.EmailUseSSL">
            <summary>Deprecated. Use emailaddress.UseSSL instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.EhrEmergencyNow">
            <summary>Boolean. 0 means false and means it is not an EHR Emergency, and emergency access to the family module is not granted.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.EhrProvKeyGeneratorPath">
            <summary>There is no UI for this.  It's only used by OD HQ.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.EnforceMedicaidIDLength">
            <summary>Warns the user if the Medicaid ID is not the proper number of digits for that state.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.FamPhiAccess">
            <summary>Allows guarantor access to all family health information in the patient portal.  Default is 1.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.HelpKey">
            <summary>Has no UI.  Used to validate help support.  See the OpenDentalHelp project for more information on HelpKey.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.HQTriageCoordinator">
            <summary>Used by HQ. Projected onto wall displayed on top of FormMapHQ</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ICD9DefaultForNewProcs">
            <summary>procedurelog.DiagnosticCode will be set to this for new procedures and complete procedures if this field was blank when set complete.
            This can be an ICD-9 or an ICD-10.  In future versions, could be another an ICD-11, ICD-12, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ImagesModuleTreeIsCollapsed">
            <summary>3-state prefernce used in the image module, state definitions are:
            0 = Expand the document tree each time the Images module is visited.
            1 = Document tree collapses when patient changes.
            2 = Document tree folders persistent expand/collapse per user.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ImeCompositionCompatibility">
            <summary>Boolean.  False by default.  When enabled a fix is enabled within ODTextBox (RichTextBox) for foreign users that use 
            a different language input methodology that requires the composition of symbols in order to display their language correctly.
            E.g. the Korean symbol '역' (dur) will not display correctly inside ODTextBoxes without this set to true.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.InsBillingProv">
            <summary>0=Default practice provider, -1=Treating Provider. Otherwise, FK to provider.ProvNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.InsPlanConverstion_7_5_17_AutoMergeYN">
            <summary>0=unknown, user did not make a selection.  1=Yes, 2=No.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.InsPpoAlwaysUseUcrFee">
            <summary>Boolean.  False by default.  When enabled, procedure fees will always use the UCR fee.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.InsPPOsecWriteoffs">
            <summary>0 by default.  If false, secondary PPO writeoffs will always be zero (normal).  At least one customer wants to see secondary writeoffs.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.InsVerifyAppointmentScheduledDays">
            <summary>7 by default.  Number of days before displaying insurances that need verified.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.InsVerifyBenefitEligibilityDays">
            <summary>90 by default. Number of days before requiring insurance plans to be verified.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.InsVerifyDefaultToCurrentUser">
            <summary>Boolean, false by default.  When true, defaults a filter to the current user instead of All when opening the InsVerifyList.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.InsVerifyExcludePatientClones">
            <summary>Boolean, false by default.  When true, excludes patient clones from the Insurance Verification List.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.InsVerifyExcludePatVerify">
            <summary>Boolean, false by default.  When true, excludes patient plans associated to insurance plans that are marked "Do Not Verify" from the Insurance Verification List.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.InsVerifyPatientEnrollmentDays">
            <summary>30 by default.  Number of days before requiring patient plans to be verified.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.InsWriteoffDescript">
            <summary>Writeoff description displayed in the Account Module and on statements.  If blank, the default is "Writeoff".
            We are using "Writeoff" since "PPO Discount" was only used for a brief time in 15.3 while it was Beta and no customer requested it</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.LanguageAndRegion">
            <summary>Used to determine how many windows are displayed throughout the program, translation, charting, and other features. Version 15.4.1</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.LanguagesIndicateNone">
            <summary>Initially set to Declined to Specify.  Indicates which language from the LanguagesUsedByPatients preference is the language that indicates the patient declined to specify.  Text must exactly match a language in the list of available languages.  Can be blank if the user deletes the language from the list of available languages.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.LanguagesUsedByPatients">
            <summary>Comma-delimited list of two-letter language names and custom language names.  The custom language names are the full string name and are not necessarily supported by Microsoft.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.LocalTimeOverridesServerTime">
            <summary>Boolean. Only used to override server time in the following places: Time Cards.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.MeaningfulUseTwo">
            <summary>0=Meaningful Use Stage 1, 1=Meaningful Use Stage 2.  Global, affects all providers.  Changes the MU grid that is seen for individual patients and for summary reports.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.MedDefaultStopDays">
            <summary>Number of days after medication order start date until stop date.  Used when automatically inserting a medication order when creating
            a new Rx.  Default value is 7 days.  If set to 0 days, the automatic stop date will not be entered.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.MedicalFeeUsedForNewProcs">
            <summary>New procs will use the fee amount tied to the medical code instead of the ADA code.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.MedicationsIndicateNone">
            <summary>FK to medication.MedicationNum</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.MedLabReconcileDone">
            <summary>If MedLabReconcileDone=="0", a one time reconciliation of the MedLab HL7 messages is needed. The reconcile will reprocess the original
            HL7 messages for any MedLabs with PatNum=0 in order to create the embedded PDF files from the base64 text in the ZEF segments. The old method
            of waiting to extract these files until the message is manually attached to a patient was very slow using the middle tier. The new method is to
            create the PDF files and save them in the image folder in a subdirectory called "MedLabEmbeddedFiles" if a pat is not located from the details
            in the PID segment of the message. Attaching the MedLabs to a patient is now just a matter of moving the files to the patient's image folder.
            All files will now be extracted and stored, either in a pat's folder or in the "MedLabEmbeddedFiles" folder, by the HL7 service.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.MobileSynchNewTables79Done">
            <summary>Used one time after the conversion to 7.9 for initial synch of the provider table.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.MobileSynchNewTables112Done">
            <summary>Used one time after the conversion to 11.2 for re-synch of the patient records because a)2 columns BalTotal and InsEst have been added to the patientm table. b) the table documentm has been added</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.MobileSynchNewTables121Done">
            <summary>Used one time after the conversion to 12.1 for the recallm table being added and for upload of the practice Title.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.MySqlVersion">
            <summary>The major and minor version of the current MySQL connection.  Gets updated on startup when a new version is detected.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.NetProdDetailUseSnapshotToday">
            <summary>True by default.  Will use the claimsnapshot table for calculating production in the Net Production Detail report if the date range is today's date only.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.NewCropAccountId">
            <summary>There is no UI for user to change this.  Format, if OD customer, is PatNum-(RandomString)(CheckSum).  Example: 1234-W6c43.  Format for resellers is up to them.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.NewCropDateLastAccessCheck">
            <summary>The date this customer last checked with HQ to determine which provider have access to eRx.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.NewCropIsLegacy">
            <summary>True for customers who were using NewCrop before version 15.4.  True if NewCropAccountId was not blank when upgraded.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.NewCropIsLexiData">
            <summary>Controls which NewCrop database to use.  If false, then the customer uses the First Data Bank (FDB) database, otherwise the 
            customer uses the LexiData database.  Connecting to LexiData saves NewCrop some money on the new accounts.  Additionally, the RxNorms which
            come back from the prescription refresh in the Chart are more complete for the LexiData database than for the FDB database.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.NewCropName">
            <summary>There is no UI for user to change this. For distributors, this is part of the credentials.  OD credentials are not stored here, but are hard-coded.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.NewCropPartnerName">
            <summary>There is no UI for user to change this.  For distributors, this is part of the credentials.
            OD credentials are not stored here, but are hard-coded.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.NewCropPassword">
            <summary>There is no UI for user to change this.  For distributors, this is part of the credentials.
            OD credentials are not stored here, but are hard-coded.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.NistTimeServerUrl">
            <summary>URL of the time server to use for EHR time synchronization.  Only used for EHR.  Example nist-time-server.eoni.com</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PatientPortalNotifyBody">
            <summary>Free-form 'Body' text of the notification sent by this practice when a new secure EmailMessage is sent to patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PatientPortalNotifySubject">
            <summary>Free-form 'Subject' text of the notification sent by this practice when a new secure EmailMessage is sent to patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PatientSelectUsesSearchButton">
            <summary>Boolean. This is the default for new computers, otherwise it uses the computerpref PatSelectSearchMode.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PaymentsPromptForAutoSplit">
            <summary>PaySplitManager enum. 1 by default. 0=DoNotUse, 1=Prompt, 2=Force</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PaymentsPromptForPayType">
            <summary>0 by default.1=Prompt users to select payment type when creating new Payments.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PaymentsUsePatientClinic">
            <summary>Boolean. True by default.  If false, Payment clinic will be determined by FormOpenDental.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PayPeriodIntervalSetting">
            <summary>Int.  Represents PayPeriodInterval enum (Weekly, Bi-Weekly, Monthly). </summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PayPeriodPayAfterNumberOfDays">
            <summary>Int.  If set, represents the number of days after the pay period the pay day is.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PayPeriodPayDateBeforeWeekend">
            <summary>Boolean.  True by default.  If true, pay days will fall before weekends.  If false, pay days will fall after weekends.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PayPeriodPayDateExcludesWeekends">
            <summary>Boolean.  True by default.  Pay Day cannot fall on weekend if true.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PayPeriodPayDay">
            <summary>Int. If set to 0, it's disabled, but any other number represents a day of the week. 1:Sunday, 2:Monday etc...</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PayPlansUseSheets">
            <summary>The Payment Plan version that the customer is using.  Value values are 1 and 2.  1 by default.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PerioSkipMissingTeeth">
            <summary>Enabled by default.  When a new perio exam is created, will always mark all missing teeth as skipped.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PerioTreatImplantsAsNotMissing">
            <summary>Enabled by default.  When a tooth with an implant procedure completed will not be skipped on perio exams</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PracticeFax">
            <summary>In USA and Canada, enforced to be exactly 10 digits or blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PracticeIsMedicalOnly">
            <summary>This preference is used to hide/change certain OD features, like hiding the tooth chart and changing 'dentist' to 'provider'.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PracticePhone">
            <summary>In USA and Canada, enforced to be exactly 10 digits or blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PregnancyDefaultCodeValue">
            <summary>This is the default pregnancy code used for diagnosing pregnancy from FormVitalSignEdit2014 and is displayed/set in FormEhrSettings.  When the check box for BMI and BP not taken due to pregnancy Dx is selected, this code value will be inserted into the diseasedef table in the column identified by the PregnancyDefaultCodeSystem (i.e. diseasedef.SnomedCode, diseasedef.ICD9Code).  It will then be a FK in the diseasedef table to the associated code system table.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PrepaymentUnearnedType">
            <summary>FK to definition.DefNum for PaySplitUnearnedType defcat (29)</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PriProvDefaultToSelectProv">
            <summary>In Patient Edit and Add Family windows, the Primary Provider defaults to 'Select Provider' instead of the practice provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ProblemsIndicateNone">
            <summary>FK to diseasedef.DiseaseDefNum</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ProcCodeListSortOrder">
            <summary>Determines default sort order of Proc Codes list when accessed from Lists -> Procedure Codes.  Enum:ProcCodeListSort, 0 by default.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ProcCodeListShowHidden">
            <summary>In FormProcCodes, this is the default for the ShowHidden checkbox.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ProcEditRequireAutoCodes">
            <summary>Users must use suggested auto codes for a procedure.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ProcPromptForAutoNote">
            <summary>True by default.  Allows for substituting AutoNote text for [[text]] segments in a procedure's default note.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ProcessSigsIntervalInSecs">
            <summary>Frequency at which signals are processed. Also used by HQ to determine triage label refresh frequency.</summary>		
        </member>
        <member name="F:OpenDentBusiness.PrefName.ProgramAdditionalFeatures">
            <summary>DateTime.  Next date that the advertising programming properties will automatically check.</summary>		
        </member>
        <member name="F:OpenDentBusiness.PrefName.ProgramVersionLastUpdated">
            <summary>Deprecated. Use updatehistory table instead.  Stored the DateTime of when the ProgramVersion preference last changed.</summary>		
        </member>
        <member name="F:OpenDentBusiness.PrefName.ProviderPayrollAllowToday">
            <summary>Bool.  Defaults to true.  When true, allow the Provider Payroll report to select Today's date in the date range.</summary>		
        </member>
        <member name="F:OpenDentBusiness.PrefName.PublicHealthScreeningSheet">
            <summary>Was never used.  Was supposed to indicate FK to sheet.Sheet_DEF_Num, so not even named correctly. Must be an exam sheet. Only makes sense if PublicHealthScreeningUsePat is true.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.PublicHealthScreeningUsePat">
            <summary>Was never used.  Always 0.  Boolean. Work for attaching to patients stopped 11/30/2012, there is currently no access to change the value of this preference.    When in this mode, screenings will be attached to actual PatNums rather than just freeform text names.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.QuickBooksClassRefsEnabled">
            <summary>Boolean, off by default.  Some users have clinics enabled but do not want QuickBooks to itemize their accounts.
            Class Refs are a way for QuickBooks to itemize if set up correctly.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.RadiologyDateStartedUsing154">
            <summary>Date when user upgraded to or past 15.4.1 and started using ADA procedures to count CPOE radiology orders for EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.RandomPrimaryKeys">
            <summary>Boolean.  True if random primary keys have been turned on.
            Causes all CRUD classes to look for an unused random PK before inserting instead of leaving it up to auto incrementing.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.RecallAgeAdult">
            <summary>Defaults to 12 for new customers.  The number in this field is considered adult.  Only used when automatically adding procedures to a new recall appointment.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.RecallDaysFuture">
            <summary>-1 indicates min for all dates</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.RecallDaysPast">
            <summary>-1 indicates min for all dates</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.RecallMaxNumberReminders">
            <summary> long. -1=infinite, 0=zero; if stored as -1, displays as "".</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.RecallTypeSpecialChildProphy">
            <summary>Used if younger than 12 on the recall date.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.RecallTypesShowingInList">
            <summary>Comma-delimited list. FK to recalltype.RecallTypeNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.RecallUseEmailIfHasEmailAddress">
            <summary>If false, then it will only use email in the recall list if email is the preferred recall method.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.RecurringChargesUsePriProv">
            <summary>Bool, 0 by default.  When true, recurring charges will use the primary provider of the patient when creating paysplits.
            When false, the provider that the family is most in debt to will be used.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ReplicationFailureAtServer_id">
            <summary>If replication has failed, this indicates the server_id.  No computer will be able to connect to this single server until this flag is cleared.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ReplicationUserQueryServer">
            <summary>The PK of the replication server that is flagged as the "report server".  If using replication, "create table" or "drop table" commands can only be executed within the user query window when connected to this server.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ReportPandIhasClinicBreakdown">
            <summary>Boolean, on by default.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ReportPandIhasClinicInfo">
            <summary>Boolean, off by default.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ReportsIncompleteProcsNoNotes">
            <summary>Bool.  False by defualt, used to filter incomplete procedures by having no note in the Incomplete Procedures Report.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ReportsIncompleteProcsUnsigned">
            <summary>Bool.  False by defualt, used to filter incomplete procedures by having a note that is unsigned in the Incomplete Procedures Report.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ReportsWrapColumns">
            <summary>Bool.  False by defualt, used to wrap columns when printing a custom report.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ReportsShowHistory">
            <summary>Bool.  False by defualt, used to determine whether the reports progress bar will show a history or not.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ScheduleProvEmpSelectAll">
            <summary>Set to 1 by default. Selects all providers/employees when loading schedules.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ScreeningsUseSheets">
            <summary>Boolean. Off by default so that users will have to opt into utilizing the screening with sheets feature.
            Screening with sheets is extremely customized for Dental3 (D3)</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.SecurityGroupForInstructors">
            <summary>UserGroupNum for Instructors.  Set only for dental schools in dental school setup.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.SecurityGroupForStudents">
            <summary>UserGroupNum for Students.  Set only for dental schools in dental school setup.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.SecurityLockDays">
            <summary>Set to 0 to always grant permission. 1 means only today.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.SecurityLogOffAfterMinutes">
            <summary>Set to 0 to disable auto logoff.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ShowFeatureGoogleMaps">
            <summary>Set to 1 by default.  Shows a button in Edit Patient Information that lets users launch Google Maps.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ShowFeaturePatientClone">
            <summary>Set to 1 to enable the Synch Clone button in the Family module which allows users to create and synch clones of patients.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ShowIDinTitleBar">
            <summary>0=None, 1=PatNum, 2=ChartNumber, 3=Birthdate</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ShowProviderPayrollReport">
            <summary>Deprecated.  Was used to hide the provider payroll report before users had the ability to remove it from the production and income listbox.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.SignalInactiveMinutes">
            <summary>Used to stop signals after a period of inactivity.  A value of 0 disables this feature.  Default value of 0 to maintain backward compatibility</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.SignalLastClearedDate">
            <summary>Only used on startup.  The date in which stale signalods were removed.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.SmsContractDate">
            <summary>Blank if not signed. Date signed. For practice level contract, if using clinics see Clinic.SmsContractDate. Record of signing also kept at HQ.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.SmsContractName">
            <summary>(Deprecated) Blank if not signed. Name signed. For practice level contract, if using clinics see Clinic.SmsContractName. Record of signing also kept at HQ.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.SmsMonthlyLimit">
            <summary>Always stored in US dollars. This is the desired limit for SMS outbound messages per month.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.SoftwareName">
            <summary>Name of this Software.  Defaults to 'Open Dental Software'.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.StatementShowNotes">
            <summary>Show payment notes.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.StatementSummaryShowInsInfo">
            <summary>Deprecated.  Not used anywhere.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.StopWebCamSnapshot">
            <summary>Used by OD HQ. Indicates whether WebCamOD applications should be sending their images to the server or not.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.TasksCheckOnStartup">
            <summary>Deprecated.  Not used anywhere.  Previously used for the popup window to show how many new tasks for cur user after login.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.TasksNewTrackedByUser">
            <summary>If true use task.Status to determine if task is new. Otherwise use task.IsUnread.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.TaskSortApptDateTime">
            <summary>Boolean.  0 by default.  Sets appointment task lists to use special logic to sort by AptDateTime.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.TasksUseRepeating">
            <summary>Boolean.  Defaults to false to hide repeating tasks feature if no repeating tasks are in use when updating to 16.3.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.TempFolderDateFirstCleaned">
            <summary>Keeps track of date of one-time cleanup of temp files.  Prevents continued annoying cleanups after the first month.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.TextMsgOkStatusTreatAsNo">
            <summary>If true, treat Yes-No-Unknown status of Unknown as if it were a No.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.TimeCardOvertimeFirstDayOfWeek">
            <summary>0=Sun,1=Mon...6=Sat</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.TimeCardShowSeconds">
            <summary>Boolean.  0 by default.  When enabled, FormTimeCard and FormTimeCardMange display H:mm:ss instead of HH:mm</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.TimeCardsUseDecimalInsteadOfColon">
            <summary>bool</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.ToothChartMoveMenuToRight">
            <summary>Deprecated.  Not used anywhere.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.TreatPlanDiscountPercent">
            <summary>Set to 0 to clear out previous discounts.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.TreatPlanSaveSignedToPdf">
            <summary>When a TP is signed a PDF will be generated and saved. If disabled, TPs will be redrawn with current data (pre 15.4 behavior).</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.TreatPlanSortByTooth">
            <summary>This preference merely defines what FormOpenDental.IsTreatPlanSortByTooth is on startup.
            When true, procedures in the treatment plan module sort by priority, date, toothnum, surface, then PK. 
            When false, does not sort by toothnum or surface. True by default to preserve old behavior.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.UpdateMultipleDatabases">
            <summary>Described in the Update Setup window and in the manual.  Can contain multiple db names separated by commas.  Should not include current db name.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.UpdateDateTime">
            <summary>The next update date and time, set in FormUpdateSetup.  When this is set in the future, the main form's title bar will count down to the set time.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.UpdateStreamLinePassword">
            <summary>Use GetStringNoCache() to get the value of this preference.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.UseInternationalToothNumbers">
            <summary>Enum:ToothNumberingNomenclature 0=Universal(American), 1=FDI, 2=Haderup, 3=Palmer</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.UserNameManualEntry">
            <summary>Boolean.  0 by default.  When enabled, users must enter their user name manually at the log on window.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.UseProviderColorsInChart">
            <summary>Boolean. 0 by default. When enabled, chart module procedures that are complete will use the provider's color as row's background color</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.WaitingRoomAlertTime">
            <summary>0 to disable.  When enabled, sets rows to alert color based on wait time.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.WaitingRoomFilterByView">
            <summary>Boolean.  0 by default.  When enabled, the waiting room will filter itself by the selected appointment view.  0, normal filtering, will show all patients waiting for the entire practice (or entire clinic when using clinics).</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.WebCamFrequencyMS">
            <summary>DEPRECATED.  Used by OD HQ.  Not added to db convert script.  No UI to change this value.
            Determines how often in milliseconds that WebCamOD should capture and send a picture to the phone table.
            If this value is manually changed, all Web Cams need to be restarted for the change to take effect.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.WebHostSynchServerURL">
            <summary>Only used for sheet synch.  See Mobile... for URL for mobile synch.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.WebSchedAutomaticSendSetting">
            <summary>Stored as an int value from the WebSchedAutomaticSend enum.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.WebSchedNewPatApptEnabled">
            <summary>Boolean.  0 by default.  True when the New Patient Appointment version of Web Sched is enabled.
            Loosely keeps track of service status, calling our web service to verify active service is still required.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.WebSchedNewPatApptProcs">
            <summary>Comma delimited list of procedures that should be put onto the new patient appointment.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.WebSchedNewPatApptTimePattern">
            <summary>The time pattern that will be used to determine the length of the new patient appointment.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.WebSchedNewPatApptSearchAfterDays">
            <summary>Integer.  Represents the number of days into the future we will go before searching for available time slots.
            Empty will start looking for available time slots today.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.WebSchedProviderRule">
            <summary>Enum: WebSchedProviderRules 0=FirstAvailable, 1=PrimaryProvider, 2=SecondaryProvider, 3=LastSeenHygienist</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.WebSchedService">
            <summary>Boolean. 0 by default. True when Web Sched service is enabled.
            Loosely keeps track of service status, calling our web service to verify active service is still required.
            Used to make the UI of Open Dental different and less annoying (advertising wise) depeding on if the service is enabled or not.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.WikiDetectLinks">
            <summary>If enabled, allows users to right click on ODTextboxes or ODGrids to populate the context menu with any detected wiki links.</summary>
        </member>
        <member name="F:OpenDentBusiness.PrefName.WikiCreatePageFromLink">
            <summary>If enabled, allows users to create new wiki pages when following links from textboxes and grids. (Disable to prevent proliferation of misspelled wiki pages.)</summary>
        </member>
        <member name="T:OpenDentBusiness.SearchBehaviorCriteria">
            <summary>Used by pref "AppointmentSearchBehavior". </summary>
        </member>
        <member name="T:OpenDentBusiness.AccountingSoftware">
            <summary>Used by pref "AccountingSoftware".  0=OpenDental, 1=QuickBooks</summary>
        </member>
        <member name="T:OpenDentBusiness.WebSchedProviderRules">
            <summary>Used by pref "WebSchedProviderRule". Determines how Web Sched will decide on what provider time slots to show patients.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebSchedProviderRules.FirstAvailable">
            <summary>0 - Dynamically picks the first available provider based on the time slot picked by the patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebSchedProviderRules.PrimaryProvider">
            <summary>1 - Only shows time slots that are available via the patient's primary provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebSchedProviderRules.SecondaryProvider">
            <summary>2 - Only shows time slots that are available via the patient's secondary provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebSchedProviderRules.LastSeenHygienist">
            <summary>3 - Only shows time slots that are available via the patient's last seen hygienist.</summary>
        </member>
        <member name="T:OpenDentBusiness.Printer">
            <summary>One printer selection for one situation for one computer.</summary>
        </member>
        <member name="F:OpenDentBusiness.Printer.PrinterNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Printer.ComputerNum">
            <summary>FK to computer.ComputerNum.  This will be changed some day to refer to the computername, because it would make more sense as a key than a cryptic number.</summary>
        </member>
        <member name="F:OpenDentBusiness.Printer.PrintSit">
            <summary>Enum:PrintSituation One of about 10 different situations where printing takes place.  If no printer object exists for a situation, then a default is used and a prompt is displayed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Printer.PrinterName">
            <summary>The name of the printer as set from the specified computer.</summary>
        </member>
        <member name="F:OpenDentBusiness.Printer.DisplayPrompt">
            <summary>If true, then user will be prompted for printer.  Otherwise, print directly with little user interaction.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcButton">
            <summary>The 'buttons' to show in the Chart module.  They must have items attached in order to do anything.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButton.ProcButtonNum">
            <summary>Primary key</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButton.Description">
            <summary>The text to show on the button.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButton.ItemOrder">
            <summary>Order that they will show in the Chart module.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButton.Category">
            <summary>FK to definition.DefNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButton.ButtonImage">
            <summary>If no image, then the clob will be an empty string.  In this case, the bitmap will be null when loaded from the database.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButton.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ProcButtonItem">
            <summary>Attached to procbuttons.  These tell the program what to do when a user clicks on a button.  There are two types: proccodes or autocodes.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButtonItem.ProcButtonItemNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButtonItem.ProcButtonNum">
            <summary>FK to procbutton.ProcButtonNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButtonItem.OldCode">
            <summary>Do not use.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButtonItem.AutoCodeNum">
            <summary>FK to autocode.AutoCodeNum.  0 if this is a procedure code.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButtonItem.CodeNum">
            <summary>FK to procedurecode.CodeNum.  0 if this is an autocode.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcButtonItem.ItemOrder">
            <summary>Unusual ItemOrder column. Set implicitly based on the order procedures were added to the procedure button. This should prevent "random"
            ordered procedures on buttons with multiple procedures.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcButtonItem.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Procedure">
            <summary>Database table is procedurelog.  A procedure for a patient.  Can be treatment planned or completed.  Once it's completed, it gets tracked more closely be the security portion of the program.  A procedure can NEVER be deleted.  Status can just be changed to "deleted".</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.ProcNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.AptNum">
            <summary>FK to appointment.AptNum.  Only allowed to attach proc to one appt(not counting planned appt)</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.OldCode">
            <summary>No longer used.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.ProcDate">
            <summary>Procedure date that will show in the account as the date performed.  If just treatment planned, the date can be the date it was tp'd, or the date can be min val if we don't care.  Also see ProcTime column.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.ProcFee">
            <summary>Procedure fee.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.Surf">
            <summary>Surfaces, or use "UL" etc for quadrant, "2" etc for sextant, "U","L" for arches.  Sextants in the United States are: 1 (Upper Right), 2 (Upper Anterior), 3 (Upper Left), 4 (Lower Left), 5 (Lower Anterior), 6 (Lower Right).  In Canada, Sextants are 03 through 08 (add 2 to the US sextant and prepend a zero).</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.ToothNum">
            <summary>May be blank, otherwise 1-32, 51-82, A-T, or AS-TS, 1 or 2 char.  For Canadian users, using FDI nomenclature, we use 51 as a placeholder for supernumerary teeth, which is tooth number 99 according to CDHA standards (2/17/2014).  Logic for this is handled in the tooth logic class.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.ToothRange">
            <summary>May be blank, otherwise is series of toothnumbers separated by commas.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.Priority">
            <summary>FK to definition.DefNum, which contains the text of the priority.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.ProcStatus">
            <summary>Enum:ProcStat TP=1,Complete=2,Existing Cur Prov=3,Existing Other Prov=4,Referred=5,Deleted=6,Condition=7.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.ProvNum">
            <summary>FK to provider.ProvNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.Dx">
            <summary>FK to definition.DefNum, which contains text of the Diagnosis.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.PlannedAptNum">
            <summary>FK to appointment.AptNum.  Was called NextAptNum in older versions.  Allows this procedure to be attached to a Planned appointment as well as a standard appointment.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.PlaceService">
            <summary>Enum:PlaceOfService  Only used in Public Health. Zero(Office) until procedure set complete. Then it's set to the value of the DefaultProcedurePlaceService preference.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.Prosthesis">
            <summary>Single char. Blank=no, I=Initial, R=Replacement.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.DateOriginalProsth">
            <summary>For a prosthesis Replacement, this is the original date.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.ClaimNote">
            <summary>This note goes out on e-claims.  Not visible in Canada.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.DateEntryC">
            <summary>This is the date this procedure was entered or set complete.  If not status C, then the value is ignored.  This date is set automatically when Insert, but older data or converted data might not have this value set.  It gets updated when set complete.  User never allowed to edit.  This will be enhanced later.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.ClinicNum">
            <summary>FK to clinic.ClinicNum.  0 if no clinic.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.MedicalCode">
            <summary>FK to procedurecode.ProcCode. Optional.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.DiagnosticCode">
            <summary>Simple text for ICD-9 code. Gets sent with medical claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.IsPrincDiag">
            <summary>Set true if this medical diagnostic code is the principal diagnosis for the visit.  If no principal diagnosis is marked for any procedures on a medical e-claim, then it won't be allowed to be sent.  If more than one is marked, then it will just use one at random.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.ProcNumLab">
            <summary>FK to procedurelog.ProcNum. Only used in Canada. If not zero, then this proc is a lab fee and this indicates to which actual procedure the lab fee is attached.  For ordinary use, they are treated like two separate procedures.  It's only for insurance claims that we need to know which lab fee belongs to which procedure.  Two lab fees may be attached to one procedure.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.BillingTypeOne">
            <summary>FK to definition.DefNum. Lets some users track charges for certain types of reports.  For example, a Medicaid billing type could be assigned to a procedure, flagging it for inclusion in a report mandated by goverment.  Would be more useful if it was automated to flow down based on insurance plan type, but that can be added later.  Not visible if prefs.EasyHideMedicaid is true.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.BillingTypeTwo">
            <summary>FK to definition.DefNum.  Same as BillingTypeOne, but used when there is a secondary billing type to account for.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.CodeNum">
            <summary>FK to procedurecode.CodeNum</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.CodeMod1">
            <summary>Modifier for certain CPT codes.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.CodeMod2">
            <summary>Modifier for certain CPT codes.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.CodeMod3">
            <summary>Modifier for certain CPT codes.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.CodeMod4">
            <summary>Modifier for certain CPT codes.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.RevCode">
            <summary>NUBC Revenue Code for medical/inst billing. Used on UB04 and 837I.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.UnitQty">
            <summary>Default is 1.  Becomes Service Unit Count on institutional UB claimforms SV205.  Becomes Service Unit Count on medical 1500 claimforms SV104.  Becomes procedure count on dental claims SV306.  Gets multiplied by fee in all accounting calculations.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.BaseUnits">
            <summary>Base units used for some billing codes.  Default is 0.  No UI for this field.  It is only edited in the ProcedureCode window.  The database maint tool changes BaseUnits of all procedures to match that of the procCode.  Not sure yet what it's for.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.StartTime">
            <summary>Start time in military.  No longer used, but not deleting just in case someone has critical information stored here.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.StopTime">
            <summary>Stop time in military.  No longer used, but not deleting just in case someone has critical information stored here.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.DateTP">
            <summary>The date that the procedure was originally treatment planned.  Does not change when marked complete.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.SiteNum">
            <summary>FK to site.SiteNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.HideGraphics">
            <summary>Set to true to hide the chart graphics for this procedure.  For example, a crown was done, but then tooth extracted.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.CanadianTypeCodes">
            <summary>F16, up to 5 char. One or more of the following: A=Repair of a prior service, B=Temporary placement, C=TMJ, E=Implant, L=Appliance lost, S=Appliance stolen, X=none of the above.  Blank is equivalent to X for claim output, but one value will not be automatically converted to the other in this table.  That will allow us to track user entry for procedurecode.IsProsth.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.ProcTime">
            <summary>Used to be part of the ProcDate, but that was causing reporting issues.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.ProcTimeEnd">
            <summary>Marks the time a procedure was finished.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.DateTStamp">
            <summary>Automatically updated by MySQL every time a row is added or changed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.Prognosis">
            <summary>FK to definition.DefNum, which contains text of the Prognosis.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.DrugUnit">
            <summary>Enum:EnumProcDrugUnit For 837I and UB04</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.DrugQty">
            <summary>Includes fractions. For 837I</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.UnitQtyType">
            <summary>Enum:ProcUnitQtyType For dental, the type is always sent electronically as MultiProcs. For institutional SV204, Days will be sent electronically if chosen, otherwise ServiceUnits will be sent. For medical SV103, MinutesAnesth will be sent electronically if chosen, otherwise ServiceUnits will be sent.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.StatementNum">
            <summary>FK to statement.StatementNum.  Only used when the statement in an invoice.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.IsLocked">
            <summary>If this flag is set, then the proc is locked down tight.  No changes at all can be made except to append, sign, or invalidate. Invalidate really just sets the proc to status 'deleted'.  An invalidated proc retains its IsLocked status.  All locked procs will be status of C or D.  Locked group notes will be status of EC or D.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.BillingNote">
            <summary>A note that will show directly in the Account module.  Also used for repeating charges. Helps distinguish between charges for the same proccode in the same month.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.RepeatChargeNum">
            <summary>FK to repeatcharge.RepeatChargeNum.  Used in repeating charges to determine which procedures belong to each repeating charge. If the
            repeat charge that this RepeatChargeNum points to is deleted, this column will not be set to 0 so that a record will still exist that this
            procedure came from a repeat charge.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.DiagnosticCode2">
            <summary>Simple text for ICD-9 code. Gets sent with medical claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.DiagnosticCode3">
            <summary>Simple text for ICD-9 code. Gets sent with medical claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.DiagnosticCode4">
            <summary>Simple text for ICD-9 code. Gets sent with medical claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.Discount">
            <summary>Stores the dollar amount of the discount, not full price.  E.g.  for a 10% discount, Fee = $160 Discount = $16.  This column is used by treatment planned procedures to create an adjustment when set complete.  It should not be used as an accurate monetary discount value for completed procedures.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.SnomedBodySite">
            <summary>Some procedures require a SNOMED code which indicates that site on the body at which this procedure was performed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.ProvOrderOverride">
            <summary>FK to provider.ProvNum.  Ordering provider override.  Goes hand-in-hand with OrderingReferralNum.  Medical eclaims only.
            Defaults to zero.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.IsDateProsthEst">
            <summary>For prosthesis replacement procedures on 5010 eclaims only.  If true, indicates that the DateOriginalProsth is an estimated date.  Estimated dates are often used when the original prosthesis was performed by another doctor.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.IcdVersion">
            <summary>The ICD code version for all diagnosis codes on this procedure, including DiagnosisCode, DiagnosisCode2, DiagnosisCode3,
            and DiagnosisCode4.  Value of 9 for ICD-9, 10 for ICD-10, etc.  Default value is 0.  This value is copied from the DxIcdVersion preference
            when a procedure is created.  The user can also manually change the IcdVersion on individual procedures.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.IsCpoe">
            <summary>Procedures will be flagged as CPOE (Computerized Provider Order Entry) if this procedure was created by a provider.
            If a provider views, edits, or has any interaction with this procedure after its creation, it will be flagged as IsCPOE.
            Also, there will be a helpful window where providers can go to to "approve" non-CPOE procedures and mark them as CPOE to help meet EHR measures.
            If a staff person is logged in and enters this procedure then this is non-CPOE, so false.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.SecDateEntry">
            <summary>Timestamp automatically generated and user not allowed to change.  The actual date of entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.DateComplete">
            <summary>The date the procedure was originally set complete. If status is set complete and then set to something other than complete, this 
            field will be set to DateTime.MinValue if DateComplete is today.  If DateComplete is set to a day in the past and the status is changed from
            complete to something else, the field will not be cleared or updated.  Db only field used by one customer and this is how they requested it.
            PatNum #19191</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.OrderingReferralNum">
            <summary>FK to referral.ReferralNum.  Goes hand-in-hand with ProvOrderOverride.  Medical eclaims only.  Defaults to zero.
            If set, and the ProvOrderOverride is not set, then this referral will go out at the ordering provider on medical e-claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.Note">
            <summary>Not a database column.  Saved in database in the procnote table.  This note is only the most recent note from that table.  If user changes it, then the business layer handles it by adding another procnote to that table.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.UserNum">
            <summary>Not a database column.  Just used for now to set the user so that it can be saved with the ProcNote.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.Signature">
            <summary>Not a database column.  If viewing an individual procedure, then this will contain the encrypted signature.  If viewing a procedure list, this will typically just contain an "X" if a signature is present.  If user signs note, the signature will be encrypted before placing into this field.  Then it will be passed down and saved directly as is.</summary>
        </member>
        <member name="F:OpenDentBusiness.Procedure.SigIsTopaz">
            <summary>Not a database column.</summary>
        </member>
        <member name="P:OpenDentBusiness.Procedure.ProcTimeXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="P:OpenDentBusiness.Procedure.ProcTimeEndXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="P:OpenDentBusiness.Procedure.PriorityOrder">
            <summary>Gets priority order from Definition cache.</summary>
        </member>
        <member name="M:OpenDentBusiness.Procedure.Copy">
            <summary>Returns a copy of the procedure.</summary>
        </member>
        <member name="T:OpenDentBusiness.EnumProcDrugUnit">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.EnumProcDrugUnit.None">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumProcDrugUnit.InternationalUnit">
            <summary>1 - F2 on UB04.</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumProcDrugUnit.Gram">
            <summary>2 - GR on UB04.</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumProcDrugUnit.Milligram">
            <summary>3 - GR on UB04.</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumProcDrugUnit.Milliliter">
            <summary>4 - ML on UB04.</summary>
        </member>
        <member name="F:OpenDentBusiness.EnumProcDrugUnit.Unit">
            <summary>5 - UN on UB04.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcUnitQtyType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ProcUnitQtyType.MultProcs">
            <summary>0-Only allowed on dental, and only option allowed on dental.  This is also the default for all procs in our UI.  For example, 4 PAs all on one line on the e-claim.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcUnitQtyType.MinutesAnesth">
            <summary>1-Only allowed on medical SV103.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcUnitQtyType.ServiceUnits">
            <summary>2-Allowed on medical SV103 and institutional SV204.  This is the default for both medical and inst when creating X12 claims, regardless of what is set on the proc.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcUnitQtyType.Days">
            <summary>3-Only allowed on institutional SV204.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcedureCode">
            <summary>A list setup ahead of time with all the procedure codes used by the office.  Every procedurelog entry which is attached to a patient is also linked to this table.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.CodeNum">
            <summary>Primary Key.  This happened in version 4.8.7.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.ProcCode">
            <summary>Was Primary key, but now CodeNum is primary key.  Can hold dental codes, medical codes, custom codes, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.Descript">
            <summary>The main description.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.AbbrDesc">
            <summary>Abbreviated description.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.ProcTime">
            <summary>X's and /'s describe Dr's time and assistant's time in the same increments as the user has set.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.ProcCat">
            <summary>FK to definition.DefNum.  The category that this code will be found under in the search window.  Has nothing to do with insurance categories.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.TreatArea">
            <summary>Enum:TreatmentArea </summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.NoBillIns">
            <summary>If true, do not usually bill this procedure to insurance.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.IsProsth">
            <summary>True if Crown,Bridge,Denture, or RPD. Forces user to enter Initial or Replacement and Date.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.DefaultNote">
            <summary>The default procedure note to copy when marking complete.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.IsHygiene">
            <summary>Identifies hygiene procedures so that the correct provider can be selected.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.GTypeNum">
            <summary>No longer used.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.AlternateCode1">
            <summary>For Medicaid.  There may be more later.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.MedicalCode">
            <summary>FK to procedurecode.ProcCode.  The actual medical code that is being referenced must be setup first.  Anytime a procedure it added, this medical code will also be added to that procedure.  The user can change it in procedurelog.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.IsTaxed">
            <summary>Used by some offices even though no user interface built yet.  SalesTaxPercentage has been added to the preference table to store the amount of sales tax to apply as an adjustment attached to a procedurelog entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.PaintType">
            <summary>Enum:ToothPaintingType </summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.GraphicColor">
            <summary>If set to anything but 0, then this will override the graphic color for all procedures of this code, regardless of the status.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.LaymanTerm">
            <summary>When creating treatment plans, this description will be used instead of the technical description.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.IsCanadianLab">
            <summary>Only used in Canada.  Set to true if this procedure code is only used as an adjunct to track the lab fee.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.PreExisting">
            <summary>This is true if this procedure code existed before ADA code distribution changed at version 4.8, false otherwise.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.BaseUnits">
            <summary>Support for Base Units for a Code (like anesthesia).  Should normally be zero.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.SubstitutionCode">
            <summary>FK to procedurecode.ProcCode.  Used for posterior composites because insurance substitutes the amalgam code when figuring the coverage.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.SubstOnlyIf">
            <summary>Enum:SubstitutionCondition Used so that posterior composites only substitute if tooth is molar.  Ins usually pays for premolar composites.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.DateTStamp">
            <summary>Last datetime that this row was inserted or updated.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.IsMultiVisit">
            <summary>Set to true if the procedure takes more than one appointment to complete.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.DrugNDC">
            <summary>11 digits or blank, enforced.  For 837I</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.RevenueCodeDefault">
            <summary>Gets copied to procedure.RevCode.  For 837I</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.ProvNumDefault">
            <summary>FK to provider.ProvNum.  0 for none. Otherwise, this provider will be used for this code instead of the normal provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.CanadaTimeUnits">
            <summary>For Canadian customers, tracks scaling insurance and periodontal scaling units for patients depending on coverage.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.procCatDescript">
            <summary>Not a database column.  Only used for xml import function.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.IsRadiology">
            <summary>Set to true for radiology procedures.  An EHR core measure uses this flag to help determine the denominator for rad orders.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcedureCode.DefaultClaimNote">
            <summary>Default note inserted to claim note when claim is created.</summary>
        </member>
        <member name="P:OpenDentBusiness.ProcedureCode.GraphicColorXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcedureCode.Copy">
            <summary>Returns a copy of this Procedurecode.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcNote">
            <summary>A procedure note for one procedure.  User does not have any direct control over this table at all.  It's handled automatically.  When user "edits" a procedure note, the program actually just adds another note.  No note can EVER be edited or deleted.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcNote.ProcNoteNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcNote.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcNote.ProcNum">
            <summary>FK to procedurelog.ProcNum</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcNote.EntryDateTime">
            <summary>The server time that this note was entered. Essentially a timestamp.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcNote.UserNum">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcNote.Note">
            <summary>The actual note.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcNote.SigIsTopaz">
            <summary>There are two kinds of signatures.  Topaz signatures use hardware manufactured by that company, and the signature is created by their library.  OD signatures work exactly the same way, but are only for on-screen signing.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcNote.Signature">
            <summary>The encrypted signature.  A signature starts as a collection of vectors.  The Topaz .sig file format is proprietary.  The OD signature format looks like this: 45,68;48,70;49,72;0,0;55,88;etc.  It's simply a sequence of points, separated by semicolons.  0,0 represents pen up.  Then, a hash is created from the Note, concatenated directly with the userNum.  For example, "This is a note3" gets turned into a hash of 2849283940385391 (16 bytes).  The hash is used to encrypt the signature data string using symmetric encryption.  Therefore, the actual signature cannot be retrieved from the database by ordinary means.  Also, the signature info cannot even be retrieved by Open Dental at all unless it supplies the same hash as before, proving that the data has not changed since signed.  If OD supplies the correct hash, then it will be able to extract the sequence of vectors which it will then use to display the signature.  The OD sigs are not compressed, and the Topaz sigs are.  But there is very little difference in their sizes.  It would be very rare for a signature to be larger than 1000 bytes.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProcTP">
            <summary>These are copies of procedures that are attached to saved treatment plans.  The ProcNumOrig points to the actual procedurelog row.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.ProcTPNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.TreatPlanNum">
            <summary>FK to treatplan.TreatPlanNum.  The treatment plan to which this proc is attached.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.ProcNumOrig">
            <summary>FK to procedurelog.ProcNum.  It is very common for the referenced procedure to be missing.  This procNum is only here to compare and test the existence of the referenced procedure.  If present, it will check to see whether the procedure is still status TP.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.ItemOrder">
            <summary>The order of this proc within its tp.  This is set when the tp is first created and can't be changed.  Drastically simplifies loading the tp.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.Priority">
            <summary>FK to definition.DefNum which contains the text of the priority.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.ToothNumTP">
            <summary>A simple string displaying the tooth number.  If international tooth numbers are used, then this will be in international format already.  For Canadian users, using FDI nomenclature, we use 51 as a placeholder for supernumerary teeth, which is tooth number 99 according to CDHA standards (2/17/2014).  Logic for this is handled in the tooth logic class.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.Surf">
            <summary>Tooth surfaces or area.  This is already converted for international use.  If arch or quad, then it will have U,LR, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.ProcCode">
            <summary>Not a foreign key.  Simply display text.  Can be changed by user at any time.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.Descript">
            <summary>Description is originally copied from procedurecode.Descript, but user can change it.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.FeeAmt">
            <summary>The fee charged to the patient. Never gets automatically updated.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.PriInsAmt">
            <summary>The amount primary insurance is expected to pay. Never gets automatically updated.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.SecInsAmt">
            <summary>The amount secondary insurance is expected to pay. Never gets automatically updated.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.PatAmt">
            <summary>The amount the patient is expected to pay. Never gets automatically updated.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.Discount">
            <summary>The amount of discount.  Used for PPOs and procedure level discounts.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.Prognosis">
            <summary>Text from prognosis definition.  Can be changed by user at any time.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.Dx">
            <summary>Text from diagnosis definition.  Can be changed by user at any time.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.ProcAbbr">
            <summary>The ProcedureCode abbreviation.  Can be changed by user at any time.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.SecDateEntry">
            <summary>Timestamp automatically generated and user not allowed to change.  The actual date of entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProcTP.SecDateTEdit">
            <summary>Automatically updated by MySQL every time a row is added or changed. Could be changed due to user editing, custom queries or program
            updates.  Not user editable with the UI.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProcTP.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Program">
            <summary>Each row is a bridge to an outside program, frequently an imaging program.  Most of the bridges are hard coded, and simply need to be enabled.  But user can also add their own custom bridge.</summary>
        </member>
        <member name="F:OpenDentBusiness.Program.ProgramNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Program.ProgName">
            <summary>Unique name for built-in program bridges. Not user-editable. enum ProgramName</summary>
        </member>
        <member name="F:OpenDentBusiness.Program.ProgDesc">
            <summary>Description that shows.</summary>
        </member>
        <member name="F:OpenDentBusiness.Program.Enabled">
            <summary>True if enabled.</summary>
        </member>
        <member name="F:OpenDentBusiness.Program.Path">
            <summary>The path of the executable to run or file to open.</summary>
        </member>
        <member name="F:OpenDentBusiness.Program.CommandLine">
            <summary>Some programs will accept command line arguments.</summary>
        </member>
        <member name="F:OpenDentBusiness.Program.Note">
            <summary>Notes about this program link. Peculiarities, etc.</summary>
        </member>
        <member name="F:OpenDentBusiness.Program.PluginDllName">
            <summary>If this is a Plugin, then this is the filename of the dll.  The dll must be located in the application directory.</summary>
        </member>
        <member name="F:OpenDentBusiness.Program.ButtonImage">
            <summary>If no image, then will be an empty string.  In this case, the bitmap will be null when loaded from the database.
            Must be a 22 x 22 image, and thus needs (width) x (height) x (depth) = 22 x 22 x 4 = 1936 bytes.</summary>
        </member>
        <member name="F:OpenDentBusiness.Program.FileTemplate">
            <summary>For custom program links only.  Stores the template of a file to be generated when launching the program link.</summary>
        </member>
        <member name="F:OpenDentBusiness.Program.FilePath">
            <summary>For custom program links only.  Stores the path of a file to be generated when launching the program link.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProgramName">
            <summary>This enum is stored in the database as strings rather than as numbers, so we can do the order alphabetically and we can change it whenever we want.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProgramName.eRx">
            <summary>electronic Rx.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProgramName.Orion">
            <summary>Please use Programs.UsingOrion where possible.</summary>
        </member>
        <member name="T:OpenDentBusiness.ProgramProperty">
            <summary>Some program links (bridges), have properties that need to be set.  The property names are always hard coded.  User can change the value.  The property is usually retrieved based on its name.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProgramProperty.ProgramPropertyNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProgramProperty.ProgramNum">
            <summary>FK to program.ProgramNum</summary>
        </member>
        <member name="F:OpenDentBusiness.ProgramProperty.PropertyDesc">
            <summary>The description or prompt for this property.  Blank for workstation overrides of program path.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProgramProperty.PropertyValue">
            <summary>The value.  </summary>
        </member>
        <member name="F:OpenDentBusiness.ProgramProperty.ComputerName">
            <summary>The human-readable name of the computer on the network (not the IP address).  Only used when overriding program path.  Blank for typical Program Properties.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProgramProperty.ClinicNum">
            <summary>FK to clinic.ClinicNum.  This is only used by a few bridges.  Set to 0 for most bridges.</summary>
        </member>
        <member name="M:OpenDentBusiness.ProgramProperty.Copy">
            <summary>Returns a copy of this program property.</summary>
        </member>
        <member name="T:OpenDentBusiness.Provider">
            <summary>A provider is usually a dentist or a hygienist.  But a provider might also be a denturist, a dental student, or a dental hygiene student.  A provider might also be a 'dummy', used only for billing purposes or for notes in the Appointments module.  There is no limit to the number of providers that can be added.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.ProvNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.Abbr">
            <summary>Abbreviation.  There was a limit of 5 char before version 5.4.  The new limit is 255 char.  This will allow more elegant solutions to various problems.  Providers will no longer be referred to by FName and LName.  Abbr is used as a human readable primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.ItemOrder">
            <summary>Order that provider will show in lists. Was 1-based, now 0-based.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.LName">
            <summary>Last name.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.FName">
            <summary>First name.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.MI">
            <summary>Middle inital or name.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.Suffix">
            <summary>eg. DMD or DDS. Was 'title' in previous versions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.FeeSched">
            <summary>FK to feesched.FeeSchedNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.Specialty">
            <summary>FK to definition.DefNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.SSN">
            <summary>or TIN.  No punctuation</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.StateLicense">
            <summary>can include punctuation</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.DEANum">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.IsSecondary">
            <summary>True if hygienist.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.ProvColor">
            <summary>Color that shows in appointments</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.IsHidden">
            <summary>If true, provider will not show on any lists</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.UsingTIN">
            <summary>True if the SSN field is actually a Tax ID Num</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.BlueCrossID">
            <summary>No longer used since each state assigns a different ID.  Use the providerident instead which allows you to assign a different BCBS ID for each Payor ID.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.SigOnFile">
            <summary>Signature on file.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.MedicaidID">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.OutlineColor">
            <summary>Color that shows in appointments as outline when highlighted.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.SchoolClassNum">
            <summary>FK to schoolclass.SchoolClassNum Used in dental schools.  Each student is a provider.  This keeps track of which class they are in.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.NationalProvID">
            <summary>US NPI, and Canadian CDA provider number.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.CanadianOfficeNum">
            <summary>Canadian field required for e-claims.  Assigned by CDA.  It's OK to have multiple providers with the same OfficeNum.  Max length should be 4.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.DateTStamp">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.AnesthProvType">
            <summary> FK to ??. Field used to set the Anesthesia Provider type. Used to filter the provider dropdowns on FormAnestheticRecord</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.TaxonomyCodeOverride">
            <summary>If none of the supplied taxonomies works.  This will show on claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.IsCDAnet">
            <summary>For Canada. Set to true if CDA Net provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.EcwID">
            <summary>The name of this field is bad and will soon be changed to MedicalSoftID.  This allows an ID field that can be used for HL7 synch with other software.  Before this field was added, we were using prov abbreviation, which did not work well.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.StateRxID">
            <summary>Provider medical State ID.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.IsNotPerson">
            <summary>Default is false because most providers are persons.  But some dummy providers used for practices or billing entities are not persons.  This is needed on 837s.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.StateWhereLicensed">
            <summary>The state abbreviation where the state license number in the StateLicense field is legally registered.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.EmailAddressNum">
            <summary>FK to EmailAddress.EmailAddressNum.  Optional, can be 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.IsInstructor">
            <summary>Default is false because most providers will not be instructors.  Used in Dental Schools</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.EhrMuStage">
            <summary>Used to determine which stage of MU the provider is shown. 0=Global preference(Default), 1=Stage 1, 2=Stage 2.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.ProvNumBillingOverride">
            <summary>FK to provider.ProvNum</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.CustomID">
            <summary>Custom ID used for reports or bridges only.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.ProvStatus">
            <summary>Enum:ProviderStatus </summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.IsHiddenReport">
            <summary>Determines whether the provider will show on standard reports.</summary>
        </member>
        <member name="F:OpenDentBusiness.Provider.IsErxEnabled">
            <summary>Indicates whether or not the provider has individually agreed to accept eRx charges.  Defaults to false for new providers.</summary>
        </member>
        <member name="P:OpenDentBusiness.Provider.ProvColorXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="P:OpenDentBusiness.Provider.OutlineColorXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="M:OpenDentBusiness.Provider.Copy">
            <summary>Returns a copy of this Provider.</summary>
        </member>
        <member name="M:OpenDentBusiness.Provider.GetLongDesc">
            <Summary>For use in areas of the program where we have more room than just simple abbr.  Such as pick boxes in reports.  This will give Abbr - LName, FName (hidden).  If dental schools is turned on then the Abbr will be replaced with the ProvNum.</Summary>
        </member>
        <member name="M:OpenDentBusiness.Provider.GetAbbr">
            <Summary>For use in areas of the program where we have only have room for the simple abbr.  Such as pick boxes in the claim edit window.  This will give Abbr (hidden).</Summary>
        </member>
        <member name="M:OpenDentBusiness.Provider.GetFormalName">
            <summary>FName MI. LName, Suffix</summary>
        </member>
        <member name="T:OpenDentBusiness.ProviderStatus">
            <summary>Status of the provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderStatus.Active">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderStatus.Deleted">
            <summary>1</summary>
        </member>
        <member name="T:OpenDentBusiness.ProviderIdent">
            <summary>Some insurance companies require special provider ID #s, and this table holds them.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderIdent.ProviderIdentNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderIdent.ProvNum">
            <summary>FK to provider.ProvNum.  An ID only applies to one provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderIdent.PayorID">
            <summary>FK to carrier.ElectID  aka Electronic ID. An ID only applies to one insurance carrier.</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderIdent.SuppIDType">
            <summary>Enum:ProviderSupplementalID</summary>
        </member>
        <member name="F:OpenDentBusiness.ProviderIdent.IDNumber">
            <summary>The number assigned by the ins carrier.</summary>
        </member>
        <member name="T:OpenDentBusiness.Question">
            <summary>Each row is one Question for one patient.  If a patient has never filled out a questionnaire, then they will have no rows in this table.</summary>
        </member>
        <member name="F:OpenDentBusiness.Question.QuestionNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Question.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.Question.ItemOrder">
            <summary>The order that this question shows in the list.</summary>
        </member>
        <member name="F:OpenDentBusiness.Question.Description">
            <summary>The original question.</summary>
        </member>
        <member name="F:OpenDentBusiness.Question.Answer">
            <summary>The answer to the question in text form.</summary>
        </member>
        <member name="F:OpenDentBusiness.Question.FormPatNum">
            <summary>FK to formpat.FormPatNum</summary>
        </member>
        <member name="M:OpenDentBusiness.Question.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.QuestionDef">
            <summary>Each row represents one question on the medical history questionnaire.  Later, other questionnaires will be allowed, but for now, all questions are on one questionnaire for the patient.  This table has no dependencies, since the question is copied when added to a patient record.  Any row can be freely deleted or altered without any problems.</summary>
        </member>
        <member name="F:OpenDentBusiness.QuestionDef.QuestionDefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.QuestionDef.Description">
            <summary>The question as presented to the patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.QuestionDef.ItemOrder">
            <summary>The order that the Questions will show.</summary>
        </member>
        <member name="F:OpenDentBusiness.QuestionDef.QuestType">
            <summary>Enum:QuestionType</summary>
        </member>
        <member name="M:OpenDentBusiness.QuestionDef.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.QuickPasteCat">
            <summary>Quick paste categories are used by the quick paste notes feature.</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteCat.QuickPasteCatNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteCat.Description">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteCat.ItemOrder">
            <summary>The order of this category within the list. 0-based.</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteCat.DefaultForTypes">
            <summary>Enum:QuickPasteType  Each Category can be set to be the default category for multiple types of notes. Stored as integers separated by commas.</summary>
        </member>
        <member name="T:OpenDentBusiness.QuickPasteNote">
            <summary>Template for quick pasted note feature.</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteNote.QuickPasteNoteNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteNote.QuickPasteCatNum">
            <summary>FK to quickpastecat.QuickPasteCatNum.  Keeps track of which category this note is in.</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteNote.ItemOrder">
            <summary>The order of this note within it's category. 0-based.</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteNote.Note">
            <summary>The actual note. Can be multiple lines and possibly very long.</summary>
        </member>
        <member name="F:OpenDentBusiness.QuickPasteNote.Abbreviation">
            <summary>The abbreviation which will automatically substitute when preceded by a ?.</summary>
        </member>
        <member name="T:OpenDentBusiness.Recall">
            <summary>A patient can only have one recall object per type.  The recall table stores a few dates that must be kept synchronized with other information in the database.  This is difficult.  Anytime one of the following items changes, things need to be synchronized: procedurecode.SetRecall, any procedurelog change for a patient (procs added, deleted, completed, status changed, date changed, etc), patient status changed.  There are expected to be a few bugs in the synchronization logic, so anytime a patient's recall is opened, it will also update.
            
            During synchronization, the program will frequently alter DateDueCalc, DateDue, and DatePrevious based on trigger procs.  The system will also add and delete recalls as necessary. But it will not delete a recall unless all values are default and there is no useful information.  When a user tries to delete a recall, they will only be successful if the trigger conditions do not apply.  Otherwise, they will have to disable the recall instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.Recall.RecallNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Recall.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Recall.DateDueCalc">
            <summary>Not editable.  The calculated date due. Generated by the program and subject to change anytime the conditions change. It can be blank (0001-01-01) if no appropriate triggers. </summary>
        </member>
        <member name="F:OpenDentBusiness.Recall.DateDue">
            <summary>This is the date that is actually used when doing reports for recall. It will usually be the same as DateDueCalc unless user has changed it. System will only update this field if it is the same as DateDueCalc.  Otherwise, it will be left alone.  Gets cleared along with DateDueCalc when resetting recall.  When setting disabled, this field will also be cleared.  This is the field to use if converting from another software.</summary>
        </member>
        <member name="F:OpenDentBusiness.Recall.DatePrevious">
            <summary>Not editable. Previous date that procedures were done to trigger this recall. It is calculated and enforced automatically.  If you want to affect this date, add a procedure to the chart with a status of C, EC, or EO.</summary>
        </member>
        <member name="F:OpenDentBusiness.Recall.RecallInterval">
            <summary>The interval between recalls.  The Interval struct combines years, months, weeks, and days into a single integer value.</summary>
        </member>
        <member name="F:OpenDentBusiness.Recall.RecallStatus">
            <summary>FK to definition.DefNum, or 0 for none.</summary>
        </member>
        <member name="F:OpenDentBusiness.Recall.Note">
            <summary>An administrative note for staff use.</summary>
        </member>
        <member name="F:OpenDentBusiness.Recall.IsDisabled">
            <summary>If true, this recall type will be disabled (there's only one type right now). This is usually used rather than deleting the recall type from the patient because the program must enforce the trigger conditions for all patients.</summary>
        </member>
        <member name="F:OpenDentBusiness.Recall.DateTStamp">
            <summary>Last datetime that this row was inserted or updated.</summary>
        </member>
        <member name="F:OpenDentBusiness.Recall.RecallTypeNum">
            <summary>FK to recalltype.RecallTypeNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Recall.DisableUntilBalance">
            <summary>Default is 0.  If a positive number is entered, then the family balance must be less in order for this recall to show in the recall list.</summary>
        </member>
        <member name="F:OpenDentBusiness.Recall.DisableUntilDate">
            <summary>If a date is entered, then this recall will be disabled until that date.</summary>
        </member>
        <member name="F:OpenDentBusiness.Recall.DateScheduled">
            <summary>This will only have a value if a recall is scheduled.</summary>
        </member>
        <member name="M:OpenDentBusiness.Recall.Copy">
            <summary>Returns a copy of this Recall.</summary>
        </member>
        <member name="T:OpenDentBusiness.WebSchedAutomaticSend">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.WebSchedAutomaticSend.DoNotSend">
            <summary>0 - Do not send Web Sched notifications automatically.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebSchedAutomaticSend.SendToEmail">
            <summary>1 - Send to all patients with email address</summary>
        </member>
        <member name="F:OpenDentBusiness.WebSchedAutomaticSend.SendToEmailNoPreferred">
            <summary>2 - Send to patients with email address and no other preferred recall method is selected.</summary>
        </member>
        <member name="F:OpenDentBusiness.WebSchedAutomaticSend.SendToEmailOnlyPreferred">
            <summary>3 - Send to patients with email address and email is selected as their preferred recall method.</summary>
        </member>
        <member name="T:OpenDentBusiness.Reconcile">
            <summary>Used in the Accounting section.  Each row represents one reconcile.  Transactions will be attached to it.</summary>
        </member>
        <member name="F:OpenDentBusiness.Reconcile.ReconcileNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Reconcile.AccountNum">
            <summary>FK to account.AccountNum</summary>
        </member>
        <member name="F:OpenDentBusiness.Reconcile.StartingBal">
            <summary>User enters starting balance here.</summary>
        </member>
        <member name="F:OpenDentBusiness.Reconcile.EndingBal">
            <summary>User enters ending balance here.</summary>
        </member>
        <member name="F:OpenDentBusiness.Reconcile.DateReconcile">
            <summary>The date that the reconcile was performed.</summary>
        </member>
        <member name="F:OpenDentBusiness.Reconcile.IsLocked">
            <summary>If StartingBal + sum of entries selected = EndingBal, then user can lock.  Unlock requires special permission, which nobody will have by default.</summary>
        </member>
        <member name="M:OpenDentBusiness.Reconcile.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.RefAttach">
            <summary>Attaches a referral to a patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.RefAttach.RefAttachNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.RefAttach.ReferralNum">
            <summary>FK to referral.ReferralNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.RefAttach.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.RefAttach.ItemOrder">
            <summary>Order to display in patient info. One-based.  Will be automated more in future.</summary>
        </member>
        <member name="F:OpenDentBusiness.RefAttach.RefDate">
            <summary>Date of referral.</summary>
        </member>
        <member name="F:OpenDentBusiness.RefAttach.IsFrom">
            <summary>true=from, false=to</summary>
        </member>
        <member name="F:OpenDentBusiness.RefAttach.RefToStatus">
            <summary>Enum:ReferralToStatus 0=None,1=Declined,2=Scheduled,3=Consulted,4=InTreatment,5=Complete.</summary>
        </member>
        <member name="F:OpenDentBusiness.RefAttach.Note">
            <summary>Why the patient was referred out, or less commonly, the circumstances of the referral source.</summary>
        </member>
        <member name="F:OpenDentBusiness.RefAttach.IsTransitionOfCare">
            <summary>Used to track ehr events.  All outgoing referrals default to true.  The incoming ones get a popup asking if it's a transition of care.</summary>
        </member>
        <member name="F:OpenDentBusiness.RefAttach.ProcNum">
            <summary>FK to procedurelog.ProcNum</summary>
        </member>
        <member name="F:OpenDentBusiness.RefAttach.DateProcComplete">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.RefAttach.ProvNum">
            <summary>FK to provider.ProvNum.  Used when refering out a patient to track the reffering provider for EHR meaningfull use.</summary>
        </member>
        <member name="M:OpenDentBusiness.RefAttach.Copy">
            <summary>Returns a copy of this RefAttach.</summary>
        </member>
        <member name="T:OpenDentBusiness.Referral">
            <summary>All info about a referral is stored with that referral even if a patient.  That way, it's available for easy queries.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.ReferralNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.LName">
            <summary>Last name.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.FName">
            <summary>First name.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.MName">
            <summary>Middle name or initial.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.SSN">
            <summary>SSN or TIN, no punctuation.  For Canada, this holds the referring provider CDA num for claims.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.UsingTIN">
            <summary>Specificies if SSN is real SSN.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.Specialty">
            <summary>FK to definition.DefNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.ST">
            <summary>State</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.Telephone">
            <summary>Primary phone, restrictive, must only be 10 digits and only numbers.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.Address">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.Address2">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.City">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.Zip">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.Note">
            <summary>Holds important info about the referral.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.Phone2">
            <summary>Additional phone no restrictions</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.IsHidden">
            <summary>Can't delete a referral, but can hide if not needed any more.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.NotPerson">
            <summary>Set to true for referralls such as Yellow Pages.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.Title">
            <summary>i.e. DMD or DDS</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.EMail">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.PatNum">
            <summary>FK to patient.PatNum for referrals that are patients.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.NationalProvID">
            <summary>NPI for the referral</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.Slip">
            <summary>FK to sheetdef.SheetDefNum.  Referral slips can be set for individual referral sources.  If zero, then the default internal referral slip will be used instead of a custom referral slip.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.IsDoctor">
            <summary>True if another dentist or physician.  Cannot be a patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.Referral.IsTrustedDirect">
            <summary>True if checkbox E-mail Trust for Direct is checked.</summary>
        </member>
        <member name="M:OpenDentBusiness.Referral.Copy">
            <summary>Returns a copy of this Referral.</summary>
        </member>
        <member name="M:OpenDentBusiness.Referral.GetNameFL">
            <summary>Includes title, such as DMD.</summary>
        </member>
        <member name="T:OpenDentBusiness.RegistrationKey">
            <summary>Keeps track of which product keys have been assigned to which customers. This datatype is only used if the program is being run from a distributor installation. A single customer is allowed to have more than one key, to accommodate for various circumstances, including having multiple physical business locations.</summary>
        </member>
        <member name="F:OpenDentBusiness.RegistrationKey.RegistrationKeyNum">
            <summary>Primary Key.</summary>
        </member>
        <member name="F:OpenDentBusiness.RegistrationKey.PatNum">
            <summary>FK to patient.PatNum. The customer to which this registration key applies.</summary>
        </member>
        <member name="F:OpenDentBusiness.RegistrationKey.RegKey">
            <summary>The registration key as stored in the customer database.</summary>
        </member>
        <member name="F:OpenDentBusiness.RegistrationKey.Note">
            <summary>Db note about the registration key. Specifically, the note must include information about the location to which this key pertains, since once at least one key must be assigned to each location to be legal.</summary>
        </member>
        <member name="F:OpenDentBusiness.RegistrationKey.DateStarted">
            <summary>This will help later with tracking for licensing.</summary>
        </member>
        <member name="F:OpenDentBusiness.RegistrationKey.DateDisabled">
            <summary>This is used to completely disable a key.  Might possibly even cripple the user's program.  Usually only used if reassigning another key due to abuse or error.  If no date specified, then this key is still valid.</summary>
        </member>
        <member name="F:OpenDentBusiness.RegistrationKey.DateEnded">
            <summary>This is used when the customer cancels monthly support.  This still allows the customer to get downloads for bug fixes, but only up through a certain version.  Our web server program will use this date to deduce which version they are allowed to have.  Any version that was released as a beta before this date is allowed to be downloaded.</summary>
        </member>
        <member name="F:OpenDentBusiness.RegistrationKey.IsForeign">
            <summary>This is assigned automatically based on whether the registration key is a US version vs. a foreign version.  The foreign version is not able to unlock the procedure codes.  There are muliple layers of safeguards in place.</summary>
        </member>
        <member name="F:OpenDentBusiness.RegistrationKey.UsesServerVersion">
            <summary>Deprecated.</summary>
        </member>
        <member name="F:OpenDentBusiness.RegistrationKey.IsFreeVersion">
            <summary>We have given this customer a free version.  Typically in India.</summary>
        </member>
        <member name="F:OpenDentBusiness.RegistrationKey.IsOnlyForTesting">
            <summary>This customer is not using the software with live patient data, but only for testing and development purposes.</summary>
        </member>
        <member name="F:OpenDentBusiness.RegistrationKey.VotesAllotted">
            <summary>Typically 100, although it can be more for multilocation offices.</summary>
        </member>
        <member name="F:OpenDentBusiness.RegistrationKey.IsResellerCustomer">
            <summary>This is a customer of a reseller, so this customer will not have full access to all our services.</summary>
        </member>
        <member name="T:OpenDentBusiness.RepeatCharge">
            <summary>Each row represents one charge that will be added monthly.</summary>
        </member>
        <member name="F:OpenDentBusiness.RepeatCharge.RepeatChargeNum">
            <summary>Primary key</summary>
        </member>
        <member name="F:OpenDentBusiness.RepeatCharge.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.RepeatCharge.ProcCode">
            <summary>FK to procedurecode.ProcCode.  The code that will be added to the account as a completed procedure.</summary>
        </member>
        <member name="F:OpenDentBusiness.RepeatCharge.ChargeAmt">
            <summary>The amount that will be charged.  The amount from the procedurecode will not be used.  This way, a repeating charge cannot be accidentally altered.</summary>
        </member>
        <member name="F:OpenDentBusiness.RepeatCharge.DateStart">
            <summary>The date of the first charge if UseBillingCycleDays is not enabled.  Charges will always be added on the same day of the month as the start date. 
             If UseBillingCycleDays is enabled, repeat charges will be applied on billing cycle day instead. 
             If more than one month goes by without applying repeating charges, then multiple procedures will be added.</summary>
        </member>
        <member name="F:OpenDentBusiness.RepeatCharge.DateStop">
            <summary>The last date on which a charge is allowed.  So if you want 12 charges, and the start date is 8/1/05, then the stop date should be 7/1/05, not 8/1/05.  Can be blank (0001-01-01) to represent a perpetual repeating charge.</summary>
        </member>
        <member name="F:OpenDentBusiness.RepeatCharge.Note">
            <summary>Any note for internal use.</summary>
        </member>
        <member name="F:OpenDentBusiness.RepeatCharge.CopyNoteToProc">
            <summary>Indicates that the note should be copied to the corresponding procedure billing note.</summary>
        </member>
        <member name="F:OpenDentBusiness.RepeatCharge.CreatesClaim">
            <summary>Set to true to have a claim automatically created for the patient with the procedure that is attached to this repeating charge.</summary>
        </member>
        <member name="F:OpenDentBusiness.RepeatCharge.IsEnabled">
            <summary>Set to false to disable the repeating charge.  This allows patients to have repeating charges in their history that are not active.  Used mainly for repeating charges with notes that should not be deleted.</summary>
        </member>
        <member name="F:OpenDentBusiness.RepeatCharge.UsePrepay">
            <summary>Set to true to use prepayments for repeating charges.</summary>
        </member>
        <member name="M:OpenDentBusiness.RepeatCharge.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.RxAlert">
            <summary>Many-to-many relationship connecting Rx with DiseaseDef, AllergyDef, or Medication.  Only one of those links may be specified in a single row; the other two will be 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxAlert.RxAlertNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxAlert.RxDefNum">
            <summary>FK to rxdef.RxDefNum.  This alert is to be shown when user attempts to write an Rx for this RxDef.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxAlert.DiseaseDefNum">
            <summary>FK to diseasedef.DiseaseDefNum.  Only if DrugProblem interaction.  This is compared against disease.DiseaseDefNum using PatNum.  Drug-Problem (they call it Drug-Diagnosis) checking is also performed in NewCrop.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxAlert.AllergyDefNum">
            <summary>FK to allergydef.AllergyDefNum.  Only if DrugAllergy interaction.  Compared against allergy.AllergyDefNum using PatNum.  Drug-Allergy checking is also perfomed in NewCrop.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxAlert.MedicationNum">
            <summary>FK to medication.MedicationNum.  Only if DrugDrug interaction.  This will be compared against medicationpat.MedicationNum using PatNum.  Drug-Drug checking is also performed in NewCrop.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxAlert.NotificationMsg">
            <summary>This is typically blank, so a default message will be displayed by OD.  But if this contains a message, then this message will be used instead.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxAlert.IsHighSignificance">
            <summary>False by default.  Set to true to flag the drug-drug or drug-allergy intervention as high significance.</summary>
        </member>
        <member name="M:OpenDentBusiness.RxAlert.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.RxDef">
            <summary>Rx definitions.  Can safely delete or alter, because they get copied to the rxPat table, not referenced.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxDef.RxDefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxDef.Drug">
            <summary>The name of the drug.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxDef.Sig">
            <summary>Directions.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxDef.Disp">
            <summary>Amount to dispense.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxDef.Refills">
            <summary>Number of refills.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxDef.Notes">
            <summary>Notes about this drug. Will not be copied to the rxpat.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxDef.IsControlled">
            <summary>Is a controlled substance.  This will affect the way it prints.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxDef.RxCui">
            <summary>RxNorm Code identifier.  Copied down into medicationpat.RxCui (medical order) when a prescription is written.</summary>
        </member>
        <member name="M:OpenDentBusiness.RxDef.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.RxPat">
            <summary>One Rx for one patient. Copied from rxdef rather than linked to it.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.RxNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.RxDate">
            <summary>Date of Rx.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.Drug">
            <summary>Drug name. Example: PenVK 500 mg capsules. Example: Percocet 5/500 tablets.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.Sig">
            <summary>Directions. Example: Take 2 tablets qid. (qid means 4 times a day)</summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.Disp">
            <summary>Amount to dispense. Example: 12 (twelve)</summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.Refills">
            <summary>Number of refills. Example: 3.  Example: 1 per month.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.ProvNum">
            <summary>FK to provider.ProvNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.Notes">
            <summary>Notes specific to this Rx.  Will not show on the printout.  For staff use only.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.PharmacyNum">
            <summary>FK to pharmacy.PharmacyNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.IsControlled">
            <summary>Is a controlled substance.  This will affect the way it prints.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.DateTStamp">
            <summary>The last date and time this row was altered.  Not user editable.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.SendStatus">
            <summary>Enum:RxSendStatus </summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.RxCui">
            <summary>Deprecated.  RxNorm Code identifier.  Was used in FormRxSend for EHR 2011, but FormRxSend has been deleted.  No longer in use anywhere.  Still exists in db for now.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.DosageCode">
            <summary>NCI Pharmaceutical Dosage Form code.  Only used with ehr.  For example, C48542 is the code for “Tablet dosing unit”.  User enters code manually, and it's only used for Rx Send, which will be deprecated with 2014 cert.  Guaranteed that nobody actually uses or cares about this field.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.NewCropGuid">
            <summary>NewCrop returns this unique identifier to use for electronic Rx.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxPat.IsErxOld">
            <summary>True for historic prescriptions which existed prior to version 15.4.  The purpose of this column is to keep historic reports accurate.</summary>
        </member>
        <member name="M:OpenDentBusiness.RxPat.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.RxSendStatus">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.RxSendStatus.Unsent">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.RxSendStatus.InElectQueue">
            <summary>1- This will never be used in production.  It was only used for proof of concept when building EHR.</summary>
        </member>
        <member name="F:OpenDentBusiness.RxSendStatus.SentElect">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.RxSendStatus.Printed">
            <summary>3</summary>
        </member>
        <member name="F:OpenDentBusiness.RxSendStatus.Faxed">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.RxSendStatus.CalledIn">
            <summary>5</summary>
        </member>
        <member name="F:OpenDentBusiness.RxSendStatus.GaveScript">
            <summary>6</summary>
        </member>
        <member name="F:OpenDentBusiness.RxSendStatus.Pending">
            <summary>7</summary>
        </member>
        <member name="T:OpenDentBusiness.Schedule">
            <summary>One block of time.  Either for practice, provider, employee, or blockout.</summary>
        </member>
        <member name="F:OpenDentBusiness.Schedule.ScheduleNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Schedule.SchedDate">
            <summary>Date for this timeblock.</summary>
        </member>
        <member name="F:OpenDentBusiness.Schedule.StartTime">
            <summary>Start time for this timeblock.</summary>
        </member>
        <member name="F:OpenDentBusiness.Schedule.StopTime">
            <summary>Stop time for this timeblock.</summary>
        </member>
        <member name="F:OpenDentBusiness.Schedule.SchedType">
            <summary>Enum:ScheduleType 0=Practice,1=Provider,2=Blockout,3=Employee.  Practice is used as a way to indicate holidays and as a way to put a
            note in for the entire practice for one day.  But whenever type is Practice, times will be ignored.</summary>
        </member>
        <member name="F:OpenDentBusiness.Schedule.ProvNum">
            <summary>FK to provider.ProvNum if a provider type.</summary>
        </member>
        <member name="F:OpenDentBusiness.Schedule.BlockoutType">
            <summary>FK to definition.DefNum if blockout.  eg. HighProduction, RCT Only, Emerg.</summary>
        </member>
        <member name="F:OpenDentBusiness.Schedule.Note">
            <summary>This contains various types of text entered by the user.</summary>
        </member>
        <member name="F:OpenDentBusiness.Schedule.Status">
            <summary>Enum:SchedStatus enumeration 0=Open,1=Closed,2=Holiday.  All blocks have a status of Open, but user doesn't see the status.
            The "closed" status was previously used to override the defaults when the last timeblock was deleted.  But it's nearly phased out now.
            Still used by blockouts.  Holidays are a special type of practice schedule item which do not have providers attached.
            Used to differentiate between Practice SchedType Holidays and Notes.</summary>
        </member>
        <member name="F:OpenDentBusiness.Schedule.EmployeeNum">
            <summary>FK to employee.EmployeeNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Schedule.DateTStamp">
            <summary>Last datetime that this row was inserted or updated.</summary>
        </member>
        <member name="F:OpenDentBusiness.Schedule.Ops">
            <summary>Not a db column.  Holds a list of ops that this schedule is assigned to.</summary>
        </member>
        <member name="F:OpenDentBusiness.Schedule.ClinicNum">
            <summary>FK to clinic.ClinicNum if SchedType.Practice (holidays and practice notes) and applies to one clinic (operatories for one clinic). If
            SchedType.Practice and this applies to all clinics, or if any other SchedType, ClinicNum will be 0.  There won't be any scheduleop rows linking
            this schedule to operatories when the type is SchedType.Practice.  Instead, the linkage is implied based on the operatory.ClinicNum and applies
            to all operatories for the clinic.</summary>
        </member>
        <member name="P:OpenDentBusiness.Schedule.StartTimeXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="P:OpenDentBusiness.Schedule.StopTimeXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="T:OpenDentBusiness.SchoolClass">
            <summary>Used in dental schools.  eg. Dental 2009 or Hygiene 2007.</summary>
        </member>
        <member name="F:OpenDentBusiness.SchoolClass.SchoolClassNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SchoolClass.GradYear">
            <summary>The year this class will graduate</summary>
        </member>
        <member name="F:OpenDentBusiness.SchoolClass.Descript">
            <summary>Description of this class. eg Dental or Hygiene</summary>
        </member>
        <member name="M:OpenDentBusiness.SchoolClass.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.SchoolCourse">
            <summary>Used in dental schools.  eg OP 732 Operative Dentistry Clinic II.</summary>
        </member>
        <member name="F:OpenDentBusiness.SchoolCourse.SchoolCourseNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SchoolCourse.CourseID">
            <summary>Alphanumeric.  eg PEDO 732.</summary>
        </member>
        <member name="F:OpenDentBusiness.SchoolCourse.Descript">
            <summary>eg: Pediatric Dentistry Clinic II</summary>
        </member>
        <member name="M:OpenDentBusiness.SchoolCourse.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ScreenGroup">
            <summary>Used in public health.  The database table only has 3 columns.  There are 5 additional columns in C# that are not in the databae.  These extra columns are used in the UI to organize input, and are transferred to the screen table as needed.</summary>
        </member>
        <member name="F:OpenDentBusiness.ScreenGroup.ScreenGroupNum">
            <summary>Primary key</summary>
        </member>
        <member name="F:OpenDentBusiness.ScreenGroup.Description">
            <summary>Up to the user.</summary>
        </member>
        <member name="F:OpenDentBusiness.ScreenGroup.SGDate">
            <summary>The date of the screening.</summary>
        </member>
        <member name="F:OpenDentBusiness.ScreenGroup.ProvName">
            <summary>Required.  Could be the name of the screener and not a provider necessarily.</summary>
        </member>
        <member name="F:OpenDentBusiness.ScreenGroup.ProvNum">
            <summary>FK to provider.ProvNum.  ProvNAME is always entered, but ProvNum supplements it by letting user select from list.
            When entering a provNum, the name will be filled in automatically.
            Can be 0 if the provider is not in the list, but provName is required.</summary>
        </member>
        <member name="F:OpenDentBusiness.ScreenGroup.PlaceService">
            <summary>Enum:PlaceOfService Describes where the screening will take place.</summary>
        </member>
        <member name="F:OpenDentBusiness.ScreenGroup.County">
            <summary>FK to county.CountyName, although it will not crash if key absent.</summary>
        </member>
        <member name="F:OpenDentBusiness.ScreenGroup.GradeSchool">
            <summary>FK to site.Description, although it will not crash if key absent.</summary>
        </member>
        <member name="F:OpenDentBusiness.ScreenGroup.SheetDefNum">
            <summary>FK to sheetdef.SheetDefNum</summary>
        </member>
        <member name="M:OpenDentBusiness.ScreenGroup.Copy">
            <summary>Returns a copy of this ScreenGroup.</summary>
        </member>
        <member name="T:OpenDentBusiness.Screen">
            <summary>Used in public health.  This screening table is meant to be general purpose.  It is compliant with the popular Basic Screening Survey.  It is also designed with minimal foreign keys and can be easily adapted to a tablet PC.  This table can be used with only the screengroup table, but is more efficient if provider, school, and county tables are also available.</summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.ScreenNum">
            <summary>Primary key</summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.Gender">
            <summary>Enum:PatientGender </summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.RaceOld">
            <summary>Enum:PatientRaceOld and ethnicity.</summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.GradeLevel">
            <summary>Enum:PatientGrade </summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.Age">
            <summary>Age of patient at the time the screening was done. Faster than recording birthdates.</summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.Urgency">
            <summary>Enum:TreatmentUrgency</summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.HasCaries">
            <summary>Enum:YN Set to true if patient has cavities.</summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.NeedsSealants">
            <summary>Enum:YN Set to true if patient needs sealants.</summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.CariesExperience">
            <summary>Enum:YN</summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.EarlyChildCaries">
            <summary>Enum:YN</summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.ExistingSealants">
            <summary>Enum:YN</summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.MissingAllTeeth">
            <summary>Enum:YN</summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.Birthdate">
            <summary>Optional</summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.ScreenGroupNum">
            <summary>FK to screengroup.ScreenGroupNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.ScreenGroupOrder">
            <summary>The order of this item within its group.</summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.Comments">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.ScreenPatNum">
            <summary>FK to screenpat.ScreenPatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Screen.SheetNum">
            <summary>FK to sheet.SheetNum</summary>
        </member>
        <member name="M:OpenDentBusiness.Screen.Copy">
            <summary>Returns a copy of this Screen.</summary>
        </member>
        <member name="T:OpenDentBusiness.ScreenChartType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ScreenChartType.TP">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.ScreenChartType.C">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.SecurityLog">
            <summary>Stores an ongoing record of database activity for security purposes.  User not allowed to edit.</summary>
        </member>
        <member name="F:OpenDentBusiness.SecurityLog.SecurityLogNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SecurityLog.PermType">
            <summary>Enum:Permissions</summary>
        </member>
        <member name="F:OpenDentBusiness.SecurityLog.UserNum">
            <summary>FK to userod.UserNum</summary>
        </member>
        <member name="F:OpenDentBusiness.SecurityLog.LogDateTime">
            <summary>The date and time of the entry.  It's value is set when inserting and can never change.  Even if a user changes the date on their ocmputer, this remains accurate because it uses server time.</summary>
        </member>
        <member name="F:OpenDentBusiness.SecurityLog.LogText">
            <summary>The description of exactly what was done. Varies by permission type.</summary>
        </member>
        <member name="F:OpenDentBusiness.SecurityLog.PatNum">
            <summary>FK to patient.PatNum.  Can be 0 if not applicable.</summary>
        </member>
        <member name="F:OpenDentBusiness.SecurityLog.CompName">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.SecurityLog.FKey">
            <summary>A foreign key to a table associated with the PermType.  0 indicates not in use.  
            This is typically used for objects that have specific audit trails so that users can see all audit entries related to a particular object.  
            Every permission using FKey should be included and implmented in the CrudAuditPerms enum so that securitylog FKeys are note orphaned.
            Additonaly, the tabletype will to have the [CrudTable(CrudAuditPerms=CrudAuditPerm._____] added with the new CrudAuditPerm you created.
            For the patient portal, it is used to indicate logs created on behalf of other patients.  
            It's uses include:  AptNum with PermType AppointmentCreate, AppointmentEdit, or AppointmentMove tracks all appointment logs for a particular 
            appointment.
            CodeNum with PermType ProcFeeEdit currently only tracks fee changes.  
            PatNum with PermType PatientPortal represents an entry that a patient made on behalf of another patient.
            	The PatNum column will represent the patient who is taking the action.  
            PlanNum with PermType InsPlanChangeCarrierName tracks carrier name changes.</summary>
        </member>
        <member name="F:OpenDentBusiness.SecurityLog.LogSource">
            <summary>Enum:LogSources None, WebSched, InsPlanImport834, FHIR, PatientPortal.</summary>
        </member>
        <member name="F:OpenDentBusiness.SecurityLog.PatientName">
            <summary>PatNum-NameLF</summary>
        </member>
        <member name="F:OpenDentBusiness.SecurityLog.LogHash">
            <summary>Existing LogHash from SecurityLogHash table</summary>
        </member>
        <member name="F:OpenDentBusiness.SecurityLog.DefNum">
            <summary>Used in Claims for custom history edits.</summary>
        </member>
        <member name="T:OpenDentBusiness.LogSources">
            <summary>Known entities that create security logs.</summary>
        </member>
        <member name="F:OpenDentBusiness.LogSources.None">
            <summary>0 - Open Dental and unknown entities.</summary>
        </member>
        <member name="F:OpenDentBusiness.LogSources.WebSched">
            <summary>1 - GWT Web Sched application Recall version.</summary>
        </member>
        <member name="F:OpenDentBusiness.LogSources.InsPlanImport834">
            <summary>2 - X12 834 Insurance Plan Import from the Manage Module.</summary>
        </member>
        <member name="F:OpenDentBusiness.LogSources.HL7">
            <summary>3 - HL7 is an automated process which the user may not be aware of.</summary>
        </member>
        <member name="F:OpenDentBusiness.LogSources.DBM">
            <summary>4 - Database maintenance.  This process creates patients which are known to be missing,
            but the user may not be aware that the fix involves patient recreation.</summary>
        </member>
        <member name="F:OpenDentBusiness.LogSources.FHIR">
            <summary>5 - FHIR is an automated process which the user may not be aware of.</summary>
        </member>
        <member name="F:OpenDentBusiness.LogSources.PatientPortal">
            <summary>6 - Patient Portal application.</summary>
        </member>
        <member name="F:OpenDentBusiness.LogSources.WebSchedNewPatAppt">
            <summary>7 - GWT Web Sched application New Patient Appointment version</summary>
        </member>
        <member name="F:OpenDentBusiness.LogSources.AutoConfirmations">
            <summary>8 - Automated eConfirmation and eReminders</summary>
        </member>
        <member name="F:OpenDentBusiness.LogSources.Diagnostic">
            <summary>9 - Open Dental messages created for debugging and diagnostic purposes. 
            For example, to diagnose an unhandled exception or unexpected behavior that is otherwise too hard to diagnose.</summary>
        </member>
        <member name="T:OpenDentBusiness.SigButDef">
            <summary>This defines the light buttons on the left of the main screen.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigButDef.SigButDefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigButDef.ButtonText">
            <summary>The text on the button</summary>
        </member>
        <member name="F:OpenDentBusiness.SigButDef.ButtonIndex">
            <summary>0-based index defines the order of the buttons.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigButDef.SynchIcon">
            <summary>0=none, or 1-9. The cell in the 3x3 tic-tac-toe main program icon that is to be synched with this button.  It will light up or clear whenever this button lights or clears.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigButDef.ComputerName">
            <summary>Blank for the default buttons.  Or contains the computer name for the buttons that override the defaults.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigButDef.SigElementDefNumUser">
            <summary>FK to sigelementdef.SigElementDefNum</summary>
        </member>
        <member name="F:OpenDentBusiness.SigButDef.SigElementDefNumExtra">
            <summary>FK to sigelementdef.SigElementDefNum</summary>
        </member>
        <member name="F:OpenDentBusiness.SigButDef.SigElementDefNumMsg">
            <summary>FK to sigelementdef.SigElementDefNum</summary>
        </member>
        <member name="M:OpenDentBusiness.SigButDef.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.SigElementDef">
            <summary>This defines the items that will be available for clicking when composing a manual message.
            Also, these are referred to in the button definitions as a sequence of elements.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigElementDef.SigElementDefNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigElementDef.LightRow">
            <summary>If this element should cause a button to light up, this would be the row.  0 means none.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigElementDef.LightColor">
            <summary>If a light row is set, this is the color it will turn when triggered.  Ack sets it back to white.
            Note that color and row can be in two separate elements of the same signal.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigElementDef.SigElementType">
            <summary>Enum:SignalElementType  0=User,1=Extra,2=Message.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigElementDef.SigText">
            <summary>The text that shows for the element, like the user name or the two word message.  No long text is stored here.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigElementDef.Sound">
            <summary>The sound to play for this element.  Wav file stored in the database in string format until "played".  If empty string, then no sound.</summary>
        </member>
        <member name="F:OpenDentBusiness.SigElementDef.ItemOrder">
            <summary>The order of this element within the list of the same type.</summary>
        </member>
        <member name="P:OpenDentBusiness.SigElementDef.LightColorXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="M:OpenDentBusiness.SigElementDef.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Task">
            <summary>A task is a single todo item.</summary>
        </member>
        <member name="F:OpenDentBusiness.Task.TaskNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Task.TaskListNum">
            <summary>FK to tasklist.TaskListNum.  If 0, then it will show in the trunk of a section.  </summary>
        </member>
        <member name="F:OpenDentBusiness.Task.DateTask">
            <summary>Only used if this task is assigned to a dated category.  Children are NOT dated.  Only dated if they should show in the trunk for a date category.  They can also have a parent if they are in the main list as well.</summary>
        </member>
        <member name="F:OpenDentBusiness.Task.KeyNum">
            <summary>FK to patient.PatNum or appointment.AptNum. Only used when ObjectType is not 0.</summary>
        </member>
        <member name="F:OpenDentBusiness.Task.Descript">
            <summary>The description of this task.  Might be very long.</summary>
        </member>
        <member name="F:OpenDentBusiness.Task.TaskStatus">
            <summary>Enum:TaskStatusEnum New,Viewed,Done.  We may want to put an index on this column someday.</summary>
        </member>
        <member name="F:OpenDentBusiness.Task.IsRepeating">
            <summary>True if it is to show in the repeating section.  There should be no date.  All children and parents should also be set to IsRepeating=true.</summary>
        </member>
        <member name="F:OpenDentBusiness.Task.DateType">
            <summary>Enum:TaskDateType  None, Day, Week, Month.  If IsRepeating, then setting to None effectively disables the repeating feature.</summary>
        </member>
        <member name="F:OpenDentBusiness.Task.FromNum">
            <summary>FK to task.TaskNum  If this is derived from a repeating task, then this will hold the TaskNum of that task.  It helps automate the adding and deleting of tasks.  It might be deleted automatically if not are marked complete.</summary>
        </member>
        <member name="F:OpenDentBusiness.Task.ObjectType">
            <summary>Enum:TaskObjectType  0=none,1=Patient,2=Appointment.  More will be added later. If a type is selected, then the KeyNum will contain the primary key of the corresponding Patient or Appointment.  Does not really have anything to do with the ObjectType of the parent tasklist, although they tend to match.</summary>
        </member>
        <member name="F:OpenDentBusiness.Task.DateTimeEntry">
            <summary>The date and time that this task was added.  Used to sort the list by the order entered.
            For reminder tasks, this field is used to indicate the date and time the reminder will take effect.</summary>
        </member>
        <member name="F:OpenDentBusiness.Task.UserNum">
            <summary>FK to userod.UserNum.  The person who created the task.</summary>
        </member>
        <member name="F:OpenDentBusiness.Task.DateTimeFinished">
            <summary>The date and time that this task was marked "done".</summary>
        </member>
        <member name="F:OpenDentBusiness.Task.IsUnread">
            <summary>Only used when tracking unread status by user instead of by task.  This gets set to true to indicate it has not yet been read.</summary>
        </member>
        <member name="F:OpenDentBusiness.Task.ParentDesc">
            <Summary>Not a database column.  A string description of the parent of this task.  It will only include the immediate parent.  Only useful in the New and OpenTicket tabs.</Summary>
        </member>
        <member name="F:OpenDentBusiness.Task.PatientName">
            <Summary>Not a database column.  Attached patient's name (NameLF) if there is an attached patient.</Summary>
        </member>
        <member name="F:OpenDentBusiness.Task.PriorityDefNum">
            <summary>FK to definition.DefNum.  The priority for this task which is used when filling task lists.  The placement of the task in the list is dependent on the item order of the definitions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Task.ReminderGroupId">
            <summary>Optional.  Set to null or empty if not a reminder task.
            For repeating reminders, the ReminderGroupId will be the same for each task spawned from any task in the group.</summary>
        </member>
        <member name="F:OpenDentBusiness.Task.ReminderType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Task.ReminderFrequency">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Task.#ctor">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.Task.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.TaskDateType">
            <summary>For use by the older Repeating Tasks feature.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskDateType.None">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskDateType.Day">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskDateType.Week">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskDateType.Month">
            <summary>3</summary>
        </member>
        <member name="T:OpenDentBusiness.TaskObjectType">
            <summary>Used when attaching objects to tasks.  These are the choices.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskObjectType.None">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskObjectType.Patient">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskObjectType.Appointment">
            <summary>2</summary>
        </member>
        <member name="T:OpenDentBusiness.TaskReminderType">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.TaskReminderType.None">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskReminderType.Daily">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskReminderType.Weekly">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskReminderType.Monthly">
            <summary>4</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskReminderType.Yearly">
            <summary>8</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskReminderType.Monday">
            <summary>16 - Use in combination with Weekly.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskReminderType.Tuesday">
            <summary>32 - Use in combination with Weekly.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskReminderType.Wednesday">
            <summary>64 - Use in combination with Weekly.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskReminderType.Thursday">
            <summary>128 - Use in combination with Weekly.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskReminderType.Friday">
            <summary>256 - Use in combination with Weekly.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskReminderType.Saturday">
            <summary>512 - Use in combination with Weekly.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskReminderType.Sunday">
            <summary>1024 - Use in combination with Weekly.</summary>
        </member>
        <member name="T:OpenDentBusiness.TaskStatusEnum">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.TaskStatusEnum.New">
            <summary>0</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskStatusEnum.Viewed">
            <summary>1</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskStatusEnum.Done">
            <summary>2</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskType.All">
            <summary>All task types.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskType.Reminder">
            <summary>Reminder tasks only.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskType.Normal">
            <summary>Regular tasks and repeating tasks.</summary>
        </member>
        <member name="T:OpenDentBusiness.TaskList">
            <summary>A tasklist is like a folder system, where it can have child tasklists as well as tasks.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskList.TaskListNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskList.Descript">
            <summary>The description of this tasklist.  Might be very long, but not usually.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskList.Parent">
            <summary>FK to tasklist.TaskListNum  The parent task list to which this task list is assigned.  If zero, then this task list is on the main trunk of one of the sections.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskList.DateTL">
            <summary>Optional. Set to 0001-01-01 for no date.  If a date is assigned, then this list will also be available from the date section.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskList.IsRepeating">
            <summary>True if it is to show in the repeating section.  There should be no date.  All children should also be set to IsRepeating=true.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskList.DateType">
            <summary>Enum:TaskDateType  None, Day, Week, Month.  If IsRepeating, then setting to None effectively disables the repeating feature.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskList.FromNum">
            <summary>FK to tasklist.TaskListNum  If this is derived from a repeating list, then this will hold the TaskListNum of that list.  It helps automate the adding and deleting of lists.  It might be deleted automatically if no tasks are marked complete.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskList.ObjectType">
            <summary>Enum:TaskObjectType  0=none, 1=Patient, 2=Appointment.  More will be added later. If a type is selected, then this list will be visible in the appropriate places for attaching the correct type of object.  The type is not copied to a task when created.  Tasks in this list do not have to be of the same type.  You can only attach an object to a task, not a tasklist.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskList.DateTimeEntry">
            <summary>The date and time that this list was added.  Used to sort the list by the order entered.</summary>
        </member>
        <member name="F:OpenDentBusiness.TaskList.ParentDesc">
            <Summary>Not a database column.  A string description of the parents of this list.  Might look like this: MegaParent/Parent/  This string may then be tacked on before the Descript to indicate the heirarchy.  It will extend a max of 3 levels.  Only useful in the User tab.</Summary>
        </member>
        <member name="F:OpenDentBusiness.TaskList.NewTaskCount">
            <summary>Not a database column.  The number of new tasks found within a tasklist.  Used in the user tab to turn the tasklist orange, indicating that tasks are present.</summary>
        </member>
        <member name="M:OpenDentBusiness.TaskList.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.TerminalActive">
            <summary>Each row is one computer that currently acting as a terminal for new patient info input.</summary>
        </member>
        <member name="F:OpenDentBusiness.TerminalActive.TerminalActiveNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.TerminalActive.ComputerName">
            <summary>The name of the computer where the terminal is active.</summary>
        </member>
        <member name="F:OpenDentBusiness.TerminalActive.TerminalStatus">
            <summary>Enum:TerminalStatusEnum  No longer used.  Instead, the PatNum field is used.  Used to indicates at what point the patient was in the sequence. 0=standby, 1=PatientInfo, 2=Medical, 3=UpdateOnly.  If status is 1, then nobody else on the network could open the patient edit window for that patient.</summary>
        </member>
        <member name="F:OpenDentBusiness.TerminalActive.PatNum">
            <summary>FK to patient.PatNum.  The patient currently showing in the terminal.  If 0, then terminal is in standby mode.</summary>
        </member>
        <member name="M:OpenDentBusiness.TerminalActive.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.TimeAdjust">
            <summary>Used on employee timecards to make adjustments.  Used to make the end-of-the week OT entries.  Can be used instead of a clock event by admin so that a clock event doesn't have to be created.</summary>
        </member>
        <member name="F:OpenDentBusiness.TimeAdjust.TimeAdjustNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.TimeAdjust.EmployeeNum">
            <summary>FK to employee.EmployeeNum</summary>
        </member>
        <member name="F:OpenDentBusiness.TimeAdjust.TimeEntry">
            <summary>The date and time that this entry will show on timecard.</summary>
        </member>
        <member name="F:OpenDentBusiness.TimeAdjust.RegHours">
            <summary>The number of regular hours to adjust timecard by.  Can be + or -.</summary>
        </member>
        <member name="F:OpenDentBusiness.TimeAdjust.OTimeHours">
            <summary>Overtime hours. Usually +.  Automatically combined with a - adj to RegHours.  Another option is clockevent.OTimeHours.</summary>
        </member>
        <member name="F:OpenDentBusiness.TimeAdjust.Note">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.TimeAdjust.IsAuto">
            <summary>Set to true if this adjustment was automatically made by the system.  When the calc weekly OT tool is run, these types of adjustments are fair game for deletion.  Other adjustments are preserved.</summary>
        </member>
        <member name="F:OpenDentBusiness.TimeAdjust.ClinicNum">
            <summary>FK to clinic.ClinicNum.  The clinic the TimeAdjust was entered at.</summary>
        </member>
        <member name="P:OpenDentBusiness.TimeAdjust.RegHoursXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="P:OpenDentBusiness.TimeAdjust.OTimeHoursXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="M:OpenDentBusiness.TimeAdjust.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ToolButItem">
            <summary>Each row represents one toolbar button to be placed on a toolbar and linked to a program.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToolButItem.ToolButItemNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToolButItem.ProgramNum">
            <summary>FK to program.ProgramNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToolButItem.ToolBar">
            <summary>Enum:ToolBarsAvail The toolbar to show the button on.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToolButItem.ButtonText">
            <summary>The text to show on the toolbar button.</summary>
        </member>
        <member name="M:OpenDentBusiness.ToolButItem.Compare(OpenDentBusiness.ToolButItem,OpenDentBusiness.ToolButItem)">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.ToothInitial">
            <summary>Used to track missing teeth, primary teeth, movements, and drawings.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitial.ToothInitialNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitial.PatNum">
            <summary>FK to patient.PatNum</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitial.ToothNum">
            <summary>1-32 or A-Z. Supernumeraries not supported here yet.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitial.InitialType">
            <summary>Enum:ToothInitialType</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitial.Movement">
            <summary>Shift in mm, or rotation / tipping in degrees.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitial.DrawingSegment">
            <summary>Point data for a drawing segment.  The format would look similar to this: 45,68;48,70;49,72;0,0;55,88;etc.  It's simply a sequence of points, separated by semicolons.  Only positive numbers are used.  0,0 is the upper left of the tooth chart at original size.  Stored in pixels as originally drawn.  If we ever change the tooth chart, we will have to also keep an old version as an alternate to display old drawings.</summary>
        </member>
        <member name="F:OpenDentBusiness.ToothInitial.ColorDraw">
            <summary>.</summary>
        </member>
        <member name="P:OpenDentBusiness.ToothInitial.ColorDrawXml">
            <summary>Used only for serialization purposes</summary>
        </member>
        <member name="M:OpenDentBusiness.ToothInitial.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Transaction">
            <summary>Used in the accounting section of the program.  Each row is one transaction in the ledger, and must always have at least two splits.  All splits must always add up to zero.</summary>
        </member>
        <member name="F:OpenDentBusiness.Transaction.TransactionNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Transaction.DateTimeEntry">
            <summary>Not user editable.  Server time.</summary>
        </member>
        <member name="F:OpenDentBusiness.Transaction.UserNum">
            <summary>FK to userod.UserNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.Transaction.DepositNum">
            <summary>FK to deposit.DepositNum.  Will eventually be replaced by a source document table, and deposits will just be one of many types.</summary>
        </member>
        <member name="F:OpenDentBusiness.Transaction.PayNum">
            <summary>FK to payment.PayNum.  Like DepositNum, it will eventually be replaced by a source document table, and payments will just be one of many types.</summary>
        </member>
        <member name="M:OpenDentBusiness.Transaction.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.TreatPlan">
            <summary>Stores all treatment plans, including Active, Inactive, and Saved treatment plans. 
             Active and Inactive treatment plans use treatplanattaches to reference attached procedures. As procedures are set complete, they get
             removed from active and inactive treatment plans. Saved treatment plans use proctps, which are copies of the procedure, 
             and will not change after being saved. </summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlan.TreatPlanNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlan.PatNum">
            <summary>FK to patient.PatNum.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlan.DateTP">
            <summary>The date of the treatment plan</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlan.Heading">
            <summary>The heading that shows at the top of the treatment plan.  Usually 'Proposed Treatment Plan'</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlan.Note">
            <summary>A note specific to this treatment plan that shows at the bottom.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlan.Signature">
            <summary>The encrypted and bound signature in base64 format.  The signature is bound to the concatenation of the tp Note, DateTP, and to each proctp Descript and PatAmt.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlan.SigIsTopaz">
            <summary>True if the signature is in Topaz format rather than OD format.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlan.ResponsParty">
            <summary>FK to patient.PatNum. Can be 0.  The patient responsible for approving the treatment.  Public health field not visible to everyone else.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlan.DocNum">
            <summary>FK to document.DocNum. Can be 0.  If signed, this is the pdf document of the TP at time of signing. See PrefName.TreatPlanSaveSignedToPdf</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlan.TPStatus">
            <summary>Determines the type of treatment plan this is. 0 - Saved, 1 - Active, 2 - Inactive.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlan.SecUserNumEntry">
            <summary>FK to userod.UserNum.  Set to the user logged in when the row was inserted at SecDateEntry date and time.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlan.SecDateEntry">
            <summary>Timestamp automatically generated and user not allowed to change.  The actual date of entry.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlan.SecDateTEdit">
            <summary>Automatically updated by MySQL every time a row is added or changed. Could be changed due to user editing, custom queries or program
            updates.  Not user editable with the UI.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlan.UserNumPresenter">
            <summary>The user that will present the treatment plan. 
            Defaults to the user that entered the treatment plan, but can be changed with the TreatPlanPresenterEdit permission.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlan.ListProcTPs">
            <summary>Used to pass the list of ProcTPs in memory with the TreatPlan.</summary>
        </member>
        <member name="M:OpenDentBusiness.TreatPlan.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.TreatPlanStatus">
            <summary>0 - Saved, 1 - Active, 2 - Inactive </summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlanStatus.Saved">
            <summary>0 - Saved treatment plans. Prior to version 15.4.1 all treatment plans were considered archived. Archived TPs are linked to ProcTPs.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlanStatus.Active">
            <summary>1 - Current active TP. There should be only one Active TP per patient. This is a TP linked directly to procedures via the TreatPlanAttach table.</summary>
        </member>
        <member name="F:OpenDentBusiness.TreatPlanStatus.Inactive">
            <summary>2 - Current inactive TP. This is a TP linked directly to procedures via the TreatPlanAttach table.</summary>
        </member>
        <member name="T:OpenDentBusiness.Userod">
            <summary>(User OD since "user" is a reserved word) Users are a completely separate entity from Providers and Employees even though they can be linked.  A usernumber can never be changed, ensuring a permanent way to record database entries and leave an audit trail.  A user can be a provider, employee, or neither.</summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.UserNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.UserName">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.Password">
            <summary>The password hash, not the actual password.  If no password has been entered, then this will be blank.</summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.UserGroupNum">
            <summary>FK to usergroup.UserGroupNum.  Every user belongs to exactly one user group.  The usergroup determines the permissions.</summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.EmployeeNum">
            <summary>FK to employee.EmployeeNum. Cannot be used if provnum is used. Used for timecards to block access by other users.</summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.ClinicNum">
            <summary>FK to clinic.ClinicNum.  Default clinic for this user.  It causes new patients to default to this clinic when entered by this user.  
            If 0, then user has no default clinic or default clinic is HQ if clinics are enabled.</summary> 		
        </member>
        <member name="F:OpenDentBusiness.Userod.ProvNum">
            <summary>FK to provider.ProvNum.  Cannot be used if EmployeeNum is used.  It is possible to have multiple userods attached to a single provider.</summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.IsHidden">
            <summary>Set true to hide user from login list.</summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.TaskListInBox">
            <summary>FK to tasklist.TaskListNum.  0 if no inbox setup yet.  It is assumed that the TaskList is in the main trunk, but this is not strictly enforced.  User can't delete an attached TaskList, but they could move it.</summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.AnesthProvType">
            <summary> Defaults to 3 (regular user) unless specified. Helps populates the Anesthetist, Surgeon, Assistant and Circulator dropdowns properly on FormAnestheticRecord/// </summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.DefaultHidePopups">
            <summary>If set to true, the BlockSubsc button will start out pressed for this user.</summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.PasswordIsStrong">
            <summary>Gets set to true if strong passwords are turned on, and this user changes their password to a strong password.  We don't store actual passwords, so this flag is the only way to tell.</summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.ClinicIsRestricted">
            <summary>Only used when userod.ClinicNum is set to not be zero.  Prevents user from having access to other clinics.</summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.InboxHidePopups">
            <summary>If set to true, the BlockInbox button will start out pressed for this user.</summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.UserNumCEMT">
            <summary>FK to userod.UserNum.  The user num within the Central Manager database.  Only editable via CEMT.  Can change when CEMT syncs.</summary>
        </member>
        <member name="F:OpenDentBusiness.Userod._eServiceType">
            <summary>Enum representing what eService this user is a "phantom" user for.
            This variable is to be ignored for serialization and was made private to emphasize the fact that it should not be a db column.
            Mainly used to not have Security.IsAuthorized() checks throw exceptions due to a null Userod when the eServices are calling S class methods.
            Currently only used to grant eServices access to certain methods that would otherwise reject it due to permissions.</summary>
        </member>
        <member name="P:OpenDentBusiness.Userod.EServiceType">
            <summary>All valid users should NOT set this value to anything other than None otherwise permission checking will act unexpectedly.
            Programmatically set this value from the init method of the corresponding eService.  Helps prevent unhandled exceptions.
            Custom property only meant to be used via eServices.  Not a column in db.  Not to be used in middle tier environment.</summary>
        </member>
        <member name="M:OpenDentBusiness.Userod.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.Userod.EServiceTypes">
            <summary>EServiceType specifically for Userods so it is purposefully not added to the namespace.</summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.EServiceTypes.None">
            <summmary>Not an eService user.  All valid users should be this type otherwise permission checking will act differently.</summmary>
        </member>
        <member name="F:OpenDentBusiness.Userod.EServiceTypes.EConnector">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.EServiceTypes.Broadcaster">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.EServiceTypes.BroadcastMonitor">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.Userod.EServiceTypes.ServiceMainHQ">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.UserGroup">
            <summary>A group of users.  Security permissions are determined by the usergroup of a user.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserGroup.UserGroupNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserGroup.Description">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserGroup.UserGroupNumCEMT">
            <summary>FK to usergroup.UserGroupNum.  The user group num within the Central Manager database.  Only editable via CEMT.  Can change when CEMT syncs.</summary>
        </member>
        <member name="M:OpenDentBusiness.UserGroup.Copy">
            <summary></summary>
        </member>
        <member name="T:OpenDentBusiness.UserQuery">
            <summary>A list of query favorites that users can run.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserQuery.QueryNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserQuery.Description">
            <summary>Description.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserQuery.FileName">
            <summary>The name of the file to export to.</summary>
        </member>
        <member name="F:OpenDentBusiness.UserQuery.QueryText">
            <summary>The text of the query.</summary>
        </member>
        <member name="T:OpenDentBusiness.ZipCode">
            <summary>Zipcodes are also known as postal codes.  Zipcodes are always copied to patient records rather than linked.  So items in this list can be freely altered or deleted without harming patient data.</summary>
        </member>
        <member name="F:OpenDentBusiness.ZipCode.ZipCodeNum">
            <summary>Primary key.</summary>
        </member>
        <member name="F:OpenDentBusiness.ZipCode.ZipCodeDigits">
            <summary>The actual zipcode.</summary>
        </member>
        <member name="F:OpenDentBusiness.ZipCode.City">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.ZipCode.State">
            <summary>.</summary>
        </member>
        <member name="F:OpenDentBusiness.ZipCode.IsFrequent">
            <summary>If true, then it will show in the dropdown list in the patient edit window.</summary>
        </member>
        <member name="T:OpenDentBusiness.OpenDentalServer.ServiceMain">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.OpenDentalServer.ServiceMain.#ctor">
            <remarks/>
        </member>
        <member name="E:OpenDentBusiness.OpenDentalServer.ServiceMain.ProcessRequestCompleted">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.OpenDentalServer.ServiceMain.ProcessRequest(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.OpenDentalServer.ServiceMain.ProcessRequestAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.OpenDentalServer.ServiceMain.ProcessRequestAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:OpenDentBusiness.OpenDentalServer.ServiceMain.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.OpenDentalServer.ProcessRequestCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.OpenDentalServer.ProcessRequestCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:OpenDentBusiness.OpenDentalServer.ProcessRequestCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:OpenDentBusiness.X12object">
            <summary>Encapsulates one entire X12 Interchange object, including multiple functional groups and transaction sets. It does not care what type of transactions are contained.  It just stores them.  It does not inherit either.  It is up to other classes to use this as needed.</summary>
        </member>
        <member name="F:OpenDentBusiness.X12object.FilePath">
            <summary>External reference to the file corresponding to this X12 object.</summary>
        </member>
        <member name="F:OpenDentBusiness.X12object.DateInterchange">
            <summary>The date and time this X12 object was created by the sender.  Relative to sender's time zone.</summary>
        </member>
        <member name="F:OpenDentBusiness.X12object.Separators">
            <summary>usually *,:,and ~</summary>
        </member>
        <member name="F:OpenDentBusiness.X12object.FunctGroups">
            <summary>A collection of X12FunctionalGroups.</summary>
        </member>
        <member name="F:OpenDentBusiness.X12object.Segments">
            <summary>All segments for the entiremessage.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12object.ToX12object(System.String)">
            <summary>Returns null if the messageText is not X12 or if messageText could not be parsed.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12object.#ctor">
            <summary>This override is never explicitly used.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12object.#ctor(OpenDentBusiness.X12object)">
            <summary>The new X12object will point to the same data as the x12other.  This is for efficiency and to save memory.  Be careful.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12object.#ctor(System.String)">
            <summary>Takes raw text and converts it into an X12Object.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12object.GetFormat">
            <summary>Example of values returned: 004010X097A1 (4010 dental), 005010X222A1 (5010 medical), 005010X223A2 (5010 institutional), 005010X224A2 (5010 dental)</summary>
        </member>
        <member name="M:OpenDentBusiness.X12object.IsFormat4010">
            <summary>Returns true if the X12 object is in 4010 format.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12object.IsFormat5010">
            <summary>Returns true if the X12 object is in 5010 format.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12object.IsAckInterchange">
            <summary>Returns true if there is a TA1 segment. The TA1 segment is neither mandated or prohibited (see 277.pdf pg. 207).
            The Inmidiata clearinghouse likes to use TA1 segments to replace the usual acknowledgements (format ISA-TA1-IEA).</summary>
        </member>
        <member name="M:OpenDentBusiness.X12object.GetTranSetIds">
            <summary>Returns the list of unique transaction set identifiers within the X12.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12object.GetNextSegmentById(System.Int32,System.String,System.String[])">
            <summary>The startIndex is zero-based.  The segmentId is case sensitive.
            If arrayElement01Values is specified, then will only return segments where the segment.Get(1) returns one of the specified values.
            Returns null if no segment is found.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12object.ReconstructRaw(System.Collections.Generic.List{System.Int32})">
            <summary>Removes the specified segments and recreates the raw X12 from the remaining segments.
            Useful for modifying X12 reports which have been partially processed in order to keep track of which parts have not been processed.
            Certain X12 documents also require the segment count as part of the message (ex 5010 SE segment).
            This function does not modify total segment count within the message.</summary>
        </member>
        <member name="T:OpenDentBusiness.X12FunctionalGroup">
            <summary>GS/GE combination. Contained within an interchange control combination (ISA/IEA). Contains at least one transaction (ST/SE). </summary>
        </member>
        <member name="F:OpenDentBusiness.X12FunctionalGroup.Transactions">
            <summary>A collection of X12Transactions</summary>
        </member>
        <member name="F:OpenDentBusiness.X12FunctionalGroup.Header">
            <summary>The segment that identifies this functional group</summary>
        </member>
        <member name="M:OpenDentBusiness.X12FunctionalGroup.#ctor(OpenDentBusiness.X12Segment)">
            <summary>Supply the functional group header(GS) when creating this object.</summary>
        </member>
        <member name="T:OpenDentBusiness.X12Transaction">
            <summary>ST/SE combination.  Containted within functional group (GS/GE).  In claims, there will be one transaction per carrier.</summary>
        </member>
        <member name="F:OpenDentBusiness.X12Transaction.Segments">
            <summary>A collection of all the X12Segments for this transaction, in the order they originally appeared.</summary>
        </member>
        <member name="F:OpenDentBusiness.X12Transaction.Header">
            <summary>The segment that identifies this functional group</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Transaction.#ctor(OpenDentBusiness.X12Segment)">
            <summary>Supply the transaction header(ST) when creating this object.</summary>
        </member>
        <member name="T:OpenDentBusiness.X12Segment">
            <summary>An X12 segment is a single row of the text file.</summary>
        </member>
        <member name="F:OpenDentBusiness.X12Segment.SegmentID">
            <summary>Usually 2 or 3 letters. Can also be found at Elements[0].</summary>
        </member>
        <member name="F:OpenDentBusiness.X12Segment.Elements">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.X12Segment.SegmentIndex">
            <summary>The zero-based segment index within the X12 document.</summary>
        </member>
        <member name="F:OpenDentBusiness.X12Segment.Separators">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.X12Segment.#ctor(System.String,OpenDentBusiness.X12Separators)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.X12Segment.#ctor">
            <summary>The segment will represent an invalid segment or end of file segment.
            Useful to escape X12 loops which require a segment to be present.
            The SegmentID will be set to "INVALID", because this string will never match a real segment ID (real segment IDs are 3 characters)</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Segment.Copy">
            <summary>Returns a copy of this segement</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Segment.Get(System.Int32)">
            <summary>Returns the string representation of the given element within this segment. If the element does not exist, as can happen with optional elements, then "" is returned.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Segment.Get(System.Int32,System.Int32)">
            <summary>Returns the string representation of the given element,subelement within this segment. If the element or subelement does not exist, as can happen with optional elements, then "" is returned.  Subelement is 1-based, just like the x12 specs.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Segment.IsType(System.String,System.String[])">
            <summary>True if the segment matches the specified segmentId, and the first element of the segment is one of the specified values.</summary>
        </member>
        <member name="M:OpenDentBusiness.X12Segment.AssertType(System.String,System.String[])">
            <summary>Verifies the segment matches the specified segmentId, and the first element of the segment is one of the specified values.</summary>
        </member>
        <member name="T:OpenDentBusiness.X12Separators">
            <summary></summary>
        </member>
        <member name="F:OpenDentBusiness.X12Separators.Segment">
            <summary>usually ~</summary>
        </member>
        <member name="F:OpenDentBusiness.X12Separators.Element">
            <summary>usually *</summary>
        </member>
        <member name="F:OpenDentBusiness.X12Separators.Subelement">
            <summary>usually :</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_ACT.AccountNumber1">
            <summary>ACT01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_ACT.AccountNumber2">
            <summary>ACT06</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_AMT.AmountQualifierCode">
            <summary>AMT01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_AMT.MonetaryAmount">
            <summary>AMT02</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_BGN.TransactionSetPurposeCode">
            <summary>BGN01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_BGN.ReferenceIdentification1">
            <summary>BGN02</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_BGN.DateBgn">
            <summary>BGN03</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_BGN.TimeBgn">
            <summary>BGN04</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_BGN.TimeCode">
            <summary>BGN05</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_BGN.ReferenceIdentifcation2">
            <summary>BGN06</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_BGN.ActionCode">
            <summary>BGN08</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_COB.PayerResponsibilitySequenceNumberCode">
            <summary>COB01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_COB.ReferenceIdentification">
            <summary>COB02</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_COB.CoordinationOfBenefitsCode">
            <summary>COB03</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_COB.ServiceTypeCode">
            <summary>COB04</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_DMG.DateTimePeriodFormatQualifier">
            <summary>DMG01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_DMG.DateTimePeriod">
            <summary>DMG02</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_DMG.GenderCode">
            <summary>DMG03</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_DMG.MaritalStatusCode">
            <summary>DMG04</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_DMG.CompositeRaceOrEthnicityInformation">
            <summary>DMG05</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_DMG.CitizenshipStatusCode">
            <summary>DMG06</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_DMG.CodeListQualifierCode">
            <summary>DMG10</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_DMG.IndustryCode">
            <summary>DMG11</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_DSB.DisabilityTypeCode">
            <summary>DSP01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_DSB.ProductServiceIdQualifier">
            <summary>DSP07</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_DSB.MedicalCodeValue">
            <summary>DSP08</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_DTP.DateTimeQualifier">
            <summary>DTP01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_DTP.DateTimePeriodFormatQualifier">
            <summary>DTP02</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_DTP.DateTimePeriod">
            <summary>DTP03</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_EC.EmploymentClassCode1">
            <summary>EC01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_EC.EmploymentClassCode2">
            <summary>EC02</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_EC.EmploymentClassCode3">
            <summary>EC03</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_HD.MaintenanceTypeCode">
            <summary>HD01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_HD.InsuranceLineCode">
            <summary>HD03</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_HD.PlanCoverageDescription">
            <summary>HD04</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_HD.CoverageLevelCode">
            <summary>HD05</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_HD.YesNoConditionOrResponseCode">
            <summary>HD09</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_HLH.HealthRelatedCode">
            <summary>HLH01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_HLH.Height">
            <summary>HLH02</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_HLH.Weight">
            <summary>HLH03</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_ICM.FrequencyCode">
            <summary>ICM01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_ICM.MonetaryAmount">
            <summary>ICM02</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_ICM.Quantity">
            <summary>ICM03</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_ICM.LocationIdentifier">
            <summary>ICM04</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_ICM.SalaryGrade">
            <summary>ICM05</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_IDC.PlanCoverageDescription">
            <summary>IDC01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_IDC.IdentificationCardTypeCode">
            <summary>IDC02</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_IDC.Quantity">
            <summary>IDC03</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_IDC.ActionCode">
            <summary>IDC04</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_INS.YesNoConditionOrResponseCode1">
            <summary>INS01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_INS.IndividualRelationshipCode">
            <summary>INS02</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_INS.MaintenanceTypeCode">
            <summary>INS03</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_INS.MaintenanceReasonCode">
            <summary>INS04</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_INS.BenefitStatusCode">
            <summary>INS05</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_INS.MedicareStatusCode">
            <summary>INS06</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_INS.CobraQualifying">
            <summary>INS07</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_INS.EmploymentStatusCode">
            <summary>INS08</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_INS.StudentStatusCode">
            <summary>INS09</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_INS.YesNoConditionOrResponseCode2">
            <summary>INS10</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_INS.DateTimePeriodFormatQualifier">
            <summary>INS11</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_INS.DateOfDeath">
            <summary>INS12</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_INS.ConfidentialityCode">
            <summary>INS13</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_INS.Number">
            <summary>INS17</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_LE.LoopIdentifierCode">
            <summary>LE01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_LS.LoopIdentifierCode">
            <summary>LS01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_LUI.IdentificationCodeQualifier">
            <summary>LUI01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_LUI.IdentificationCode">
            <summary>LUI02</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_LUI.Description">
            <summary>LUI03</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_LUI.UseOfLanguageIndicator">
            <summary>LUI04</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_LX.AssignedNumber">
            <summary>LX01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_N1.EntityIdentifierCode">
            <summary>N101</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_N1.Name">
            <summary>N102</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_N1.IdentificationCodeQualifier">
            <summary>N103</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_N1.IdentificationCode">
            <summary>N104</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_N3.AddressInformation1">
            <summary>N301</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_N3.AddressInformation2">
            <summary>N302</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_N4.CityName">
            <summary>N401</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_N4.StateOrProvinceCode">
            <summary>N402</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_N4.PostalCode">
            <summary>N403</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_N4.CountryCode">
            <summary>N404</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_N4.LocationQualifier">
            <summary>N405</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_N4.LocationIdentifier">
            <summary>N406</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_N4.CountrySubdivisionCode">
            <summary>N407</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_NM1.EntityIdentifierCode">
            <summary>NM101</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_NM1.EntityTypeQualifier">
            <summary>NM102</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_NM1.NameLast">
            <summary>NM103</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_NM1.NameFirst">
            <summary>NM104</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_NM1.NameMiddle">
            <summary>NM105</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_NM1.NamePrefix">
            <summary>NM106</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_NM1.NameSuffix">
            <summary>NM107</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_NM1.IdentificationCodeQualifier">
            <summary>NM108</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_NM1.IdentificationCode">
            <summary>NM109</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_PER.ContactFunctionCode">
            <summary>PER01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_PER.CommunicationNumberQualifier1">
            <summary>PER03</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_PER.CommunicationNumber1">
            <summary>PER04</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_PER.CommunicationNumberQualifier2">
            <summary>PER05</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_PER.CommunicationNumber2">
            <summary>PER06</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_PER.CommunicationNumberQualifier3">
            <summary>PER07</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_PER.CommunicationNumber3">
            <summary>PER08</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_PLA.ActionCode">
            <summary>PLA01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_PLA.EntityIdentifierCode">
            <summary>PLA02</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_PLA.DatePla">
            <summary>PLA03</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_PLA.TimePla">
            <summary>PLA04</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_PLA.MaintenanceReasonCode">
            <summary>PLA05</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_REF.ReferenceIdQualifier">
            <summary>REF01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_REF.ReferenceId">
            <summary>REF02</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_QTY.QuantityQualifier">
            <summary>QTY01</summary>
        </member>
        <member name="F:OpenDentBusiness.X12_QTY.Quantity">
            <summary>QTY02</summary>
        </member>
        <member name="F:OpenDentBusiness.XmlConverter._charTab">
            <summary>Chars from (char)0 through (char)0x19 (31) are the first 32 characters and are reserved control chars.
            The exceptions are (char)0x9, a tab, (char)0xA (10), a line feed, and (char)0xD (13), a carriage return.
            We will manually escape line feeds and carriage returns so they aren't converted to \r\n's for us, but we will leave tab chars.</summary>
        </member>
        <member name="F:OpenDentBusiness.XmlConverter._charSpace">
            <summary>_charSpace (0x20=32=Space Character), which is the first non-control char that is a valid xml char.
            The range from _charSpace (0x20=32) through _charSurr (0xD7FF=55295) inclusive are all allowed for xml.</summary>
        </member>
        <member name="F:OpenDentBusiness.XmlConverter._charLCurly">
            <summary>The pipe or vertical line character (0x7C=124=Pipe ('|') Character) is a valid xml char, but we are using it to deliniate table cells
            in order to make our tables smaller xml packages.  We will consider it an invalid char and manually escape it in strings.  That way any |'s in
            the xml are guaranteed to be delimiters for a table that were manually placed after escaping.  We split by |'s and then unescape the cell data
            on the receiving end when processing a table as xml.  Characters from _charSpace through _charLCurly inclusive are valid xml chars.</summary>
        </member>
        <member name="F:OpenDentBusiness.XmlConverter._charRCurly">
            <summary>Characters from _charRCurly through _charSurr inclusive are valid xml chars.</summary>
        </member>
        <member name="F:OpenDentBusiness.XmlConverter._charSurr">
            <summary>Chars greater than _charSurr (0xD7FF=55295) and less than _charPrivFirst (0xE000=57344) are invalid for xml and must be either removed
            or manually escaped/handled before xml serialization.
            They are 0xD800-0xDB7F - High Surrogates, 0xDB80-0xDBFF - High Private Use Surrogates, and 0xDC00-0xDFFF - Low Surrogates.</summary>
        </member>
        <member name="F:OpenDentBusiness.XmlConverter._charPrivFirst">
            <summary>Chars from _charPrivFirst (0xE000=57344=Private Use, First) through _charRepl (0xFFFD=65533=Replacement Character) inclusive are
            legal xml characters.</summary>
        </member>
        <member name="F:OpenDentBusiness.XmlConverter._charRepl">
            <summary>Chars greater than _charRepl (0xFFFD=65533=Replacement Character), explicitly 0xFFFE=65534 and 0xFFFF=65535, are invalid.
            (Chars max out at 0xFFFF)</summary>
        </member>
        <member name="F:OpenDentBusiness.XmlConverter._xmlEscapeStrings">
            <summary>This array is filled with 65,536 chars as strings.  The int index in the array is the int value of the char (as a string) in the array.
            Example: _xmlEscapeStrings[97]=((char)97).ToString()="a".</summary>
        </member>
        <member name="M:OpenDentBusiness.XmlConverter.Serialize``1(``0)">
            <summary>Should accept any type, including simple types, OD types, Arrays, Lists, and arrays of DtoObject.  But not DataTable or DataSet.  If we find a type that isn't supported, then we need to add it.</summary>
        </member>
        <member name="M:OpenDentBusiness.XmlConverter.Serialize(System.Type,System.Object)">
            <summary>For late binding of class type.</summary>
        </member>
        <member name="M:OpenDentBusiness.XmlConverter.XmlEscapeRecursion(System.Type,System.Object)">
            <summary>Escapes any chars for xml within the string fields and properties of an object.  If the object is a list or an array of objects,
            recursively searches the items looking for string fields and properties to escape for xml.</summary>
        </member>
        <member name="M:OpenDentBusiness.XmlConverter.XmlUnescapeRecursion(System.Type,System.Object)">
            <summary>Un-escapes any chars from xml within the string fields and properties of an object.  If the object is a list or an array of objects,
            recursively searches the items looking for string fields and properties to un-escape from xml.</summary>
        </member>
        <member name="M:OpenDentBusiness.XmlConverter.Deserialize``1(System.String)">
            <summary>Should accept any type.  Tested types include System types, OD types, Arrays, Lists, arrays of DtoObject, null DataObjectBase, null arrays, null Lists.  But not DataTable or DataSet.  If we find a type that isn't supported, then we need to add it.  Types that are currently unsupported include Arrays of DataObjectBase that contain a null.  Lists that contain nulls are untested and may be an issue for DataObjectBase.</summary>
        </member>
        <member name="M:OpenDentBusiness.XmlConverter.TableToXml(System.Data.DataTable)">
            <summary>Serializes a DataTable by looping through the rows and columns.</summary>
        </member>
        <member name="M:OpenDentBusiness.XmlConverter.XmlToTable(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDentBusiness.XmlConverter.XmlEscape(System.String)">
            <summary>Escapes common characters used in XML from myString.  Also escapes any characters that are invalid for use in XML with an escape sequence of the pattern "&amp;#"+(int)char+";" (ampersand+hash+the unicode int (not hex) value of the char+semicolon)</summary>
        </member>
        <member name="M:WindowsTime.SetTime(System.DateTime)">
            <summary>Set the windows system time.</summary>
        </member>
        <member name="T:WebServiceSerializer.WebSerializer">
            <summary>Used to serialize primitives for WebServiceCustUpdates I/O.</summary>
        </member>
        <member name="F:WebServiceSerializer.WebSerializer._cellDelimiterPlaceHolder">
            <summary>If the delimiter character is found in a given cell, then the cell's value will be updated to include the place holder value in lieu of the delimiter. This ensures that the delimiter is reserved for only delimiting cells. The place holder will be replaced by the delimiter value on the other end once the cells have been properly delimited.</summary>
        </member>
        <member name="F:WebServiceSerializer.WebSerializer._cellDelimiter">
            <summary>This value is reserved strictly for delimiting cells in a serialized data row.</summary>
        </member>
        <member name="F:WebServiceSerializer.WebSerializer.DotNetDateTimeFormat">
            <summary>Format necessary for C#/Java date/time.</summary>
        </member>
        <member name="F:WebServiceSerializer.WebSerializer.MySqlDateTimeFormat">
            <summary>Format necessary for MySql date/time.</summary>
        </member>
        <member name="M:WebServiceSerializer.WebSerializer.DateFormatColumnForMySql(System.String)">
            <summary>Format is hard-coded to: %Y-%m-%d %H:%i:%s which is the MySQL version of the C#/Java serializing of a date/time.</summary>
        </member>
        <member name="M:WebServiceSerializer.WebSerializer.EscapeForXml(System.String)">
            <summary>Escapes common characters used in XML from the passed in String.</summary>
        </member>
        <member name="M:WebServiceSerializer.WebSerializer.SerializePrimitive``1(``0)">
            <summary>Works in conjunction with DeserializePrimitive. Typically used to pass single primitives back and forth between web services.</summary>
        </member>
        <member name="M:WebServiceSerializer.WebSerializer.SerializeForCSharp(System.String,System.Object)">
            <summary>Goes through all the possible types of objects and returns the object serialized for Java.  objectType must be fully qualified.  Ex: System.Int32.  For DataTables, set objectType to "DataTable".  Returns an empty node if the object is null.  Throws exceptions.</summary>
        </member>
        <member name="M:WebServiceSerializer.WebSerializer.Deserialize(System.String,System.String)">
            <summary>Returns the primitive or general object deserialized.  Throws exception.</summary>
        </member>
        <member name="M:WebServiceSerializer.WebSerializer.DeserializePrimitiveList``1(System.String)">
            <summary>Works in conjunction with SerializePrimitive. Typically used to pass single primitives back and forth between web services.</summary>
        </member>
        <member name="M:WebServiceSerializer.WebSerializer.DeserializePrimitive``1(System.String)">
            <summary>Works in conjunction with SerializePrimitive. Typically used to pass single primitives back and forth between web services.</summary>
        </member>
        <member name="M:WebServiceSerializer.WebSerializer.ParseErrorAndThrow(System.String)">
            <summary>Parse the xml and look for a node called 'Error'. If found then throw the node's InnerText.</summary>
        </member>
        <member name="M:WebServiceSerializer.WebSerializer.DeserializePrimitiveListOrThrow``1(System.String)">
            <summary>Works in conjunction with SerializePrimitive. Typically used to pass single primitives back and forth between web services.</summary>
        </member>
        <member name="M:WebServiceSerializer.WebSerializer.DeserializePrimitiveOrThrow``1(System.String)">
            <summary>Works in conjunction with SerializePrimitive. Typically used to pass single primitives back and forth between web services.</summary>
        </member>
        <member name="M:WebServiceSerializer.WebSerializer.SerializeDataTable(System.Data.DataTable)">
            <summary>Helper function that will serialize a data table by looping through the rows and columns.</summary>
        </member>
        <member name="M:WebServiceSerializer.WebSerializer.SerializeDataSet(System.Data.DataSet)">
            <summary>Helper function that will serialize a data set.</summary>
        </member>
        <member name="M:WebServiceSerializer.WebSerializer.SerializeList``1(System.Collections.Generic.List{``0})">
            <summary>Pass in the type of list and the list object and this method will serialize it.  The object within the list must be fully qualified.</summary>
        </member>
        <member name="M:WebServiceSerializer.WebSerializer.SerializeList(System.String,System.Object)">
            <summary>Pass in the type of list and the list object and this method will serialize it.  The object within the list must be fully qualified.</summary>
        </member>
        <member name="M:WebServiceSerializer.WebSerializer.DeserializeList(System.String)">
            <summary>Pass in the type of list and the list object and this method will serialize it.  The object within the list must be fully qualified.</summary>
        </member>
        <member name="M:WebServiceSerializer.WebSerializer.SerializeArray(System.String,System.Object)">
            <summary>Helper function that will serialize any array.</summary>
        </member>
        <member name="T:WebServiceSerializer.POut">
            <summary>Converts various datatypes into strings formatted correctly for MySQL. "P" was originally short for Parameter because this class was written specifically to replace parameters in the mysql queries. Using strings instead of parameters is much easier to debug.  This will later be rewritten as a System.IConvertible interface on custom mysql types.  I would rather not ever depend on the mysql connector for this so that this program remains very db independent.
            Marked internal so it doesn't get mistaken or misused in place of OpenDentBusiness.POut.</summary>
        </member>
        <member name="M:WebServiceSerializer.POut.PBool(System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.POut.PByte(System.Byte)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.POut.PDateT(System.DateTime)">
            <summary>Always encapsulates the result, depending on the current database connection.</summary>
        </member>
        <member name="M:WebServiceSerializer.POut.PDateT(System.DateTime,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.POut.PDate(System.DateTime)">
            <summary>Converts a date to yyyy-MM-dd format which is the format required by MySQL. myDate is the date you want to convert. encapsulate is true for the first overload, making the result look like this: 'yyyy-MM-dd' for MySQL.</summary>
        </member>
        <member name="M:WebServiceSerializer.POut.PDouble(System.Double)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.POut.PInt(System.Int32)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.POut.PLong(System.Int64)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.POut.PFloat(System.Single)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.POut.PString(System.String)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.POut.PBitmap(System.Drawing.Bitmap)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.POut.PSound(System.String)">
            <summary>Converts the specified wav file into a string representation.  The timing of this is a little different than with the other "P" functions and is only used by the import button in FormSigElementDefEdit.  After that, the wav spends the rest of it's life as a string until "played" or exported.</summary>
        </member>
        <member name="M:WebServiceSerializer.POut.Base64(System.String)">
            <summary>The supplied string should already be in safe base64 format, and should not need any special escaping.  The purpose of this function is to enforce that the supplied string meets these requirements.  This is done quickly.</summary>
        </member>
        <member name="T:WebServiceSerializer.PIn">
            <summary>Converts strings coming in from the database into the appropriate type. "P" was originally short for Parameter because this class was written specifically to replace parameters in the mysql queries. Using strings instead of parameters is much easier to debug.  This will later be rewritten as a System.IConvertible interface on custom mysql types.  I would rather not ever depend on the mysql connector for this so that this program remains very db independent.
            Marked internal so it doesn't get mistaken or misused in place of OpenDentBusiness.PIn.</summary>
        </member>
        <member name="M:WebServiceSerializer.PIn.PBool(System.String)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.PIn.PByte(System.String)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.PIn.PDate(System.String)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.PIn.PDateT(System.String)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.PIn.PDouble(System.String)">
            <summary>If blank or invalid, returns 0. Otherwise, parses.</summary>
        </member>
        <member name="M:WebServiceSerializer.PIn.PInt(System.String)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.PIn.PLong(System.String)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.PIn.PShort(System.String)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.PIn.PFloat(System.String)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.PIn.PString(System.String)">
            <summary>Currently does nothing.</summary>
        </member>
        <member name="M:WebServiceSerializer.PIn.PBitmap(System.String)">
            <summary></summary>
        </member>
        <member name="M:WebServiceSerializer.PIn.PSound(System.String,System.String)">
            <summary>Saves the string representation of a sound into a .wav file.  The timing of this is different than with the other "P" functions, and is only used by the export button in FormSigElementDefEdit</summary>
        </member>
        <member name="T:EhrLaboratories.HL70490">
            <summary>Order Control Code.  We only use RE.  OID:2.16.840.1.113883.12.119  HL70369 code:HL70119.  Source phinvads.cdc.gov</summary>
        </member>
        <member name="T:EhrLaboratories.HL70493">
            <summary>Order Control Code.  We only use RE.  OID:2.16.840.1.113883.12.119  HL70369 code:HL70119.  Source phinvads.cdc.gov</summary>
        </member>
        <member name="T:EhrLaboratories.HL70125">
            <summary>Value Type.  OID:2.16.840.1.113883.12.125  HL70369 code:HL70125.  Source HL7 2.5.1 Labratory Reporting Interface documentation.
            <para>This enum is also used in FormPatListElementEditEHR2014.cs and assumes the order of this enum does not change. If it does, the combo box filled with these values must also be updated.</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70125.CE">
            <summary>0 - Coded Entry.
            <para>Usage: R </para>
            <para>Comment: When sending text data in OBX-5, use either the ST, TX or FT data types. </para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70125.CWE">
            <summary>1 - Coded with Exceptions.
            <para>Usage: R </para>
            <para>Data Type Flavor: CWE_CRO </para>
            <para>Comment: Data type to be used where it is important to communicate the coding system and coding system version with the coded result being reported. Pre-adopted from Version 2.6.  This Implementation Guide has specially constrained versions of the CWE data type in Section 2.2 through 2.4. The CWE_CR format shall be used for OBX-5. When sending text data in OBX-5, use either the ST, TX or FT data types. </para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70125.DT">
            <summary>2 - Date.
            <para>Usage: R </para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70125.FT">
            <summary>3 - Formatted Text (Display).
            <para>Usage: R </para>
            <para>Comment: Field using the FT data type to carry a text result value. This is intended for display. The text may contain formatting escape sequences as described in the data types section. Numeric results and numeric results with units of measure should not be reported as text. These should be reported as NM or SN numeric results, with the units of measure in OBX-6. </para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70125.NM">
            <summary>4 - Numeric.
            <para>Usage: R </para>
            <para>Comment: Field using the NM data type to carry a numeric result value. The only non-numeric characters allowed in this field are a leading plus (+) or minus (-) sign. The structured numeric (SN) data type should be used for conveying inequalities, ranges, ratios, etc. The units for the numeric value should be reported in OBX-6. </para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70125.SN">
            <summary>5 - Structured Numeric.
            <para>Usage: R </para>
            <para>Comment: Field using the SN data type to carry a structured numeric result value. Structured numeric include intervals (^0^-^1), ratios (^1^/^2 or ^1^: ^2), inequalities (&lt;^10), or categorical results (2^+). The units for the structured numeric value should be reported in OBX-6. </para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70125.ST">
            <summary>6 - String Data.
            <para>Usage: R </para>
            <para>Comment: Field using the ST data type to carry a short text result value. Numeric results and numeric results with units of measure should not be reported as text. These shall be reported as NM or SN numeric results, with the units of measure in OBX-6. </para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70125.TM">
            <summary>7 - Time.
            <para>Usage: R </para>
            <para>Comment: The timezone offset shall adhere to the use of the TimeZone Offset profile. </para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70125.TS">
            <summary>8 - Time Stamp (Date and Time).
            <para>Usage: R </para>
            <para>Data Type Flavor: TS_0 </para>
            <para>Comment: The timezone offset shall adhere to the use of the TimeZone Offset profile and associated discussion if the granularity involves hh or “more”. </para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70125.TX">
            <summary>9 - Text Data (Display).
            <para>Usage: R </para>
            <para>Comment: Field using the TX data type to carry a text result value this is intended for display. Numeric results and numeric results with units of measure should not be reported as text. These should be reported as NM or SN numeric results, with the units of measure in OBX-6. </para></summary>
        </member>
        <member name="T:EhrLaboratories.HL70078">
            <summary>Abnormal Flags.  OID:2.16.840.1.113883.12.78  HL70369 code:HL70078.  Source phinvads.cdc.gov</summary>
        </member>
        <member name="F:EhrLaboratories.HL70078.A">
            <summary>0 - Abnormal
            <para>Applies to non-numeric results.</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70078._gt">
            <summary>1 - Above absolute high-off instrument scale.  Actual value is "&gt;" but symbol cannot be used as an enum value.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70078.H">
            <summary>2 - Above high normal</summary>
        </member>
        <member name="F:EhrLaboratories.HL70078.HH">
            <summary>3 - Above upper panic limits</summary>
        </member>
        <member name="F:EhrLaboratories.HL70078._lt">
            <summary>4 - Below absolute low-off instrument scale.  Actual value is "&lt;" but symbol cannot be used as an enum value.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70078.L">
            <summary>5 - Below low normal</summary>
        </member>
        <member name="F:EhrLaboratories.HL70078.LL">
            <summary>6 - Below lower panic limits</summary>
        </member>
        <member name="F:EhrLaboratories.HL70078.B">
            <summary>7 - Better
            <para>Use when direction not relevant.</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70078.I">
            <summary>8 - Intermediate
            <para>Indicates for microbiology susceptibilities only.</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70078.MS">
            <summary>9 - Moderately susceptible
            <para>Indicates for microbiology susceptibilities only</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70078._null">
            <summary>10 - No range defined, or normal ranges don't apply.  Actual value is "null" but is a reserved word in c#</summary>
        </member>
        <member name="F:EhrLaboratories.HL70078.N">
            <summary>11 - Normal
            <para>Applies to non-numeric results.</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70078.R">
            <summary>12 - Resistant
            <para>Indicates for microbiology susceptibilities only.</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70078.D">
            <summary>13 - Significant change down</summary>
        </member>
        <member name="F:EhrLaboratories.HL70078.U">
            <summary>14 - Significant change up</summary>
        </member>
        <member name="F:EhrLaboratories.HL70078.S">
            <summary>15 - Susceptible
            <para>Indicates for microbiology susceptibilities only.</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70078.AA">
            <summary>16 - Very abnormal
            <para>Applies to non-numeric units, analogous to panic limits for numeric units.</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70078.VS">
            <summary>17 - Very susceptible
            <para>Indicates for microbiology susceptibilities only.</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70078.W">
            <summary>18 - Worse
            <para>Use when direction not relevant.</para></summary>
        </member>
        <member name="T:EhrLaboratories.HL70085">
            <summary>Observation Result Status.  OID:2.16.840.1.113883.12.85  HL70369 code:HL70085.  Source phinvads.cdc.gov</summary>
        </member>
        <member name="F:EhrLaboratories.HL70085.D">
            <summary>0 - Deletes the OBX record</summary>
        </member>
        <member name="F:EhrLaboratories.HL70085.F">
            <summary>1 - Final results; Can only be changed with a corrected result.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70085.N">
            <summary>2 - Not asked; used to affirmatively document that the observation identified in the OBX was not sought when the universal service ID in OBR-4 implies that it would be sought.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70085.O">
            <summary>3 - Order detail description only (no result)</summary>
        </member>
        <member name="F:EhrLaboratories.HL70085.S">
            <summary>4 - Partial results</summary>
        </member>
        <member name="F:EhrLaboratories.HL70085.W">
            <summary>5 - Post original as wrong, e.g., transmitted for wrong patient</summary>
        </member>
        <member name="F:EhrLaboratories.HL70085.P">
            <summary>6 - Preliminary results</summary>
        </member>
        <member name="F:EhrLaboratories.HL70085.C">
            <summary>7 - Record coming over is a correction and thus replaces a final result</summary>
        </member>
        <member name="F:EhrLaboratories.HL70085.X">
            <summary>8 - Results cannot be obtained for this observation</summary>
        </member>
        <member name="F:EhrLaboratories.HL70085.R">
            <summary>9 - Results entered -- not verified</summary>
        </member>
        <member name="F:EhrLaboratories.HL70085.U">
            <summary>10 - Results status change to final without retransmitting results already sent as _preliminary._  E.g., radiology changes status from preliminary to final</summary>
        </member>
        <member name="F:EhrLaboratories.HL70085.I">
            <summary>11 - Specimen in lab; results pending</summary>
        </member>
        <member name="T:EhrLaboratories.HL70190">
            <summary>Address Type.  OID:2.16.840.1.113883.12.190  Source phinvads.cdc.gov</summary>
        </member>
        <member name="F:EhrLaboratories.HL70190.BA">
            <summary>0 - Bad address</summary>
        </member>
        <member name="F:EhrLaboratories.HL70190.N">
            <summary>1 - Birth (nee) (birth address, not otherwise specified)</summary>
        </member>
        <member name="F:EhrLaboratories.HL70190.BDL">
            <summary>2 - Birth delivery location (address where birth occurred)</summary>
        </member>
        <member name="F:EhrLaboratories.HL70190.F">
            <summary>3 - Country Of Origin</summary>
        </member>
        <member name="F:EhrLaboratories.HL70190.C">
            <summary>4 - Current Or Temporary</summary>
        </member>
        <member name="F:EhrLaboratories.HL70190.B">
            <summary>5 - Firm/Business</summary>
        </member>
        <member name="F:EhrLaboratories.HL70190.H">
            <summary>6 - Home</summary>
        </member>
        <member name="F:EhrLaboratories.HL70190.L">
            <summary>7 - Legal Address</summary>
        </member>
        <member name="F:EhrLaboratories.HL70190.M">
            <summary>8 - Mailing</summary>
        </member>
        <member name="F:EhrLaboratories.HL70190.O">
            <summary>9 - Office</summary>
        </member>
        <member name="F:EhrLaboratories.HL70190.P">
            <summary>10 - Permanent</summary>
        </member>
        <member name="F:EhrLaboratories.HL70190.RH">
            <summary>11 - Registry home. 
            <para>Refers to the information system, typically managed by a public health agency, that stores patient information such as immunization histories or cancer data, regardless of where the patient obtains Services.</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70190.BR">
            <summary>12 - Residence at birth (home address at time of birth)</summary>
        </member>
        <member name="T:EhrLaboratories.HL70399">
            <summary>(Not Implemented) Observation Result Status.  OID:2.16.840.1  Source phinvads.cdc.gov</summary>
        </member>
        <member name="T:EhrLaboratories.USCountyCode">
            <summary>Three digit county codes based on FIPS 6-4, AKA HL70289.  OID:2.16.840.1.114222.4.11.829  Source phinvads.cdc.gov</summary>
        </member>
        <member name="T:EhrLaboratories.USPSAlphaStateCode">
            <summary>USPS Alpha State Code.  Source: http://www.itl.nist.gov/fipspubs/fip5-2.htm </summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.AL">
            <summary>0 - Alabama</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.AK">
            <summary>1 - Alaska</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.AZ">
            <summary>2 - Arizona</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.AR">
            <summary>3 - Arkansas</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.CA">
            <summary>4 - California</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.CO">
            <summary>5 - Colorado</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.CT">
            <summary>6 - Connecticut</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.DE">
            <summary>7 - Delaware</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.DC">
            <summary>8 - District of Columbia</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.FL">
            <summary>9 - Florida</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.GA">
            <summary>10 - Georgia</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.HI">
            <summary>11 - Hawaii</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.ID">
            <summary>12 - Idaho</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.IL">
            <summary>13 - Illinois</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.IN">
            <summary>14 - Indiana</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.IA">
            <summary>15 - Iowa</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.KS">
            <summary>16 - Kansas</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.KY">
            <summary>17 - Kentucky</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.LA">
            <summary>18 - Louisiana</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.ME">
            <summary>19 - Maine</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.MD">
            <summary>20 - Maryland</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.MA">
            <summary>21 - Massachusetts</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.MI">
            <summary>22 - Michigan</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.MN">
            <summary>23 - Minnesota</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.MS">
            <summary>24 - Mississippi</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.MO">
            <summary>25 - Missouri</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.MT">
            <summary>26 - Montana</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.NE">
            <summary>27 - Nebraska</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.NV">
            <summary>28 - Nevada</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.NH">
            <summary>29 - New Hampshire</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.NJ">
            <summary>30 - New Jersey</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.NM">
            <summary>31 - New Mexico</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.NY">
            <summary>32 - New York</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.NC">
            <summary>33 - North Carolina</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.ND">
            <summary>34 - North Dakota</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.OH">
            <summary>35 - Ohio</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.OK">
            <summary>36 - Oklahoma</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.OR">
            <summary>37 - Oregon</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.PA">
            <summary>38 - Pennsylvania</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.RI">
            <summary>39 - Rhode Island</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.SC">
            <summary>40 - South Carolina</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.SD">
            <summary>41 - South Dakota</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.TN">
            <summary>42 - Tennessee</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.TX">
            <summary>43 - Texas</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.UT">
            <summary>44 - Utah</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.VT">
            <summary>45 - Vermont</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.VA">
            <summary>46 - Virginia</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.WA">
            <summary>47 - Washington</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.WV">
            <summary>48 - West Virginia</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.WI">
            <summary>49 - Wisconsin</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.WY">
            <summary>50 - Wyoming</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.AS">
            <summary>51 - American Samoa</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.FM">
            <summary>52 - Federated States of Micronesia</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.GU">
            <summary>53 - Guam</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.MH">
            <summary>54 - Marshall Islands</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.MP">
            <summary>55 - Northern Mariana Islands</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.PW">
            <summary>56 - Palau</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.PR">
            <summary>57 - Puerto Rico</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.UM">
            <summary>58 - U.S. Minor Outlying Islands</summary>
        </member>
        <member name="F:EhrLaboratories.USPSAlphaStateCode.VI">
            <summary>59 - Virgin Islands of the U.S.</summary>
        </member>
        <member name="T:EhrLaboratories.HL70065">
            <summary>Specimen Action Code. Constrained to AGLO. OID:2.16.840.1.113883.12.119  HL70369 code:HL70119.  Source HL7 2.5.1 Labratory Reporting Interface documentation.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70065.A">
            <summary>0 - Add ordered tests to the existing specimen.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70065.G">
            <summary>1 - Generated order; reflex order.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70065.L">
            <summary>2 - Lab to obtain specimen from patient.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70065.O">
            <summary>3 - Specimen obtained by service other than lab.</summary>
        </member>
        <member name="T:EhrLaboratories.HL70119">
            <summary>Order Control Code.  We only use RE.  OID:2.16.840.1.113883.12.119  HL70369 code:HL70119.  Source phinvads.cdc.gov</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.CA">
            <summary>0 - Cancel order/service request</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.CR">
            <summary>1 - Canceled as requested</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.XO">
            <summary>2 - Change order/service request</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.XR">
            <summary>3 - Changed as requested</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.CH">
            <summary>4 - Child order/service</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.CN">
            <summary>5 - Combined result</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.DE">
            <summary>6 - Data errors</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.DC">
            <summary>7 - Discontinue order/service request</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.DR">
            <summary>8 - Discontinued as requested</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.HD">
            <summary>9 - Hold order request</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.LI">
            <summary>10 - Link order/service to patient care problem or goal</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.NW">
            <summary>11 - New order/service</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.OP">
            <summary>12 - Notification of order for outside dispense</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.PY">
            <summary>13 - Notification of replacement order for outside dispense</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.NA">
            <summary>14 - Number assigned</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.RE">
            <summary>15 - Observations/Performed Service to follow</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.HR">
            <summary>16 - On hold as requested</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:EhrLaboratories.HL70119.OK" -->
        <member name="F:EhrLaboratories.HL70119.OC">
            <summary>18 - Order/service canceled</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.XX">
            <summary>19 - Order/service changed, unsol.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.OD">
            <summary>20 - Order/service discontinued</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.OH">
            <summary>21 - Order/service held</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.AF">
            <summary>22 - Order/service refill request approval</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.DF">
            <summary>23 - Order/service refill request denied</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.OF">
            <summary>24 - Order/service refilled as requested</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.FU">
            <summary>25 - Order/service refilled, unsolicited</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.OE">
            <summary>26 - Order/service released</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.RP">
            <summary>27 - Order/service replace request</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.PA">
            <summary>28 - Parent order/service</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.PR">
            <summary>29 - Previous Results with new order/service</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.RF">
            <summary>30 - Refill order/service request</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.RL">
            <summary>31 - Release previous hold</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.OR">
            <summary>32 - Released as requested</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.RQ">
            <summary>33 - Replaced as requested</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.RU">
            <summary>34 - Replaced unsolicited</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.RO">
            <summary>35 - Replacement order</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.RR">
            <summary>36 - Request received</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.SR">
            <summary>37 - Response to send order/service status request</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.SN">
            <summary>38 - Send order/service number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.SS">
            <summary>39 - Send order/service status request</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.SC">
            <summary>40 - Status changed</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.UA">
            <summary>41 - Unable to accept order/service</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.UC">
            <summary>42 - Unable to cancel</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.UX">
            <summary>43 - Unable to change</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.UD">
            <summary>44 - Unable to discontinue</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.UH">
            <summary>45 - Unable to put on hold</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.UF">
            <summary>46 - Unable to refill</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.UR">
            <summary>46 - Unable to release</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.UM">
            <summary>47 - Unable to replace</summary>
        </member>
        <member name="F:EhrLaboratories.HL70119.UN">
            <summary>48 - Unlink order/service from patient care problem or goal</summary>
        </member>
        <member name="T:EhrLaboratories.HL70123">
            <summary>Result Status.  OID:2.16.840.1.113883.12.123  HL70369 code:HL70123.  Source HL7 2.5.1 Labratory Reporting Interface documentation.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70123.A">
            <summary>0 - Some but not all results available.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70123.C">
            <summary>1 - Correction to results.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70123.F">
            <summary>2 - Final Results; results stored and verified. Can only be changed with a corrected result.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70123.I">
            <summary>3 - No results available; specimen received, procedure incomplete.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70123.O">
            <summary>4 - Order received; specimen not yet received.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70123.P">
            <summary>5 - Preliminary: A verified early result is available, final results not yet obtained.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70123.R">
            <summary>6 - Results stored; not yet verified.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70123.S">
            <summary>7 - No results available; procedure scheduled but not done.</summary>
        </member>
        <member name="F:EhrLaboratories.HL70123.X">
            <summary>8 - No results available; Order canceled.</summary>
        </member>
        <member name="T:EhrLaboratories.HL70200">
            <summary>Name Type Code.  OID:2.16.840.1.113883.12.200  HL70369 code:HL70200.  Source phinvads.cdc.gov</summary>
        </member>
        <member name="F:EhrLaboratories.HL70200.C">
            <summary>0 - Adopted Name</summary>
        </member>
        <member name="F:EhrLaboratories.HL70200.A">
            <summary>1 - Alias Name</summary>
        </member>
        <member name="F:EhrLaboratories.HL70200.S">
            <summary>2 - Coded Pseudo-Name to ensure anonymity</summary>
        </member>
        <member name="F:EhrLaboratories.HL70200.D">
            <summary>3 - Display Name</summary>
        </member>
        <member name="F:EhrLaboratories.HL70200.T">
            <summary>4 - Indigenous/Tribal/Community Name</summary>
        </member>
        <member name="F:EhrLaboratories.HL70200.L">
            <summary>5 - Legal Name</summary>
        </member>
        <member name="F:EhrLaboratories.HL70200.I">
            <summary>6 - Licensing Name</summary>
        </member>
        <member name="F:EhrLaboratories.HL70200.M">
            <summary>7 - Maiden Name</summary>
        </member>
        <member name="F:EhrLaboratories.HL70200.B">
            <summary>8 - Name at Birth</summary>
        </member>
        <member name="F:EhrLaboratories.HL70200.P">
            <summary>9 - Name of Partner/Spouse (retained for backward compatibility only)</summary>
        </member>
        <member name="F:EhrLaboratories.HL70200.N">
            <summary>10 - Nickname /_Call me_ Name/Street Name</summary>
        </member>
        <member name="F:EhrLaboratories.HL70200.R">
            <summary>11 - Registered Name (animals only)</summary>
        </member>
        <member name="F:EhrLaboratories.HL70200.U">
            <summary>12 - Unspecified</summary>
        </member>
        <member name="T:EhrLaboratories.HL70203">
            <summary>Identifier Type.  OID:2.16.840.1.113883.12.203  HL70369 code:HL70203.  Source phinvads.cdc.gov</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.AN">
            <summary>0 - Account number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.ANC">
            <summary>1 - Account number Creditor</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.AND">
            <summary>2 - Account number debitor</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.APRN">
            <summary>3 - Advanced Practice Registered Nurse number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.AM">
            <summary>4 - American Express</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.ANON">
            <summary>5 - Anonymous identifier</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.BA">
            <summary>6 - Bank Account Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.BC">
            <summary>7 - Bank Card Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.BR">
            <summary>8 - Birth registry number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.BRN">
            <summary>9 - Breed Registry Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.CC">
            <summary>10 - Cost Center number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.CY">
            <summary>11 - County number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.DDS">
            <summary>12 - Dentist license number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.DI">
            <summary>13 - Diner_s Club card</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.DS">
            <summary>14 - Discover Card</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.DN">
            <summary>15 - Doctor number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.DR">
            <summary>16 - Donor Registration Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.DL">
            <summary>17 - Driver_s license number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.DEA">
            <summary>18 - Drug Enforcement Administration registration number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.DFN">
            <summary>19 - Drug Furnishing or prescriptive authority Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.EI">
            <summary>20 - Employee number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.EN">
            <summary>21 - Employer number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.FI">
            <summary>22 - Facility ID</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.GL">
            <summary>23 - General ledger number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.GN">
            <summary>24 - Guarantor external identifier</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.GI">
            <summary>25 - Guarantor internal identifier</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.HC">
            <summary>26 - Health Card Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.IND">
            <summary>27 - Indigenous/Aboriginal</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.JHN">
            <summary>28 - Jurisdictional health number (Canada)</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.LI">
            <summary>29 - Labor and industries number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.LN">
            <summary>30 - License number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.PE">
            <summary>31 - Living Subject Enterprise Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.LR">
            <summary>32 - Local Registry ID</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.MS">
            <summary>33 - MasterCard</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.MD">
            <summary>34 - Medical License number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.MR">
            <summary>35 - Medical record number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.UPIN">
            <summary>36 - Medicare/CMS (formerly HCFA)_s Universal Physician Identification numbers</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.MB">
            <summary>37 - Member Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.MCN">
            <summary>38 - Microchip Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.MI">
            <summary>39 - Military ID number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.NE">
            <summary>40 - National employer identifier</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.NH">
            <summary>41 - National Health Plan Identifier</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.NII">
            <summary>42 - National Insurance Organization Identifier</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.NIIP">
            <summary>43 - National Insurance Payor Identifier (Payor)</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.NNxxx">
            <summary>44 - National Person Identifier where the xxx is the ISO table 3166 3-character (alphabetic) country code</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.NPI">
            <summary>45 - National provider identifier</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.NI">
            <summary>46 - National unique individual identifier</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.NP">
            <summary>47 - Nurse practitioner number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.OD">
            <summary>48 - Optometrist license number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.XX">
            <summary>49 - Organization identifier</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.DO">
            <summary>50 - Osteopathic License number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.PPN">
            <summary>51 - Passport number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.PT">
            <summary>52 - Patient external identifier</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.PI">
            <summary>53 - Patient internal identifier</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.MA">
            <summary>54 - Patient Medicaid number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.MC">
            <summary>55 - Patient's Medicare number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.PCN">
            <summary>56 - Penitentiary/correctional institution Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.PEN">
            <summary>57 - Pension Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.PRC">
            <summary>58 - Permanent Resident Card Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.PN">
            <summary>59 - Person number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.RPH">
            <summary>60 - Pharmacist license number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.PA">
            <summary>61 - Physician Assistant number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.DPM">
            <summary>62 - Podiatrist license number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.MCD">
            <summary>63 - Practitioner Medicaid number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.MCR">
            <summary>64 - Practitioner Medicare number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.PRN">
            <summary>65 - Provider number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.QA">
            <summary>66 - QA number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.RR">
            <summary>67 - Railroad Retirement number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.RRI">
            <summary>68 - Regional registry ID</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.RN">
            <summary>69 - Registered Nurse Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.RI">
            <summary>70 - Resource identifier</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.SS">
            <summary>71 - Social Security number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.SID">
            <summary>72 - Specimen Identifier</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.SL">
            <summary>73 - State license</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.SR">
            <summary>74 - State registry ID</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.SN">
            <summary>75 - Subscriber Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.TAX">
            <summary>76 - Tax ID number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.ANT">
            <summary>77 - Temporary Account Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.PNT">
            <summary>78 - Temporary Living Subject Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.MRT">
            <summary>79 - Temporary Medical Record Number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.TN">
            <summary>80 - Treaty Number/ (Canada)</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.U">
            <summary>81 - Unspecified identifier</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.VS">
            <summary>82 - VISA</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.VN">
            <summary>83 - Visit number</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.WC">
            <summary>84 - WIC identifier</summary>
        </member>
        <member name="F:EhrLaboratories.HL70203.WCN">
            <summary>85 - Workers_ Comp Number</summary>
        </member>
        <member name="T:EhrLaboratories.HL70361">
            <summary>Identifier Type.  OID:2.16.840.1.113883...  HL70369 code:HL70361.  Source phinvads.cdc.gov</summary>
        </member>
        <member name="T:EhrLaboratories.HL70362">
            <summary>Identifier Type.  OID:2.16.840.1.113883...  HL70369 code:HL70362.  Source phinvads.cdc.gov</summary>
        </member>
        <member name="T:EhrLaboratories.HL70369">
            <summary>Coding Systems.  OID:2.16.840.1.113883.12.369  Source phinvads.cdc.gov
            <para>This enum is not stored directly in the DB because of variable enum values, instead it is used to fill controls to allow users to pick from, or type their own.</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369._99zzz">
            <summary>0 - Local general code (where z is an alphanumeric character). Actual value does not contain an underscore, but enumerations cannot start with a number.
            <para>Source:Locally defined codes for purpose of sender or receiver. Local codes can be identified by L (for backward compatibility) or 99zzz (where z is an alphanumeric character).</para>
            <para>Category:General Codes</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.L">
            <summary>1 - Local general code (where z is an alphanumeric character)
            <para>Source:Locally defined codes for purpose of sender or receiver. Local codes can be identified by L (for backward compatibility) or 99zzz (where z is an alphanumeric character).</para>
            <para>Category:General Codes</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ACR">
            <summary>2 - American College of Radiology finding codes
            <para>Source:Index for Radiological Diagnosis Revised, 3rd Edition 1986, American College of Radiology, Reston, VA.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ACTCODE">
            <summary>3 - Table of HL7 Version 3 ActCode values
            <para>Source:For use in v2.x systems interoperating with V3 systems.  Identical to the code system 2.16.840.1.113883.5.4 ActCode in the Version 3 vocabulary.</para>
            <para>Category:General Codes</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ACTRELSS">
            <summary>4 - Used to indicate that the target of the relationship will be a filtered subset of the total related set of targets. Used when there is a need to limit the number of components to the first, the last, the next, the total, the average or some other filtered or calculated subset.
            <para>Source:V3 coding system.   Download with V3 materials.</para>
            <para>Category:General Codes</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ALPHAID2006">
            <summary>5 - German Alpha-ID v2006
            <para>Source:ID of the alphabetical Index ICD-10-GM-2006. Alpha-ID.</para>
            <para>Category:</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ALPHAID2007">
            <summary>6 - German Alpha-ID v2007
            <para>Source:ID of the alphabetical Index ICD-10-GM-2007. Alpha-ID.</para>
            <para>Category:</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ALPHAID2008">
            <summary>7 - German Alpha-ID v2008
            <para>Source:ID of the alphabetical Index ICD-10-GM-2008. Alpha-ID.</para>
            <para>Category:</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ALPHAID2009">
            <summary>8 - German Alpha-ID v2009
            <para>Source:ID of the alphabetical Index ICD-10-GM-2009. Alpha-ID.</para>
            <para>Category:</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.AMTv2">
            <summary>9 - Australian Medicines Terminology (v2)
            <para>Source:The national terminology to identify medicines used in Australia, using unique codes to deliver unambiguous, accurate and standardised names for both branded (trade) and generic (medicinal) products.</para>
            <para>Category:Drug code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ANS_">
            <summary>10 - HL7 set of units of measure actual code is ANS+, but enumerations cannot contain special characters.
            <para>Source:HL7 set of units of measure based upon ANSI X3.50 - 1986, ISO 2988-83, and US customary units / see chapter 7, section 7.4.2.6.</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ART">
            <summary>11 - WHO Adverse Reaction Terms
            <para>Source:WHO Collaborating Centre for International Drug Monitoring, Box 26, S-751 03, Uppsala, Sweden.</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:EhrLaboratories.HL70369.AS4" -->
        <member name="F:EhrLaboratories.HL70369.AS4E">
            <summary>13 - AS4 Neurophysiology Codes
            <para>Source:ASTM’s diagnostic codes and test result coding/grading systems for clinical neurophysiology. See ASTM Specification E1467, Appendix 2.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ATC">
            <summary>14 - American Type Culture Collection
            <para>Source:Reference cultures (microorganisms, tissue cultures, etc.), related biological materials and associated data. American Type Culture Collection, 12301 Parklawn Dr, Rockville MD, 20852. (301) 881-2600.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.C4">
            <summary>15 - CPT-4
            <para>Source:American Medical Association, P.O. Box 10946, Chicago IL  60610.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.C5">
            <summary>16 - CPT-5  
            <para>Source:Not currently being worked on, no proposed release date at this time.  American Medical Association, P.O. Box 10946, Chicago IL  60610.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Obsolete</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.CAPECC">
            <summary>17 - College of American Pathologists Electronic Cancer Checklist
            <para>Source:Each code in this system represents a single line in a database template for the College of American Pathologists Electronic Cancer Checklist (CAP eCC).  Each line and its code corresponds to either a question or an answer selection.  The code is in a decimal format of #########.#########, where each "#" is an optional number.  The nine digits to the right of the Ckey decimal point make up a namespace identifier, which is specific to the center that created the database entries for the checklist line items with their unique Ckey values.   The namespace identifier for SNOMED Terminology Solutions at the College of American Pathologists is 1000043.  All Ckey values in the 2008 release use namespace 1000043.  The digits to the left of the decimal point are a locally assigned sequential key for the ChecklistTemplateItems table in the local CAP eCC database.  These codes are used to specify questions and answers selected in a CAP eCC template for transmission in an HL7 message, as defined by the NAACCR Pathology Workgroup and the CDC/NPCR Reporting Pathology Protocols II (RPP II) project. SNOMED Terminology Solutions, College of American Pathologists, 325 Waukegan Road, Northfield, Illinois, 60093, snomedsolutions@cap.org</para>
            <para>Category:Specific, Non-drug code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.CAS">
            <summary>18 - Chemical abstract codes
            <para>Source:These include unique codes for each unique chemical, including all generic drugs. The codes do not distinguish among different dosing forms. When multiple equivalent CAS numbers exist, use the first one listed in USAN. USAN 1990 and the USP dictionary of drug names, William M. Heller, Ph.D., Executive Editor, United States Pharmacopeial Convention, Inc., 12601 Twinbrook Parkway, Rockville, MD 20852.</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.CCC">
            <summary>19 - Clinical Care Classification system
            <para>Source:Clinical Care Classification System (formerly Home Health Care Classification system) codes. The Clinical Care Classification (CCC) consists of two terminologies: CCC of Nursing Diagnoses  and CCC of Nursing Interventions both of which are classified by 21 Care Components. Virginia Saba, EdD, RN; Georgetown University School of Nursing; Washington, DC.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.CD2">
            <summary>20 - CDT-2 Codes
            <para>Source:American Dental Association’s Current Dental Terminology (CDT-2) code. American Dental Association, 211 E. Chicago Avenue,. Chicago, Illinois 60611.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.CDCA">
            <summary>21 - CDC Analyte Codes
            <para>Source:Public Health Practice Program Office, Centers for Disease Control and Prevention, 4770 Buford Highway, Atlanta, GA, 30421. Also available via FTP: ftp.cdc.gov/pub/laboratory _info/CLIA and Gopher: gopher.cdc.gov:70/11/laboratory_info/CLIA</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.CDCEDACUITY">
            <summary>22 - CDC Emergency Department Acuity
            <para>Source:Patient Acuity indicates level of care required (Acute, Chronic, Critical)</para>
            <para>Category:Public Health Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.CDCM">
            <summary>23 - CDC Methods/Instruments Codes
            <para>Source:Public Health Practice Program Office, Centers for Disease Control and Prevention, 4770 Buford Highway, Atlanta, GA, 30421. Also available via FTP</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.CDCNHSN">
            <summary>24 - CDC National Healthcare Safety Network Codes
            <para>Source:A set of patient safety and healthcare personnel safety vocabulary concepts and associated identifiers maintained as a code system by the CDC's National Healthcare Safety Network.</para>
            <para>Category:General Codes</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.CDCOBS">
            <summary>25 - CDC BioSense RT observations (Census) - CDC
            <para>Source:List of BioSense RT observations (Clinical) used in OBX-3 like Temperature, Bloodpressure and Census related observations.</para>
            <para>Category:Public Health Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.CDCPHINVS">
            <summary>26 - CDC PHIN Vocabulary Coding System
            <para>Source:CDC Public Health Information Network Vocabulary Service (PHIN VS) coding system concepts are used when the public health concepts are not available in the Standard Development Organization(SDO) Vocabulary like SNOMED CT, LOINC, ICD-9, etc.. The concepts in this coding system will be mapped to SDO Vocabulary when it is available.</para>
            <para>Category:Public Health Code</para>
            <para>Status:New</para></summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:EhrLaboratories.HL70369.CDCREC" -->
        <member name="F:EhrLaboratories.HL70369.CDS">
            <summary>28 - CDC Surveillance
            <para>Source:CDC Surveillance Codes. For data unique to specific public health surveillance requirements. Epidemiology Program Office, Centers for Disease Control and Prevention, 1600 Clifton Rd, Atlanta, GA, 30333. (404) 639-3661.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.CE">
            <summary>29 - CEN ECG diagnostic codes (Obsolete)
            <para>Source:CEN ECG diagnostic codes – (Obsolete, retained for backwards compatibility only.  See the entry for the MDC coding system.)</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Obsolete</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.CLP">
            <summary>30 - CLIP
            <para>Source:Codes for radiology reports.  Simon Leeming, Beth Israel Hospital, Boston MA.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.CPTM">
            <summary>31 - CPT Modifier Code
            <para>Source:Available for the AMA at the address listed for CPT above. These codes are found in Appendix A of CPT 2000 Standard Edition. (CPT 2000 Standard Edition, American Medical Association, Chicago, IL).</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.CST">
            <summary>32 - COSTART
            <para>Source:International coding system for adverse drug reactions. In the USA, maintained by the FDA, Rockville, MD.</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.CVX">
            <summary>33 - CDC Vaccine Codes
            <para>Source:National Immunization Program, Centers for Disease Control and Prevention, 1660 Clifton Road, Atlanta, GA, 30333</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.DCM">
            <summary>34 - DICOM Controlled Terminology
            <para>Source:Codes defined in DICOM Content Mapping Resource. Digital Imaging and Communications in Medicine (DICOM). NEMA Publication PS-3.16 National Electrical Manufacturers Association (NEMA). Rosslyn, VA, 22209. Available at:</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.E">
            <summary>35 - EUCLIDES
            <para>Source:Available from Euclides Foundation International nv, Excelsiorlaan 4A, B-1930 Zaventem, Belgium; Phone: 32 2 720 90 60.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.E5">
            <summary>36 - Euclides  quantity codes
            <para>Source:Available from Euclides Foundation International nv (see above)</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.E6">
            <summary>37 - Euclides Lab method codes
            <para>Source:Available from Euclides Foundation International nv, Excelsiorlaan 4A, B-1930 Zaventem, Belgium; Phone: 32 2 720 90 60.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.E7">
            <summary>38 - Euclides Lab equipment codes
            <para>Source:Available from Euclides Foundation International nv (see above)</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.EDLEVEL">
            <summary>39 - Education Level
            <para>Source:For use in v2.x systems interoperating with V3 systems.  Identical to the code system 2.16.840.1.113883.5.1077 EducationLevel in the Version 3 vocabulary.</para>
            <para>Category:General Codes</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ENTITYCODE">
            <summary>40 - Entity Code
            <para>Source:For use in v2.x systems interoperating with V3 systems.  Identical to the code system 2.16.840.1.113883.5.1060 EntityCode in the Version 3 vocabulary.</para>
            <para>Category:General Codes</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ENTITYHDLG">
            <summary>41 - Entity Handling Code
            <para>Source:For use in v2.x systems interoperating with V3 systems.  Identical to the code system 2.16.840.1.113883.5.42 EntityHandling in the Version 3 vocabulary.</para>
            <para>Category:General Codes</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ENZC">
            <summary>42 - Enzyme Codes
            <para>Source:Enzyme Committee of the International Union of Biochemistry and Molecular Biology. Enzyme Nomenclature: Recommendations on the Nomenclature and Classification of Enzyme-Catalysed Reactions. London: Academic Press, 1992.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.EPASRS">
            <summary>43 - EPA SRS
            <para>Source:Subset of EPA SRS listing chemicals that are present in ECOTOX, STORET and TRI.</para>
            <para>Category:Non-Drug Chemical Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.FDAUNII">
            <summary>44 - Unique Ingredient Identifier (UNII)
            <para>Source:The Unique Ingredient Identifier (UNII) generated from the FDA Substance Registration System (SRS).</para>
            <para>Category:Drug Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.FDDC">
            <summary>45 - First DataBank Drug Codes
            <para>Source:National Drug Data File. Proprietary product of First DataBank, Inc. (800) 633-3453, or http://www.firstdatabank.com.</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.FDDX">
            <summary>46 - First DataBank Diagnostic Codes
            <para>Source:Used for drug-diagnosis interaction checking. Proprietary product of First DataBank, Inc. As above for FDDC.</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:EhrLaboratories.HL70369.FDK" -->
        <member name="F:EhrLaboratories.HL70369.FIPS5_2">
            <summary>48 - FIPS 5-2 (State)
            <para>Source:Codes for the Identification of the States, the District of Columbia and the Outlying Areas of the United States, and Associated Areas.</para>
            <para>Category:Demographic Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.FIPS6_4">
            <summary>49 - FIPS 6-4 (County)
            <para>Source:Federal Information Processing Standard (FIPS) 6-4 provides the names and codes that represent the counties and other entities treated as equivalent legal and/or statistical subdivisions of the 50 States, the District of Columbia, and the possessions and freely associated areas of the United States.</para>
            <para>Category:Demographic Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.GDRG2004">
            <summary>50 - G-DRG German DRG Codes v 2004
            <para>Source:German Handbook for DRGs. The THREE versions, "2004" , "2005" and "2006" are active</para>
            <para>Category:</para>
            <para>Status:Obsolete</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.GDRG2005">
            <summary>51 - G-DRG German DRG Codes v 2005
            <para>Source:German Handbook for DRGs. The THREE versions, "2004" , "2005" and "2006" are active</para>
            <para>Category:</para>
            <para>Status:Obsolete</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.GDRG2006">
            <summary>52 - G-DRG German DRG Codes v 2006
            <para>Source:German Handbook for DRGs. The THREE versions, "2004" , "2005" and "2006" are active</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.GDRG2007">
            <summary>53 - G-DRG German DRG Codes v2007
            <para>Source:German Handbook for DRGs 2007.</para>
            <para>Category:</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.GDRG2008">
            <summary>54 - G-DRG German DRG Codes v2008
            <para>Source:German Handbook for DRGs 2008.</para>
            <para>Category:</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.GDRG2009">
            <summary>55 - G-DRG German DRG Codes v2008
            <para>Source:German Handbook for DRGs 2009.</para>
            <para>Category:</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.GMDC2004">
            <summary>56 - German Major Diagnostic Codes v 1004
            <para>Source:German Major Diagnostic Codes version "2004"</para>
            <para>Category:</para>
            <para>Status:Obsolete</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.GMDC2005">
            <summary>57 - German Major Diagnostic Codes v2005
            <para>Source:</para>
            <para>Category:</para>
            <para>Status:Obsolete</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.GMDC2006">
            <summary>58 - German Major v2006 Diagnostic Codes
            <para>Source:</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.GMDC2007">
            <summary>59 - German Major Diagnostic Codes v2007
            <para>Source:German Major Diagnostic Codes 2007.</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.GMDC2008">
            <summary>60 - German Major Diagnostic Codes v2008
            <para>Source:German Major Diagnostic Codes v2008.</para>
            <para>Category:</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.HB">
            <summary>61 - HIBCC
            <para>Source:Health Industry Business Communications Council, 5110 N. 40th St., Ste 120, Phoenix, AZ 85018.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.HCPCS">
            <summary>62 - CMS (formerly HCFA)  Common Procedure Coding System
            <para>Source:HCPCS: contains codes for medical equipment, injectable drugs, transportation services, and other services not found in CPT4. http://www.cms.hhs.gov/MedHCPCSGenInfo/</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.HCPT">
            <summary>63 - Health Care Provider Taxonomy
            <para>Source:Formerly the responsibility of Workgroup 15 (Provider Information) within ANSI ASC X12N, all maintenance is now done by NUCC (turned over in 2001).   Primary distribution is the responsibility of Washington Publishing Company, through its World Wide Web Site http://www.wpc-edi.com.  Requests for new codes or changes may be  done through the same website.  For further information, NUCC may be contacted at: Stephanie Moncada, NUCC Secretary American Medical Association 515 N. State St. Chicago, IL 60610 Email: stephanie.moncada@ama-assn.org</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Updated</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.HHC">
            <summary>64 - Home Health Care
            <para>Source:Home Health Care Classification System; Virginia Saba, EdD, RN; Georgetown University School of Nursing; Washington, DC. Superceded by 'CCC' (see above); this entry is retained for backward-compatibility.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.HI">
            <summary>65 - Health Outcomes
            <para>Source:Health Outcomes Institute codes for outcome variables available (with responses) from Stratis Health (formerly Foundation for Health Care Evaluation and Health Outcomes Institute), 2901 Metro Drive, Suite 400, Bloomington, MN, 55425-1525; (612) 854-3306 (voice); (612) 853-8503 (fax); dziegen@winternet.com. See examples in the Implementation Guide.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.HL7nnnn">
            <summary>66 - HL7 Defined Codes where nnnn is the HL7 table number
            <para>Source:Health Level Seven where nnnn is the HL7 table number.   Comment pending from INM.</para>
            <para>Category:General code</para>
            <para>Status:Obsolete</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.HOT">
            <summary>67 - Japanese Nationwide Medicine Code
            <para>Source:</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.HPC">
            <summary>68 - CMS (formerly HCFA )Procedure Codes (HCPCS)
            <para>Source:Health Care Financing Administration (HCFA) Common Procedure Coding System (HCPCS) including modifiers.[1]</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.HSLOC">
            <summary>69 - Healthcare Service Location
            <para>Source:A comprehensive classification of locations and settings where healthcare services are provided. This code system is based on the NHSN location code system that has been developed over a number of years through CDC's interaction with a variety of healthcare facilities and is intended to serve a variety of reporting needs where coding of healthcare service locations is required.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.I10">
            <summary>70 - ICD-10
            <para>Source:World Health Publications, Albany, NY.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.I10C">
            <summary>71 - International Classification of Diseases, 10th  Revision, Clinical Modification (ICD-10-CM)
            <para>Source:ICD-10-CM is a clinical modification of the International Statistical Classification of Diseases and Related Health Problems, 10th revision (ICD-10) published by the United States for reporting diagnosis in morbidity settings. Additional information is available at: http://www.cdc.gov/nchs/icd/icd10cm.htm.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.I10G2004">
            <summary>72 - ICD 10 Germany 2004
            <para>Source:Three code sets exist I10G2004, I10G2005, I10G2006</para>
            <para>Category:</para>
            <para>Status:Obsolete</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.I10G2005">
            <summary>73 - ICD 10 Germany 2005
            <para>Source:Three code sets exist I10G2004</para>
            <para>Category:</para>
            <para>Status:Obsolete</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.I10G2006">
            <summary>74 - ICD 10 Germany 2006
            <para>Source:Three code sets exist I10G2004</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.I10P">
            <summary>75 - International Classification of Diseases, 10th  Revision, Procedure Coding System (ICD-10-PCS)
            <para>Source:ICD-10-PCS is a procedure classification published by the United States for classifying procedures performed in hospital inpatient health care settings. Additional information is available at: http://www.cms.gov/Medicare/Coding/ICD10/2013-ICD-10-PCS-GEMs.html.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.I9">
            <summary>76 - ICD9
            <para>Source:World Health Publications, Albany, NY.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.I9C">
            <summary>77 - International Classification of Diseases, 9th  Revision, Clinical Modification (ICD-9-CM)
            <para>Source:ICD-9-CM is a clinical modification of the World Health Organization's 9th Revision, International Classification of Diseases (ICD-9). ICD-9-CM is the official system of assigning codes to diagnoses and procedures associated with healthcare utilization in the United States. Additional information is available at: http://www.cms.hhs.gov/ICD9ProviderDiagnosticCodes/08_ICD10.asp.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.I9CDX">
            <summary>78 - ICD-9CM Diagnosis codes
            <para>Source:Indicates codes from ICD-9-CM drawn from Volumes 1 and 2, which cover diagnosis codes only.</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.I9CP">
            <summary>79 - ICD-9CM Procedure codes
            <para>Source:Indicates codes from ICD-9-CM drawn from Volume 3, which covers procedure codes only.</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.IBT">
            <summary>80 - ISBT
            <para>Source:Retained for backward compatibility only as of v 2.5. This code value has been superceded by the individual codes IBTnnnn (where nnnn identifies a specific table in ISBT 128).  Tables commencing with IBT are used in transfusion/transplantation and maintained by ICCBBA, PO Box 11309, San Bernardino, CA</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Obsolete</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.IBT0001">
            <summary>81 - ISBT 128 Standard transfusion/transplantation data items
            <para>Source:ISBT 128 Standard data items used in transfusion/transplantation and maintained by ICCBBA, PO Box 11309, San Bernardino, CA</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.IC2">
            <summary>82 - ICHPPC-2
            <para>Source:International Classification of Health Problems in Primary Care, Classification Committee of World Organization of National Colleges, Academies and Academic Associations of General Practitioners (WONCA), 3rd edition. An adaptation of ICD9 intended for use in General Medicine, Oxford University Press.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ICD10AM">
            <summary>83 - ICD-10 Australian modification
            <para>Source:</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ICD10CA">
            <summary>84 - ICD-10 Canada
            <para>Source:</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ICD10GM2007">
            <summary>85 - ICD 10 Germany v2007
            <para>Source:ICD German modification for 2007.</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ICD10GM2008">
            <summary>86 - ICD 10 Germany v2008
            <para>Source:ICD German modification for 2008.</para>
            <para>Category:</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ICD10GM2009">
            <summary>87 - ICD 10 Germany v2009
            <para>Source:ICD German modification for 2009.</para>
            <para>Category:</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ICDO">
            <summary>88 - International Classification of Diseases for Oncology
            <para>Source:International Classification of Diseases for Oncology, 2nd Edition. World Health Organization: Geneva, Switzerland, 1990. Order from: College of American Pathologists, 325 Waukegan Road, Northfield, IL, 60093-2750. (847) 446-8800.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ICDO2">
            <summary>89 - International Classification of Disease for Oncology Second Edition
            <para>Source:Percy C, VanHolten V, and Muir C, editors. International Classification of Diseases for Oncology. Second Edition. Geneva: World Health Organization; 1990.  The ICD-9 neoplasm structure did not include morphology and there was a growing interest by physicians to establish a coding system for morphology.  ICD-O is used in cancer registries (and other related areas) for coding the topography (site) and morphology of a neoplasm. The topography code uses similar categories as ICD-10 for malignant neoplasms allowing greater specificity for the site of non-malignant neoplasms than in ICD-10.  The topography code consists of an alphabetic character (the letter C) followed by two numeric digits, a decimal point, and a numeric digit. The morphology code consists of a 6-digit numeric code which consists of three parts: histologic type (4-digit), behavior code (1-digit), and grading or differentiation (1-digit). ICD-O-2 is used for tumors diagnosed prior to 2001.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ICDO3">
            <summary>90 - International Classification of Disease for Oncology Third Edition
            <para>Source:Fritz A, Percy C, Jack A, Shanmugaratnam K, Sobin L, Parkin D, et al, editors. International Classification of Diseases for Oncology. Third Edition. Geneva: World Health Organization; 2000. The ICD-9 neoplasm structure did not include morphology and there was a growing interest by physicians to establish a coding system for morphology.  ICD-O is used in cancer registries (and other related areas) for coding the topography (site) and morphology of a neoplasm. The topography code uses similar categories as ICD-10 for malignant neoplasms allowing greater specificity for the site of non-malignant neoplasms than in ICD-10.  The topography code consists of an alphabetic character (the letter C) followed by two numeric digits, a decimal point, and a numeric digit. The morphology code consists of a 6-digit numeric code which consists of three parts: histologic type, behavior code, and grading or differentiation. In the third edition the morphology codes were revised, especially for leukemias and lymphomas. ICD-O-3 is used for tumors diagnosed in 2001 and later.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ICF">
            <summary>91 - International Classification of Functioning, Disability and Health (ICF)
            <para>Source:ICF is a classification of those characteristics of health involving functional impairments, activity limitations, or participation restrictions that are often associated with disability. The ICF classification complements the World Health Organization's (WHO) International Classification of Diseases-10th Revision (ICD), which contains information on diagnosis and health condition, but not on functional status. The ICD and ICF constitute the core classifications in the WHO Family of International Classifications (WHO-FIC). Additional information is available at: http://www.cdc.gov/nchs/icd/icf.htm.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ICS">
            <summary>92 - ICCS
            <para>Source:Commission on Professional and Hospital Activities, 1968 Green Road, Ann Arbor, MI 48105.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ICSD">
            <summary>93 - International Classification of Sleep Disorders
            <para>Source:International Classification of Sleep Disorders Diagnostic and Coding Manual, 1990, available from American Sleep Disorders Association, 604 Second Street SW, Rochester, MN  55902</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ISO_">
            <summary>94 - ISO 2955.83 (units of measure) with HL7 extensions. Actual value is ISO+, but enumerations cannot contain special characters.
            <para>Source:See chapter 7, section 7.4.2.6</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ISO3166_1">
            <summary>95 - ISO 3166-1 Country Codes
            <para>Source:International Standards Organization standard 3166 contains 3 parts.  Part 1 contains three tables for codes for countries of the world.  These are 2-character alphabetic, 3-character alphabetic, and numeric codes.</para>
            <para>Category:Demographics</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ISO3166_2">
            <summary>96 - ISO 3166-2 Country subdivisions
            <para>Source:International Standards Organization standard 3166 contains 3 parts.  Part 2 contains a complete breakdown into a relevant level of administrative subdivisions of all countries listed in ISO 3166-1. The code elements used consist of the alpha-2 code element from ISO 3166-1 followed by a separator and a further string of up to three alphanumeric characters e. g. DK-025 for the Danish county Roskilde.</para>
            <para>Category:Demographics</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ISO4217">
            <summary>97 - ISO4217 Currency Codes
            <para>Source:ISO's currency codes, which are based on the ISO country codes are published in the standard ISO 4217:2008 Codes for the representation of currencies and funds.  This International Standard specifies the structure for a three-letter alphabetic code and an equivalent three-digit numeric code for the representation of currencies and funds. For those currencies having minor units, it also shows the decimal relationship between such units and the currency itself.</para>
            <para>Category:Financial</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ISO639">
            <summary>98 - ISO 639 Language
            <para>Source:International Standards Organization codes for the representation of names of languages.  ISO 639 provides two sets of language codes, one as a two-character code set (639-1) and another as a three-character code set (639-2) for the representation of names of languages.  ISO 639-3, Codes for the representation of names of languages - Part 3: Alpha-3 code for comprehensive coverage of languages, is a code list that aims to define three-letter identifiers for all known human languages.</para>
            <para>Category:Demographics</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ISOnnnn">
            <summary>99 - ISO Defined Codes where nnnn is the ISO table number. (deprecated)
            <para>Source:International Standards Organization tables.  This has been deprecated since the ISO numbered standards are not the same as tables, and there are no "ISO table numbers".  Some standards contains tables of values, and some contain more than one table.  In the future, specific tables of values drawn from ISO standards will have explicit entries here in table 0396.  Use the specific entries for identified tables instead of this one.</para>
            <para>Category:General code</para>
            <para>Status:Obsolete</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ITIS">
            <summary>100 - Integrated Taxonomic Information System
            <para>Source:This is a taxonomic hierarchy for living organisms.</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.IUPC">
            <summary>101 - IUPAC/IFCC Component Codes
            <para>Source:Codes used by IUPAC/IFF to identify the component (analyte) measured. Contact Henrik Olesen, as above for IUPP.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.IUPP">
            <summary>102 - IUPAC/IFCC Property Codes
            <para>Source:International Union of Pure and Applied Chemistry/International Federation of Clinical Chemistry. The Silver Book: Compendium of terminology and nomenclature of properties in clinical laboratory sciences. Oxford: Blackwell Scientific Publishers, 1995. Henrik Olesen, M.D., D.M.Sc., Chairperson, Department of Clinical Chemistry, KK76.4.2, Rigshospitalet, University Hospital of Copenhagen, DK-2200, Copenhagen. http://inet.uni-c.dk/~qukb7642/</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:EhrLaboratories.HL70369.JC10" -->
        <member name="F:EhrLaboratories.HL70369.JC8">
            <summary>104 - Japanese Chemistry
            <para>Source:Clinical examination classification code. Japan Association of Clinical Pathology. Version 8, 1990. A multiaxial code  including a subject code (e.g., Rubella = 5f395, identification code (e.g., virus ab IGG), a specimen code (e.g., serum =023) and a method code (e.g., ELISA = 022)</para>
            <para>Category:withdrawn</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.JJ1017">
            <summary>105 - Japanese Image Examination Cache
            <para>Source:</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.LANGUAL">
            <summary>106 - LanguaL
            <para>Source:LanguaL stands for "Langua aLimentaria" or "language of food"  LanguaL is a multilingual thesaural system using facetted classification about food.  Terms reprented in PHIN VADS will be limited to the English language version.</para>
            <para>Category:Food Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.LB">
            <summary>107 - Local billing code
            <para>Source:Local billing codes/names (with extensions if needed).</para>
            <para>Category:General code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.LN">
            <summary>108 - Logical Observation Identifier Names and Codes (LOINC®)
            <para>Source:Logical Observation Identifiers Names and Codes (LOINC®) provides a set of universal codes and names for identifying laboratory and other clinical observations. One of the main goals of LOINC is to facilitate the exchange and pooling of results for clinical care, outcomes management, and research. LOINC was initiated by Regenstrief Institute research scientists who continue to develop it with the collaboration of the LOINC Committee. The LOINC table, LOINC codes, and LOINC panels and forms file are copyright © 1995-2011, Regenstrief Institute, Inc. and the LOINC Committee and available at no cost (http://loinc.org) under the license at http://loinc.org/terms-of-use. The laboratory portion of the LOINC database contains the usual clinical laboratory categories of chemistry, hematology, serology, microbiology (including parasitology and virology), toxicology; as well as categories for drugs and the cell counts, antibiotic susceptibilities, and more. The clinical portion of the LOINC database includes entries for vital signs, hemodynamics, intake/output, EKG, obstetric ultrasound, cardiac echo, radiology report titles, pulmonary ventilator management, document and section titles, patient assessment instruments (e.g. Glascow Coma Score, PHQ-9 depression scale, CMS-required patient assessment instruments), and other clinical observations.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.MCD">
            <summary>109 - Medicaid
            <para>Source:Medicaid billing codes/names.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.MCR">
            <summary>110 - Medicare
            <para>Source:Medicare billing codes/names.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.MDC">
            <summary>111 - Medical Device Communication
            <para>Source:EN ISO/IEEE 11073-10101 Health informatics – Point-of-care medical device communication - Nomenclature</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.MDDX">
            <summary>112 - Medispan Diagnostic Codes
            <para>Source:Codes Used for drug-diagnosis interaction checking. Proprietary product. Hierarchical drug codes for identifying drugs down to manufacturer and pill size. MediSpan, Inc., 8425 Woodfield Crossing Boulevard, Indianapolis, IN 46240. Tel: (800) 428-4495. URL: http://www.medispan.com/Products/index.aspx?cat=1. As above for MGPI.</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.MEDC">
            <summary>113 - Medical Economics Drug Codes
            <para>Source:Proprietary Codes for identifying drugs. Proprietary product of Medical Economics Data, Inc. (800) 223-0581.</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.MEDIATYPE">
            <summary>114 - MIME Media Type IANA
            <para>Source:Encoding as defined by MIME (Multipurpose Internet Mail Extensions)</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.MEDR">
            <summary>115 - Medical Dictionary for Drug Regulatory Affairs (MEDDRA)
            <para>Source:Patrick Revelle, Director MSSO 12011 Sunset Hills Road, VAR1/7B52 Reston, VA 20190 Patrick.Revelle@ngc.com http://www.meddramsso.com/MSSOWeb/index.htm</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.MEDX">
            <summary>116 - Medical Economics Diagnostic Codes
            <para>Source:Used for drug-diagnosis interaction checking. Proprietary product of Medical Economics Data, Inc. (800) 223-0581.</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.MGPI">
            <summary>117 - Medispan GPI
            <para>Source:Medispan hierarchical drug codes for identifying drugs down to manufacturer and pill size. Proprietary product of MediSpan, Inc., 8425 Woodfield Crossing Boulevard, Indianapolis, IN 46240. Tel: (800) 428-4495.</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.MVX">
            <summary>118 - CDC Vaccine Manufacturer Codes
            <para>Source:As above, for CVX</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NAICS">
            <summary>119 - Industry (NAICS)
            <para>Source:The North American Industry Classification System (NAICS) consists of a set of six digit codes that classify and categorize industries.  It also organizes the categories on a production/process-oriented basis.  This new, uniform, industry-wide classification system has been designed as the index for statistical reporting of all economic activities of the U.S., Canada, and Mexico. Mapping is available between SIC 1987 and NAICS 2002 codes at U.S. Census Bureau website. Mapping is also available between NAICS 2002 and NAICS 2007 at U.S. Census Bureau website</para>
            <para>Category:Demographic Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NCPDPnnnnsss">
            <summary>120 - NCPDP code list for data element nnnn [as used in segment sss]
            <para>Source:NCPDP maintain code list associated with the specified Data Element (nnnn) and Segment (sss).  The Segment portion is optional if there is no specialization of the Data Element codes between segments.  Examples:   NCPDP1131RES = code set defined for NCPDP data element 1131 as used in the RES segment (Code List Qualifier – Response Code)   NCPDP1131STS = code set defined for NCPDP data element 1131 as used in the STS segment (Code List Qualifier – Reject Code)   NCPDP9701 = code set defined for NCPDP data element 9701 (Individual Relationship, Coded).  No specialization to a segment exists for this data element. National Council for Prescription Drug Programs, 924Ø East Raintree Drive, Scottsdale, AZ  8526Ø. Phone: (48Ø) 477-1ØØØ Fax: (48Ø) 767-1Ø42 e-mail: ncpdp@ncpdp.org www.ncpdp.org</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NDA">
            <summary>121 - NANDA
            <para>Source:North American Nursing Diagnosis Association, Philadelphia, PA.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NDC">
            <summary>122 - National drug codes
            <para>Source:These provide unique codes for each distinct drug, dosing form, manufacturer, and packaging. (Available from the National Drug Code Directory, FDA, Rockville, MD, and other sources.)</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NDFRT">
            <summary>123 - NDF-RT (Drug Classification)
            <para>Source:The National Drug File RT (NDF-RT) is published by the US Veterans' Administration (VA). NDF-RT covers clinical drugs used at the VA. The NCI version of NDF-RT is used by NCI to provide automated terminology access to the Food and Drug Administration (FDA) Structured Product Label (SPL) initiative.</para>
            <para>Category:Drug Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NIC">
            <summary>124 - Nursing Interventions Classification
            <para>Source:Iowa Intervention Project, College of Nursing, University of Iowa, Iowa City, Iowa</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NIP001">
            <summary>125 - Source of Information (Immunization)
            <para>Source:CDC National Immunization Program's (NIP) defined table to be used in HL7 2.x message RXA-9 for documenting the source of information regarding immunization. E.g. From school, provider,public health agency.</para>
            <para>Category:Public Health Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NIP002">
            <summary>126 - Substance refusal reason
            <para>Source:CDC National Immunization Program's (NIP) defined table to be used in HL7 2.x message RXA-18 for substance refusal reason (reasons for not having vaccination). E.g. Religious exemption, parental decision</para>
            <para>Category:Public Health Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NIP004">
            <summary>127 - Vaccination - Contraindications, Precautions, and Immunities
            <para>Source:CDC National Immunization Program's (NIP) defined table for vaccine contraindications and precautions. E.g. Allergy to egg ingestion, thimerosol</para>
            <para>Category:Public Health Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NIP007">
            <summary>128 - Vaccinated at location (facility)
            <para>Source:CDC National Immunization Program's (NIP) defined table for vaccinated at location (facility). E.g.  Private doctor's office, Public Health Clinic</para>
            <para>Category:Public Health Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NIP008">
            <summary>129 - Vaccine purchased with (Type of funding)
            <para>Source:CDC National Immunization Program's (NIP) defined table enumerates the type of funds used for purchasing vaccine. E.g. Public funds, Military funds</para>
            <para>Category:Public Health Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NIP009">
            <summary>130 - Reported adverse event previously
            <para>Source:CDC National Immunization Program's (NIP) defined table enumerates the authorities to whom the vaccination related adverse events were previously reported. E.g. To health department, To manufacturer</para>
            <para>Category:Public Health Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NIP010">
            <summary>131 - VAERS Report type
            <para>Source:CDC National Immunization Program's (NIP) defined table enumerates the type of report used in VAERS (Vaccination Adverse Event Reporting System). E.g. Initial, Follow-up</para>
            <para>Category:Public Health Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NND">
            <summary>132 - Notifiable Event (Disease/Condition) Code List
            <para>Source:List of notifiable events, which includes infectious and non-infectious disease or conditions. This list includes events that are notifiable at the state and national level.</para>
            <para>Category:Public Health Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NPI">
            <summary>133 - National Provider Identifier
            <para>Source:Health Care Finance Administration, US Dept. of Health and Human Services, 7500 Security Blvd., Baltimore, MD 21244.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NUBC">
            <summary>134 - National Uniform Billing Committee Code
            <para>Source:http://www.nubc.org/</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.NULLFL">
            <summary>135 - Flavors of NULL
            <para>Source:System of coded values for Flavors of Null, as used in HL7 Version 3 standards.  Identical to the HL7 version 3  coding system 2.16.840.1.113883.5.1008 NullFlavor</para>
            <para>Category:General Codes</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.O301">
            <summary>136 - German Procedure Codes
            <para>Source:Source: OPS Operationen- und Prozedurenschlussel. Three versions are active.</para>
            <para>Category:</para>
            <para>Status:Obsolete</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.O3012004">
            <summary>137 - OPS Germany 2004
            <para>Source:Source: OPS Operationen- und Prozedurenschlussel. Three versions are active</para>
            <para>Category:</para>
            <para>Status:Obsolete</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.O3012005">
            <summary>138 - OPS Germany 2005
            <para>Source:Source: OPS Operationen- und Prozedurenschlussel. Three versions are active</para>
            <para>Category:</para>
            <para>Status:Obsolete</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.O3012006">
            <summary>139 - Ops Germany 2006
            <para>Source:Source: OPS Operationen- und Prozedurenschlussel. Three versions are active</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.OBSMETHOD">
            <summary>140 - Observation Method Code
            <para>Source:For use in v2.x systems interoperating with V3 systems.  Identical to the code system 2.16.840.1.113883.5.84 ObservationMethod in the Version 3 vocabulary.</para>
            <para>Category:General Codes</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.OHA">
            <summary>141 - Omaha System
            <para>Source:Omaha Visiting Nurse Association, Omaha, NB.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.OPS2007">
            <summary>142 - OPS Germany v2007
            <para>Source:Source: OPS Operationen- und Prozedurenschlussel 2007.</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.OPS2008">
            <summary>143 - OPS Germany v2008
            <para>Source:Source: OPS Operationen- und Prozedurenschlussel 2008.</para>
            <para>Category:</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.OPS2009">
            <summary>144 - OPS Germany v2008
            <para>Source:Source: OPS Operationen- und Prozedurenschlussel 2009.</para>
            <para>Category:</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.PHINQUESTION">
            <summary>145 - CDC Public Health Information Network (PHIN) Question
            <para>Source:CDC Public Health Questions used in HL7 Message as observation identifiers. These question or observation identifiers are used in CDC's message implementation guides and will be passed in HL7 OBX-3 or Observation.Code</para>
            <para>Category:Public Health Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.PLR">
            <summary>146 - CDC PHLIP Lab result codes that are not covered in SNOMED at the time of this implementation
            <para>Source:APHL CDC co-sponsored PHLIP</para>
            <para>Category:Lab Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.PLT">
            <summary>147 - CDC PHLIP Lab test codes, where LOINC concept is too broad or not yet available, especially as needed for ordering and or lab to lab reporting )
            <para>Source:APHL CDC co-sponsored PHLIP</para>
            <para>Category:Lab Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.POS">
            <summary>148 - POS Codes
            <para>Source:HCFA Place of Service Codes for Professional Claims (see http://www.cms.hhs.gov/PlaceofServiceCodes/).</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.PRTCPTNMODE">
            <summary>149 - Paticipation Mode Code
            <para>Source:For use in v2.x systems interoperating with V3 systems.  Identical to the code system 2.16.840.1.113883.5.1064 ParticipationMode in the Version 3 vocabulary.</para>
            <para>Category:General Codes</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.RC">
            <summary>150 - Read Classification
            <para>Source:The Read Clinical Classification of Medicine, Park View Surgery, 26 Leicester Rd., Loughborough LE11 2AG (includes drug procedure and other codes, as well as diagnostic codes).</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ROLECLASS">
            <summary>151 - Used initially for contact roles.
            <para>Source:For use in v2.x systems interoperating with V3 systems.  Identical to the code system 2.16.840.1.113883.5.111 RoleCode in the Version 3 vocabulary.</para>
            <para>Category:General Codes</para>
            <para>Status:new</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.ROLECODE">
            <summary>152 - Participation Mode
            <para>Source:For use in v2.x systems interoperating with V3 systems.  Identical to the code system 2.16.840.1.113883.5.111 RoleCode in the Version 3 vocabulary.</para>
            <para>Category:General Codes</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.RSPMODE">
            <summary>153 - Specifies the mode, immediate versus deferred or queued, by which a receiver should communicate its receiver responsibilities.
            <para>Source:V3 coding system, available in RIM download materials.</para>
            <para>Category:General Codes</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.RXNORM">
            <summary>154 - RxNorm
            <para>Source:RxNorm provides standard names for clinical drugs (active ingredient + strength + dose form) and for dose forms as administered to a patient. It provides links from clinical drugs, both branded and generic, to their active ingredients, drug components (active ingredient + strength), and related brand names. NDCs (National Drug Codes) for specific drug products (where there are often many NDC codes for a single product) are linked to that product in RxNorm. RxNorm links its names to many of the drug vocabularies commonly used in pharmacy management and drug interaction software, including those of First Databank, Micromedex, MediSpan, and Multum. By providing links between these vocabularies, RxNorm can mediate messages between systems not using the same software and vocabulary.RxNorm is one of a suite of designated standards for use in U.S. Federal Government systems for the electronic exchange of clinical health information.</para>
            <para>Category:Drug Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.SCT">
            <summary>155 - SNOMED Clinical Terms
            <para>Source:SNOMED-CT concept identifier codes. SNOMED International, I325 Waukegan Rd, Northfield, IL, 60093, +1 800-323-4040, mailto:snomed@cap.org  http://www.snomed.org</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.SCT2">
            <summary>156 - SNOMED Clinical Terms alphanumeric codes
            <para>Source:Used to indicate that the code value is the legacy-style SNOMED alphanumeric codes, rather than the concept identifier codes.  SNOMED International, I325 Waukegan Rd, Northfield, IL, 60093, +1 800-323-4040, mailto:snomed@cap.org  http://www.snomed.org</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.SDM">
            <summary>157 - SNOMED- DICOM Microglossary
            <para>Source:College of American Pathologists, Skokie, IL, 60077-1034. (formerly designated as 99SDM).</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.SIC">
            <summary>158 - Industry (SIC)
            <para>Source:Standard Industry Classification - 1987. Use NAICS 2002. This is mainly for mapping and backward compatibility purposes.</para>
            <para>Category:Demographic Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.SNM">
            <summary>159 - Systemized Nomenclature of Medicine (SNOMED)
            <para>Source:Systemized Nomenclature of Medicine, 2nd Edition 1984 Vols 1, 2, College of American Pathologists, Skokie, IL.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.SNM3">
            <summary>160 - SNOMED International
            <para>Source:SNOMED International, 1993 Vols 1-4, College of American Pathologists, Skokie, IL, 60077-1034.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.SNT">
            <summary>161 - SNOMED topology codes (anatomic sites)
            <para>Source:College of American Pathologists, 5202 Old Orchard Road, Skokie, IL 60077-1034.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.SOC">
            <summary>162 - Occupation (SOC 2000)
            <para>Source:The 2000 Standard Occupational Classification (SOC) system is used by Federal statistical agencies to classify workers into occupational categories for the purpose of collecting, calculating, or disseminating data.</para>
            <para>Category:Demographic Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.UB04FL14">
            <summary>163 - Priority (Type) of Visit
            <para>Source:Source: Official UB-04 Data Specification Manual, published July 2007, by the National Uniform Billing Committee (NUBC), and can be found at http://www.nubc.org. This coding system supersedes UB92 and is effective immediately (July, 2007).</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.UB04FL15">
            <summary>164 - Point of Origin 
            <para>Source:Source: Official UB-04 Data Specification Manual, published July 2007, by the National Uniform Billing Committee (NUBC), and can be found at http://www.nubc.org. This coding system supersedes UB92 and is effective immediately (July, 2007).</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.UB04FL17">
            <summary>165 - Patient Discharge Status
            <para>Source:Source: Official UB-04 Data Specification Manual, published July 2007, by the National Uniform Billing Committee (NUBC), and can be found at http://www.nubc.org. This coding system supersedes UB92 and is effective immediately (July, 2007).</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.UB04FL31">
            <summary>166 - Occurrence Code
            <para>Source:Source: Official UB-04 Data Specification Manual, published July 2007, by the National Uniform Billing Committee (NUBC), and can be found at http://www.nubc.org. This coding system supersedes UB92 and is effective immediately (July, 2007).</para>
            <para>Category:</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.UB04FL35">
            <summary>167 - Occurrence Span
            <para>Source:Source: Official UB-04 Data Specification Manual, published July 2007, by the National Uniform Billing Committee (NUBC), and can be found at http://www.nubc.org. This coding system supersedes UB92 and is effective immediately (July, 2007).</para>
            <para>Category:</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.UB04FL39">
            <summary>168 - Value Code
            <para>Source:Source: Official UB-04 Data Specification Manual, published July 2007, by the National Uniform Billing Committee (NUBC), and can be found at http://www.nubc.org. This coding system supersedes UB92 and is effective immediately (July, 2007).</para>
            <para>Category:</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.UC">
            <summary>169 - UCDS
            <para>Source:Uniform Clinical Data Systems. Ms. Michael McMullan, Office of Peer Review Health Care Finance Administration, The Meadows East Bldg., 6325 Security Blvd., Baltimore, MD 21207; (301) 966 6851.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.UCUM">
            <summary>170 - UCUM code set for units of measure(from Regenstrief)
            <para>Source:Added by motion of VOCABULARY T.C. 20060308 14-0-3</para>
            <para>Category:</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.UMD">
            <summary>171 - MDNS
            <para>Source:Universal Medical Device Nomenclature System. ECRI, 5200 Butler Pike, Plymouth Meeting, PA  19462 USA. Phone: 215-825-6000, Fax: 215-834-1275.</para>
            <para>Category:Device code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.UML">
            <summary>172 - Unified Medical Language
            <para>Source:National Library of Medicine, 8600 Rockville Pike, Bethesda, MD 20894.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.UPC">
            <summary>173 - Universal Product Code
            <para>Source:The Uniform Code Council. 8163 Old Yankee Road, Suite J, Dayton, OH  45458; (513) 435 3070</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.UPIN">
            <summary>174 - UPIN
            <para>Source:Medicare/CMS 's (formerly HCFA)  universal physician identification numbers, available from Health Care Financing Administration, U.S. Dept. of Health and Human Services, Bureau of Program Operations, 6325 Security Blvd., Meadows East Bldg., Room 300, Baltimore, MD 21207</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.USGSGNIS">
            <summary>175 - U.S. Board on Geographic Names (USGS - GNIS)
            <para>Source:List of populated places(City) from U.S. Geological Survey Geographic Name Information System (USGS GNIS)</para>
            <para>Category:Demographic Code</para>
            <para>Status:New</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.USPS">
            <summary>176 - United States Postal Service
            <para>Source:Two Letter State and Possession Abbreviations are listed in  Publication 28, Postal Addressing Standards which can be obtained from Address Information Products, National Address Information Center, 6060 Primacy Parkway, Suite 101, Memphis, Tennessee  38188-0001 Questions of comments regarding the publication should be addressed to the Office of Address and Customer Information Systems, Customer and Automation Service Department, US Postal Service, 475 Lenfant Plaza SW Rm 7801, Washington, DC  20260-5902</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.VIS">
            <summary>177 - Clinicians are required to track the Vaccine Information Sheet (VIS) that was shared with the recipient of a vaccination.  This code system contains codes that  identify the document type and the owner of the document.
            <para>Source:More information can be found at the CDC Immunization Standards page at http://www.cdc.gov/vaccines/programs/iis/default.htm.  Content may be downloaded from PHINVADS at https://phinvads.cdc.gov/vads/ViewCodeSystem.action?id=2.16.840.1.113883.6.304 and at http://www.cdc.gov/phin/activities/vocabulary.html.</para>
            <para>Category:Specific Non-Drug Code</para>
            <para>Status:active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.W1">
            <summary>178 - WHO record # drug codes (6 digit)
            <para>Source:World Health organization record number code. A unique sequential number is assigned to each unique single component drug and to each multi-component drug. Eight digits are allotted to each such code, six to identify the active agent, and 2 to identify the salt, of single content drugs. Six digits are assigned to each unique combination of drugs in a dispensing unit. The six digit code is identified by W1, the 8 digit code by W2.</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.W2">
            <summary>179 - WHO record # drug codes (8 digit)
            <para>Source:World Health organization record number code. A unique sequential number is assigned to each unique single component drug and to each multi-component drug. Eight digits are allotted to each such code, six to identify the active agent, and 2 to identify the salt, of single content drugs. Six digits are assigned to each unique combination of drugs in a dispensing unit. The six digit code is identified by W1, the 8 digit code by W2.</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.W4">
            <summary>180 - WHO record # code with ASTM extension
            <para>Source:With ASTM extensions (see Implementation Guide), the WHO codes can be used to report serum (and other) levels, patient compliance with drug usage instructions, average daily doses and more (see Appendix X1 the Implementation Guide).</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.WC">
            <summary>181 - WHO ATC
            <para>Source:WHO’s ATC codes provide a hierarchical classification of drugs by therapeutic class. They are linked to the record number codes listed above.</para>
            <para>Category:Drug code</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="F:EhrLaboratories.HL70369.X12DEnnnn">
            <summary>182 - ASC X12 Code List nnnn
            <para>Source:Code list associated with X12 Data Element nnnn.  Example::     X12DE738 – code set defined for X12 data element 738 (Measurement Qualifier) The Accredited Standards Committee (ASC) X12 www.x12.org</para>
            <para>Category:General Codes</para>
            <para>Status:Active</para></summary>
        </member>
        <member name="T:OpenDental.UI.ODGridClickEventHandler">
            <summary></summary>
        </member>
        <member name="T:OpenDental.UI.ODGrid">
            <summary>A new and improved grid control to replace the inherited ContrTable that is used so extensively in the program.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid.components">
            <summary>Required designer variable.</summary>
        </member>
        <member name="E:OpenDental.UI.ODGrid.CellDoubleClick">
            <summary></summary>
        </member>
        <member name="E:OpenDental.UI.ODGrid.CellSelectionCommitted">
            <summary></summary>
        </member>
        <member name="E:OpenDental.UI.ODGrid.CellClick">
            <summary></summary>
        </member>
        <member name="E:OpenDental.UI.ODGrid.CellTextChanged">
            <summary></summary>
        </member>
        <member name="E:OpenDental.UI.ODGrid.CellLeave">
            <summary></summary>
        </member>
        <member name="E:OpenDental.UI.ODGrid.OnSelectionCommitted">
            <summary></summary>
        </member>
        <member name="E:OpenDental.UI.ODGrid.TitleAddClick">
            <summary></summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid.GridH">
            <summary>The total height of the grid.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid.GridW">
            <summary>The total width of the grid.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid._rowHeights">
            <summary>This array has one element for each row.  For each row, it keeps track of the vertical height of the row in pixels, not counting the note portion of the row.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid.NoteHeights">
            <summary>This array has one element for each row.  For each row, it keeps track of the vertical height of only the note portion of the row in pixels.  Usually 0, unless you want notes showing.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid.RowLocs">
            <summary>(NOT used for sheet grids, use PrintRows.)  This array has one element for each row.  For each row, it keeps track of the vertical location at which to start drawing this row in pixels.  This makes it much easier to paint rows.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid.ColPos">
            <summary>Set at the very beginning of OnPaint.  Uses the ColWidth of each column to set up this array with one element for each column.  Contains the columns Pos for that column.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid.sortedByColumnIdx">
            <summary>Typically -1 to show no triangle.  Or, specify a column to show a triangle.  The actual sorting happens at mouse down.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid.sortedIsAscending">
            <summary>True to show a triangle pointing up.  False to show a triangle pointing down.  Only works if sortedByColumnIdx is not -1.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid.NoteRemaining">
            <summary>If we are part way through drawing a note when we reach the end of a page, this will contain the remainder of the note still to be printed.  If it is empty string, then we are not in the middle of a note.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid.widthHidden">
            <summary>Holds the amount of the grid that is hidden due to the user making the window too small.  We need to keep track of this so that when they resize the window the scroll bar will become visible again.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid.HasEditableColumn">
            <summary>Is set when ComputeRows is called, then used . If any columns are editable HasEditableColumn is true.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid.EDITABLE_ROW_HEIGHT">
            <summary></summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid.PrintRows">
            <summary>Currently only used for printing on sheets.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid.TopMargin">
            <summary>Used when calculating printed row positions.  Set to 0 when using in FormSheetFillEdit.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid.BottomMargin">
            <summary>Used when calculating printed row positions.  Set to 0 when using in FormSheetFillEdit.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid.YPosField">
            <summary>(Printing Only) The position on the page that this grid will print. If this is halfway down the second page, 1100px tall, this value should be 1650, not 550.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid._printHeight">
            <summary>Height of field when printing.  Set using CalculateHeights() from EndUpdate()</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid._noteLengthLimit">
            <summary>Truncates the note to this many characters.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid._threadDistinctClickEvents">
            <summary>Thread to read inputs on grid. Currently only used for mouse click logic.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid._mouseClickIdx">
            <summary>Set to -1 if no mouse down event has happened recently.  Otherwise set to the row the single click event occurred at.
            Only used for click logic.  See MouseDownRow also.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid._mouseClickCount">
            <summary>Only used for mouse click logic.</summary>
        </member>
        <member name="F:OpenDental.UI.ODGrid._dateTimeMouseClick">
            <summary>Only used for mouse click logic.  The time which the first mouse click occurred so we can determine if double clicking.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.#ctor">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.Dispose(System.Boolean)">
            <summary>Clean up any resources being used.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnLoad(System.EventArgs)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnResize(System.EventArgs)">
            <summary></summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.PrintHeight">
            <summary>Height of field when printing.  Set using CalculateHeights() from EndUpdate()</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.HasMultilineHeaders">
            <summary>Allow Headers to be multiple lines tall.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.Columns">
            <summary>Gets the collection of ODGridColumns assigned to the ODGrid control.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.Rows">
            <summary>Gets the collection of ODGridRows assigned to the ODGrid control.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.Title">
            <summary>The title of the grid which shows across the top.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.HScrollVisible">
            <summary>Set true to show a horizontal scrollbar.  Vertical scrollbar always shows, but is disabled if not needed.  If hScroll is not visible, then grid will auto reset width to match width of columns.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.ScrollToIndex(System.Int32)">
            <summary>The index of the row that is the first row displayed on the ODGrid. Also sets ScrollValue.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.ScrollToIndexBottom(System.Int32)">
            <summary>The index of the row that is the last row to be displayed on the ODGrid. Also sets ScrollValue.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.ScrollValue">
            <summary>Gets or sets the position of the vertical scrollbar.  Does all error checking and invalidates.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.SelectedIndices">
            <summary>Holds the int values of the indices of the selected rows.  To set selected indices, use SetSelected().</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.SelectedCell">
            <summary>Holds the x,y values of the selected cell if in OneCell mode.  -1,-1 represents no cell selected.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.SelectionMode">
            <summary></summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.AllowSelection">
            <summary></summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.TranslationName">
            <summary>Uniquely identifies the grid for translation to another language.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.SelectedRowColor">
            <summary>The background color that is used for selected rows.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.HeaderColor">
            <summary>The background color that is used for selected rows.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.WrapText">
            <summary>Text within each cell will wrap, making some rows taller.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.NoteSpanStart">
            <summary>The starting column for notes on each row.  Notes are not part of the main row, but are displayed on subsequent lines.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.NoteSpanStop">
            <summary>The starting column for notes on each row.  Notes are not part of the main row, but are displayed on subsequent lines.  If this remains 0, then notes will be entirey skipped for this grid.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.WidthAllColumns">
            <summary>Used when drawing to PDF. We need the width of all columns summed.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.AllowSortingByColumn">
            <summary>Set true to allow user to click on column headers to sort rows, alternating between ascending and descending.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.EditableAcceptsCR">
            <summary>Only affects grids with editable columns. True allows carriage returns within cells. Falses causes carriage returns to go to the next editable cell.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.UseBlueTheme">
            <summary>Container sets this for all grids simultaneously.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.SortedIsAscending">
            <summary>Returns current sort order.  Used to maintain current grid sorting when refreshing the grid.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGrid.SortedByColumnIdx">
            <summary>Returns current sort column index.  Used to maintain current grid sorting when refreshing the grid.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.ComputeColumns">
            <summary>Computes the position of each column and the overall width.  Called from endUpdate and also from OnPaint.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.ComputeRows(System.Drawing.Graphics,System.Boolean)">
            <summary>Called from PrintPage() and EndUpdate().  After adding rows to the grid, this calculates the height of each row because some rows may have text wrap and will take up more than one row.  Also, rows with notes, must be made much larger, because notes start on the second line.  If column images are used, rows will be enlarged to make space for the images.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.ComputePrintRows">
            <summary>Fills PrintRows with row information.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.PointToRow(System.Int32)">
            <summary>Returns row. -1 if no valid row.  Supply the y position in pixels.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.PointToCol(System.Int32)">
            <summary>Returns col.  Supply the x position in pixels. -1 if no valid column.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>Runs any time the control is invalidated.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.DrawBackG(System.Drawing.Graphics)">
            <summary>Draws a solid gray background.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.DrawRows(System.Drawing.Graphics)">
            <summary>Draws the background, lines, and text for all rows that are visible.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.DrawRow(System.Int32,System.Drawing.Graphics,System.Drawing.Font)">
            <summary>Draws background, lines, image, and text for a single row.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.DrawOutline(System.Drawing.Graphics)">
            <summary>Draws outline around entire control.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnCellDoubleClick(System.Int32,System.Int32)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnDoubleClick(System.EventArgs)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnCellClick(System.Int32,System.Int32,System.Windows.Forms.MouseButtons)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnClick(System.EventArgs)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.BeginUpdate">
            <summary>Call this before adding any rows.  You would typically call Rows.Clear after this.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.EndUpdate(System.Boolean)">
            <summary>Must be called after adding rows.  This computes the columns, computes the rows, lays out the scrollbars, clears SelectedIndices, and invalidates.  Does not zero out scrollVal.  Sometimes, it seems like scrollVal needs to be reset somehow because it's an inappropriate number, and when you first grab the scrollbar, it jumps.  No time to investigate.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.PrintRow(System.Int32,System.Drawing.Graphics,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.PrintRowX(System.Int32,PdfSharp.Drawing.XGraphics,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.PrintPage(System.Drawing.Graphics,System.Int32,System.Drawing.Rectangle,System.Int32,System.Boolean)">
            <summary>(Not used for sheet printing) If there are more pages to print, it returns -1.  If this is the last page, it returns the yPos of where the printing stopped.  Graphics will be paper, pageNumber resets some class level variables at page 0, bounds are used to contain the grid drawing, and marginTopFirstPage leaves room so as to not overwrite the title and subtitle.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.SetSelected(System.Int32,System.Boolean)">
            <summary>Throws exceptions.  Use to set a row selected or not.  Can handle values outside the acceptable range.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.SetSelectedStrict(System.Int32[])">
            <summary>Throws exceptions.  Similar to SetSelected, except will also deselect any items not specified in iArray.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.SetSelected(System.Int32[],System.Boolean)">
            <summary>Throws exceptions.  Allows setting multiple values all at once</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.SetSelected(System.Boolean)">
            <summary>Throws exceptions.  Sets all rows to specified value.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.SetSelected(System.Drawing.Point)">
            <summary>Throws exceptions.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.GetSelectedIndex">
            <summary>If one row is selected, it returns the index to that row.  If more than one row are selected, it returns the first selected row.  Really only useful for SelectionMode.One.  If no rows selected, returns -1.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.ScrollToEnd">
            <summary>Usually called after entering a new list to automatically scroll to the end.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.SortForced(System.Int32,System.Boolean)">
            <summary>Set sortedByColIdx to -1 to clear sorting. Copied from SortByColumn. No need to call fill grid after calling this.  Also used in PatientPortalManager.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.SortByColumn(System.Int32)">
            <summary>Gets run on mouse down on a column header.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnContextMenuChanged(System.EventArgs)">
            <summary>Several location throughout the program the context menu changes. This subscribes each menu to use the popup helper below.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.PopupHelper(System.Object,System.EventArgs)">
            <summary>Just prior to displaying the context menu, add wiki links if neccesary.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.removeWikiMenu">
            <summary>Removes wikiLinks from context menu.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.CreateComboBox">
            <summary>Creates combo boxes in the appropriate location of the grid so users can select and change them.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.CreateEditBox">
            <summary>When selection mode is OneCell, and user clicks in a column that isEditable, then this edit box will appear.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>The purpose of this is to allow dragging to select multiple rows.  Only makes sense if selectionMode==MultiExtended.  Doesn't matter whether ctrl is down, because that only affects the mouse down event.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnMouseEnter(System.EventArgs)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnMouseLeave(System.EventArgs)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.Parent_KeyDown(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>If the Ctrl key down is not being captured by the grid because it doesn't have focus, then this automatically handles it.  The only thing you have to do to make it work is to turn on KeyPreview for the parent form.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.Parent_KeyUp(System.Object,System.Windows.Forms.KeyEventArgs)">
            <summary>If the Ctrl key down is not being captured by the grid because it doesn't have focus, then this automatically handles it.  The only thing you have to do to make it work is to turn on KeyPreview for the parent form.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.DrawStringX(PdfSharp.Drawing.XGraphics,System.String,PdfSharp.Drawing.XFont,PdfSharp.Drawing.XBrush,PdfSharp.Drawing.XRect,PdfSharp.Drawing.XStringAlignment)">
            <summary>The pdfSharp version of drawstring.  g is used for measurement.  scaleToPix scales xObjects to pixels.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.LineSpacingForFont(System.String)">
            <summary>This line spacing is specifically picked to match the RichTextBox.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.p(System.Int32)">
            <summary>Converts pixels used by us to points used by PdfSharp.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGrid.p(System.Single)">
            <summary>Converts pixels used by us to points used by PdfSharp.</summary>
        </member>
        <member name="F:OpenDental.UI.ODPrintRow.YPos">
            <summary>YPos relative to top of entire grid.  When printing this includes adjustments for page breaks.  If row has title/header the title/header should be drawn at this position.</summary>
        </member>
        <member name="F:OpenDental.UI.ODPrintRow.IsTitleRow">
            <summary>Usually only true for some grids, and only for the first row.</summary>
        </member>
        <member name="F:OpenDental.UI.ODPrintRow.IsHeaderRow">
            <summary>Usually true if row is at the top of a new page, or when changing patients in a statement grid.</summary>
        </member>
        <member name="F:OpenDental.UI.ODPrintRow.IsBottomRow">
            <summary>True for rows that require a bold bottom line, at end of entire grid, at page breaks, or at a separation in the grid.</summary>
        </member>
        <member name="F:OpenDental.UI.ODPrintRow.IsFooterRow">
            <summary>Rarely true, usually only for last row in particular grids.</summary>
        </member>
        <member name="T:OpenDental.UI.ODGridClickEventArgs">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridClickEventArgs.#ctor(System.Int32,System.Int32,System.Windows.Forms.MouseButtons)">
            <summary></summary>
        </member>
        <member name="P:OpenDental.UI.ODGridClickEventArgs.Row">
            <summary></summary>
        </member>
        <member name="P:OpenDental.UI.ODGridClickEventArgs.Col">
            <summary></summary>
        </member>
        <member name="P:OpenDental.UI.ODGridClickEventArgs.Button">
            <summary>Gets which mouse button was pressed.</summary>
        </member>
        <member name="T:OpenDental.UI.GridSelectionMode">
            <summary>Specifies the selection behavior of an ODGrid.</summary>   
        </member>
        <member name="F:OpenDental.UI.GridSelectionMode.None">
            <summary>0-No items can be selected.</summary>  
        </member>
        <member name="F:OpenDental.UI.GridSelectionMode.One">
            <summary>1-Only one row can be selected.</summary>  
        </member>
        <member name="F:OpenDental.UI.GridSelectionMode.OneCell">
            <summary>2-Only one cell can be selected.</summary>
        </member>
        <member name="F:OpenDental.UI.GridSelectionMode.MultiExtended">
            <summary>3-Multiple items can be selected, and the user can use the SHIFT, CTRL, and arrow keys to make selections</summary>   
        </member>
        <member name="T:OpenDental.UI.ODGridCell">
            <summary></summary>
        </member>
        <member name="F:OpenDental.UI.ODGridCell._selectedIndex">
            <summary>Defaults to -1 to mimic typical combo boxes.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGridCell.#ctor">
            <summary>Creates a new ODGridCell.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGridCell.#ctor(System.String)">
            <summary>Creates a new ODGridCell.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGridCell.#ctor(System.String,System.Int32)">
            <summary>Creates a new ODGridCell with the initial value of 'myText' and then initial selected index of 'selectedIdx'.  
            Meant to be used with combo box columns.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGridCell.Text">
            <summary></summary>
        </member>
        <member name="P:OpenDental.UI.ODGridCell.ColorText">
            <summary>Default is Color.Empty.  If any color is set, it will override the row color.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGridCell.Bold">
            <summary>If YN.Unknown, then the row state is used for bold.  Otherwise, this overrides the row.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGridCell.Underline">
            <summary>If YN.Unknown, then the row state is used for underline.  Otherwise, this overrides the row.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGridCell.CellColor">
            <summary>If set, colors only this cell.</summary>
        </member>
        <member name="T:OpenDental.UI.ODGridColumn">
            <summary></summary>
        </member>
        <member name="F:OpenDental.UI.ODGridColumn.ListDisplayStrings">
            <summary>When set, all cells in this column will display a combo box with these strings as options which the user can pick from.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumn.#ctor">
            <summary>Creates a new ODGridcolumn.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumn.#ctor(System.String,System.Int32,System.Windows.Forms.HorizontalAlignment,System.Boolean)">
            <summary>Creates a new ODGridcolumn with the given heading and width. Alignment left</summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumn.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>Creates a new ODGridcolumn with the given heading and width. Alignment left</summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumn.#ctor(System.String,System.Int32,System.Windows.Forms.HorizontalAlignment)">
            <summary>Creates a new ODGridcolumn with the given heading and width.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumn.#ctor(System.String,System.Int32,OpenDental.UI.GridSortingStrategy)">
            <summary>Creates a new ODGridcolumn with the given heading, width, and sorting strategy.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumn.#ctor(System.String,System.Int32,System.Windows.Forms.HorizontalAlignment,OpenDental.UI.GridSortingStrategy)">
            <summary>Creates a new ODGridcolumn with the given heading, width, and sorting strategy.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumn.#ctor(System.String,System.Int32)">
            <summary>Creates a new ODGridcolumn with the given heading and width. Alignment left</summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumn.#ctor(System.String,System.Int32,System.Collections.Generic.List{System.String})">
            <summary>Creates a new ODGridcolumn with the given heading, width, and as a combo box type column with the options in listDisplayStrings.
            On the grid make sure to set the SelectionMode to OneCell.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGridColumn.Heading">
            <summary></summary>
        </member>
        <member name="P:OpenDental.UI.ODGridColumn.ColWidth">
            <summary></summary>
        </member>
        <member name="P:OpenDental.UI.ODGridColumn.TextAlign">
            <summary></summary>
        </member>
        <member name="P:OpenDental.UI.ODGridColumn.IsEditable">
            <summary></summary>
        </member>
        <member name="P:OpenDental.UI.ODGridColumn.ImageList">
            <summary></summary>
        </member>
        <member name="P:OpenDental.UI.ODGridColumn.SortingStrategy">
            <summary></summary>
        </member>
        <member name="F:OpenDental.UI.GridSortingStrategy.StringCompare">
            <summary>0- Default</summary>
        </member>
        <member name="T:OpenDental.UI.ODGridColumnCollection">
            <summary>A strongly typed collection of ODGridColumns</summary>
        </member>
        <member name="P:OpenDental.UI.ODGridColumnCollection.Item(System.Int32)">
            <summary>Returns the GridColumn with the given index.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumnCollection.Add(OpenDental.UI.ODGridColumn)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumnCollection.IndexOf(OpenDental.UI.ODGridColumn)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumnCollection.Insert(System.Int32,OpenDental.UI.ODGridColumn)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumnCollection.Remove(OpenDental.UI.ODGridColumn)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumnCollection.Contains(OpenDental.UI.ODGridColumn)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumnCollection.OnInsert(System.Int32,System.Object)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumnCollection.OnRemove(System.Int32,System.Object)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumnCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumnCollection.OnValidate(System.Object)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridColumnCollection.GetIndex(System.String)">
            <summary>Gets the index of the column with the specified heading.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGridCellList.Add(System.String)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridCellList.Add(System.String,System.Int32)">
            <summary>Creates a new ODGridCell with initial value of 'value' and starting index of 'idx'.  Meant to be used with combo box columns.</summary>
        </member>
        <member name="T:OpenDental.UI.ODGridRow">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridRow.#ctor">
            <summary>Creates a new ODGridRow.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGridRow.Cells">
            <summary></summary>
        </member>
        <member name="P:OpenDental.UI.ODGridRow.ColorBackG">
            <summary>Background color.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGridRow.Bold">
            <summary></summary>
        </member>
        <member name="P:OpenDental.UI.ODGridRow.ColorText">
            <summary>This sets the text color for the whole row.  Each gridCell also has a colorText property that will override this if set.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGridRow.ColorLborder">
            <summary></summary>
        </member>
        <member name="P:OpenDental.UI.ODGridRow.Tag">
            <summary>Used to store any kind of object that is associated with the row.</summary>
        </member>
        <member name="P:OpenDental.UI.ODGridRow.Note">
            <summary>This is a very special field.  Since most of the tables in OD require the ability to attach long notes to each row, this field makes it possible.  Any note set here will be drawn as a sort of subrow.  The note can span multiple columns, as defined in grid.NoteSpanStart and grid.NoteSpanStop.</summary>
        </member>
        <member name="T:OpenDental.UI.ODGridRowCollection">
            <summary>A strongly typed collection of ODGridRows</summary>
        </member>
        <member name="P:OpenDental.UI.ODGridRowCollection.Item(System.Int32)">
            <summary>Returns the GridRow with the given index.</summary>
        </member>
        <member name="M:OpenDental.UI.ODGridRowCollection.Add(OpenDental.UI.ODGridRow)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridRowCollection.IndexOf(OpenDental.UI.ODGridRow)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridRowCollection.Insert(System.Int32,OpenDental.UI.ODGridRow)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridRowCollection.Remove(OpenDental.UI.ODGridRow)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridRowCollection.Contains(OpenDental.UI.ODGridRow)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridRowCollection.OnInsert(System.Int32,System.Object)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridRowCollection.OnRemove(System.Int32,System.Object)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridRowCollection.OnSet(System.Int32,System.Object,System.Object)">
            <summary></summary>
        </member>
        <member name="M:OpenDental.UI.ODGridRowCollection.OnValidate(System.Object)">
            <summary></summary>
        </member>
    </members>
</doc>
